USE [master]
GO
/****** Object:  Database [ConPat]    Script Date: 02/05/2018 17:06:40 ******/
CREATE DATABASE [ConPat]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'ConPat', FILENAME = N'F:\MSSQL\DATA\ConPat.MDF' , SIZE = 59833152KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024000KB )
 LOG ON 
( NAME = N'ConPat_log', FILENAME = N'G:\MSSQL\LOG\ConPat_log.LDF' , SIZE = 112198144KB , MAXSIZE = 2048GB , FILEGROWTH = 512000KB )
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [ConPat].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [ConPat] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [ConPat] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [ConPat] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [ConPat] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [ConPat] SET ARITHABORT OFF 
GO
ALTER DATABASE [ConPat] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [ConPat] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [ConPat] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [ConPat] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [ConPat] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [ConPat] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [ConPat] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [ConPat] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [ConPat] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [ConPat] SET  DISABLE_BROKER 
GO
ALTER DATABASE [ConPat] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [ConPat] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [ConPat] SET TRUSTWORTHY ON 
GO
ALTER DATABASE [ConPat] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [ConPat] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [ConPat] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [ConPat] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [ConPat] SET RECOVERY FULL 
GO
ALTER DATABASE [ConPat] SET  MULTI_USER 
GO
ALTER DATABASE [ConPat] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [ConPat] SET DB_CHAINING OFF 
GO
ALTER DATABASE [ConPat] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [ConPat] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [ConPat] SET DELAYED_DURABILITY = DISABLED 
GO
EXEC sys.sp_db_vardecimal_storage_format N'ConPat', N'ON'
GO
USE [ConPat]
GO
/****** Object:  User [user_desenv]    Script Date: 02/05/2018 17:06:43 ******/
CREATE USER [user_desenv] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [user_ativofixo]    Script Date: 02/05/2018 17:06:43 ******/
CREATE USER [user_ativofixo] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [us_InfAdm]    Script Date: 02/05/2018 17:06:44 ******/
CREATE USER [us_InfAdm] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [softline]    Script Date: 02/05/2018 17:06:44 ******/
CREATE USER [softline] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [seespuser]    Script Date: 02/05/2018 17:06:45 ******/
CREATE USER [seespuser] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [SEESPAZ\svcp_SEDappPNet]    Script Date: 02/05/2018 17:06:45 ******/
CREATE USER [SEESPAZ\svcp_SEDappPNet] FOR LOGIN [SEESPAZ\svcp_SEDappPNet] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [SEESP\Sv-OpManager-Action]    Script Date: 02/05/2018 17:06:45 ******/
CREATE USER [SEESP\Sv-OpManager-Action] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [SEESP\GSI_DSA - DBAS]    Script Date: 02/05/2018 17:06:46 ******/
CREATE USER [SEESP\GSI_DSA - DBAS]
GO
/****** Object:  User [SEESP\DBAs]    Script Date: 02/05/2018 17:06:46 ******/
CREATE USER [SEESP\DBAs]
GO
/****** Object:  User [relatorio]    Script Date: 02/05/2018 17:06:47 ******/
CREATE USER [relatorio] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [lnk_prata06]    Script Date: 02/05/2018 17:06:48 ******/
CREATE USER [lnk_prata06] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [gemat]    Script Date: 02/05/2018 17:06:48 ******/
CREATE USER [gemat] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [desenv]    Script Date: 02/05/2018 17:06:48 ******/
CREATE USER [desenv] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [admin_dba]    Script Date: 02/05/2018 17:06:49 ******/
CREATE USER [admin_dba] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  DatabaseRole [db_executor]    Script Date: 02/05/2018 17:06:49 ******/
CREATE ROLE [db_executor]
GO
ALTER ROLE [db_owner] ADD MEMBER [user_desenv]
GO
ALTER ROLE [db_owner] ADD MEMBER [user_ativofixo]
GO
ALTER ROLE [db_datareader] ADD MEMBER [us_InfAdm]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [us_InfAdm]
GO
ALTER ROLE [db_owner] ADD MEMBER [softline]
GO
ALTER ROLE [db_owner] ADD MEMBER [seespuser]
GO
ALTER ROLE [db_owner] ADD MEMBER [SEESPAZ\svcp_SEDappPNet]
GO
ALTER ROLE [db_owner] ADD MEMBER [SEESP\GSI_DSA - DBAS]
GO
ALTER ROLE [db_accessadmin] ADD MEMBER [SEESP\DBAs]
GO
ALTER ROLE [db_securityadmin] ADD MEMBER [SEESP\DBAs]
GO
ALTER ROLE [db_ddladmin] ADD MEMBER [SEESP\DBAs]
GO
ALTER ROLE [db_datareader] ADD MEMBER [SEESP\DBAs]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [SEESP\DBAs]
GO
ALTER ROLE [db_owner] ADD MEMBER [relatorio]
GO
ALTER ROLE [db_datareader] ADD MEMBER [lnk_prata06]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [lnk_prata06]
GO
ALTER ROLE [db_executor] ADD MEMBER [gemat]
GO
ALTER ROLE [db_owner] ADD MEMBER [gemat]
GO
ALTER ROLE [db_ddladmin] ADD MEMBER [gemat]
GO
ALTER ROLE [db_datareader] ADD MEMBER [gemat]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [gemat]
GO
ALTER ROLE [db_datareader] ADD MEMBER [desenv]
GO

/****** Object:  PartitionFunction [_dta_pf__1040]    Script Date: 02/05/2018 17:06:54 ******/
CREATE PARTITION FUNCTION [_dta_pf__1040](tinyint) AS RANGE LEFT FOR VALUES (0x01, 0x03, 0x04, 0x05)
GO
/****** Object:  PartitionFunction [_dta_pf__114]    Script Date: 02/05/2018 17:06:54 ******/
CREATE PARTITION FUNCTION [_dta_pf__114](varchar(20)) AS RANGE RIGHT FOR VALUES (N'')
GO
/****** Object:  PartitionFunction [_dta_pf__1410]    Script Date: 02/05/2018 17:06:54 ******/
CREATE PARTITION FUNCTION [_dta_pf__1410](int) AS RANGE LEFT FOR VALUES (7, 13, 19)
GO
/****** Object:  PartitionFunction [_dta_pf__1771]    Script Date: 02/05/2018 17:06:54 ******/
CREATE PARTITION FUNCTION [_dta_pf__1771](tinyint) AS RANGE LEFT FOR VALUES (0x02, 0x03)
GO
/****** Object:  PartitionFunction [_dta_pf__1912]    Script Date: 02/05/2018 17:06:55 ******/
CREATE PARTITION FUNCTION [_dta_pf__1912](tinyint) AS RANGE LEFT FOR VALUES (0x01, 0x02, 0x03, 0x04)
GO
/****** Object:  PartitionFunction [_dta_pf__2533]    Script Date: 02/05/2018 17:06:55 ******/
CREATE PARTITION FUNCTION [_dta_pf__2533](int) AS RANGE LEFT FOR VALUES (1)
GO
/****** Object:  PartitionFunction [_dta_pf__2733]    Script Date: 02/05/2018 17:06:55 ******/
CREATE PARTITION FUNCTION [_dta_pf__2733](int) AS RANGE LEFT FOR VALUES (22, 3838, 1202192)
GO
/****** Object:  PartitionFunction [_dta_pf__2894]    Script Date: 02/05/2018 17:06:55 ******/
CREATE PARTITION FUNCTION [_dta_pf__2894](varchar(60)) AS RANGE LEFT FOR VALUES (N'035361')
GO
/****** Object:  PartitionFunction [_dta_pf__4149]    Script Date: 02/05/2018 17:06:55 ******/
CREATE PARTITION FUNCTION [_dta_pf__4149](varchar(250)) AS RANGE LEFT FOR VALUES (N'DE ALUNO – MCF-02')
GO
/****** Object:  PartitionFunction [_dta_pf__4364]    Script Date: 02/05/2018 17:06:55 ******/
CREATE PARTITION FUNCTION [_dta_pf__4364](tinyint) AS RANGE LEFT FOR VALUES (0x01)
GO
/****** Object:  PartitionFunction [_dta_pf__4683]    Script Date: 02/05/2018 17:06:55 ******/
CREATE PARTITION FUNCTION [_dta_pf__4683](int) AS RANGE LEFT FOR VALUES (1, 22, 280, 3838, 593443, 1202192, 1627119)
GO
/****** Object:  PartitionFunction [_dta_pf__4864]    Script Date: 02/05/2018 17:06:55 ******/
CREATE PARTITION FUNCTION [_dta_pf__4864](int) AS RANGE LEFT FOR VALUES (6)
GO
/****** Object:  PartitionFunction [_dta_pf__5201]    Script Date: 02/05/2018 17:06:56 ******/
CREATE PARTITION FUNCTION [_dta_pf__5201](int) AS RANGE LEFT FOR VALUES (1, 2, 3, 4)
GO
/****** Object:  PartitionFunction [_dta_pf__6355]    Script Date: 02/05/2018 17:06:56 ******/
CREATE PARTITION FUNCTION [_dta_pf__6355](bigint) AS RANGE LEFT FOR VALUES (444717)
GO
/****** Object:  PartitionFunction [_dta_pf__6497]    Script Date: 02/05/2018 17:06:56 ******/
CREATE PARTITION FUNCTION [_dta_pf__6497](tinyint) AS RANGE LEFT FOR VALUES (0x03)
GO
/****** Object:  PartitionFunction [_dta_pf__6960]    Script Date: 02/05/2018 17:06:56 ******/
CREATE PARTITION FUNCTION [_dta_pf__6960](int) AS RANGE LEFT FOR VALUES (4207)
GO
/****** Object:  PartitionFunction [_dta_pf__6980]    Script Date: 02/05/2018 17:06:56 ******/
CREATE PARTITION FUNCTION [_dta_pf__6980](bigint) AS RANGE LEFT FOR VALUES (236725, 444717, 671132)
GO
/****** Object:  PartitionFunction [_dta_pf__8066]    Script Date: 02/05/2018 17:06:56 ******/
CREATE PARTITION FUNCTION [_dta_pf__8066](char(11)) AS RANGE LEFT FOR VALUES (N'2012NE00721')
GO
/****** Object:  PartitionFunction [_dta_pf__8258]    Script Date: 02/05/2018 17:06:56 ******/
CREATE PARTITION FUNCTION [_dta_pf__8258](int) AS RANGE RIGHT FOR VALUES (0)
GO
/****** Object:  PartitionFunction [_dta_pf__8341]    Script Date: 02/05/2018 17:06:57 ******/
CREATE PARTITION FUNCTION [_dta_pf__8341](int) AS RANGE LEFT FOR VALUES (3838)
GO
/****** Object:  PartitionFunction [_dta_pf__8526]    Script Date: 02/05/2018 17:06:57 ******/
CREATE PARTITION FUNCTION [_dta_pf__8526](tinyint) AS RANGE RIGHT FOR VALUES (0x03)
GO
/****** Object:  PartitionFunction [_dta_pf__8809]    Script Date: 02/05/2018 17:06:57 ******/
CREATE PARTITION FUNCTION [_dta_pf__8809](int) AS RANGE LEFT FOR VALUES (1, 2, 4, 5, 7, 9, 22, 23)
GO
/****** Object:  PartitionFunction [_dta_pf__9085]    Script Date: 02/05/2018 17:06:57 ******/
CREATE PARTITION FUNCTION [_dta_pf__9085](int) AS RANGE LEFT FOR VALUES (90, 2721, 561041)
GO
/****** Object:  PartitionFunction [_dta_pf__9850]    Script Date: 02/05/2018 17:06:57 ******/
CREATE PARTITION FUNCTION [_dta_pf__9850](int) AS RANGE LEFT FOR VALUES (913131)
GO
/****** Object:  PartitionFunction [_dta_pf__9910]    Script Date: 02/05/2018 17:06:57 ******/
CREATE PARTITION FUNCTION [_dta_pf__9910](bigint) AS RANGE LEFT FOR VALUES (106134, 236725, 341460, 444717, 558644, 671132, 787328)
GO
/****** Object:  PartitionFunction [_dta_pf__9987]    Script Date: 02/05/2018 17:06:57 ******/
CREATE PARTITION FUNCTION [_dta_pf__9987](varchar(20)) AS RANGE LEFT FOR VALUES (N'1258194')
GO
/****** Object:  PartitionScheme [_dta_ps__1040]    Script Date: 02/05/2018 17:06:57 ******/
CREATE PARTITION SCHEME [_dta_ps__1040] AS PARTITION [_dta_pf__6497] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__114]    Script Date: 02/05/2018 17:06:58 ******/
CREATE PARTITION SCHEME [_dta_ps__114] AS PARTITION [_dta_pf__8341] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__1240]    Script Date: 02/05/2018 17:06:58 ******/
CREATE PARTITION SCHEME [_dta_ps__1240] AS PARTITION [_dta_pf__6980] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__1410]    Script Date: 02/05/2018 17:06:58 ******/
CREATE PARTITION SCHEME [_dta_ps__1410] AS PARTITION [_dta_pf__8258] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__1771]    Script Date: 02/05/2018 17:06:58 ******/
CREATE PARTITION SCHEME [_dta_ps__1771] AS PARTITION [_dta_pf__1040] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__1912]    Script Date: 02/05/2018 17:06:58 ******/
CREATE PARTITION SCHEME [_dta_ps__1912] AS PARTITION [_dta_pf__8066] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__2533]    Script Date: 02/05/2018 17:06:58 ******/
CREATE PARTITION SCHEME [_dta_ps__2533] AS PARTITION [_dta_pf__1771] TO ([PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__2894]    Script Date: 02/05/2018 17:06:58 ******/
CREATE PARTITION SCHEME [_dta_ps__2894] AS PARTITION [_dta_pf__1410] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__4149]    Script Date: 02/05/2018 17:06:59 ******/
CREATE PARTITION SCHEME [_dta_ps__4149] AS PARTITION [_dta_pf__1912] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__4288]    Script Date: 02/05/2018 17:06:59 ******/
CREATE PARTITION SCHEME [_dta_ps__4288] AS PARTITION [_dta_pf__4683] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__4364]    Script Date: 02/05/2018 17:06:59 ******/
CREATE PARTITION SCHEME [_dta_ps__4364] AS PARTITION [_dta_pf__9987] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__440]    Script Date: 02/05/2018 17:06:59 ******/
CREATE PARTITION SCHEME [_dta_ps__440] AS PARTITION [_dta_pf__2733] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__4864]    Script Date: 02/05/2018 17:06:59 ******/
CREATE PARTITION SCHEME [_dta_ps__4864] AS PARTITION [_dta_pf__2894] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__5201]    Script Date: 02/05/2018 17:06:59 ******/
CREATE PARTITION SCHEME [_dta_ps__5201] AS PARTITION [_dta_pf__4149] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__5543]    Script Date: 02/05/2018 17:06:59 ******/
CREATE PARTITION SCHEME [_dta_ps__5543] AS PARTITION [_dta_pf__114] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__6221]    Script Date: 02/05/2018 17:06:59 ******/
CREATE PARTITION SCHEME [_dta_ps__6221] AS PARTITION [_dta_pf__9910] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__6355]    Script Date: 02/05/2018 17:07:00 ******/
CREATE PARTITION SCHEME [_dta_ps__6355] AS PARTITION [_dta_pf__9085] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__6497]    Script Date: 02/05/2018 17:07:00 ******/
CREATE PARTITION SCHEME [_dta_ps__6497] AS PARTITION [_dta_pf__5201] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__6960]    Script Date: 02/05/2018 17:07:00 ******/
CREATE PARTITION SCHEME [_dta_ps__6960] AS PARTITION [_dta_pf__4864] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__8066]    Script Date: 02/05/2018 17:07:00 ******/
CREATE PARTITION SCHEME [_dta_ps__8066] AS PARTITION [_dta_pf__4364] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__8258]    Script Date: 02/05/2018 17:07:00 ******/
CREATE PARTITION SCHEME [_dta_ps__8258] AS PARTITION [_dta_pf__2533] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__8341]    Script Date: 02/05/2018 17:07:00 ******/
CREATE PARTITION SCHEME [_dta_ps__8341] AS PARTITION [_dta_pf__8526] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__8526]    Script Date: 02/05/2018 17:07:00 ******/
CREATE PARTITION SCHEME [_dta_ps__8526] AS PARTITION [_dta_pf__6355] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__9085]    Script Date: 02/05/2018 17:07:01 ******/
CREATE PARTITION SCHEME [_dta_ps__9085] AS PARTITION [_dta_pf__9850] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__9850]    Script Date: 02/05/2018 17:07:01 ******/
CREATE PARTITION SCHEME [_dta_ps__9850] AS PARTITION [_dta_pf__6960] TO ([PRIMARY], [PRIMARY])
GO
/****** Object:  PartitionScheme [_dta_ps__9953]    Script Date: 02/05/2018 17:07:01 ******/
CREATE PARTITION SCHEME [_dta_ps__9953] AS PARTITION [_dta_pf__8809] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  UserDefinedTableType [dbo].[BemItemDocumentoTableType]    Script Date: 02/05/2018 17:07:01 ******/
CREATE TYPE [dbo].[BemItemDocumentoTableType] AS TABLE(
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[bid_id] [int] NOT NULL,
	[bid_tipoDoc] [int] NOT NULL,
	[bid_numeroDoc] [int] NOT NULL,
	[bid_porcentagem] [decimal](18, 0) NOT NULL,
	[bid_classificacao] [nvarchar](50) NULL,
	[bid_observacao] [varchar](200) NULL,
	[bid_dataAlteracao] [datetime] NOT NULL,
	[bid_dataCriacao] [datetime] NOT NULL,
	[bid_serie] [varchar](10) NULL,
	[bid_dataEmissaoDoc] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[BemItemTableType]    Script Date: 02/05/2018 17:07:05 ******/
CREATE TYPE [dbo].[BemItemTableType] AS TABLE(
	[bem_id] [bigint] NULL,
	[bit_id] [int] NULL,
	[stc_id] [int] NULL,
	[loc_id] [int] NULL,
	[dep_id] [int] NULL,
	[aps_id] [bigint] NULL,
	[fat_id] [int] NULL,
	[bit_referencia] [varchar](250) NULL,
	[bit_uniGestora] [int] NULL,
	[bit_uniGuarda] [int] NULL,
	[bit_registroPat] [varchar](20) NULL,
	[bit_GPB] [varchar](20) NULL,
	[bit_GRB] [varchar](20) NULL,
	[bit_valorOrigem] [money] NULL,
	[bit_valorLiquido] [money] NULL,
	[bit_vidaUtil] [int] NULL,
	[bit_cotas] [int] NULL,
	[bit_dataDepInicio] [date] NULL,
	[bit_dataDepFim] [date] NULL,
	[bit_doctoBaixa] [varchar](20) NULL,
	[bit_dataBaixa] [date] NULL,
	[bit_dataIncorporacao] [date] NULL,
	[bit_contado] [bit] NULL,
	[bit_dataInventario] [date] NULL,
	[bit_status] [tinyint] NULL,
	[bit_dataAlteracaoStatus] [datetime] NULL,
	[bit_observacao] [varchar](max) NULL,
	[bit_dataFimGarantia] [datetime] NULL,
	[bit_situacao] [tinyint] NULL,
	[bit_dataCriacao] [datetime] NULL,
	[bit_dataAlteracao] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[BemItemWfStatusTableType]    Script Date: 02/05/2018 17:07:15 ******/
CREATE TYPE [dbo].[BemItemWfStatusTableType] AS TABLE(
	[bem_id] [bigint] NULL,
	[bit_id] [int] NULL,
	[biw_id] [int] NULL,
	[bws_id] [int] NULL,
	[wrk_id] [int] NULL,
	[stp_id] [int] NULL,
	[usu_id] [uniqueidentifier] NULL,
	[bws_observacao] [varchar](1000) NULL,
	[bws_situacao] [tinyint] NULL,
	[bws_dataCriacao] [datetime] NULL,
	[bws_dataAlteracao] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[BemItemWorkflowTableType]    Script Date: 02/05/2018 17:07:19 ******/
CREATE TYPE [dbo].[BemItemWorkflowTableType] AS TABLE(
	[bem_id] [bigint] NULL,
	[bit_id] [int] NULL,
	[biw_id] [int] NULL,
	[wrk_id] [int] NULL,
	[biw_situacao] [tinyint] NULL,
	[biw_dataCriacao] [datetime] NULL,
	[biw_dataAlteracao] [datetime] NULL,
	[ctrl_Id] [int] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[IntegerTableType]    Script Date: 02/05/2018 17:07:21 ******/
CREATE TYPE [dbo].[IntegerTableType] AS TABLE(
	[Id] [int] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[MovimentacaoBemTableType]    Script Date: 02/05/2018 17:07:22 ******/
CREATE TYPE [dbo].[MovimentacaoBemTableType] AS TABLE(
	[mov_data] [date] NULL,
	[bem_id] [bigint] NULL,
	[bit_id] [int] NULL,
	[tpm_id] [int] NULL,
	[grp_id] [int] NULL,
	[cco_codigoDebito] [varchar](20) NULL,
	[cco_codigoCredito] [varchar](20) NULL,
	[per_mes] [char](2) NULL,
	[per_ano] [char](4) NULL,
	[uni_id] [int] NULL,
	[fat_id] [int] NULL,
	[usu_id] [uniqueidentifier] NULL,
	[mov_valor] [money] NULL,
	[mov_valorReavaliado] [money] NULL,
	[mov_percentualBaixa] [decimal](5, 2) NULL,
	[mov_GPB] [varchar](20) NULL,
	[mov_unidadeOrigem] [int] NULL,
	[mov_unidadeDestino] [int] NULL,
	[mov_observacao] [varchar](max) NULL,
	[mov_origem] [tinyint] NULL,
	[mov_nl] [char](11) NULL,
	[mov_situacao] [tinyint] NULL,
	[mov_dataCriacao] [datetime] NULL,
	[mov_dataAlteracao] [datetime] NULL,
	[mov_dataOriginal] [date] NULL
)
GO
/****** Object:  Synonym [dbo].[Synonym_Diretoria_CIE]    Script Date: 02/05/2018 17:07:29 ******/
CREATE SYNONYM [dbo].[Synonym_Diretoria_CIE] FOR [BaseCieProdesp]..[Diretoria]
GO
/****** Object:  Synonym [dbo].[Synonym_END_Cidade_SSO]    Script Date: 02/05/2018 17:07:30 ******/
CREATE SYNONYM [dbo].[Synonym_END_Cidade_SSO] FOR [CoreSSO]..[END_Cidade]
GO
/****** Object:  Synonym [dbo].[Synonym_END_Endereco_SSO]    Script Date: 02/05/2018 17:07:31 ******/
CREATE SYNONYM [dbo].[Synonym_END_Endereco_SSO] FOR [CoreSSO]..[END_Endereco]
GO
/****** Object:  Synonym [dbo].[Synonym_END_Pais_SSO]    Script Date: 02/05/2018 17:07:31 ******/
CREATE SYNONYM [dbo].[Synonym_END_Pais_SSO] FOR [CoreSSO]..[END_Pais]
GO
/****** Object:  Synonym [dbo].[Synonym_END_UnidadeFederativa_SSO]    Script Date: 02/05/2018 17:07:31 ******/
CREATE SYNONYM [dbo].[Synonym_END_UnidadeFederativa_SSO] FOR [CoreSSO]..[END_UnidadeFederativa]
GO
/****** Object:  Synonym [dbo].[Synonym_Escola_CIE]    Script Date: 02/05/2018 17:07:31 ******/
CREATE SYNONYM [dbo].[Synonym_Escola_CIE] FOR [BaseCieProdesp]..[Escola]
GO
/****** Object:  Synonym [dbo].[Synonym_Log_Sistema]    Script Date: 02/05/2018 17:07:33 ******/
CREATE SYNONYM [dbo].[Synonym_Log_Sistema] FOR [CoreSSO_Log]..[Log_Sistema]
GO
/****** Object:  Synonym [dbo].[Synonym_Municipio_CIE]    Script Date: 02/05/2018 17:07:33 ******/
CREATE SYNONYM [dbo].[Synonym_Municipio_CIE] FOR [BaseCieProdesp]..[Municipio]
GO
/****** Object:  Synonym [dbo].[Synonym_PES_Pessoa_SSO]    Script Date: 02/05/2018 17:07:34 ******/
CREATE SYNONYM [dbo].[Synonym_PES_Pessoa_SSO] FOR [CoreSSO]..[PES_Pessoa]
GO
/****** Object:  Synonym [dbo].[Synonym_PES_PessoaContato_SSO]    Script Date: 02/05/2018 17:07:34 ******/
CREATE SYNONYM [dbo].[Synonym_PES_PessoaContato_SSO] FOR [CoreSSO]..[PES_PessoaContato]
GO
/****** Object:  Synonym [dbo].[Synonym_PES_PessoaDocumento_SSO]    Script Date: 02/05/2018 17:07:35 ******/
CREATE SYNONYM [dbo].[Synonym_PES_PessoaDocumento_SSO] FOR [CoreSSO]..[PES_PessoaDocumento]
GO
/****** Object:  Synonym [dbo].[Synonym_PES_PessoaEndereco_SSO]    Script Date: 02/05/2018 17:07:35 ******/
CREATE SYNONYM [dbo].[Synonym_PES_PessoaEndereco_SSO] FOR [CoreSSO]..[PES_PessoaEndereco]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_Entidade_SSO]    Script Date: 02/05/2018 17:07:35 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_Entidade_SSO] FOR [CoreSSO]..[SYS_Entidade]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_EntidadeContato_SSO]    Script Date: 02/05/2018 17:07:36 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_EntidadeContato_SSO] FOR [CoreSSO]..[SYS_EntidadeContato]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_EntidadeEndereco_SSO]    Script Date: 02/05/2018 17:07:36 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_EntidadeEndereco_SSO] FOR [CoreSSO]..[SYS_EntidadeEndereco]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_Grupo_SSO]    Script Date: 02/05/2018 17:07:36 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_Grupo_SSO] FOR [CoreSSO]..[SYS_Grupo]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_Sitema_TMP]    Script Date: 02/05/2018 17:07:37 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_Sitema_TMP] FOR [CoreSSO]..[SYS_Sistema]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_SYS_Visao_TMP]    Script Date: 02/05/2018 17:07:37 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_SYS_Visao_TMP] FOR [CoreSSO]..[SYS_Visao]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_TipoEntidade_SSO]    Script Date: 02/05/2018 17:07:37 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_TipoEntidade_SSO] FOR [CoreSSO]..[SYS_TipoEntidade]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_TipoMeioContato_TMP]    Script Date: 02/05/2018 17:07:37 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_TipoMeioContato_TMP] FOR [CoreSSO]..[SYS_TipoMeioContato]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_TipoUnidadeAdministrativa_SSO]    Script Date: 02/05/2018 17:07:38 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_TipoUnidadeAdministrativa_SSO] FOR [CoreSSO]..[SYS_TipoUnidadeAdministrativa]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_UnidadeAdministrativa_SSO]    Script Date: 02/05/2018 17:07:38 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_UnidadeAdministrativa_SSO] FOR [CoreSSO]..[SYS_UnidadeAdministrativa]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_UnidadeAdministrativaContato_SSO]    Script Date: 02/05/2018 17:07:38 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_UnidadeAdministrativaContato_SSO] FOR [CoreSSO]..[SYS_UnidadeAdministrativaContato]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_UnidadeAdministrativaEndereco_SSO]    Script Date: 02/05/2018 17:07:39 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_UnidadeAdministrativaEndereco_SSO] FOR [CoreSSO]..[SYS_UnidadeAdministrativaEndereco]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_Usuario_GrupoUA_SSO]    Script Date: 02/05/2018 17:07:39 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_Usuario_GrupoUA_SSO] FOR [CoreSSO]..[SYS_Usuario_GrupoUA]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_Usuario_SSO]    Script Date: 02/05/2018 17:07:39 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_Usuario_SSO] FOR [CoreSSO]..[SYS_Usuario]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_UsuarioGrupo_SSO]    Script Date: 02/05/2018 17:07:39 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_UsuarioGrupo_SSO] FOR [CoreSSO]..[SYS_UsuarioGrupo]
GO
/****** Object:  Synonym [dbo].[Synonym_SYS_UsuarioGrupoUA_SSO]    Script Date: 02/05/2018 17:07:40 ******/
CREATE SYNONYM [dbo].[Synonym_SYS_UsuarioGrupoUA_SSO] FOR [CoreSSO]..[SYS_UsuarioGrupoUA]
GO
/****** Object:  Synonym [dbo].[Synonym_Telefone_CIE]    Script Date: 02/05/2018 17:07:40 ******/
CREATE SYNONYM [dbo].[Synonym_Telefone_CIE] FOR [BaseCieProdesp]..[Telefone]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_BuscaNomeMovimentacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_BuscaNomeMovimentacao]
(
	@stmp_id varchar(max)

)
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @Result VARCHAR(MAX) 
	DECLARE @Final VARCHAR(MAX)
	SET @Result = ''
	
	SELECT 
		@Result= @Result+ TipoMovimentacao.tpm_nome +','
	From  
		TipoMovimentacao WITH(NoLock)
	where
	(@stmp_id is null or (TipoMovimentacao.tpm_id in (select valor from dbo.FN_StringToArrayInt64(@stmp_id, ','))))	

	if @Result  = ''	
		SET @Final = SUBSTRING(@Result,0,LEN(@Result))
	else
		SET @Final=  SUBSTRING(@Result,0,LEN(@Result))

		
	RETURN @Final

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BuscarBitID]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Retorna os ids dos itens em uma string - IMPRESSÃO DE GPB
*/

CREATE FUNCTION [dbo].[FN_BuscarBitID]
(	
	@uni_id int,
	@grp_id int,
	@bem_descricao varchar(max),
	@tipoSolicitacao int,
	@wrk_id int,
	@tpm_operacao varchar(max),
	@gpb varchar(max),
	@bem_id int	
)

RETURNS VARCHAR(MAX)
AS
BEGIN	

	DECLARE @Result VARCHAR(MAX) 
	DECLARE @Final VARCHAR(MAX)
	SET @Result = ''
	
	IF @tipoSolicitacao=8
	BEGIN
		WITH MoviBem AS
		(
			Select 
				bem_id
				,bit_id
				,tpm_id
				,mov_unidadeDestino
			FROM 
				MovimentacaoBem With(NoLock)
			WHERE
				MovimentacaoBem.bem_id = @bem_id 
				AND  MovimentacaoBem.uni_id != (select  top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))
				AND (@uni_id is null or @uni_id= MovimentacaoBem.mov_unidadeDestino)
				AND (@gpb IS NULL OR  @gpb = '0' OR @gpb = MovimentacaoBem.mov_GPB)
		)
			
		SELECT 
			@Result =  @Result + CAST(MoviBem.bit_id as varchar(50)) + ',' 
		From
			MoviBem WITH(NoLock)
			inner join TipoMovimentacao WITH(NoLock)
				on MoviBem.tpm_id=TipoMovimentacao.tpm_id
			inner join BemPatrimonial WITH(NoLock)
				on MoviBem.bem_id = BemPatrimonial.bem_id 
			inner join GrupoBens WITH(NoLock)
				on GrupoBens.grp_id = BemPatrimonial.grp_id
			inner join BemItem WITH(NoLock)
				on MoviBem.bem_id=BemItem.bem_id
				and MoviBem.bit_id = BemItem.bit_id		
			inner join Unidade WITH(NoLock)
				on Unidade.uni_id = BemItem.bit_uniGestora 
			inner join BemItemWfStatus  WITH(NoLock)
				on BemItemWfStatus.bem_id=MoviBem.bem_id 
				and BemItemWfStatus.bit_id=MoviBem.bit_id
					
		where			
			(@grp_id is null or (@grp_id=GrupoBens.grp_id))
			And (@bem_descricao is null or (bem_descricao like '%' + @bem_descricao + '%'))
			And (BemItemWfStatus.stp_id = @tipoSolicitacao)
			And (@wrk_id is null or BemItemWfStatus.wrk_id=@wrk_id)
			And (tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))
			and BemItemWfStatus.bws_situacao=1
		
		GROUP BY
			MoviBem.bit_id
	
	END
	ELSE  -- se não for @tiposolicitacao = 8
	BEGIN
	
		WITH MoviBem AS
		(
			Select 
				bem_id
				,bit_id
				,tpm_id
				,mov_unidadeDestino
			FROM 
				MovimentacaoBem With(NoLock)
			WHERE
			MovimentacaoBem.bem_id = @bem_id  
			AND  MovimentacaoBem.uni_id != (select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))
			AND (@uni_id is null or @uni_id= MovimentacaoBem.mov_unidadeDestino)
			AND (@gpb IS NULL OR  @gpb = '0' OR @gpb = MovimentacaoBem.mov_GPB)
		)
		
		SELECT 
			@Result =  @Result + CAST(MoviBem.bit_id as varchar(50)) + ',' 
		From
			MoviBem WITH(NoLock)
			inner join TipoMovimentacao WITH(NoLock)
				on MoviBem.tpm_id=TipoMovimentacao.tpm_id
			inner join BemPatrimonial WITH(NoLock)
				on MoviBem.bem_id = BemPatrimonial.bem_id
			inner join GrupoBens WITH(NoLock)
				on GrupoBens.grp_id = BemPatrimonial.grp_id
			inner join BemItem WITH(NoLock)
				on MoviBem.bem_id=BemItem.bem_id
				and MoviBem.bit_id = BemItem.bit_id	
			inner join Unidade WITH(NoLock)
				on Unidade.uni_id = BemItem.bit_uniGestora	
				
		where
			(@grp_id is null or (@grp_id=GrupoBens.grp_id))
			And (@bem_descricao is null or (bem_descricao like '%'+@bem_descricao+'%'))
			And (tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))
			 
		GROUP BY 
			MoviBem.bit_id
	
	end
	
	if @Result  = ''	
		SET @Final = SUBSTRING(@Result,0,LEN(@Result))
	else
		SET @Final=  SUBSTRING(@Result,0,LEN(@Result))

		
	RETURN @Final
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_BuscarBitID_GRB]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Retorna os ids dos itens em uma string - IMPRESSÃO DE GRB
	
	Alter: Wellington Santana
	Date: 27/05/2014
	Description: Comentada linha --and (@gpb is null or @gpb='0' or @gpb=BemItem.bit_GRB)
	tanto da impressão como reempresão.
*/
CREATE FUNCTION [dbo].[FN_BuscarBitID_GRB]
(
	@uni_id int,
	@grp_id int,
	@bem_descricao varchar(max),
	@tipoSolicitacao int,
	@wrk_id int,
	@tpm_operacao varchar(max),
	@gpb varchar(max),
	@bem_id int	
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @Result VARCHAR(MAX) 
	DECLARE @Final VARCHAR(MAX)
	SET @Result = ''
		
	if @tipoSolicitacao=8
	begin
	
		WITH MoviBem AS
		(
			Select 
				bem_id
				,bit_id
				,tpm_id
				,mov_unidadeDestino
			FROM 
				MovimentacaoBem AS mov With(NoLock)
			WHERE
				mov.bem_id = @bem_id
				AND  mov.uni_id IN (select  uni_idgestora from dbo.FN_GetUnidadesSuperiores(mov.mov_unidadeDestino))
				AND (@uni_id IS NULL OR mov.mov_unidadeDestino = @uni_id)
		)		
		
		SELECT 
			@Result =  @Result + CAST(MoviBem.bit_id as varchar(50)) + ',' 
		From		
			MoviBem WITH(NoLock)
			inner join BemPatrimonial WITH(NoLock)
				on BemPatrimonial.bem_id = MoviBem.bem_id
			inner join BemItem WITH(NoLock)
				on MoviBem.bem_id=BemItem.bem_id
				AND MoviBem.bit_id = BemItem.bit_id
			inner join GrupoBens WITH(NoLock)
				on GrupoBens.grp_id = BemPatrimonial.grp_id
			inner join Unidade WITH(NoLock)
				on Unidade.uni_id = BemItem.bit_uniGestora 
			inner join BemItemWfStatus  WITH(NoLock)
				on BemItemWfStatus.bem_id=BemItem.bem_id 
				and BemItemWfStatus.bit_id=BemItem.bit_id
			inner join TipoMovimentacao WITH(NoLock)
				on MoviBem.tpm_id=TipoMovimentacao.tpm_id
			
		where
			BemItemWfStatus.bws_situacao=1
			And (@grp_id is null or (@grp_id=GrupoBens.grp_id))
			And (@bem_descricao is null or (bem_descricao like '%'+@bem_descricao+'%'))
			And (@tipoSolicitacao is null or @tipoSolicitacao=BemItemWfStatus.stp_id)
			And (@wrk_id is null or BemItemWfStatus.wrk_id=@wrk_id)
			And (tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))			
			--and (@gpb is null or @gpb='0' or @gpb=BemItem.bit_GRB)
		
		group by MoviBem.bit_id
	end
	else
	begin
	
		WITH MoviBem AS
		(
			Select 
				bem_id
				,bit_id
				,tpm_id
				,mov_unidadeDestino
			FROM 
				MovimentacaoBem AS mov With(NoLock)
			WHERE
				mov.bem_id = @bem_id
				AND  mov.uni_id in (select uni_idgestora from dbo.FN_GetUnidadesSuperiores(mov.mov_unidadeDestino))
				AND (@uni_id IS NULL OR mov.mov_unidadeDestino = @uni_id)
		)
		
		SELECT 
			@Result =  @Result + CAST(MoviBem.bit_id as varchar(50)) + ',' 
		From
			MoviBem WITH(NoLock)
			inner join TipoMovimentacao WITH(NoLock)
				on MoviBem.tpm_id=TipoMovimentacao.tpm_id
			inner join BemPatrimonial WITH(NoLock)
				on BemPatrimonial.bem_id = MoviBem.bem_id
			inner join BemItem WITH(NoLock)
				on MoviBem.bem_id=BemItem.bem_id
				AND MoviBem.bit_id = BemItem.bit_id
			inner join GrupoBens WITH(NoLock)
				on GrupoBens.grp_id = BemPatrimonial.grp_id
			inner join Unidade WITH(NoLock)
				on Unidade.uni_id = BemItem.bit_uniGestora 
				
		where
			(@grp_id is null or (@grp_id=GrupoBens.grp_id))
			And (@bem_descricao is null or (bem_descricao like '%'+@bem_descricao+'%'))
			And (tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))
			--and (@gpb is null or @gpb='0' or @gpb=BemItem.bit_GRB)
		group by 
			MoviBem.bit_id
	
	end
	
	if @Result  = ''	
		SET @Final = SUBSTRING(@Result,0,LEN(@Result))
	else
		SET @Final=  SUBSTRING(@Result,0,LEN(@Result))

		
	RETURN @Final

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetFornecedorNome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Riehl Figueiredo
-- Create date: 28/09/2010
-- Description:	Função que retorna a identidade de um fornecedor
-- =============================================
CREATE FUNCTION [dbo].[FN_GetFornecedorNome](@for_id int)

RETURNS varchar(max)
AS
BEGIN
RETURN
(
	-- Fornecedor PF
	SELECT
		pes_nome AS for_nome
	FROM
		Fornecedor AS FON WITH(NOLOCK)
	INNER JOIN FornecedorPF AS PF WITH(NOLOCK)
		ON FON.for_id = PF.for_id
	INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)
		ON PF.pes_id = PES.pes_id
		
	WHERE
		for_situacao <> 3
		AND  FON.for_id = @for_id
		
	UNION ALL
	
	-- Fornecedor PJ
	SELECT
		ent_razaoSocial AS for_nome
	FROM
		Fornecedor AS FON WITH(NOLOCK)
	INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)
		ON FON.for_id = PJ.for_id
	INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)
		ON PJ.ent_id = ENT.ent_id
		
	WHERE
		for_situacao <> 3
		AND  FON.for_id = @for_id
);

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetGrupoHierarquia]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[FN_GetGrupoHierarquia]
(	
	@grp_id int
)
returns @result table	(
				grp_id int
			) 
as

begin

WITH cteMenuNivel(grp_id)
AS
(

	SELECT	
			grp_id
	FROM 
			GrupoBens  with(nolock) 
	WHERE
			grp_id = @grp_id
    
    UNION ALL
    
	SELECT 
			m.grp_id
	FROM 
			GrupoBens		m with(nolock) 
			INNER JOIN	cteMenuNivel    c
			ON m.grp_idpai = c.grp_id
   
)

	insert into @result 
	
	select * from cteMenuNivel	

	return
end



GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetPeriodoFechamento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create FUNCTION [dbo].[FN_GetPeriodoFechamento](@uni_id int)

RETURNS int

AS


BEGIN

declare @ret int
exec @ret = NEW_Rel_SIAFEM_ConsolidadoSPSum @uni_id

	RETURN 
	(

		@ret

	);
END


GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUni_ByUsu]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_GetUni_ByUsu](@usu_id uniqueidentifier)
RETURNS INT
AS
BEGIN
	RETURN 
	(

	SELECT 
		uni.uni_id        
	FROM 
		VW_ConPatUsuario AS usu WITH(NoLock)
	INNER JOIN 
		dbo.Synonym_SYS_UsuarioGrupoUA_SSO AS ugua WITH(NoLock)
		ON usu.usu_id = ugua.usu_id
	INNER JOIN 
		Unidade AS uni WITH(NoLock)
		ON uni.uad_id = ugua.uad_id
	INNER JOIN 
		VW_UnidadeEntidade AS en WITH(NoLock)
		ON en.ent_id = uni.ent_id
	WHERE 
		usu.usu_id = @usu_id
	
	UNION ALL
	
	SELECT 
		uni.uni_id         
	FROM 
		VW_ConPatUsuario AS usu	WITH(NoLock)	
	INNER JOIN 
		Unidade AS uni WITH(NoLock)
		ON uni.ent_id = usu.ent_id 
	INNER JOIN 
		VW_UnidadeEntidade AS en WITH(NoLock)
		ON en.ent_id = uni.ent_id
	WHERE 
		usu.usu_id = @usu_id
		AND uni.uad_id IS NULL 
		AND NOT EXISTS (Select * from dbo.Synonym_SYS_UsuarioGrupoUA_SSO WHERE usu_id = usu.usu_id)  
);
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUnidadeEFilhas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira	
-- Create date: 02/09/2010 
-- Description:	retorna a unidade e suas filhas
-- ALTERAÇÃO: Debora Cavaglieri
-- Buscar entidades recursivamente
-- =============================================

CREATE FUNCTION [dbo].[FN_GetUnidadeEFilhas]
(
	@uni_id INT
)
RETURNS @Tabela TABLE(
		  uni_id int,
		  ent_id UNIQUEIDENTIFIER,
          uad_id UNIQUEIDENTIFIER,
          uni_coletor BIT,
          uni_justificativaColetor VARCHAR(2000),
          uni_internet bit,
          uni_situacao TINYINT,
          uni_dataCriacao DATETIME,
          uni_dateAlteracao DATETIME,
          uad_idSuperior UNIQUEIDENTIFIER,
          uni_codigoUGE VARCHAR(10)
        )
        
	AS
	BEGIN      
	WITH Ent_hierarquia AS  (
	
	-- Entidade
		SELECT 
			ue.uni_id
			,ue.ent_id
			,u.uad_id
			,u.uni_coletor
			,u.uni_justificativaColetor
			,u.uni_internet 
			,u.uni_situacao
			,u.uni_dataCriacao
			,u.uni_dateAlteracao
			, ue.ent_idSuperior AS uad_idSuperior
			, u.uni_codigoUGE
		FROM 
			dbo.VW_UnidadeEntidade ue WITH(NoLock)
		INNER JOIN dbo.Unidade u
			ON
			UE.ent_id = u.ent_id 
			AND (( u.uad_id IS NULL AND u.uni_id = @uni_id) )
			--OR @uni_id IS NULL
		
		UNION ALL
		
		 -- Entidades da hierarquia
		 SELECT 
			ue.uni_id
			,ue.ent_id
			,u.uad_id
			,u.uni_coletor
			,u.uni_justificativaColetor
			,u.uni_internet 
			,u.uni_situacao
			,u.uni_dataCriacao
			,u.uni_dateAlteracao
			, ue.ent_idSuperior AS uad_idSuperior
			, u.uni_codigoUGE
		FROM 
			dbo.VW_UnidadeEntidade AS ue WITH(NoLock)
		 INNER JOIN 
			Ent_hierarquia ENTH
			ON ue.ent_idSuperior = ENTH.ent_id 
		INNER JOIN dbo.Unidade AS u WITH(NoLock)
			ON
			UE.ent_id = u.ent_id 
			AND (u.uad_id IS NULL AND u.uni_id = ue.uni_id) 
		) -- fim da Ent_hierarquia
		
		,
	
	UA_hierarquia AS  (
	
	-- UA
		SELECT 
			UA.uni_id,
			  UA.ent_id ,
			  UA.uad_id ,
			  u.uni_coletor ,
			  u.uni_justificativaColetor ,
			  u.uni_internet ,
			  u.uni_situacao,
			  u.uni_dataCriacao ,
			  u.uni_dateAlteracao,
			  UA.uad_idSuperior,
			  ua.uni_codigoUGE
		FROM 
			VW_UnidadeAdministrativa AS UA WITH(NoLock)  
		INNER JOIN dbo.Unidade AS u WITH(NoLock)
			ON u.uni_id = UA.uni_id	
		WHERE 
			UA.uni_id = @uni_id 
			--OR @uni_id IS NULL
		
		UNION ALL
		
		-- UAs filhas da entidade
		 SELECT 
			UA.uni_id,
			  UA.ent_id ,
			  UA.uad_id ,
			  u.uni_coletor ,
			  u.uni_justificativaColetor ,
			  u.uni_internet ,
			  u.uni_situacao,
			  u.uni_dataCriacao ,
			  u.uni_dateAlteracao,
			  UA.uad_idSuperior,
			  ua.uni_codigoUGE
		 FROM 
			VW_UnidadeAdministrativa AS UA WITH(NoLock)
		 INNER JOIN dbo.Unidade AS u WITH(NoLock)
			ON u.uni_id = ua.uni_id	
		 INNER JOIN 
			Ent_hierarquia EH
			ON UA.uad_idSuperior IS NULL 
			AND ua.ent_id = EH.ent_id
				
		UNION ALL
		
		 -- UAs da hierarquia
		 SELECT 
			UA.uni_id,
			  UA.ent_id ,
			  UA.uad_id ,
			  u.uni_coletor ,
			  u.uni_justificativaColetor ,
			  u.uni_internet ,
			  u.uni_situacao,
			  u.uni_dataCriacao ,
			  u.uni_dateAlteracao,
			  UA.uad_idSuperior,
			  ua.uni_codigoUGE
		 FROM 
			VW_UnidadeAdministrativa AS UA WITH(NoLock)
		INNER JOIN dbo.Unidade AS u WITH(NoLock)
			ON u.uni_id = ua.uni_id	
		 INNER JOIN 
			UA_hierarquia UAH
			ON UA.uad_idSuperior = UAH.uad_id 
		)
			 	
		INSERT INTO @Tabela
			( uni_id,
			  ent_id ,
			  uad_id ,
			  uni_coletor ,
			  uni_justificativaColetor ,
			  uni_internet ,
			  uni_situacao,
			  uni_dataCriacao ,
			  uni_dateAlteracao,
			  uad_idSuperior,
			  uni_codigoUGE
			)
		SELECT 
			* 
		FROM 
			Ent_hierarquia
		UNION ALL 
		SELECT 
			* 
		FROM 
			UA_hierarquia
		
		RETURN
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUnidadeEFilhasImediatas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================================
-- Author:		JORGE FREITAS
-- Create date: 18/10/2010 09:49:26
-- Description: Retorna unidades diretamente inferiores nao gestoras
-- =========================================================================
CREATE FUNCTION [dbo].[FN_GetUnidadeEFilhasImediatas]
(	
	@uni_id int 
)
RETURNS @Tabela TABLE(
		  uni_id int,
		  ent_id UNIQUEIDENTIFIER,
          uad_id UNIQUEIDENTIFIER,
          uni_coletor BIT,
          uni_justificativaColetor VARCHAR(2000),
          uni_internet bit,
          uni_situacao TINYINT,
          uni_dataCriacao DATETIME,
          uni_dateAlteracao DATETIME,
          uad_idSuperior UNIQUEIDENTIFIER,
          uni_codigoUGE INT
        )

	AS
	BEGIN	
		
		WITH UnidadeEFilhas AS  (

		SELECT 
			fn1.*
		FROM 
			dbo.FN_GetUnidadeEFilhas(@uni_id) as fn1 
		)	
		
		INSERT INTO @Tabela
			( uni_id,
			  ent_id ,
			  uad_id ,
			  uni_coletor ,
			  uni_justificativaColetor ,
			  uni_internet ,
			  uni_situacao,
			  uni_dataCriacao ,
			  uni_dateAlteracao,
			  uad_idSuperior,
			  uni_codigoUGE 
			)
			SELECT * FROM UnidadeEFilhas Uh 
			WHERE 
				Uh.uni_id = @uni_id
				OR
				( 
				Uh.uni_codigoUGE IS NULL 
				AND Uh.uad_idSuperior = (SELECT uh1.uad_id FROM UnidadeEFilhas Uh1 WHERE Uh1.uni_id = @uni_id)
				 )
		RETURN
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUnidadeEFilhasImediatasGestoras]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================================
-- Author:		Debora Cavaglieri
-- Create date: 11/11/2010
-- Description: Retorna unidades diretamente inferiores 
-- Alteração: Luana Piva
-- Data: 26/03/2014
-- Descrição: Alterar retorno do "uni_codigoUGE" de INT para BIGINT 
-- =========================================================================
CREATE FUNCTION [dbo].[FN_GetUnidadeEFilhasImediatasGestoras]
(	
	@uni_id int 
)
RETURNS @Tabela TABLE(
		  uni_id int,
		  ent_id UNIQUEIDENTIFIER,
          uad_id UNIQUEIDENTIFIER,
          uni_coletor BIT,
          uni_justificativaColetor VARCHAR(2000),
          uni_internet bit,
          uni_situacao TINYINT,
          uni_dataCriacao DATETIME,
          uni_dateAlteracao DATETIME,
          uad_idSuperior UNIQUEIDENTIFIER,
		  uni_codigoUGE BIGINT
        )

	AS
	BEGIN
		
		INSERT INTO @Tabela
			( uni_id,
			  ent_id ,
			  uad_id ,
			  uni_coletor ,
			  uni_justificativaColetor ,
			  uni_internet ,
			  uni_situacao,
			  uni_dataCriacao ,
			  uni_dateAlteracao,
			  uad_idSuperior,
			  uni_codigoUGE 
			)
		SELECT 
			fn1.*
		FROM 
			dbo.FN_GetUnidadeEFilhas(@uni_id) as fn1
		where 
			fn1.uni_id = @uni_id 
			OR
				(fn1.uad_idSuperior in (SELECT fn2.uad_id 
										FROM dbo.FN_GetUnidadeEFilhas(@uni_id) as fn2 
										WHERE fn2.uni_id = @uni_id )
				 and fn1.uni_id not in (SELECT ug.uni_id FROM dbo.VW_UnidadeGestora as ug WITH(NoLock))
				)						
			OR 
				(fn1.uad_idSuperior is null 
				 AND uad_id is not null 
				 AND fn1.ent_id in (SELECT fn2.ent_id 
								FROM dbo.FN_GetUnidadeEFilhas(@uni_id) as fn2 
								WHERE fn2.uni_id = @uni_id )					
				)
	RETURN				
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUnidadeGestoraImediataCodigo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Luana Piva>
-- Create date: <10/01/2014>
-- Description:	<Retorna nome da Unidade Gestora 
--               Imediata>
-- =============================================
CREATE FUNCTION [dbo].[FN_GetUnidadeGestoraImediataCodigo]
(	
	@uni_id INT
)
RETURNS INT
AS
BEGIN
RETURN(
	SELECT		
		UAD.uni_id
	FROM 
		VW_UnidadeAdministrativa UAD WITH(NOLOCK)		
	WHERE
		UAD.uni_id = (
					CASE WHEN @uni_id IN (SELECT uni_id FROM UnidadeGestora WITH(NOLOCK))
					THEN    @uni_id
					ELSE (	
							SELECT 
								UNI.uni_id
							FROM 
								Unidade UNI WITH(NOLOCK)
							INNER JOIN 
								UnidadeGestora UGE WITH(NOLOCK)
								ON UNI.uni_id = UGE.uni_id
							WHERE 
								UNI.uad_id = (
												SELECT 
													UAD.uad_idSuperior
												FROM
													VW_UnidadeAdministrativa UAD WITH(NOLOCK)
												WHERE 
													UAD.uni_id = @uni_id
											  )  
						   )
					END)			
);					
END


GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUnidadeGestoraImediataNome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Luana Piva>
-- Create date: <10/01/2014>
-- Description:	<Retorna nome da Unidade Gestora 
--               Imediata>
-- =============================================
CREATE FUNCTION [dbo].[FN_GetUnidadeGestoraImediataNome]
(	
	@uni_id INT
)
RETURNS VARCHAR(max)
AS
BEGIN
RETURN(
	SELECT
		
		UAD.uad_nome
	FROM 
		VW_UnidadeAdministrativa UAD WITH(NOLOCK)		
	WHERE
		UAD.uni_id = (
					CASE WHEN @uni_id IN (SELECT uni_id FROM UnidadeGestora)
					THEN    @uni_id
					ELSE (	
							SELECT 
								UNI.uni_id
							FROM 
								Unidade UNI 
							INNER JOIN 
								UnidadeGestora UGE
								ON UNI.uni_id = UGE.uni_id
							WHERE 
								UNI.uad_id = (
												SELECT 
													UAD.uad_idSuperior
												FROM
													VW_UnidadeAdministrativa UAD WITH(NOLOCK)
												WHERE 
													UAD.uni_id = @uni_id
											  )  
						   )
					END)			
);					
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUnidadesHierarquiaImediata]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Aline Dornelas
-- Create date: 18/11/2010
-- Description:	
-- =============================================
CREATE FUNCTION [dbo].[FN_GetUnidadesHierarquiaImediata]
(	
	@uni_id int 
)
RETURNS @Tabela TABLE
		(
		  uni_id INT,
		  ent_id UNIQUEIDENTIFIER,
          uad_id UNIQUEIDENTIFIER,
          uni_coletor BIT,
          uni_justificativaColetor VARCHAR(2000),
          uni_internet BIT,
          uni_situacao TINYINT,
          uni_dataCriacao DATETIME,
          uni_dateAlteracao DATETIME,
          uad_idSuperior UNIQUEIDENTIFIER,
          uni_codigoUGE VARCHAR(10)
          
        )

	AS
	BEGIN
		
		INSERT INTO @Tabela
			( 
			  uni_id,
			  ent_id ,
			  uad_id ,
			  uni_coletor ,
			  uni_justificativaColetor ,
			  uni_internet ,
			  uni_situacao,
			  uni_dataCriacao ,
			  uni_dateAlteracao,
			  uad_idSuperior,
			  uni_codigoUGE
			)
		SELECT 
			 UNI.uni_id,
			 UNI.ent_id ,
			 UNI.uad_id ,
			 uni_coletor ,
			 uni_justificativaColetor ,
			 uni_internet ,
			 uni_situacao,
			 uni_dataCriacao ,
			 uni_dateAlteracao,
			 uad_idSuperior,
			 UA.uni_codigoUGE
		FROM 
			Unidade AS UNI WITH (NOLOCK)
		LEFT JOIN VW_UnidadeAdministrativa AS UA WITH (NOLOCK)
			ON UNI.uad_id = UA.uad_id
			   AND UNI.ent_id = UA.ent_id
		LEFT JOIN VW_UnidadeEntidade as ENT WITH (NOLOCK)
			ON ENT.ent_id = UNI.ent_id
		WHERE 
			UNI.uni_id = @uni_id 
			OR
				(UA.uad_idSuperior IN (SELECT uad_id FROM Unidade WHERE uni_id = @uni_id))
			OR 
				( 
					(SELECT uad_id FROM Unidade WHERE uni_id = @uni_id) IS NULL
					AND (UA.uad_idSuperior IS NULL) 
					AND (UNI.uad_id IS NOT NULL) 
					AND (ENT.ent_id IN (SELECT ent_id FROM Unidade WHERE uni_id = @uni_id))
				)						
	RETURN	
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUnidadesImportacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================================
-- Author:		Rafael Amado
-- Create date: 07/12/2010
-- Description:	Função temporária para retornar o código UGE da unidade gestora.
--				Deve ser removida em um re-factory proximo.
-- ==========================================================================================
CREATE FUNCTION [dbo].[FN_GetUnidadesImportacao]
(
	@uni_id INT
)
RETURNS @tbl TABLE(
			uni_id INT NOT NULL
			, uni_idOriginal INT NOT NULL
			, uni_codigoUGE VARCHAR(6) NULL
		)
AS
BEGIN
	;WITH UnidadeSuperiores(uni_id, uni_idOriginal, uad_idSuperior, uni_codigoUGE)
	AS (
		SELECT
			U.uni_id
			, @uni_id
			, uad.uad_idSuperior
			, U.uni_codigoUGE
		FROM 
			Synonym_SYS_UnidadeAdministrativa_SSO uad WITH(NOLOCK)
			INNER JOIN Unidade U WITH(NOLOCK)
				ON uad.ent_id = U.ent_id 
					AND uad.uad_id = U.uad_id
		WHERE
			u.uni_id = @uni_id
		UNION ALL
		SELECT
			U.uni_id
			, @uni_id
			, uad.uad_idSuperior
			, U.uni_codigoUGE
		FROM
			Synonym_SYS_UnidadeAdministrativa_SSO uad WITH(NOLOCK)
			INNER JOIN Unidade U
				ON uad.ent_id = U.ent_id 
					AND uad.uad_id = U.uad_id		
			INNER JOIN UnidadeSuperiores h
				ON uad.uad_id = h.uad_idSuperior				
	)
	INSERT INTO @tbl(uni_id, uni_idOriginal, uni_codigoUGE)
	SELECT uni_id, uni_idOriginal, uni_codigoUGE FROM UnidadeSuperiores
	
	RETURN
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUnidadesSuperiores]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_GetUnidadesSuperiores]
(
	@uni_id INT
)
RETURNS @tbl TABLE  (
		uni_id int null
		, ent_id uniqueidentifier null
		, uad_id uniqueidentifier null 
		, uni_idgestora int null
		, uni_nomegestora char (1000) null
		, ent_gestora uniqueidentifier null
		, uad_gestora uniqueidentifier null
		, uad_superior uniqueidentifier null
		, tua_id uniqueidentifier null)
AS
begin  

	WITH
		
	Uni_NaoGestora AS (
		
	-- qdo é unidade adm , não gestora
	-- é o superior é outra unidade administrativa (tem uad_idsuperior)
	SELECT  
		UA1.uni_id
		, UA1.ent_id
		, UA1.uad_id
		, UA2.uni_id uni_idgestora
		, UA2.uad_nome uni_nomegestora
		, UA2.ent_id ent_gestora 
		, UA2.uad_id uad_gestora
		, UA2.uad_idSuperior AS uad_superior
		, UA2.tua_id
		FROM
			VW_UnidadeAdministrativa UA1 WITH(NoLock)
		INNER JOIN
			VW_UnidadeAdministrativa UA2 WITH(NoLock) 
			ON UA2.ent_id = UA1.ent_id 
			AND UA2.uad_id = UA1.uad_idSuperior 
	WHERE 
		UA1.uni_id = @uni_id 
		AND UA1.uad_id IS NOT NULL
		AND UA1.uni_id NOT IN (select uni_id from UnidadeGestora WITH(NOLOCK) where uge_situacao not in (3))
		AND UA1.uad_idSuperior IS NOT NULL	
		 
	UNION ALL 
	
	-- UNIDADES NAO GESTORAS FILHAS DE ENTIDADE
	SELECT  
		UA1.uni_id
		, UA1.ent_id
		, UA1.uad_id
		, U2.uni_id uni_idgestora
		, E1.ent_razaoSocial AS uni_nomegestora
		, U2.ent_id ent_gestora 
		, u2.uad_id uad_gestora
		, E1.ent_idSuperior AS uad_superior
		, CAST(NULL as uniqueidentifier) AS tua_id
		FROM
			VW_UnidadeAdministrativa UA1 WITH(NoLock)
		INNER JOIN 	
			Unidade U2 WITH(NoLock)
			ON U2.ent_id = UA1.ent_id 
			AND  U2.uad_id IS NULL 	
		INNER JOIN
			VW_UnidadeEntidade E1 WITH(NoLock)
			ON E1.ent_id = U2.ent_id 
	WHERE 
		UA1.uni_id = @uni_id 
		AND UA1.uad_id IS NOT NULL
		AND UA1.uni_id NOT IN (select uni_id from UnidadeGestora WITH(NOLOCK) where uge_situacao not in (3))  
		AND UA1.uad_idSuperior IS NULL	
    ) 
    
    -- quando unidade for gestora -------------------------------------------
      
    , UNI_Gestora AS (
    
    	SELECT  
    		U1.uni_id
    		, U1.ent_id
    		, U1.uad_id
    		, UA2.uni_id uni_idgestora
    		, UA2.uad_nome uni_nomegestora
    		, UA2.ent_id ent_gestora 
    		, UA2.uad_id uad_gestora
    		, UA2.uad_idSuperior AS uad_superior
    		, UA2.tua_id
		FROM 
			Unidade U1 WITH(NoLock)
		INNER JOIN 	
			Uni_NaoGestora UNG1 WITH(NoLock)
			ON
			UNG1.uad_gestora IS NOT NULL  
			AND UNG1.uni_idgestora = U1.uni_id 						
		
		INNER JOIN
			VW_UnidadeAdministrativa UA2 WITH(NoLock) 
			ON UA2.ent_id = UNG1.ent_gestora 
			AND UA2.uad_id =  UNG1.uad_superior 
	WHERE 
		U1.uad_id is not null
		and U1.uni_id in (select uni_id from dbo.UnidadeGestora WITH(NoLock) where uge_situacao not in (3))

	UNION ALL 
	
	SELECT  
		U1.uni_id
		, U1.ent_id
		, U1.uad_id
		, UA2.uni_id uni_idgestora
		, UA2.uad_nome AS uni_nomegestora
		, UA2.ent_id ent_gestora 
		, UA2.uad_id uad_gestora
		, UA2.uad_idSuperior AS uad_superior
		, UA2.tua_id
		FROM 
			Unidade U1 WITH(NoLock)	
		INNER JOIN
			dbo.VW_UnidadeAdministrativa UA2 WITH(NoLock) 
			ON UA2.ent_id = U1.ent_id 
			AND UA2.uad_id = U1.uad_id 
	WHERE 
		U1.uni_id = @uni_id 
		AND U1.uad_id IS NOT NULL
		AND U1.uni_id IN (select uni_id from dbo.UnidadeGestora WITH(NoLock) where uge_situacao not in (3))		
				
		UNION ALL 
				
		SELECT  
			U1.uni_id
			, U1.ent_id
			, U1.uad_id
			, UA2.uni_id uni_idgestora
			, UA2.uad_nome AS uni_nomegestora
			, UA2.ent_id ent_gestora 
			, UA2.uad_id uad_gestora
			, UA2.uad_idSuperior AS uad_superior
			, UA2.tua_id
		FROM 
			Unidade U1 WITH(NoLock)	
		INNER JOIN 	
			Uni_Gestora UG1  
			ON UG1.uni_idgestora = U1.uni_id
			AND UG1.uad_superior IS NOT NULL  			  						
 
		INNER JOIN
			dbo.VW_UnidadeAdministrativa UA2 WITH(NoLock) 
			ON UA2.ent_id = UG1.ent_gestora  
			AND UA2.uad_id = UG1.uad_superior 
	WHERE 
		U1.uad_id IS NOT NULL
		AND U1.uni_id IN (select uni_id from dbo.UnidadeGestora WITH(NoLock) where uge_situacao not in (3))
	)
       
   
    insert into @tbl (uni_id 
		, ent_id 
		, uad_id 
		, uni_idgestora 
		, uni_nomegestora 
		, ent_gestora 
		, uad_gestora 
		, uad_superior 
		, tua_id )
    (SELECT uni_id 
		, ent_id 
		, uad_id 
		, uni_idgestora 
		, uni_nomegestora 
		, ent_gestora 
		, uad_gestora 
		, uad_superior 
		, tua_id FROM Uni_NaoGestora 
     
    UNION ALL 
     
    SELECT uni_id 
		, ent_id 
		, uad_id 
		, uni_idgestora 
		, uni_nomegestora 
		, ent_gestora 
		, uad_gestora 
		, uad_superior 
		, tua_id FROM UNI_Gestora
    
     )
 
	RETURN 
END


GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUnidadesSuperioresEntidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Jorge Freitas>
-- Create date: <03/09/2010>
-- Description:	<Retorna a hierarquia ao contrário:
-- a unidade e suas superiores até a entidade>
-- =============================================
CREATE FUNCTION [dbo].[FN_GetUnidadesSuperioresEntidade]
(	
	@uni_id INT
)



RETURNS @tbl TABLE  (
		uni_id int null
		, ent_id uniqueidentifier null
		, uad_id uniqueidentifier null 
		, uni_idgestora int null
		, uni_nomegestora char (1000) null
		, ent_gestora uniqueidentifier null
		, uad_gestora uniqueidentifier null
		, uad_superior uniqueidentifier null
		, tua_id uniqueidentifier null)
AS
begin  

	WITH
		
	Uni_NaoGestora AS (
		
	-- qdo é unidade adm , não gestora
	-- é o superior é outra unidade administrativa (tem uad_idsuperior)
	SELECT  
		U1.uni_id
		, U1.ent_id
		, U1.uad_id
		, U2.uni_id uni_idgestora
		, UA2.uad_nome uni_nomegestora
		, U2.ent_id ent_gestora 
		, u2.uad_id uad_gestora
		, UA2.uad_idSuperior AS uad_superior
		, UA2.tua_id
		FROM 
			Unidade AS U1 WITH(NoLock)		
		INNER JOIN 
			VW_UnidadeAdministrativa UA1 WITH(NoLock)
			ON UA1.ent_id = U1.ent_id 
			AND UA1.uad_id = U1.uad_id 
			AND UA1.uad_idSuperior IS NOT NULL					
		INNER JOIN 	
			Unidade U2 WITH(NoLock)
			ON U2.ent_id = UA1.ent_id 
			AND  U2.uad_id = UA1.uad_idSuperior 			
		INNER JOIN
			VW_UnidadeAdministrativa UA2 WITH(NoLock) 
			ON UA2.ent_id = U2.ent_id 
			AND UA2.uad_id = U2.uad_id 
	WHERE 
		U1.uni_id = @uni_id 
		AND U1.uad_id IS NOT NULL
		AND U1.uni_id NOT IN (select uni_id from UnidadeGestora)
		 
	UNION ALL 
	
	-- UNIDADES NAO GESTORAS FILHAS DE ENTIDADE
	SELECT  
		U1.uni_id
		, U1.ent_id
		, U1.uad_id
		, U2.uni_id uni_idgestora
		, E1.ent_razaoSocial AS uni_nomegestora
		, U2.ent_id ent_gestora 
		, u2.uad_id uad_gestora
		, E1.ent_idSuperior AS uad_superior
		, CAST(NULL as uniqueidentifier) AS tua_id
		FROM 
			Unidade U1	WITH(NoLock)		
		INNER JOIN 
			VW_UnidadeAdministrativa UA1 WITH(NoLock)
			ON UA1.ent_id = U1.ent_id 
			AND UA1.uad_id = U1.uad_id 
			AND UA1.uad_idSuperior IS NULL					
		INNER JOIN 	
			Unidade U2 WITH(NoLock)
			ON U2.ent_id = UA1.ent_id 
			AND  U2.uad_id IS NULL 	
		INNER JOIN
			VW_UnidadeEntidade E1 WITH(NoLock)
			ON E1.ent_id = U2.ent_id 
	WHERE 
		U1.uni_id = @uni_id 
		AND U1.uad_id IS NOT NULL
		AND U1.uni_id NOT IN (select uni_id from UnidadeGestora )  
    ) 
    
    -- quando unidade for gestora -------------------------------------------
      
    , UNI_Gestora AS (
    
    	SELECT  
    		U1.uni_id
    		, U1.ent_id
    		, U1.uad_id
    		, U2.uni_id uni_idgestora
    		, UA2.uad_nome uni_nomegestora
    		, U2.ent_id ent_gestora 
    		, u2.uad_id uad_gestora
    		, UA2.uad_idSuperior AS uad_superior
    		, UA2.tua_id
		FROM 
			Unidade U1 WITH(NoLock)
		INNER JOIN 	
			Uni_NaoGestora UNG1
			ON
			UNG1.uad_gestora IS NOT NULL  
			AND UNG1.uni_idgestora = U1.uni_id 						
		INNER JOIN 	
			Unidade U2 WITH(NoLock)
			ON U2.ent_id = UNG1.ent_gestora  
			AND  U2.uad_id = UNG1.uad_superior 
		INNER JOIN
			VW_UnidadeAdministrativa UA2 WITH(NoLock) 
			ON UA2.ent_id = U2.ent_id 
			AND UA2.uad_id = U2.uad_id 
	WHERE 
		U1.uad_id is not null
		and U1.uni_id in (select uni_id from dbo.UnidadeGestora )

	UNION ALL 
	
	SELECT  
		U1.uni_id
		, U1.ent_id
		, U1.uad_id
		, U2.uni_id uni_idgestora
		, UA2.uad_nome AS uni_nomegestora
		, U2.ent_id ent_gestora 
		, u2.uad_id uad_gestora
		, UA2.uad_idSuperior AS uad_superior
		, UA2.tua_id
		FROM 
			Unidade U1 WITH(NoLock)	
		INNER JOIN 	
			Unidade U2 WITH(NoLock)
			ON U2.ent_id = U1.ent_id 
			AND  U2.uad_id = U1.uad_id 
		INNER JOIN
			dbo.VW_UnidadeAdministrativa UA2 WITH(NoLock) 
			ON UA2.ent_id = U2.ent_id 
			AND UA2.uad_id = U2.uad_id 
	WHERE 
		U1.uni_id = @uni_id 
		AND U1.uad_id IS NOT NULL
		AND U1.uni_id IN (select uni_id from dbo.UnidadeGestora)		
				
		UNION ALL 
				
		SELECT  
			U1.uni_id
			, U1.ent_id
			, U1.uad_id
			, U2.uni_id uni_idgestora
			, UA2.uad_nome AS uni_nomegestora
			, U2.ent_id ent_gestora 
			, u2.uad_id uad_gestora
			, UA2.uad_idSuperior AS uad_superior
			, UA2.tua_id
		FROM 
			Unidade U1 WITH(NoLock)	
		INNER JOIN 	
			Uni_Gestora UG1 
			ON UG1.uni_idgestora = U1.uni_id
			AND UG1.uad_superior IS NOT NULL  			  						
		INNER JOIN 	
			Unidade U2 WITH(NoLock) 
			ON U2.ent_id = UG1.ent_gestora  
			and  U2.uad_id = UG1.uad_superior 
		INNER JOIN
			dbo.VW_UnidadeAdministrativa UA2 WITH(NoLock) 
			ON UA2.ent_id = U2.ent_id 
			AND UA2.uad_id = U2.uad_id 
	WHERE 
		U1.uad_id IS NOT NULL
		AND U1.uni_id IN (select uni_id from dbo.UnidadeGestora )
	)
    
    -- ENTIDADES ------------------------------------------------------------------------------------------------------
    
    , Ent_hierarquia AS  (

		SELECT  
			U1.uni_id
			, U1.ent_id
			, U1.uad_id
			, U2.uni_id uni_idgestora
			, e1.ent_razaoSocial uni_nomegestora
			, U2.ent_id ent_gestora 
			, u2.uad_id uad_gestora
			, E1.ent_idSuperior as uad_superior
			, CAST(NULL as uniqueidentifier) AS tua_id
	    FROM 
			Unidade U1 WITH(NoLock)			
		INNER JOIN 
			dbo.VW_UnidadeEntidade E1 WITH(NoLock) 
			ON U1.ent_id = E1.ent_id 	
		INNER JOIN 	
			Unidade U2 WITH(NoLock)
			ON U2.ent_id =  E1.ent_id 	
			AND U2.uad_id IS NULL			
		WHERE 
			U1.uni_id = @uni_id 
			AND U1.uad_id IS NULL
		
		UNION ALL 
		
		SELECT  
			U1.uni_id
			, U1.ent_id
			, U1.uad_id
			, U2.uni_id uni_idgestora
			, e1.ent_razaoSocial uni_nomegestora
			, U2.ent_id ent_gestora 
			, u2.uad_id uad_gestora
			, E1.ent_idSuperior AS uad_superior
			, CAST(NULL as uniqueidentifier) AS tua_id			
	    FROM 
			Unidade U1 WITH(NoLock)
		INNER JOIN
		    UNI_Gestora UG1
		    ON UG1.uad_superior IS NULL	
		INNER JOIN  
			dbo.VW_UnidadeEntidade E1 WITH(NoLock)
			ON U1.ent_id = E1.ent_id 	
		INNER JOIN 	
			Unidade U2 WITH(NoLock)
			ON U2.ent_id = E1.ent_id 	
			AND U2.uad_id IS NULL			
		WHERE 
			U1.uni_id = UG1.uni_idgestora 
		
		UNION ALL 
		
		SELECT  
			U1.uni_id
			, U1.ent_id
			, U1.uad_id
			, U2.uni_id uni_idgestora
			, e1.ent_razaoSocial uni_nomegestora
			, U2.ent_id ent_gestora 
			, u2.uad_id uad_gestora
			, E1.ent_idSuperior AS uad_superior
			,CAST(NULL as uniqueidentifier) AS tua_id
	    FROM 
			Unidade U1 WITH(NoLock)			
		INNER JOIN
		    Uni_NaoGestora UNG1 
		    ON UNG1.uad_gestora IS NULL 
		INNER JOIN  
			dbo.VW_UnidadeEntidade E1 WITH(NoLock)
			ON UNG1.uad_superior = E1.ent_id 
			AND UNG1.uad_gestora IS NULL
		INNER JOIN 	
			Unidade U2 WITH(NoLock)
			ON U2.ent_id = E1.ent_id 	
			AND U2.uad_id IS NULL			
		WHERE 
			U1.uni_id = UNG1.uni_idgestora 
		
		UNION ALL
		
		SELECT  
			U1.uni_id
			, U1.ent_id
			, U1.uad_id
			, U2.uni_id uni_idgestora
			, e1.ent_razaoSocial uni_nomegestora
			, U2.ent_id ent_gestora 
			, u2.uad_id uad_gestora
			, E1.ent_idSuperior as uad_superior
			, CAST(NULL as uniqueidentifier) AS tua_id
	    FROM 
			Unidade U1 WITH(NoLock)		
		INNER JOIN
		    Uni_NaoGestora UNG1 
		    ON UNG1.uad_superior IS NULL
		INNER JOIN  
			dbo.VW_UnidadeEntidade E1 WITH(NoLock)
			ON UNG1.ent_gestora = E1.ent_id 
		INNER JOIN 	
			Unidade U2 WITH(NoLock)
			ON U2.ent_id =  E1.ent_id 	
			AND U2.uad_id IS NULL			
		WHERE 
			U1.uni_id = UNG1.uni_idgestora 
		
		UNION ALL 
		
		SELECT  
			U1.uni_id
			, U1.ent_id
			, U1.uad_id
			, U2.uni_id uni_idgestora
			, e1.ent_razaoSocial uni_nomegestora
			, U2.ent_id ent_gestora 
			, u2.uad_id uad_gestora
			, E1.ent_idSuperior AS uad_superior
			, CAST(NULL as uniqueidentifier) AS tua_id
	    FROM 
			Unidade U1 WITH(NoLock)			
		INNER JOIN
		    Ent_hierarquia EH1
		    ON EH1.uad_gestora is null 	
		INNER JOIN  
			dbo.VW_UnidadeEntidade E1 WITH(NoLock)
			ON EH1.uad_superior = E1.ent_id 	
		inner JOIN 	
			Unidade U2 WITH(NoLock)
			ON U2.ent_id =  E1.ent_id 	
			AND U2.uad_id IS NULL			
		WHERE 
			U1.uni_id = EH1.uni_idgestora 				
	
   )
   
    insert into @tbl (uni_id 
		, ent_id 
		, uad_id 
		, uni_idgestora 
		, uni_nomegestora 
		, ent_gestora 
		, uad_gestora 
		, uad_superior 
		, tua_id )
    (SELECT * FROM Uni_NaoGestora 
     
    UNION ALL 
     
    SELECT * FROM UNI_Gestora
    
    UNION ALL 
    
    SELECT * FROM Ent_hierarquia )
 
	RETURN 

	
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUniNome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_GetUniNome](@uni_id int)
RETURNS VARCHAR(MAX)
AS
BEGIN
	RETURN 
	(

	SELECT 
		CoreEnt.ent_razaoSocial as uni_nome
	FROM
		 VW_UnidadeEntidade AS CoreEnt WITH (NOLOCK)
	WHERE
		CoreEnt.ent_situacao <> 3
		AND  CoreEnt.uni_id = @uni_id	
		
	UNION
	
	SELECT
		CoreUad.uad_nome as uni_nome
	FROM 
		VW_UnidadeAdministrativa AS CoreUad WITH (NOLOCK) 
	WHERE
		CoreUad.uad_situacao <> 3
		AND  CoreUad.uni_id = @uni_id	
);
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetValorParemetrosAtivo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_GetValorParemetrosAtivo](@chave VARCHAR(100))
RETURNS VARCHAR(1000)
AS
BEGIN
	RETURN 
	(
		SELECT TOP 1
			par_valor
		FROM
			SYS_Parametros WITH(NoLock)
		WHERE
			par_situacao = 1
			AND (
				(CAST(GETDATE() AS DATE) >= par_vigenciaInicio)
				AND
				((par_vigenciaFim IS NULL) OR (CAST(GETDATE() AS DATE) <= par_vigenciaFim))
			)
			AND par_chave = @chave
	);
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_RegistroPat_ParaGPB]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:	Nicholas de Assis
-- Create date: 04/04/2014
-- Description:	Refeita a função para retornar uma mensagem com o menor e maior registro patrimonial de acordo com os filtros de bem e GPB
-- Alteração: Luana Piva
-- Data: 09/04/2014
-- Description: Correção na lógica da mensagem. Alterado [@numero = 0] por [@numero = @fim].
-- =============================================

CREATE FUNCTION [dbo].[FN_RegistroPat_ParaGPB]
(
	@bem_id BIGINT,
	@num_gpb VARCHAR(20)
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @tab AS TABLE (seq BIGINT IDENTITY, bem_id BIGINT, bit_id INT, bit_registroPat VARCHAR(max), ano VARCHAR(4), numero BIGINT, seq_novo BIGINT, numero_novo BIGINT)
	INSERT INTO @tab
	        ( 
	          bem_id ,
	          bit_id ,
	          bit_registroPat ,
	          ano ,
	          numero ,
	          numero_novo
	        )
	
		(
		SELECT 
			bem_id ,
	        bit_id ,
	        bit_registroPat ,
	        SUBSTRING(bit_registroPat, 1, 4) AS ano,
	        CAST(SUBSTRING(bit_registroPat, 10, 7) AS BIGINT ) AS numero,
	        CAST(REPLACE(bit_registroPat,'.','') AS BIGINT ) AS numero_novo
	        	        
		FROM BemItem AS bit WITH(NOLOCK)
		
		WHERE	
			bem_id = @bem_id
			AND bit.bit_GPB = @num_gpb
		)
		
	DECLARE @mensagem VARCHAR(MAX) = '', @registro VARCHAR(max) = '', @inicial VARCHAR(max) = ''
	DECLARE @numero BIGINT = 0 , @fim BIGINT = 0
	DECLARE @anoini VARCHAR(4)='', @anofim VARCHAR(4)=''
	
	DECLARE @cont BIGINT = 1, @max BIGINT
	SET @max = (SELECT MAX(seq) FROM @tab)
	
	WHILE (@cont <= @max)
	BEGIN
		update @tab SET seq_novo = @cont where seq = (SELECT TOP 1 seq FROM @tab where numero_novo = (select min(numero_novo) from @tab where seq_novo IS NULL))
		set @cont = @cont +1
	END
	
	SET @cont = 1
	
	WHILE (@cont <= @max)
	BEGIN
		
		IF @numero = 0 
		BEGIN
					
			SELECT 
				@registro = bit_registroPat
				, @inicial = bit_registroPat
				, @numero = numero
				, @anoini = ano
				FROM @tab 
			WHERE
				seq_novo = @cont
			
			IF @mensagem = '' 
			BEGIN 
				SET @mensagem = 'PATRIMÔNIO Nº: ' + @registro 
			END
			
		END
			
					
		SELECT 
			@fim = numero 	
			, @anofim = ano		     
		FROM @tab 
		WHERE
			seq_novo = @cont
		
		
		IF (@fim > @numero + 1) OR (@anoini <> @anofim)
		BEGIN 
			IF @inicial <> @registro
			BEGIN 
				SET @mensagem = @mensagem + ' a ' + @registro  +  '\n'
			END 
			ELSE
			BEGIN 
				SET @mensagem = @mensagem + '\n'
			END		
							
			SELECT 
				@registro = bit_registroPat
				, @inicial = bit_registroPat
				,@numero = @fim
				--, @numero = 0
				, @anoini = ano
			FROM @tab 
			WHERE
				seq_novo = @cont
			
			SET @mensagem = @mensagem + 'PATRIMÔNIO Nº: ' + @registro 
			
		END
		ELSE
		BEGIN
			SELECT 
				@registro = bit_registroPat 
				, @numero = numero
			FROM @tab 
			WHERE
				seq_novo = @cont
		END	
		
		SET @cont = @cont + 1
		
		IF @cont > @max AND @inicial <> @registro
		BEGIN 
			SET @mensagem = @mensagem + ' a ' + @registro
		END
		
	END	
	
	RETURN @mensagem

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_RegistroPat_ParaGPB_Impressao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:	Luana Piva
-- Create date: 10/04/2014
-- Description:	feita a função para retornar uma mensagem com o menor e maior registro patrimonial de acordo com os filtros de bem e GPB

-- Author:	Wellington Santana
-- Create date: 30/05/2014
-- Description:	Retirado os parametros,numGpbDestino, tpm_operacaoDestino, destino, pois não estava sendo utilizado
-- =============================================

CREATE FUNCTION [dbo].[FN_RegistroPat_ParaGPB_Impressao]
(
	@bem_id varchar(max),
	@bit_id varchar(max),
	@origem int
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @tab AS TABLE (seq BIGINT IDENTITY, bem_id BIGINT, bit_id INT, bit_registroPat VARCHAR(max), ano VARCHAR(4), numero BIGINT, seq_novo BIGINT, numero_novo BIGINT)
	
		;WITH 
		BemSelecionado AS
		(
			select 
				ROW_NUMBER() OVER(order by valor) as ID,
				(CONVERT(varchar(max),valor)) as bem_id
			from 
				dbo.FN_StringToArrayInt64(@bem_id, ',')
		)

		,BemItemSelecionado AS
		(
			select 
				ROW_NUMBER() OVER(order by valor) as ID,
				(CONVERT(varchar(max),valor)) as bit_id
			from 
				dbo.FN_StringToArrayInt64(@bit_id, ',')
		)			
	
	INSERT INTO @tab
	        ( 
	          bem_id ,
	          bit_id ,
	          bit_registroPat ,
	          ano ,
	          numero ,
	          numero_novo
	        )
	
		(
		SELECT
			
			BemItem.bem_id ,
	        BemItem.bit_id ,
	        BemItem.bit_registroPat ,
	        SUBSTRING(bit_registroPat, 1, 4) AS ano,
	        CAST(SUBSTRING(bit_registroPat, 10, 7) AS BIGINT ) AS numero,
	        CAST(REPLACE(bit_registroPat,'.','') AS BIGINT ) AS numero_novo
		FROM 		
			MovimentacaoBem WITH (NoLock)
			inner join BemItem with(nolock)
			on BemItem.bem_id = MovimentacaoBem.bem_id
			and BemItem.bit_id = MovimentacaoBem.bit_id			
		WHERE
			MovimentacaoBem.mov_situacao = 5			
			AND(MovimentacaoBem.mov_unidadeDestino!=MovimentacaoBem.mov_unidadeOrigem)			
			AND  (Exists( select uni_id from dbo.FN_GetUnidadeEFilhas(@origem) where uni_id  = MovimentacaoBem.mov_unidadeOrigem))
			and exists(select bem_id from BemSelecionado where bem_id = BemItem.bem_id) 
			and exists(select bit_id from BemItemSelecionado where bit_id = BemItem.bit_id) 
		)
		
	DECLARE @mensagem VARCHAR(MAX) = '', @registro VARCHAR(max) = '', @inicial VARCHAR(max) = ''
	DECLARE @numero BIGINT = 0 , @fim BIGINT = 0
	DECLARE @anoini VARCHAR(4)='', @anofim VARCHAR(4)=''
	
	DECLARE @cont BIGINT = 1, @max BIGINT
	SET @max = (SELECT MAX(seq) FROM @tab)
	
	WHILE (@cont <= @max)
	BEGIN
		update @tab SET seq_novo = @cont where seq = (SELECT TOP 1 seq FROM @tab where numero_novo = (select min(numero_novo) from @tab where seq_novo IS NULL))
		set @cont = @cont +1
	END
	
	SET @cont = 1
	
	WHILE (@cont <= @max)
	BEGIN
		
		IF @numero = 0 
		BEGIN
					
			SELECT 
				@registro = bit_registroPat
				, @inicial = bit_registroPat
				, @numero = numero
				, @anoini = ano
				FROM @tab 
			WHERE
				seq_novo = @cont
			
			IF @mensagem = '' 
			BEGIN 
				SET @mensagem = 'PATRIMÔNIO Nº: ' + @registro 
			END
			
		END
			
					
		SELECT 
			@fim = numero 	
			, @anofim = ano		     
		FROM @tab 
		WHERE
			seq_novo = @cont
		
		
		IF (@fim > @numero + 1) OR (@anoini <> @anofim)
		BEGIN 
			IF @inicial <> @registro
			BEGIN 
				SET @mensagem = @mensagem + ' a ' + @registro  +  char(13) + char(10)
			END 
			ELSE
			BEGIN 
				SET @mensagem = @mensagem + char(13) + char(10)
			END		
							
			SELECT 
				@registro = bit_registroPat
				, @inicial = bit_registroPat
				,@numero = @fim				
				, @anoini = ano
			FROM @tab 
			WHERE
				seq_novo = @cont
			
			SET @mensagem = @mensagem + 'PATRIMÔNIO Nº: ' + @registro 
			
		END
		ELSE
		BEGIN
			SELECT 
				@registro = bit_registroPat 
				, @numero = numero
			FROM @tab 
			WHERE
				seq_novo = @cont
		END	
		
		SET @cont = @cont + 1
		
		IF @cont > @max AND @inicial <> @registro
		BEGIN 
			SET @mensagem = @mensagem + ' a ' + @registro
		END
		
	END	
	
	RETURN @mensagem

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_RegistroPat_ParaGPB_Reimpressao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:	Luana Piva
-- Create date: 10/04/2014
-- Description:	feita a função para retornar uma mensagem com o menor e maior registro patrimonial de acordo com os filtros de bem e GPB
-- =============================================

CREATE FUNCTION [dbo].[FN_RegistroPat_ParaGPB_Reimpressao]
(
	@bem_id varchar(max),
	@numGrbDestino VARCHAR(20),
	@bit_id varchar(max),
	@tpm_operacaoDestino varchar(20),
	@origem int,
	@destino int
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @tab AS TABLE (seq BIGINT IDENTITY, bem_id BIGINT, bit_id INT, bit_registroPat VARCHAR(max), ano VARCHAR(4), numero BIGINT, seq_novo BIGINT, numero_novo BIGINT)
	
		;WITH 
		BemSelecionado AS
		(
			select 
				ROW_NUMBER() OVER(order by valor) as ID,
				(CONVERT(varchar(max),valor)) as bem_id
			from 
				dbo.FN_StringToArrayInt64(@bem_id, ',')
		)


		,BemItemSelecionado AS
		(
			select 
				ROW_NUMBER() OVER(order by valor) as ID,
				(CONVERT(varchar(max),valor)) as bit_id
			from 
				dbo.FN_StringToArrayInt64(@bit_id, ',')
		)			
	
	INSERT INTO @tab
	        ( 
	          bem_id ,
	          bit_id ,
	          bit_registroPat ,
	          ano ,
	          numero ,
	          numero_novo
	        )
	
		(
		SELECT
			
			BemItem.bem_id ,
	        BemItem.bit_id ,
	        BemItem.bit_registroPat ,
	        SUBSTRING(bit_registroPat, 1, 4) AS ano,
	        CAST(SUBSTRING(bit_registroPat, 10, 7) AS BIGINT ) AS numero,
	        CAST(REPLACE(bit_registroPat,'.','') AS BIGINT ) AS numero_novo
		FROM 
			MovimentacaoBem WITH (NoLock)
			inner join BemItem with(nolock)
			on BemItem.bem_id = MovimentacaoBem.bem_id
			and BemItem.bit_id = MovimentacaoBem.bit_id
			
		WHERE
			MovimentacaoBem.mov_situacao = 5
			and MovimentacaoBem.mov_GPB like @numGrbDestino
			And (MovimentacaoBem.mov_unidadeDestino!=MovimentacaoBem.mov_unidadeOrigem)			
			AND  (Exists( select uni_id from dbo.FN_GetUnidadeEFilhas(@origem) where uni_id  = MovimentacaoBem.mov_unidadeOrigem))
			and exists(select bem_id from BemSelecionado where bem_id = BemItem.bem_id) 
			and exists(select bit_id from BemItemSelecionado where bit_id = BemItem.bit_id)
		)
		
	DECLARE @mensagem VARCHAR(MAX) = '', @registro VARCHAR(max) = '', @inicial VARCHAR(max) = ''
	DECLARE @numero BIGINT = 0 , @fim BIGINT = 0
	DECLARE @anoini VARCHAR(4)='', @anofim VARCHAR(4)=''
	
	DECLARE @cont BIGINT = 1, @max BIGINT
	SET @max = (SELECT MAX(seq) FROM @tab)
	
	WHILE (@cont <= @max)
	BEGIN
		update @tab SET seq_novo = @cont where seq = (SELECT TOP 1 seq FROM @tab where numero_novo = (select min(numero_novo) from @tab where seq_novo IS NULL))
		set @cont = @cont +1
	END
	
	SET @cont = 1
	
	WHILE (@cont <= @max)
	BEGIN
		
		IF @numero = 0 
		BEGIN
					
			SELECT 
				@registro = bit_registroPat
				, @inicial = bit_registroPat
				, @numero = numero
				, @anoini = ano
				FROM @tab 
			WHERE
				seq_novo = @cont
			
			IF @mensagem = '' 
			BEGIN 
				SET @mensagem = 'PATRIMÔNIO Nº: ' + @registro 
			END
			
		END
			
					
		SELECT 
			@fim = numero 	
			, @anofim = ano		     
		FROM @tab 
		WHERE
			seq_novo = @cont
		
		
		IF (@fim > @numero + 1) OR (@anoini <> @anofim)
		BEGIN 
			IF @inicial <> @registro
			BEGIN 
				SET @mensagem = @mensagem + ' a ' + @registro  + char(13) + char(10)
			END 
			ELSE
			BEGIN 
				SET @mensagem = @mensagem + char(13) + char(10)
			END		
							
			SELECT 
				@registro = bit_registroPat
				, @inicial = bit_registroPat
				,@numero = @fim				
				, @anoini = ano
			FROM @tab 
			WHERE
				seq_novo = @cont
			
			SET @mensagem = @mensagem + 'PATRIMÔNIO Nº: ' + @registro 
			
		END
		ELSE
		BEGIN
			SELECT 
				@registro = bit_registroPat 
				, @numero = numero
			FROM @tab 
			WHERE
				seq_novo = @cont
		END	
		
		SET @cont = @cont + 1
		
		IF @cont > @max AND @inicial <> @registro
		BEGIN 
			SET @mensagem = @mensagem + ' a ' + @registro
		END
		
	END			
	
	RETURN @mensagem

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_RegistroPat_ParaGRB_Impressao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:	Luana Piva
-- Create date: 10/04/2014
-- Description:	feita a função para retornar uma mensagem com o menor e maior registro patrimonial de acordo com os filtros de bem e GRB

-- Author:	Wellington Santana
-- Create date: 02/06/2014
-- Description:	Retirado os parametros,numGpbDestino, tpm_operacaoDestino, destino, pois não estava sendo utilizado
-- =============================================

CREATE FUNCTION [dbo].[FN_RegistroPat_ParaGRB_Impressao]
(
	@bem_id varchar(max),
	@bit_id varchar(max),
	@origem int
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @tab AS TABLE (seq BIGINT IDENTITY, bem_id BIGINT, bit_id INT, bit_registroPat VARCHAR(max), ano VARCHAR(4), numero BIGINT, seq_novo BIGINT, numero_novo BIGINT)
		;WITH 
		BemSelecionado AS
		(
			select 
				ROW_NUMBER() OVER(order by valor) as ID,
				(CONVERT(varchar(max),valor)) as bem_id
			from 
				dbo.FN_StringToArrayInt64(@bem_id, ',')
		)


		,BemItemSelecionado AS
		(
			select 
				ROW_NUMBER() OVER(order by valor) as ID,
				(CONVERT(varchar(max),valor)) as bit_id
			from 
				dbo.FN_StringToArrayInt64(@bit_id, ',')
		)


	INSERT INTO @tab
	        ( 
	          bem_id ,
	          bit_id ,
	          bit_registroPat ,
	          ano ,
	          numero ,
	          numero_novo
	        )
			(
		SELECT
			
			BemItem.bem_id ,
	        BemItem.bit_id ,
	        BemItem.bit_registroPat ,
	        SUBSTRING(bit_registroPat, 1, 4) AS ano,
	        CAST(SUBSTRING(bit_registroPat, 10, 7) AS BIGINT ) AS numero,
	        CAST(REPLACE(bit_registroPat,'.','') AS BIGINT ) AS numero_novo
		FROM 
			MovimentacaoBem WITH (NoLock)
			inner join BemItem with(nolock)
			on BemItem.bem_id = MovimentacaoBem.bem_id
			and BemItem.bit_id = MovimentacaoBem.bit_id			
		WHERE				
			MovimentacaoBem.mov_situacao = 5 
			--AND MovimentacaoBem.mov_GPB is null		
			AND MovimentacaoBem.uni_id  =(select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))
			AND  (MovimentacaoBem.mov_unidadeOrigem in( select uni_id from  dbo.FN_GetUnidadeEFilhas(@origem)) or MovimentacaoBem.mov_unidadeDestino = @origem)	
			and exists(select bem_id from BemSelecionado where bem_id = BemItem.bem_id) 
			and exists(select bit_id from BemItemSelecionado where bit_id = BemItem.bit_id)
		)
		
	DECLARE @mensagem VARCHAR(MAX) = '', @registro VARCHAR(max) = '', @inicial VARCHAR(max) = ''
	DECLARE @numero BIGINT = 0 , @fim BIGINT = 0
	DECLARE @anoini VARCHAR(4)='', @anofim VARCHAR(4)=''
	
	DECLARE @cont BIGINT = 1, @max BIGINT
	SET @max = (SELECT MAX(seq) FROM @tab)
	
	WHILE (@cont <= @max)
	BEGIN
		update @tab SET seq_novo = @cont where seq = (SELECT TOP 1 seq FROM @tab where numero_novo = (select min(numero_novo) from @tab where seq_novo IS NULL))
		set @cont = @cont +1
	END
	
	SET @cont = 1
	
	WHILE (@cont <= @max)
	BEGIN
		
		IF @numero = 0 
		BEGIN
					
			SELECT 
				@registro = bit_registroPat
				, @inicial = bit_registroPat
				, @numero = numero
				, @anoini = ano
				FROM @tab 
			WHERE
				seq_novo = @cont
			
			IF @mensagem = '' 
			BEGIN 
				SET @mensagem = 'PATRIMÔNIO Nº: ' + @registro 
			END
			
		END
			
					
		SELECT 
			@fim = numero 	
			, @anofim = ano		     
		FROM @tab 
		WHERE
			seq_novo = @cont
		
		
		IF (@fim > @numero + 1) OR (@anoini <> @anofim)
		BEGIN 
			IF @inicial <> @registro
			BEGIN 
				SET @mensagem = @mensagem + ' a ' + @registro  +  char(13) + char(10)
			END 
			ELSE
			BEGIN 
				SET @mensagem = @mensagem + char(13) + char(10)
			END		
							
			SELECT 
				@registro = bit_registroPat
				, @inicial = bit_registroPat
				,@numero = @fim				
				, @anoini = ano
			FROM @tab 
			WHERE
				seq_novo = @cont
			
			SET @mensagem = @mensagem + 'PATRIMÔNIO Nº: ' + @registro 
			
		END
		ELSE
		BEGIN
			SELECT 
				@registro = bit_registroPat 
				, @numero = numero
			FROM @tab 
			WHERE
				seq_novo = @cont
		END	
		
		SET @cont = @cont + 1
		
		IF @cont > @max AND @inicial <> @registro
		BEGIN 
			SET @mensagem = @mensagem + ' a ' + @registro
		END
		
	END		
	
	RETURN @mensagem

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_RegistroPat_ParaGRB_Reimpressao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:	Luana Piva
-- Create date: 10/04/2014
-- Description:	feita a função para retornar uma mensagem com o menor e maior registro patrimonial de acordo com os filtros de bem e GRB
-- =============================================

CREATE FUNCTION [dbo].[FN_RegistroPat_ParaGRB_Reimpressao]
(
	@bem_id varchar(max),
	@numGrbDestino VARCHAR(20),
	@bit_id varchar(max),
	@tpm_operacaoDestino varchar(20),
	@origem int,
	@destino int
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @tab AS TABLE (seq BIGINT IDENTITY, bem_id BIGINT, bit_id INT, bit_registroPat VARCHAR(max), ano VARCHAR(4), numero BIGINT, seq_novo BIGINT, numero_novo BIGINT)
		;WITH 
		BemSelecionado AS
		(
			select 
				ROW_NUMBER() OVER(order by valor) as ID,
				(CONVERT(varchar(max),valor)) as bem_id
			from 
				dbo.FN_StringToArrayInt64(@bem_id, ',')
		)


		,BemItemSelecionado AS
		(
			select 
				ROW_NUMBER() OVER(order by valor) as ID,
				(CONVERT(varchar(max),valor)) as bit_id
			from 
				dbo.FN_StringToArrayInt64(@bit_id, ',')
		)


	INSERT INTO @tab
	        ( 
	          bem_id ,
	          bit_id ,
	          bit_registroPat ,
	          ano ,
	          numero ,
	          numero_novo
	        )
			(
		SELECT
			
			BemItem.bem_id ,
	        BemItem.bit_id ,
	        BemItem.bit_registroPat ,
	        SUBSTRING(bit_registroPat, 1, 4) AS ano,
	        CAST(SUBSTRING(bit_registroPat, 10, 7) AS BIGINT ) AS numero,
	        CAST(REPLACE(bit_registroPat,'.','') AS BIGINT ) AS numero_novo
		FROM 
			MovimentacaoBem WITH (NoLock)
			inner join BemItem with(nolock)
			on BemItem.bem_id = MovimentacaoBem.bem_id
			and BemItem.bit_id = MovimentacaoBem.bit_id			
		WHERE				
			MovimentacaoBem.mov_situacao <> 3
			AND MovimentacaoBem.mov_GPB = @numGrbDestino		
			AND MovimentacaoBem.uni_id  =(select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))
			AND  (MovimentacaoBem.mov_unidadeOrigem in( select uni_id from  dbo.FN_GetUnidadeEFilhas(@origem)) or MovimentacaoBem.mov_unidadeDestino = @origem)	
			and exists(select bem_id from BemSelecionado where bem_id = BemItem.bem_id) 
			and exists(select bit_id from BemItemSelecionado where bit_id = BemItem.bit_id)
		)
		
	DECLARE @mensagem VARCHAR(MAX) = '', @registro VARCHAR(max) = '', @inicial VARCHAR(max) = ''
	DECLARE @numero BIGINT = 0 , @fim BIGINT = 0
	DECLARE @anoini VARCHAR(4)='', @anofim VARCHAR(4)=''
	
	DECLARE @cont BIGINT = 1, @max BIGINT
	SET @max = (SELECT MAX(seq) FROM @tab)
	
	WHILE (@cont <= @max)
	BEGIN
		update @tab SET seq_novo = @cont where seq = (SELECT TOP 1 seq FROM @tab where numero_novo = (select min(numero_novo) from @tab where seq_novo IS NULL))
		set @cont = @cont +1
	END
	
	SET @cont = 1
	
	WHILE (@cont <= @max)
	BEGIN
		
		IF @numero = 0 
		BEGIN
					
			SELECT 
				@registro = bit_registroPat
				, @inicial = bit_registroPat
				, @numero = numero
				, @anoini = ano
				FROM @tab 
			WHERE
				seq_novo = @cont
			
			IF @mensagem = '' 
			BEGIN 
				SET @mensagem = 'PATRIMÔNIO Nº: ' + @registro 
			END
			
		END
			
					
		SELECT 
			@fim = numero 	
			, @anofim = ano		     
		FROM @tab 
		WHERE
			seq_novo = @cont
		
		
		IF (@fim > @numero + 1) OR (@anoini <> @anofim)
		BEGIN 
			IF @inicial <> @registro
			BEGIN 
				SET @mensagem = @mensagem + ' a ' + @registro  +  char(13) + char(10)
			END 
			ELSE
			BEGIN 
				SET @mensagem = @mensagem + char(13) + char(10)
			END		
							
			SELECT 
				@registro = bit_registroPat
				, @inicial = bit_registroPat
				,@numero = @fim			
				, @anoini = ano
			FROM @tab 
			WHERE
				seq_novo = @cont
			
			SET @mensagem = @mensagem + 'PATRIMÔNIO Nº: ' + @registro 
			
		END
		ELSE
		BEGIN
			SELECT 
				@registro = bit_registroPat 
				, @numero = numero
			FROM @tab 
			WHERE
				seq_novo = @cont
		END	
		
		SET @cont = @cont + 1
		
		IF @cont > @max AND @inicial <> @registro
		BEGIN 
			SET @mensagem = @mensagem + ' a ' + @registro
		END
		
	END			
	
	RETURN @mensagem

END

GO
/****** Object:  UserDefinedFunction [dbo].[fn_removeControlCharacters]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create function [dbo].[fn_removeControlCharacters] (@strValue nvarchar(4000))
returns nvarchar(4000)
as
begin
declare @rtStrValue nvarchar(4000)

SELECT @rtStrValue = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
                        (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
                                (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
                                        (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
                                                (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( 
                                                                                                                @strValue
                                                 ,NCHAR(1),N'?'),NCHAR(2),N'?'),NCHAR(3),N'?'),NCHAR(4),N'?'),NCHAR(5),N'?'),NCHAR(6),N'?')
                                         ,NCHAR(7),N'?'),NCHAR(8),N'?'),NCHAR(11),N'?'),NCHAR(12),N'?'),NCHAR(14),N'?'),NCHAR(15),N'?')
                                 ,NCHAR(16),N'?'),NCHAR(17),N'?'),NCHAR(18),N'?'),NCHAR(19),N'?'),NCHAR(20),N'?'),NCHAR(21),N'?')
                         ,NCHAR(22),N'?'),NCHAR(23),N'?'),NCHAR(24),N'?'),NCHAR(25),N'?'),NCHAR(26),N'?'),NCHAR(27),N'?')
                     ,NCHAR(28),N'?'),NCHAR(29),N'?'),NCHAR(30),N'?'),NCHAR(31),N'?');

return @rtStrValue 
end

GO
/****** Object:  UserDefinedFunction [dbo].[FN_RemoverAcentuacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ======================================================
-- Author:		Aline Dornelas
-- Create date: 01/10/2010
-- Description:	Função que remove acentuação
-- ======================================================
CREATE FUNCTION [dbo].[FN_RemoverAcentuacao](@texto VARCHAR(200))
RETURNS VARCHAR(200)

AS BEGIN

DECLARE @result VARCHAR(200)
SET @result = @texto COLLATE SQL_Latin1_General_CP1251_CI_AS

SET @result = LTRIM(@result)
SET @result = RTRIM(@result)

RETURN (@result)

END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_Split]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Split]
(
    @string VARCHAR(MAX)
)
RETURNS @output TABLE
(
	Id		SMALLINT IDENTITY(1, 1),
	[Value] VARCHAR(MAX)
)
BEGIN
    DECLARE @start INT, @end INT
    SELECT @start = 1, @end = 77
    WHILE @start < LEN(@string) + 1 BEGIN
        IF @end = 0
            SET @end = LEN(@string) + 1
        INSERT INTO @output ([Value])
        VALUES( dbo.fn_removeControlCharacters(SUBSTRING(@string, @start, 77)))
        SET @start = @end + 1
        SET @end = @start + 77
    END
    RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_Split_cod_siafem]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_Split_cod_siafem](
    @string VARCHAR(MAX)
  , @delimitador VARCHAR(5) 
) RETURNS  VARCHAR (1000)

BEGIN
DECLARE @parte VARCHAR(8000), @retorno varchar(30)

if @string is null
	begin
	 set @string = '0/0'
	end
		SELECT
		  @parte=RTRIM(LTRIM(
				  SUBSTRING(@string, 1,
				CHARINDEX(@delimitador, @string, 0)-1))) 

				set @retorno =  @parte
				return @retorno
	
END

GO
/****** Object:  UserDefinedFunction [dbo].[FN_StringToArrayInt32]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [dbo].[FN_StringToArrayInt32](@str [nvarchar](4000), @delimiter [nvarchar](4000))
RETURNS  TABLE (
	[valor] [int] NULL
) WITH EXECUTE AS CALLER
AS 
EXTERNAL NAME [MSTech.ConPat.Database.Util].[StringToArray].[StringToArrayInt32]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_StringToArrayInt64]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [dbo].[FN_StringToArrayInt64](@array [nvarchar](max), @delim [nchar](1))
RETURNS  TABLE (
	[valor] [bigint] NULL
) WITH EXECUTE AS CALLER
AS 
EXTERNAL NAME [MSTech.ConPat.Database.Util].[StringToArray].[StringToArrayInt64]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_StringToArrayStr]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [dbo].[FN_StringToArrayStr](@str [nvarchar](4000), @delimiter [nvarchar](4000))
RETURNS  TABLE (
	[valor] [nvarchar](max) NULL
) WITH EXECUTE AS CALLER
AS 
EXTERNAL NAME [MSTech.ConPat.Database.Util].[StringToArray].[StringToArrayStr]
GO
/****** Object:  UserDefinedFunction [dbo].[fnRetornaUltimoPeriodoAberto]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[fnRetornaUltimoPeriodoAberto](
	@uni_id int
)returns int
as
begin

declare @ultimoperiodo int
set @ultimoperiodo = (
			SELECT top 1
				
				per = per_ano + per_mes

			FROM 
				PeriodoUnidade WITH(NOLOCK) 

			where
				uni_id = @uni_id
			and	peu_situacao = 1
			
			order by
				per_ano
				,per_mes
			)
			
	RETURN(@ultimoperiodo);
end;


GO
/****** Object:  UserDefinedFunction [dbo].[fnSiafemConsolidadoObservacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnSiafemConsolidadoObservacao](
     @entrada			varchar(max)
	,@mov_dataoriginal  date
	,@bem_id			bigint
	,@tpm_id			int
	,@grp_id			int
	,@cco_codigoDebito	varchar(20)
	,@cco_codigoCredito varchar(20)
	,@mov_GPB varchar(20)	

)RETURNS varchar(1000)

BEGIN

	DECLARE
		 @totalLinhas		int
		,@texto				varchar(max)
		,@vlrOriginal		varchar(max)
		,@result			varchar(max)
		,@textoOriginal		varchar(max)
		,@textoSubstituido	varchar(max)

		select @totalLinhas =	(
									select
											count(1)
									from
											MovimentacaoBem with(nolock) 
									where 
											mov_data				= @mov_dataoriginal  
											AND bem_id				= @bem_id 
											AND tpm_id				= @tpm_id 
											AND grp_id				= @grp_id 
											AND cco_codigoDebito	= @cco_codigoDebito 
											AND cco_codigoCredito	= @cco_codigoCredito
											AND mov_situacao		= 1
											and mov_GPB				= @mov_GPB 						
									)

		select @texto = replace(@entrada,'QTD:','|');
		select @texto = replace(@texto,'DESC','|');

		select @vlrOriginal =	(
									select 
											item
									from( 
											select  
												 RowNumber = ROW_NUMBER() OVER (ORDER BY item) 
												,item
											FROM 
												dbo.fnSplit(@texto, '|'
										) 
									)as result
									where 
										result.RowNumber = 2
								)
	
	
	
		select @textoOriginal		=	(select concat('QDE: ',@vlrOriginal))
		select @textoSubstituido	=	(select concat('QDE: ',@totalLinhas))

		select @texto = replace(@texto,'|:','DESC:');
		select @texto = replace(@texto,'|','QDE:');

		select @texto = replace(@texto,@textoOriginal,@textoSubstituido);
	
		if (@texto is not null)
			select @result = (SELECT @texto)
		
		if (@texto is null)
			select @result = (SELECT @entrada)
	
		return(@result)	

end

GO
/****** Object:  UserDefinedFunction [dbo].[fnSplit]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnSplit](
    @frase VARCHAR(max)
  , @delimitador VARCHAR(max) = ','
) RETURNS @result TABLE (item VARCHAR(8000)) 

BEGIN
DECLARE @parte VARCHAR(8000)
WHILE CHARINDEX(@delimitador,@frase,0) <> 0
BEGIN
SELECT
  @parte=RTRIM(LTRIM(
          SUBSTRING(@frase,1,
        CHARINDEX(@delimitador,@frase,0)-1))),
  @frase=RTRIM(LTRIM(SUBSTRING(@frase,
          CHARINDEX(@delimitador,@frase,0)
        + LEN(@delimitador), LEN(@frase))))
IF LEN(@parte) > 0
  INSERT INTO @result SELECT @parte
END 

IF LEN(@frase) > 0
INSERT INTO @result SELECT @frase
RETURN
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnSplit_COD_SIAFEM]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create FUNCTION [dbo].[fnSplit_COD_SIAFEM](
    @frase VARCHAR(max)
  , @delimitador VARCHAR(5) 
) RETURNS  VARCHAR (1000)

BEGIN
DECLARE @parte VARCHAR(8000), @retorno varchar(30)

SELECT
  @parte=RTRIM(LTRIM(
          SUBSTRING(@frase,1,
        CHARINDEX(@delimitador,@frase,0)-1))) 

		set @retorno =  @parte
		return @retorno
END

GO
/****** Object:  Table [dbo].[ApoliceSeguro]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ApoliceSeguro](
	[aps_id] [bigint] IDENTITY(1,1) NOT NULL,
	[seg_id] [int] NOT NULL,
	[uni_id] [int] NOT NULL,
	[aps_apolice] [varchar](50) NOT NULL,
	[aps_descricao] [varchar](max) NOT NULL,
	[aps_valorApolice] [money] NULL,
	[aps_valorSeguro] [money] NULL,
	[aps_vigenciaInicio] [date] NULL,
	[aps_vigenciaFim] [date] NOT NULL,
	[aps_situacao] [tinyint] NOT NULL,
	[aps_dataCriacao] [datetime] NOT NULL,
	[aps_dataAlteracao] [datetime] NOT NULL,
 CONSTRAINT [PK_ApoliceSeguro] PRIMARY KEY CLUSTERED 
(
	[aps_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Arquivo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Arquivo](
	[arq_id] [bigint] IDENTITY(1,1) NOT NULL,
	[arq_nome] [varchar](100) NOT NULL,
	[arq_typeMime] [varchar](200) NULL,
	[arq_tamanho] [int] NULL,
 CONSTRAINT [PK_Arquivo] PRIMARY KEY CLUSTERED 
(
	[arq_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Aviso]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Aviso](
	[avs_id] [int] IDENTITY(1,1) NOT NULL,
	[avs_titulo] [varchar](100) NULL,
	[avs_texto] [varchar](max) NOT NULL,
	[avs_dataInicial] [datetime] NOT NULL,
	[avs_dataFinal] [datetime] NOT NULL,
	[usu_id] [uniqueidentifier] NULL,
	[avs_situacao] [tinyint] NOT NULL,
	[avs_dataCriacao] [datetime] NOT NULL,
	[avs_dataAlteracao] [datetime] NOT NULL,
 CONSTRAINT [PK_Aviso] PRIMARY KEY CLUSTERED 
(
	[avs_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[AvisoDestinatario]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AvisoDestinatario](
	[avs_id] [int] NOT NULL,
	[avd_id] [int] IDENTITY(1,1) NOT NULL,
	[uni_id] [int] NULL,
	[avd_incluiDependente] [bit] NULL,
	[avd_tipoUnidade] [uniqueidentifier] NULL,
	[avd_situacao] [tinyint] NOT NULL,
	[avd_dataCriacao] [datetime] NOT NULL,
	[avd_dataAlteracao] [datetime] NOT NULL,
 CONSTRAINT [PK_AvisoDestinatario] PRIMARY KEY CLUSTERED 
(
	[avs_id] ASC,
	[avd_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[BEM_ID_valorTotal]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BEM_ID_valorTotal](
	[BEM_ID] [bigint] NULL,
	[VALOR TOTAL REVISADO] [money] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[BEM_ID_volta12Reais]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BEM_ID_volta12Reais](
	[BEM_ID] [bigint] NULL,
	[VALOR_TOTAL] [money] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[BemArquivo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BemArquivo](
	[bem_id] [bigint] NOT NULL,
	[arq_id] [bigint] NOT NULL,
	[bea_legenda] [varchar](100) NULL,
	[bea_observacao] [varchar](2000) NULL,
	[bea_tipo] [tinyint] NOT NULL CONSTRAINT [DF_BemArquivo_bea_tipo]  DEFAULT ((1)),
	[bea_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_BemArquivo_bea_dataCriacao]  DEFAULT (getdate()),
	[bea_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_BemArquivo_bea_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_BemArquivo] PRIMARY KEY CLUSTERED 
(
	[bem_id] ASC,
	[arq_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BemItem]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BemItem](
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] IDENTITY(1,1) NOT NULL,
	[stc_id] [int] NOT NULL,
	[loc_id] [int] NOT NULL,
	[dep_id] [int] NULL,
	[aps_id] [bigint] NULL,
	[fat_id] [int] NULL,
	[bit_referencia] [varchar](250) NULL,
	[bit_uniGestora] [int] NOT NULL,
	[bit_uniGuarda] [int] NOT NULL,
	[bit_registroPat] [varchar](20) NULL,
	[bit_GPB] [varchar](20) NULL,
	[bit_GRB] [varchar](20) NULL,
	[bit_valorOrigem] [money] NOT NULL,
	[bit_valorLiquido] [money] NOT NULL,
	[bit_vidaUtil] [int] NULL,
	[bit_cotas] [int] NULL,
	[bit_dataDepInicio] [date] NULL,
	[bit_dataDepFim] [date] NULL,
	[bit_doctoBaixa] [varchar](20) NULL,
	[bit_dataBaixa] [date] NULL,
	[bit_dataIncorporacao] [date] NULL,
	[bit_contado] [bit] NOT NULL CONSTRAINT [DF_BemItem_bit_contado]  DEFAULT ((0)),
	[bit_dataInventario] [date] NULL,
	[bit_status] [tinyint] NOT NULL CONSTRAINT [DF_BemItem_bit_status]  DEFAULT ((1)),
	[bit_dataAlteracaoStatus] [datetime] NULL,
	[bit_observacao] [varchar](max) NULL,
	[bit_dataFimGarantia] [datetime] NULL,
	[bit_situacao] [tinyint] NOT NULL CONSTRAINT [DF_BemItem_bit_situacao]  DEFAULT ((1)),
	[bit_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_BemItem_bit_dataCriacao]  DEFAULT (getdate()),
	[bit_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_BemItem_bit_dataAlteracao]  DEFAULT (getdate()),
	[bit_registroPatAnterior] [varchar](20) NULL,
	[bit_nroSerie] [varchar](30) NULL,
	[bit_marca] [varchar](30) NULL,
	[bit_modelo] [varchar](30) NULL,
	[bit_tipo] [varchar](30) NULL,
	[bit_placa] [varchar](10) NULL,
	[bit_chassi] [varchar](50) NULL,
	[bit_anoFabricacao] [varchar](4) NULL,
	[bit_quilometragem] [int] NULL,
	[bit_potencia] [varchar](10) NULL,
	[bit_unidadePotencia] [varchar](10) NULL,
	[bit_cilindros] [varchar](10) NULL,
	[sp_id] [varchar](5) NULL,
	[tb_id] [varchar](5) NULL,
	[bit_codProgFinanc] [varchar](100) NULL,
	[bit_matriculaPessoa] [varchar](100) NULL,
	[bit_codEspecie] [varchar](50) NULL,
	[bem_status] [tinyint] NULL,
	[bit_obsCancelamento] [varchar](100) NULL,
	[moc_id] [tinyint] NULL,
	[bit_composicao] [int] NULL,
	[bit_peso] [decimal](18, 0) NULL,
 CONSTRAINT [PK_BemItem] PRIMARY KEY CLUSTERED 
(
	[bem_id] ASC,
	[bit_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BemItem_bkp]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BemItem_bkp](
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[stc_id] [int] NOT NULL,
	[loc_id] [int] NOT NULL,
	[dep_id] [int] NULL,
	[aps_id] [bigint] NULL,
	[fat_id] [int] NULL,
	[bit_referencia] [varchar](250) NULL,
	[bit_uniGestora] [int] NOT NULL,
	[bit_uniGuarda] [int] NOT NULL,
	[bit_registroPat] [varchar](20) NULL,
	[bit_GPB] [varchar](20) NULL,
	[bit_GRB] [varchar](20) NULL,
	[bit_valorOrigem] [money] NOT NULL,
	[bit_valorLiquido] [money] NOT NULL,
	[bit_vidaUtil] [int] NULL,
	[bit_cotas] [int] NULL,
	[bit_dataDepInicio] [date] NULL,
	[bit_dataDepFim] [date] NULL,
	[bit_doctoBaixa] [varchar](20) NULL,
	[bit_dataBaixa] [date] NULL,
	[bit_dataIncorporacao] [date] NULL,
	[bit_contado] [bit] NOT NULL,
	[bit_dataInventario] [date] NULL,
	[bit_status] [tinyint] NOT NULL,
	[bit_dataAlteracaoStatus] [datetime] NULL,
	[bit_observacao] [varchar](max) NULL,
	[bit_dataFimGarantia] [datetime] NULL,
	[bit_situacao] [tinyint] NOT NULL,
	[bit_dataCriacao] [datetime] NOT NULL,
	[bit_dataAlteracao] [datetime] NOT NULL,
	[bit_registroPatAnterior] [varchar](20) NULL,
	[bit_nroSerie] [varchar](30) NULL,
	[bit_marca] [varchar](30) NULL,
	[bit_modelo] [varchar](30) NULL,
	[bit_tipo] [varchar](30) NULL,
	[bit_placa] [varchar](10) NULL,
	[bit_chassi] [varchar](50) NULL,
	[bit_anoFabricacao] [varchar](4) NULL,
	[bit_quilometragem] [int] NULL,
	[bit_potencia] [varchar](10) NULL,
	[bit_unidadePotencia] [varchar](10) NULL,
	[bit_cilindros] [varchar](10) NULL,
	[sp_id] [varchar](5) NULL,
	[tb_id] [varchar](5) NULL,
	[bit_codProgFinanc] [varchar](100) NULL,
	[bit_matriculaPessoa] [varchar](100) NULL,
	[bit_codEspecie] [varchar](50) NULL,
	[bem_status] [tinyint] NULL,
	[bit_obsCancelamento] [varchar](100) NULL,
	[moc_id] [tinyint] NULL,
	[bit_composicao] [int] NULL,
	[bit_peso] [decimal](18, 0) NULL,
 CONSTRAINT [PK_BemItem_bkp] PRIMARY KEY CLUSTERED 
(
	[bem_id] ASC,
	[bit_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BemItemArquivo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BemItemArquivo](
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[arq_id] [bigint] NOT NULL,
	[bia_legenda] [varchar](100) NULL,
	[bia_observacao] [varchar](2000) NULL,
	[bia_tipo] [tinyint] NOT NULL CONSTRAINT [DF_BemItemArquivo_bia_tipo]  DEFAULT ((1)),
	[bia_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_BemItemArquivo_bia_dataCriacao]  DEFAULT (getdate()),
	[bia_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_BemItemArquivo_bia_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_BemItemArquivo] PRIMARY KEY CLUSTERED 
(
	[bem_id] ASC,
	[bit_id] ASC,
	[arq_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BemItemComposto]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BemItemComposto](
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[bic_id] [int] NOT NULL,
	[bem_idParent] [bigint] NOT NULL,
	[bit_idParent] [int] NOT NULL,
	[bic_descricao] [varchar](1000) NULL,
	[bic_dataCriacao] [datetime] NOT NULL,
	[bic_dataAlteracao] [datetime] NOT NULL,
 CONSTRAINT [PK_BemItemComposto] PRIMARY KEY CLUSTERED 
(
	[bem_id] ASC,
	[bit_id] ASC,
	[bic_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BemItemDocumento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BemItemDocumento](
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[bid_id] [bigint] IDENTITY(1,1) NOT NULL,
	[bid_tipoDoc] [int] NOT NULL,
	[bid_numeroDoc] [varchar](50) NOT NULL,
	[bid_porcentagem] [decimal](5, 2) NOT NULL,
	[bid_classificacao] [nvarchar](50) NULL,
	[bid_observacao] [varchar](200) NULL,
	[bid_dataAlteracao] [datetime] NOT NULL,
	[bid_dataCriacao] [datetime] NOT NULL,
	[bid_serie] [varchar](10) NULL,
	[bid_dataEmissaoDoc] [date] NULL,
 CONSTRAINT [PK_BemItemDocumento] PRIMARY KEY CLUSTERED 
(
	[bem_id] ASC,
	[bit_id] ASC,
	[bid_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BemItemWfStatus]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BemItemWfStatus](
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[biw_id] [int] NOT NULL,
	[bws_id] [int] IDENTITY(1,1) NOT NULL,
	[wrk_id] [int] NOT NULL,
	[stp_id] [int] NOT NULL,
	[usu_id] [uniqueidentifier] NULL,
	[bws_observacao] [varchar](1000) NULL,
	[bws_situacao] [tinyint] NOT NULL CONSTRAINT [DF_BemItemWfStatus_bws_situacao]  DEFAULT ((1)),
	[bws_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_BemItemWfStatus_bws_dataCriacao]  DEFAULT (getdate()),
	[bws_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_BemItemWfStatus_bws_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_BemItemWfStatus] PRIMARY KEY CLUSTERED 
(
	[bem_id] ASC,
	[bit_id] ASC,
	[biw_id] ASC,
	[bws_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BemItemWorkflow]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BemItemWorkflow](
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[biw_id] [int] IDENTITY(1,1) NOT NULL,
	[wrk_id] [int] NOT NULL,
	[biw_situacao] [tinyint] NOT NULL CONSTRAINT [DF_BemItemWorkflow_biw_situacao]  DEFAULT ((1)),
	[biw_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_BemItemWorkflow_biw_dataCriacao]  DEFAULT (getdate()),
	[biw_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_BemItemWorkflow_biw_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_BemItemWorkflow] PRIMARY KEY CLUSTERED 
(
	[bem_id] ASC,
	[bit_id] ASC,
	[biw_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[BemPatrimonial]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BemPatrimonial](
	[bem_id] [bigint] IDENTITY(1,1) NOT NULL,
	[grp_id] [int] NOT NULL,
	[for_id] [int] NOT NULL,
	[bem_tipo] [tinyint] NOT NULL,
	[bem_legado] [bit] NOT NULL CONSTRAINT [DF_BemPatrimonial_bem_legado]  DEFAULT ((0)),
	[bem_cadmat] [varchar](40) NOT NULL,
	[bem_descricao] [varchar](1000) NOT NULL,
	[bem_ne] [char](11) NULL,
	[bem_processo] [varchar](50) NULL,
	[bem_contrProcessual] [varchar](50) NULL,
	[bem_doctoCompra] [varchar](20) NULL,
	[bem_qtdeInicial] [int] NOT NULL,
	[bem_dataEntrada] [date] NOT NULL,
	[bem_valorOrigem] [money] NOT NULL,
	[bem_origem] [tinyint] NOT NULL CONSTRAINT [DF_BemPatrimonial_bem_origem]  DEFAULT ((1)),
	[bem_observacao] [varchar](max) NULL,
	[bem_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_BemPatrimonial_bem_dataCriacao]  DEFAULT (getdate()),
	[bem_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_BemPatrimonial_bem_dataAlteracao]  DEFAULT (getdate()),
	[bem_natureza] [int] NULL,
	[calc_bem_dataEntrada]  AS (CONVERT([int],CONVERT([varchar](6),[bem_dataEntrada],(112)))) PERSISTED,
 CONSTRAINT [PK_BemPatrimonial] PRIMARY KEY CLUSTERED 
(
	[bem_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BemPatrimonialLegado]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BemPatrimonialLegado](
	[bpl_registroPatrimonial] [varchar](100) NULL,
	[bpl_cadmat] [varchar](40) NULL,
	[bpl_material] [varchar](500) NULL,
	[bpl_numeroDoc1] [varchar](50) NULL,
	[bpl_dataCriacaoDoc1] [datetime] NULL,
	[bpl_numeroDoc2] [varchar](100) NULL,
	[bpl_dataCriacaoDoc2] [datetime] NULL,
	[bpl_numeroDoc3] [varchar](100) NULL,
	[bpl_dataCriacaoDoc3] [datetime] NULL,
	[bpl_numeroDoc4] [varchar](100) NULL,
	[bpl_dataCriacaoDoc4] [datetime] NULL,
	[bpl_numeroDoc5] [varchar](100) NULL,
	[bpl_dataCriacaoDoc5] [datetime] NULL,
	[bpl_numeroDoc6] [varchar](100) NULL,
	[bpl_dataCriacaoDoc6] [datetime] NULL,
	[bpl_cnpjFornecedor] [varchar](14) NULL,
	[bpl_razaoSocialFornecedor] [varchar](200) NULL,
	[bpl_valorUnitario] [money] NULL,
	[bpl_valorTotal] [money] NULL,
	[bpl_statusConservacao] [varchar](50) NULL,
	[bpl_statusUtilizacao] [varchar](10) NULL,
	[bpl_dependencia] [varchar](100) NULL,
	[bpl_observacao] [varchar](max) NULL,
	[bpl_situacao] [int] NULL,
	[bpl_dataImportacao] [datetime] NULL,
	[bpl_unidade] [int] NULL,
	[bpl_grupoBem] [varchar](100) NULL,
	[bpl_id] [int] IDENTITY(1,1) NOT NULL,
	[bpl_dataTransferencia] [date] NULL,
	[bpl_registroPatAnterior] [varchar](100) NULL,
	[bpl_tipoBem] [varchar](5) NULL,
	[bpl_tipoBemObservacao] [varchar](max) NULL,
	[bpl_serieDocumentoCompra] [varchar](100) NULL,
	[bpl_marca] [varchar](max) NULL,
	[bpl_modelo] [varchar](max) NULL,
	[bpl_codFornecedor] [varchar](100) NULL,
	[bpl_situacaoPatrimonial] [varchar](5) NULL,
	[bpl_codProgFinanc] [varchar](100) NULL,
	[bpl_matriculaPessoa] [varchar](100) NULL,
	[bpl_codEspecie] [varchar](50) NULL,
	[bpl_nroSerie] [varchar](50) NULL,
	[bpl_nro_placa_veic] [varchar](250) NULL,
	[bpl_nro_chassi_veic] [varchar](250) NULL,
	[bpl_tipo_veic] [varchar](250) NULL,
	[bpl_marca_veic] [varchar](250) NULL,
	[bpl_modelo_veic] [varchar](250) NULL,
	[bpl_potencia_veic] [varchar](250) NULL,
	[bpl_potencia_unidade] [varchar](250) NULL,
	[bpl_cilindro_veic] [varchar](250) NULL,
	[bpl_ano_fabr_veic] [varchar](250) NULL,
	[bpl_quilometragem_veic] [varchar](250) NULL,
	[bpl_tipo] [tinyint] NULL,
	[bpl_quantidade] [int] NULL,
	[bpl_log] [varchar](max) NULL,
 CONSTRAINT [PK_BemPatrimonialLegado_1] PRIMARY KEY CLUSTERED 
(
	[bpl_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BemPatrimonialLegado_Temp_CodigoEspecie]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BemPatrimonialLegado_Temp_CodigoEspecie](
	[tce_codigo] [varchar](50) NOT NULL,
	[tce_descricao] [varchar](max) NOT NULL,
	[tce_grupoBem] [varchar](max) NOT NULL,
	[tce_finalAq] [varchar](max) NOT NULL,
	[tce_finalidade] [varchar](max) NOT NULL,
 CONSTRAINT [PK_BemPatrimonialLegado_Temp_CodigoEspecie] PRIMARY KEY CLUSTERED 
(
	[tce_codigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[bens_bit_12]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[bens_bit_12](
	[VALOR] [money] NULL,
	[bem_id] [bigint] NULL,
	[bit_id] [bigint] NULL,
	[bit_uniGestora] [nvarchar](255) NULL,
	[bit_uniGuarda] [nvarchar](255) NULL,
	[bit_registroPat] [nvarchar](255) NULL,
	[bit_valorOrigem] [nvarchar](255) NULL,
	[bit_valorLiquido] [nvarchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[BENS2311]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BENS2311](
	[VALOR] [money] NULL,
	[bem_id] [bigint] NULL,
	[bit_id] [bigint] NULL,
	[bit_uniGestora] [nvarchar](255) NULL,
	[bit_uniGuarda] [nvarchar](255) NULL,
	[bit_valorOrigem] [nvarchar](255) NULL,
	[bit_valorLiquido] [nvarchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[BensPatrimonialImportacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[BensPatrimonialImportacao](
	[bpi_cadmat] [varchar](40) NULL,
	[bpi_origem] [tinyint] NOT NULL,
	[bpi_processo] [varchar](50) NOT NULL,
	[bpi_item] [varchar](250) NOT NULL,
	[bpi_qtde] [int] NOT NULL,
	[bpi_valorUnitario] [money] NOT NULL,
	[bpi_valorTotal] [money] NULL,
	[bpi_ne] [char](11) NULL,
	[bpi_nePorcent] [decimal](5, 2) NULL,
	[bpi_documento] [varchar](20) NULL,
	[bpi_evento] [varchar](20) NULL,
	[bpi_naturazaDesp] [varchar](20) NULL,
	[bpi_dataEntrega] [date] NULL,
	[bpi_uo] [varchar](60) NOT NULL,
	[bpi_uge] [varchar](60) NOT NULL,
	[bpi_ue] [varchar](60) NULL,
	[bpi_cnpjCpfFornecedor] [varchar](14) NOT NULL,
	[bpi_fornecedor] [varchar](100) NULL,
	[bpi_codFornecedor] [varchar](20) NULL,
	[bpi_insEstFornecedor] [varchar](20) NULL,
	[bpi_endFornecedor] [varchar](200) NULL,
	[bpi_bairroFornecedor] [varchar](100) NULL,
	[bpi_numFornecedor] [varchar](10) NULL,
	[bpi_compFornecedor] [varchar](100) NULL,
	[bpi_cepFornecedor] [char](8) NULL,
	[bpi_codCidadeFornecedor] [varchar](5) NULL,
	[bpi_cidadeFornecedor] [varchar](200) NULL,
	[bpi_ufFornecedor] [char](2) NULL,
	[bpi_contatoFornecedor] [varchar](100) NULL,
	[bpi_fone1Fornecedor] [varchar](20) NULL,
	[bpi_fone2Fornecedor] [varchar](20) NULL,
	[bpi_emailFornecedor] [varchar](200) NULL,
	[bpi_situacao] [tinyint] NOT NULL,
	[bpi_dataImportacao] [date] NULL,
	[bpi_observacao] [varchar](max) NULL,
	[bem_id] [bigint] NULL,
	[bpi_id] [bigint] IDENTITY(1,1) NOT NULL,
	[data_importacaofde] [date] NULL,
	[bpi_cod_fde] [bigint] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BensPatrimonialImportacao_bkp]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[BensPatrimonialImportacao_bkp](
	[bpi_cadmat] [varchar](40) NULL,
	[bpi_origem] [tinyint] NOT NULL,
	[bpi_processo] [varchar](50) NOT NULL,
	[bpi_item] [varchar](250) NOT NULL,
	[bpi_qtde] [int] NOT NULL,
	[bpi_valorUnitario] [money] NOT NULL,
	[bpi_valorTotal] [money] NULL,
	[bpi_ne] [char](11) NULL,
	[bpi_nePorcent] [decimal](5, 2) NULL,
	[bpi_documento] [varchar](20) NULL,
	[bpi_evento] [varchar](20) NULL,
	[bpi_naturazaDesp] [varchar](20) NULL,
	[bpi_dataEntrega] [date] NULL,
	[bpi_uo] [varchar](60) NOT NULL,
	[bpi_uge] [varchar](60) NOT NULL,
	[bpi_ue] [varchar](60) NULL,
	[bpi_cnpjCpfFornecedor] [varchar](14) NOT NULL,
	[bpi_fornecedor] [varchar](100) NULL,
	[bpi_codFornecedor] [varchar](20) NULL,
	[bpi_insEstFornecedor] [varchar](20) NULL,
	[bpi_endFornecedor] [varchar](200) NULL,
	[bpi_bairroFornecedor] [varchar](100) NULL,
	[bpi_numFornecedor] [varchar](10) NULL,
	[bpi_compFornecedor] [varchar](100) NULL,
	[bpi_cepFornecedor] [char](8) NULL,
	[bpi_codCidadeFornecedor] [varchar](5) NULL,
	[bpi_cidadeFornecedor] [varchar](200) NULL,
	[bpi_ufFornecedor] [char](2) NULL,
	[bpi_contatoFornecedor] [varchar](100) NULL,
	[bpi_fone1Fornecedor] [varchar](20) NULL,
	[bpi_fone2Fornecedor] [varchar](20) NULL,
	[bpi_emailFornecedor] [varchar](200) NULL,
	[bpi_situacao] [tinyint] NOT NULL,
	[bpi_dataImportacao] [date] NULL,
	[bpi_observacao] [varchar](max) NULL,
	[bem_id] [bigint] NULL,
	[bpi_id] [bigint] IDENTITY(1,1) NOT NULL,
	[data_importacaofde] [date] NULL,
	[bpi_cod_fde] [bigint] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BensPatrimonialImportacao_Exclusivos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BensPatrimonialImportacao_Exclusivos](
	[bpi_cod_fde] [bigint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[bensUmReal]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[bensUmReal](
	[bit_uniGestora] [float] NULL,
	[bit_uniGestora_nome] [nvarchar](255) NULL,
	[UGE] [nvarchar](255) NULL,
	[VALOR] [money] NULL,
	[bem_id] [int] NULL,
	[bit_id] [int] NULL,
	[grp_id] [float] NULL,
	[for_id] [float] NULL,
	[Fornecedor_NOME] [nvarchar](255) NULL,
	[bem_legado] [float] NULL,
	[bem_cadmat] [float] NULL,
	[stc_id] [float] NULL,
	[loc_id] [float] NULL,
	[dep_id] [nvarchar](255) NULL,
	[aps_id] [nvarchar](255) NULL,
	[fat_id] [nvarchar](255) NULL,
	[bit_referencia] [nvarchar](255) NULL,
	[bit_uniGuarda] [float] NULL,
	[bit_uniGuarda_nome] [nvarchar](255) NULL,
	[bit_registroPat] [float] NULL,
	[bit_GPB] [nvarchar](255) NULL,
	[bit_GRB] [nvarchar](255) NULL,
	[bit_valorOrigem] [money] NULL,
	[bit_valorLiquido] [money] NULL,
	[bit_doctoBaixa] [nvarchar](255) NULL,
	[bit_dataBaixa] [nvarchar](255) NULL,
	[bit_dataIncorporacao] [datetime] NULL,
	[bit_status] [float] NULL,
	[bit_situacao] [float] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[BensValorTotal]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BensValorTotal](
	[bem_id] [bigint] NULL,
	[Contagem] [int] NULL,
	[valor_total] [money] NULL,
	[Media_valor] [money] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[BIT_VALOR12]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BIT_VALOR12](
	[bem_descricao] [nvarchar](255) NOT NULL,
	[VALOR] [money] NULL,
	[bem_id] [bigint] NULL,
	[bit_id] [bigint] NULL,
	[bem_observacao] [nvarchar](255) NOT NULL,
	[grp_id] [nvarchar](255) NOT NULL,
	[for_id] [nvarchar](255) NOT NULL,
	[Fornecedor_NOME] [nvarchar](255) NOT NULL,
	[bem_legado] [nvarchar](255) NOT NULL,
	[bem_cadmat] [nvarchar](255) NOT NULL,
	[stc_id] [nvarchar](255) NOT NULL,
	[loc_id] [nvarchar](255) NOT NULL,
	[dep_id] [nvarchar](255) NOT NULL,
	[aps_id] [nvarchar](255) NOT NULL,
	[fat_id] [nvarchar](255) NOT NULL,
	[bit_referencia] [nvarchar](255) NOT NULL,
	[bit_uniGestora] [nvarchar](255) NOT NULL,
	[bit_uniGestora_nome] [nvarchar](255) NOT NULL,
	[bit_uniGuarda] [nvarchar](255) NOT NULL,
	[bit_uniGuarda_nome] [nvarchar](255) NOT NULL,
	[bit_registroPat] [nvarchar](255) NOT NULL,
	[bit_GPB] [nvarchar](255) NOT NULL,
	[bit_GRB] [nvarchar](255) NOT NULL,
	[bit_valorOrigem] [nvarchar](255) NOT NULL,
	[bit_valorLiquido] [nvarchar](255) NOT NULL,
	[bit_doctoBaixa] [nvarchar](255) NOT NULL,
	[bit_dataBaixa] [nvarchar](255) NOT NULL,
	[bit_dataIncorporacao] [nvarchar](255) NOT NULL,
	[bit_status] [nvarchar](255) NOT NULL,
	[bit_observacao] [nvarchar](255) NOT NULL,
	[bit_situacao] [nvarchar](255) NOT NULL,
	[bit_dataCriacao] [nvarchar](255) NOT NULL,
	[bit_dataAlteracao] [nvarchar](255) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[BitId_valor12Reais]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BitId_valor12Reais](
	[VALOR] [money] NULL,
	[bem_id] [bigint] NULL,
	[bit_id] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CFG_Versao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CFG_Versao](
	[ver_id] [int] IDENTITY(1,1) NOT NULL,
	[ver_versao] [varchar](15) NOT NULL,
	[ver_dataCriacao] [datetime] NOT NULL,
	[ver_dataAlteracao] [datetime] NOT NULL,
 CONSTRAINT [PK_CFG_Versao] PRIMARY KEY CLUSTERED 
(
	[ver_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CidadeIntegracaoSistemas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CidadeIntegracaoSistemas](
	[cid_id] [uniqueidentifier] NOT NULL,
	[cis_origem] [tinyint] NOT NULL,
	[cis_cidIdExterno] [varchar](20) NOT NULL,
	[cis_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_CidadeIntegracaoSistemas_cis_dataCriacao]  DEFAULT (getdate()),
	[cis_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_CidadeIntegracaoSistemas_cis_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_CidadeIntegracaoSistemas] PRIMARY KEY CLUSTERED 
(
	[cid_id] ASC,
	[cis_origem] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Cod_Especie_GrupoBens]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Cod_Especie_GrupoBens](
	[ceg_codigo_especie] [varchar](50) NOT NULL,
	[grp_id] [int] NOT NULL,
	[ceg_situacao] [tinyint] NOT NULL,
	[ceg_dataAlteracao] [datetime] NOT NULL,
	[ceg_dataCriacao] [datetime] NOT NULL,
 CONSTRAINT [PK_Cod_Especie_GrupoBens] PRIMARY KEY CLUSTERED 
(
	[ceg_codigo_especie] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ContasContabeis]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ContasContabeis](
	[cco_codigo] [varchar](20) NOT NULL,
	[cco_nome] [varchar](100) NOT NULL,
	[cco_tipoConta] [tinyint] NOT NULL CONSTRAINT [DF_ContasContabeis_cco_tipoConta]  DEFAULT ((1)),
	[cco_nomeAbr] [varchar](30) NULL,
	[cco_descricao] [varchar](max) NULL,
	[cco_codigoSup] [varchar](20) NULL,
	[cco_situacao] [tinyint] NOT NULL CONSTRAINT [DF_ContasContabeis_cco_situacao]  DEFAULT ((1)),
	[cco_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_ContasContabeis_cco_dataCriacao]  DEFAULT (getdate()),
	[cco_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_ContasContabeis_cco_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_ContasContabeis] PRIMARY KEY CLUSTERED 
(
	[cco_codigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CORE_END_Cidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CORE_END_Cidade](
	[cid_id] [uniqueidentifier] NOT NULL CONSTRAINT [DF__END_Cidad__cid_i__4222D4EF]  DEFAULT (newsequentialid()),
	[pai_id] [uniqueidentifier] NOT NULL,
	[unf_id] [uniqueidentifier] NULL,
	[cid_nome] [varchar](200) NOT NULL,
	[cid_ddd] [varchar](3) NULL,
	[cid_situacao] [tinyint] NOT NULL CONSTRAINT [DF_CORE_END_Cidade_cid_situacao]  DEFAULT ((1)),
	[cid_integridade] [int] NOT NULL CONSTRAINT [DF_CORE_END_Cidade_cid_integridade]  DEFAULT ((0)),
 CONSTRAINT [PK_CORE_END_Cidade] PRIMARY KEY CLUSTERED 
(
	[cid_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CORE_END_Endereco]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CORE_END_Endereco](
	[end_id] [uniqueidentifier] NOT NULL CONSTRAINT [DF__END_Ender__end_i__44FF419A]  DEFAULT (newsequentialid()),
	[end_cep] [varchar](8) NOT NULL,
	[end_logradouro] [varchar](200) NOT NULL,
	[end_bairro] [varchar](100) NULL,
	[end_distrito] [varchar](100) NULL,
	[end_zona] [tinyint] NULL,
	[cid_id] [uniqueidentifier] NOT NULL,
	[end_situacao] [tinyint] NOT NULL CONSTRAINT [DF_CORE_END_Endereco_end_situacao]  DEFAULT ((1)),
	[end_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_CORE_END_Endereco_end_dataCriacao]  DEFAULT (getdate()),
	[end_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_CORE_END_Endereco_end_dataAlteracao]  DEFAULT (getdate()),
	[end_integridade] [int] NOT NULL CONSTRAINT [DF_CORE_END_Endereco_end_integridade]  DEFAULT ((0)),
 CONSTRAINT [PK_CORE_END_Endereco] PRIMARY KEY CLUSTERED 
(
	[end_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CORE_END_Pais]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CORE_END_Pais](
	[pai_id] [uniqueidentifier] NOT NULL CONSTRAINT [DF__CORE_END_Pais__pai_id__21B6055D]  DEFAULT (newsequentialid()),
	[pai_nome] [varchar](100) NOT NULL,
	[pai_sigla] [varchar](10) NULL,
	[pai_ddi] [varchar](3) NULL,
	[pai_naturalMasc] [varchar](100) NULL,
	[pai_naturalFem] [varchar](100) NULL,
	[pai_situacao] [tinyint] NOT NULL CONSTRAINT [DF_CORE_END_Pais_pai_situacao]  DEFAULT ((1)),
	[pai_integridade] [int] NOT NULL CONSTRAINT [DF_CORE_END_Pais_pai_integridade]  DEFAULT ((0)),
 CONSTRAINT [PK_CORE_END_Pais] PRIMARY KEY CLUSTERED 
(
	[pai_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CORE_END_UnidadeFederativa]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CORE_END_UnidadeFederativa](
	[unf_id] [uniqueidentifier] NOT NULL CONSTRAINT [DF__END_Unida__unf_i__24927208]  DEFAULT (newsequentialid()),
	[pai_id] [uniqueidentifier] NOT NULL,
	[unf_nome] [varchar](100) NOT NULL,
	[unf_sigla] [varchar](2) NOT NULL,
	[unf_situacao] [tinyint] NOT NULL CONSTRAINT [DF_CORE_END_UnidadeFederativa_unf_situacao]  DEFAULT ((1)),
	[unf_integridade] [int] NOT NULL CONSTRAINT [DF_CORE_END_UnidadeFederativa_unf_integridade]  DEFAULT ((0)),
 CONSTRAINT [PK_CORE_END_UnidadeFederativa] PRIMARY KEY CLUSTERED 
(
	[unf_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CORE_SYS_UnidadeAdministrativaEndereco]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CORE_SYS_UnidadeAdministrativaEndereco](
	[ent_id] [uniqueidentifier] NOT NULL,
	[uad_id] [uniqueidentifier] NOT NULL,
	[uae_id] [uniqueidentifier] NOT NULL CONSTRAINT [DF__SYS_Unida__uae_i__571DF1D5]  DEFAULT (newsequentialid()),
	[end_id] [uniqueidentifier] NOT NULL,
	[uae_numero] [varchar](20) NOT NULL,
	[uae_complemento] [varchar](100) NULL,
	[uae_situacao] [tinyint] NOT NULL CONSTRAINT [DF_CORE_SYS_UnidadeAdministrativaEndereco_uae_situacao]  DEFAULT ((1)),
	[uae_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_CORE_SYS_UnidadeAdministrativaEndereco_uae_dataCriacao]  DEFAULT (getdate()),
	[uae_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_CORE_SYS_UnidadeAdministrativaEndereco_uae_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_CORE_SYS_UnidadeAdministrativaEndereco] PRIMARY KEY CLUSTERED 
(
	[ent_id] ASC,
	[uad_id] ASC,
	[uae_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Dependencia]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Dependencia](
	[loc_id] [int] NOT NULL,
	[dep_id] [int] NOT NULL,
	[tde_id] [int] NOT NULL,
	[dep_nome] [varchar](100) NOT NULL,
	[dep_situacao] [tinyint] NOT NULL CONSTRAINT [DF_Dependencia_dep_situacao]  DEFAULT ((1)),
	[dep_responsavel] [nvarchar](200) NULL,
	[dep_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_Dependencia_dep_dataCriacao]  DEFAULT (getdate()),
	[dep_dateAlteracao] [datetime] NOT NULL CONSTRAINT [DF_Dependencia_dep_dateAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_Dependencia] PRIMARY KEY CLUSTERED 
(
	[loc_id] ASC,
	[dep_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Etiqueta_ElementosDimensao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Etiqueta_ElementosDimensao](
	[eed_id] [int] IDENTITY(1,1) NOT NULL,
	[eed_tamFonte] [int] NOT NULL,
	[eed_tamImagem] [int] NOT NULL,
	[eed_tamCodBarra] [int] NOT NULL,
	[cfg_id] [int] NOT NULL,
 CONSTRAINT [PK_Etiqueta_ElementosDimensao] PRIMARY KEY CLUSTERED 
(
	[cfg_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[EtiquetaElementosPosicao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EtiquetaElementosPosicao](
	[eep_id] [int] IDENTITY(1,1) NOT NULL,
	[cfe_macTerminal] [nvarchar](50) NOT NULL,
	[eep_xImagem] [int] NOT NULL,
	[eep_yImagem] [int] NOT NULL,
	[eep_xRegPatrimonio] [int] NOT NULL,
	[eep_yRegPatrimonio] [int] NOT NULL,
	[eep_xSecretaria] [int] NOT NULL,
	[eep_ySecretaria] [int] NOT NULL,
	[eep_xMensagem] [int] NOT NULL,
	[eep_yMensagem] [int] NOT NULL,
	[eep_xCodBarra] [int] NOT NULL,
	[eep_yCodBarra] [int] NOT NULL,
	[eep_situacao] [int] NOT NULL,
	[eep_dataAlteracao] [datetime] NOT NULL,
	[eep_dataCriacao] [datetime] NOT NULL,
 CONSTRAINT [PK_EtiquetaElementosPosicao] PRIMARY KEY CLUSTERED 
(
	[cfe_macTerminal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[EtiquetaImpressao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EtiquetaImpressao](
	[uni_id] [int] NOT NULL,
	[eti_id] [int] IDENTITY(1,1) NOT NULL,
	[eti_comando] [nvarchar](2000) NULL,
 CONSTRAINT [PK_EtiquetaImpressao] PRIMARY KEY CLUSTERED 
(
	[uni_id] ASC,
	[eti_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[EtiquetaImpressao_20140718_bkp]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EtiquetaImpressao_20140718_bkp](
	[uni_id] [int] NOT NULL,
	[eti_id] [int] IDENTITY(1,1) NOT NULL,
	[eti_comando] [nvarchar](2000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[EtiquetaPatrimonial]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[EtiquetaPatrimonial](
	[etp_ano] [char](4) NOT NULL,
	[uni_id] [int] NOT NULL,
	[etp_numeroInicial] [varchar](20) NOT NULL,
	[etp_proximoNumero] [varchar](20) NOT NULL,
	[etp_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_EtiquetaPatrimonial_etp_dataCriacao]  DEFAULT (getdate()),
	[etp_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_EtiquetaPatrimonial_etp_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_EtiquetaPatrimonial] PRIMARY KEY CLUSTERED 
(
	[etp_ano] ASC,
	[uni_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ExecutarRoboSiafem]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ExecutarRoboSiafem](
	[uni_id] [int] NULL,
	[per_mes] [char](2) NULL,
	[per_ano] [char](4) NULL,
	[status_exportacao] [int] NULL,
	[user_siafem] [varchar](50) NULL,
	[senha_siafem] [varchar](max) NULL,
	[data_criacao] [datetime] NULL,
	[data_alteracao] [datetime] NULL,
	[NomeRobo] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[FatorDepreciacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[FatorDepreciacao](
	[fat_id] [int] IDENTITY(1,1) NOT NULL,
	[fat_nome] [varchar](100) NOT NULL,
	[fat_coeficiente] [decimal](3, 2) NOT NULL,
	[fat_descricao] [varchar](1000) NULL,
	[fat_situacao] [tinyint] NOT NULL CONSTRAINT [DF_FatorDepreciacao_fat_situacao]  DEFAULT ((1)),
	[fat_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_FatorDepreciacao_fat_dataCriacao]  DEFAULT (getdate()),
	[fat_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_FatorDepreciacao_fat_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_FatorDepreciacao] PRIMARY KEY CLUSTERED 
(
	[fat_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Fornecedor]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Fornecedor](
	[for_id] [int] IDENTITY(1,1) NOT NULL,
	[for_situacao] [tinyint] NOT NULL CONSTRAINT [DF_Fornecedor_for_situacao]  DEFAULT ((1)),
	[for_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_Fornecedor_for_dataCriacao]  DEFAULT (getdate()),
	[for_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_Fornecedor_for_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_Fornecedor] PRIMARY KEY CLUSTERED 
(
	[for_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[FornecedorPF]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FornecedorPF](
	[for_id] [int] NOT NULL,
	[pes_id] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_FornecedorPF] PRIMARY KEY CLUSTERED 
(
	[for_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[FornecedorPJ]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FornecedorPJ](
	[for_id] [int] NOT NULL,
	[ent_id] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_FornecedorPJ] PRIMARY KEY CLUSTERED 
(
	[for_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[GPB]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[GPB](
	[gpb_ano] [char](4) NOT NULL,
	[gpb_numeroInicial] [varchar](20) NOT NULL,
	[gpb_proximoNumero] [varchar](20) NOT NULL,
	[gpb_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_GPB_gbp_dataCriacao]  DEFAULT (getdate()),
	[gpb_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_GPB_gbp_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_GPB] PRIMARY KEY CLUSTERED 
(
	[gpb_ano] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[GRB]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[GRB](
	[grb_ano] [char](4) NOT NULL,
	[grb_numeroInicial] [varchar](20) NOT NULL,
	[grb_proximoNumero] [varchar](20) NOT NULL,
	[grb_dataCriacao] [datetime] NOT NULL,
	[grb_dataAlteracao] [datetime] NOT NULL,
 CONSTRAINT [PK_GRB] PRIMARY KEY CLUSTERED 
(
	[grb_ano] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[GrupoBens]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[GrupoBens](
	[grp_id] [int] IDENTITY(1,1) NOT NULL,
	[grp_idPai] [int] NULL,
	[grp_nome] [varchar](100) NOT NULL,
	[grp_nomeAbr] [varchar](30) NULL,
	[grp_descricao] [varchar](1000) NULL,
	[grp_situacao] [tinyint] NOT NULL CONSTRAINT [DF_GrupoBens_grp_situacao]  DEFAULT ((1)),
	[grp_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_GrupoBens_grp_dataCriacao]  DEFAULT (getdate()),
	[grp_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_GrupoBens_grp_dataAlteracao]  DEFAULT (getdate()),
	[grp_nroSerie] [bit] NULL,
	[grp_marca] [bit] NULL,
	[grp_modelo] [bit] NULL,
	[grp_tipo] [bit] NULL,
	[grp_placa] [bit] NULL,
	[grp_chassi] [bit] NULL,
	[grp_anoFabricacao] [bit] NULL,
	[grp_quilometragem] [bit] NULL,
	[grp_potencia] [bit] NULL,
	[grp_unidadePotencia] [bit] NULL,
	[grp_cilindros] [bit] NULL,
 CONSTRAINT [PK_GrupoBens] PRIMARY KEY CLUSTERED 
(
	[grp_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[GrupoBens_IndicadorGerencial]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GrupoBens_IndicadorGerencial](
	[faq_id] [int] NOT NULL,
	[grp_id] [int] NOT NULL,
	[gind_situacao] [tinyint] NOT NULL,
	[gind_dataCriacao] [datetime] NOT NULL,
	[gind_dataAlteracao] [datetime] NOT NULL,
 CONSTRAINT [PK_GrupoBens_IndicadorGerencial] PRIMARY KEY CLUSTERED 
(
	[faq_id] ASC,
	[grp_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Incorporacoes]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Incorporacoes](
	[bit_uniGestora] [int] NOT NULL,
	[bit_uniGuarda] [int] NOT NULL,
	[bit_registroPat] [varchar](20) NULL,
	[bit_status] [varchar](2000) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[IndicadorGerencial]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[IndicadorGerencial](
	[faq_id] [int] NOT NULL,
	[faq_nome] [varchar](30) NOT NULL,
	[faq_sigla] [varchar](1) NULL,
 CONSTRAINT [PK_IndicadorGerencial] PRIMARY KEY CLUSTERED 
(
	[faq_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Inventario]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Inventario](
	[inv_id] [int] NOT NULL,
	[uni_id] [int] NOT NULL,
	[pes_id] [uniqueidentifier] NOT NULL,
	[inv_periodoInicio] [date] NOT NULL,
	[inv_periodoFim] [date] NULL,
	[inv_dataCriacao] [datetime] NOT NULL,
	[inv_dataAlteracao] [datetime] NOT NULL,
 CONSTRAINT [PK_Inventario] PRIMARY KEY CLUSTERED 
(
	[inv_id] ASC,
	[uni_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Localidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Localidade](
	[loc_id] [int] IDENTITY(1,1) NOT NULL,
	[uni_id] [int] NOT NULL,
	[end_id] [uniqueidentifier] NOT NULL,
	[loc_nome] [varchar](100) NOT NULL,
	[loc_descricao] [varchar](1000) NULL,
	[loc_numero] [varchar](10) NOT NULL,
	[loc_complemento] [varchar](100) NULL,
	[loc_situacao] [tinyint] NOT NULL CONSTRAINT [DF_Localidade_loc_situacao]  DEFAULT ((1)),
	[loc_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_Localidade_loc_dataCriacao]  DEFAULT (getdate()),
	[loc_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_Localidade_loc_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_Localidade] PRIMARY KEY CLUSTERED 
(
	[loc_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MapaArrolamento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MapaArrolamento](
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[mar_guid] [varchar](100) NULL,
	[uni_id] [bigint] NOT NULL,
	[loc_id] [bigint] NOT NULL,
	[mar_situacao] [tinyint] NOT NULL DEFAULT ((1)),
	[bit_composicao] [int] NULL,
	[mar_dataCriacao] [datetime] NOT NULL DEFAULT (getdate()),
	[mar_dataAlteracao] [datetime] NOT NULL DEFAULT (getdate()),
	[mar_imprimir] [bit] NULL DEFAULT ((0)),
	[bem_descricao] [varchar](1000) NULL,
	[bem_dataEntrada] [date] NULL,
	[stc_id] [int] NULL,
	[dep_id] [int] NULL,
	[bit_uniGestora] [int] NULL,
	[bit_uniGuarda] [int] NULL,
	[bit_registroPat] [varchar](20) NULL,
	[bit_GPB] [varchar](20) NULL,
	[bit_GRB] [varchar](20) NULL,
	[bit_valorOrigem] [money] NULL,
	[bit_valorLiquido] [money] NULL,
	[bit_dataIncorporacao] [date] NULL,
	[bit_status] [tinyint] NULL,
	[bit_situacao] [tinyint] NULL,
 CONSTRAINT [PK_MapaArrolamento] PRIMARY KEY CLUSTERED 
(
	[bem_id] ASC,
	[bit_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MapaArrolamentoBK]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MapaArrolamentoBK](
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[mar_guid] [varchar](100) NULL,
	[uni_id] [bigint] NOT NULL,
	[mar_situacao] [tinyint] NOT NULL,
	[mar_dataCriacao] [datetime] NOT NULL,
	[mar_dataAlteracao] [datetime] NOT NULL,
	[loc_id] [bigint] NOT NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MotivoCancelamento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MotivoCancelamento](
	[moc_id] [tinyint] IDENTITY(1,1) NOT NULL,
	[moc_nome] [varchar](100) NOT NULL,
	[moc_nomeAbr] [varchar](100) NULL,
	[moc_descricao] [varchar](1000) NULL,
	[moc_situacao] [tinyint] NOT NULL,
	[moc_dataCriacao] [datetime] NOT NULL,
	[moc_dataAlteracao] [datetime] NOT NULL,
 CONSTRAINT [PK_MotivoCancelamento] PRIMARY KEY CLUSTERED 
(
	[moc_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MovimentacaoBem]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MovimentacaoBem](
	[mov_data] [date] NOT NULL,
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[tpm_id] [int] NOT NULL,
	[grp_id] [int] NOT NULL,
	[cco_codigoDebito] [varchar](20) NOT NULL,
	[cco_codigoCredito] [varchar](20) NOT NULL,
	[per_mes] [char](2) NOT NULL,
	[per_ano] [char](4) NOT NULL,
	[uni_id] [int] NOT NULL,
	[fat_id] [int] NULL,
	[usu_id] [uniqueidentifier] NULL,
	[mov_valor] [money] NOT NULL,
	[mov_valorReavaliado] [money] NULL,
	[mov_percentualBaixa] [decimal](5, 2) NULL,
	[mov_GPB] [varchar](20) NULL,
	[mov_unidadeOrigem] [int] NOT NULL,
	[mov_unidadeDestino] [int] NULL,
	[mov_observacao] [varchar](max) NULL,
	[mov_origem] [tinyint] NOT NULL CONSTRAINT [DF_MovimentacaoBem_mov_origem]  DEFAULT ((1)),
	[mov_nl] [char](11) NULL,
	[mov_situacao] [tinyint] NOT NULL CONSTRAINT [DF_MovimentacaoBem_mov_situacao]  DEFAULT ((1)),
	[mov_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_MovimentacaoBem_mov_dataCriacao]  DEFAULT (getdate()),
	[mov_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_MovimentacaoBem_mov_dataAlteracao]  DEFAULT (getdate()),
	[mov_dataOriginal] [date] NULL,
	[cod_siafem] [varchar](30) NULL,
	[status_exportacao] [int] NULL,
	[descricao_exportacao] [varchar](max) NULL,
 CONSTRAINT [PK_MovimentacaoBem_1] PRIMARY KEY CLUSTERED 
(
	[mov_data] ASC,
	[bem_id] ASC,
	[bit_id] ASC,
	[tpm_id] ASC,
	[grp_id] ASC,
	[cco_codigoDebito] ASC,
	[cco_codigoCredito] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MovimentacaoBem_bkp]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MovimentacaoBem_bkp](
	[mov_data] [date] NOT NULL,
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[tpm_id] [int] NOT NULL,
	[grp_id] [int] NOT NULL,
	[cco_codigoDebito] [varchar](20) NOT NULL,
	[cco_codigoCredito] [varchar](20) NOT NULL,
	[per_mes] [char](2) NOT NULL,
	[per_ano] [char](4) NOT NULL,
	[uni_id] [int] NOT NULL,
	[fat_id] [int] NULL,
	[usu_id] [uniqueidentifier] NULL,
	[mov_valor] [money] NOT NULL,
	[mov_valorReavaliado] [money] NULL,
	[mov_percentualBaixa] [decimal](5, 2) NULL,
	[mov_GPB] [varchar](20) NULL,
	[mov_unidadeOrigem] [int] NOT NULL,
	[mov_unidadeDestino] [int] NULL,
	[mov_observacao] [varchar](max) NULL,
	[mov_origem] [tinyint] NOT NULL,
	[mov_nl] [char](11) NULL,
	[mov_situacao] [tinyint] NOT NULL,
	[mov_dataCriacao] [datetime] NOT NULL,
	[mov_dataAlteracao] [datetime] NOT NULL,
	[mov_dataOriginal] [date] NULL,
	[cod_siafem] [varchar](30) NULL,
	[status_exportacao] [int] NULL,
	[descricao_exportacao] [varchar](max) NULL,
 CONSTRAINT [PK_MovimentacaoBem_1_bkp] PRIMARY KEY CLUSTERED 
(
	[mov_data] ASC,
	[bem_id] ASC,
	[bit_id] ASC,
	[tpm_id] ASC,
	[grp_id] ASC,
	[cco_codigoDebito] ASC,
	[cco_codigoCredito] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MovimentacaoBem_bkp_nlPreenchida_1real_03102017]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MovimentacaoBem_bkp_nlPreenchida_1real_03102017](
	[mov_data] [date] NOT NULL,
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[tpm_id] [int] NOT NULL,
	[grp_id] [int] NOT NULL,
	[cco_codigoDebito] [varchar](20) NOT NULL,
	[cco_codigoCredito] [varchar](20) NOT NULL,
	[per_mes] [char](2) NOT NULL,
	[per_ano] [char](4) NOT NULL,
	[uni_id] [int] NOT NULL,
	[fat_id] [int] NULL,
	[usu_id] [uniqueidentifier] NULL,
	[mov_valor] [money] NOT NULL,
	[mov_valorReavaliado] [money] NULL,
	[mov_percentualBaixa] [decimal](5, 2) NULL,
	[mov_GPB] [varchar](20) NULL,
	[mov_unidadeOrigem] [int] NOT NULL,
	[mov_unidadeDestino] [int] NULL,
	[mov_observacao] [varchar](max) NULL,
	[mov_origem] [tinyint] NOT NULL,
	[mov_nl] [char](11) NULL,
	[mov_situacao] [tinyint] NOT NULL,
	[mov_dataCriacao] [datetime] NOT NULL,
	[mov_dataAlteracao] [datetime] NOT NULL,
	[mov_dataOriginal] [date] NULL,
	[cod_siafem] [varchar](30) NULL,
	[status_exportacao] [int] NULL,
	[descricao_exportacao] [varchar](max) NULL,
 CONSTRAINT [PK_MovimentacaoBem_bkp_nlPreenchida_1real_03102017] PRIMARY KEY CLUSTERED 
(
	[mov_data] ASC,
	[bem_id] ASC,
	[bit_id] ASC,
	[tpm_id] ASC,
	[grp_id] ASC,
	[cco_codigoDebito] ASC,
	[cco_codigoCredito] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[MovimentacaoBemEmExportacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[MovimentacaoBemEmExportacao](
	[mov_data] [date] NOT NULL,
	[bem_id] [bigint] NOT NULL,
	[bit_id] [int] NOT NULL,
	[tpm_id] [int] NOT NULL,
	[grp_id] [int] NOT NULL,
	[cco_codigoDebito] [varchar](20) NOT NULL,
	[cco_codigoCredito] [varchar](20) NOT NULL,
	[per_mes] [char](2) NOT NULL,
	[per_ano] [char](4) NOT NULL,
	[uni_id] [int] NOT NULL,
	[fat_id] [int] NULL,
	[usu_id] [uniqueidentifier] NULL,
	[mov_valor] [money] NOT NULL,
	[mov_valorReavaliado] [money] NULL,
	[mov_percentualBaixa] [decimal](5, 2) NULL,
	[mov_GPB] [varchar](20) NULL,
	[mov_unidadeOrigem] [int] NOT NULL,
	[mov_unidadeDestino] [int] NULL,
	[mov_observacao] [varchar](max) NULL,
	[mov_origem] [tinyint] NOT NULL,
	[mov_situacao] [tinyint] NOT NULL,
	[mov_dataCriacaoMovimento] [datetime] NOT NULL,
	[mov_dataExportacao] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.MovimentacaoBemEmExportacao] PRIMARY KEY CLUSTERED 
(
	[mov_data] ASC,
	[bem_id] ASC,
	[bit_id] ASC,
	[tpm_id] ASC,
	[grp_id] ASC,
	[cco_codigoDebito] ASC,
	[cco_codigoCredito] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ParametroContabil]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ParametroContabil](
	[tpm_id] [int] NOT NULL,
	[grp_id] [int] NOT NULL,
	[cco_codigoDebito] [varchar](20) NOT NULL,
	[cco_codigoCredito] [varchar](20) NOT NULL,
	[pco_evento] [int] NULL,
	[pco_eventoCredito] [int] NULL,
	[pco_historico] [varchar](max) NOT NULL,
	[pco_automatico] [bit] NOT NULL CONSTRAINT [DF_ParametroContabil_pco_automatico]  DEFAULT ((0)),
	[pco_situacao] [tinyint] NOT NULL CONSTRAINT [DF_ParametroContabil_pco_situacao]  DEFAULT ((1)),
	[pco_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_ParametroContabil_pco_dataCriacao]  DEFAULT (getdate()),
	[pco_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_ParametroContabil_pco_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_ParametroContabil_1] PRIMARY KEY CLUSTERED 
(
	[tpm_id] ASC,
	[grp_id] ASC,
	[cco_codigoDebito] ASC,
	[cco_codigoCredito] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PatrimonioWfDepedente]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PatrimonioWfDepedente](
	[wrk_id] [int] NOT NULL,
	[wfd_id] [int] NOT NULL,
	[wfd_wfParent] [int] NOT NULL,
	[wfd_situacao] [tinyint] NOT NULL CONSTRAINT [DF_PatrimonioWfDepedente_wfd_situacao]  DEFAULT ((1)),
	[wfd_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_PatrimonioWfDepedente_wfd_dataCriacao]  DEFAULT (getdate()),
	[wfd_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_PatrimonioWfDepedente_wfd_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_PatrimonioWfDepedente] PRIMARY KEY CLUSTERED 
(
	[wrk_id] ASC,
	[wfd_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PatrimonioWfStatus]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PatrimonioWfStatus](
	[wrk_id] [int] NOT NULL,
	[stp_id] [int] NOT NULL,
	[stp_idProximo] [int] NULL,
	[wfs_obrigatorio] [bit] NOT NULL CONSTRAINT [DF_PatrimonioWfStatus_wfs_obrigatorio]  DEFAULT ((1)),
	[wfs_somenteExibicao] [bit] NOT NULL CONSTRAINT [DF_PatrimonioWfStatus_wfs_somenteExibicao]  DEFAULT ((0)),
	[wfs_uniGestora] [bit] NOT NULL CONSTRAINT [DF_PatrimonioWfStatus_wfs_unidadeGestora]  DEFAULT ((0)),
	[wfs_uniGuarda] [bit] NOT NULL CONSTRAINT [DF_PatrimonioWfStatus_wfs_unidadeGuarda]  DEFAULT ((0)),
	[wfs_situacao] [tinyint] NOT NULL CONSTRAINT [DF_PatrimonioWfStatus_wfs_situacao]  DEFAULT ((1)),
	[wfs_justificativaObrigatoria] [bit] NOT NULL CONSTRAINT [DF_PatrimonioWfStatus_wfs_justificativaObrigatoria]  DEFAULT ((0)),
	[wfs_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_PatrimonioWfStatus_wfs_dataCriacao]  DEFAULT (getdate()),
	[wfs_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_PatrimonioWfStatus_wfs_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_PatrimonioWfStatus] PRIMARY KEY CLUSTERED 
(
	[wrk_id] ASC,
	[stp_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PatrimonioWorkflow]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PatrimonioWorkflow](
	[wrk_id] [int] NOT NULL,
	[wrk_nome] [varchar](100) NOT NULL,
	[wrk_situacao] [tinyint] NOT NULL CONSTRAINT [DF_PatrimonioWorkflow_wrk_situacao]  DEFAULT ((1)),
	[wrk_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_PatrimonioWorkflow_wrk_dataCriacao]  DEFAULT (getdate()),
	[wrk_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_PatrimonioWorkflow_wrk_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_PatrimonioWorkflow] PRIMARY KEY CLUSTERED 
(
	[wrk_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Periodo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Periodo](
	[per_mes] [char](2) NOT NULL,
	[per_ano] [char](4) NOT NULL,
	[per_situacao] [tinyint] NOT NULL CONSTRAINT [DF_Periodo_per_situacao]  DEFAULT ((1)),
	[per_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_Periodo_per_dataCriacao]  DEFAULT (getdate()),
	[per_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_Periodo_per_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_Periodo] PRIMARY KEY CLUSTERED 
(
	[per_mes] ASC,
	[per_ano] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PeriodoUnidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PeriodoUnidade](
	[per_mes] [char](2) NOT NULL,
	[per_ano] [char](4) NOT NULL,
	[uni_id] [int] NOT NULL,
	[peu_situacao] [tinyint] NOT NULL CONSTRAINT [DF_PeriodoUnidade_peu_situacao]  DEFAULT ((1)),
	[peu_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_PeriodoUnidade_peu_dataCriacao]  DEFAULT (getdate()),
	[peu_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_PeriodoUnidade_peu_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_PeriodoUnidade] PRIMARY KEY CLUSTERED 
(
	[per_mes] ASC,
	[per_ano] ASC,
	[uni_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Seguradora]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Seguradora](
	[seg_id] [int] IDENTITY(1,1) NOT NULL,
	[ent_id] [uniqueidentifier] NOT NULL,
	[seg_situacao] [tinyint] NOT NULL,
	[seg_dataCriacao] [datetime] NOT NULL,
	[seg_dataAlteracao] [datetime] NOT NULL,
 CONSTRAINT [PK_Seguradora] PRIMARY KEY CLUSTERED 
(
	[seg_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[SituacaoPatrimonial]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SituacaoPatrimonial](
	[sp_id] [varchar](5) NOT NULL,
	[sp_descricao] [varchar](100) NULL,
 CONSTRAINT [PK_SituacaoPatrimonial] PRIMARY KEY CLUSTERED 
(
	[sp_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[StatusConservacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[StatusConservacao](
	[stc_id] [int] IDENTITY(1,1) NOT NULL,
	[stc_nome] [varchar](100) NOT NULL,
	[stc_decricao] [varchar](1000) NULL,
	[stc_situacao] [tinyint] NOT NULL CONSTRAINT [DF_StatusConcervacao_stc_situacao]  DEFAULT ((1)),
	[stc_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_StatusConcervacao_stc_dataCriacao]  DEFAULT (getdate()),
	[stc_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_StatusConcervacao_stc_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_StatusConcervacao] PRIMARY KEY CLUSTERED 
(
	[stc_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[StatusPatrimonio]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[StatusPatrimonio](
	[stp_id] [int] NOT NULL,
	[stp_nome] [varchar](100) NOT NULL,
	[stp_situacao] [tinyint] NOT NULL CONSTRAINT [DF_StatusPatrimonio_stp_situacao]  DEFAULT ((1)),
	[stp_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_StatusPatrimonio_stp_dataCriacao]  DEFAULT (getdate()),
	[stp_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_StatusPatrimonio_stp_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_StatusPatrimonio] PRIMARY KEY CLUSTERED 
(
	[stp_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SYS_ConfigEtiqueta]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SYS_ConfigEtiqueta](
	[cfe_macTerminal] [nvarchar](50) NOT NULL,
	[uni_id] [int] NOT NULL,
	[cfe_enderecoImpressora] [nvarchar](50) NULL,
	[cfe_etiquetaQtdeLinha] [int] NULL,
	[cfe_etiquetaAltura] [numeric](5, 2) NULL,
	[cfe_etiquetaLargura] [numeric](5, 2) NULL,
	[cfe_etiquetaMargEsq] [numeric](5, 2) NULL,
	[cfe_etiquetaDistancia] [numeric](5, 2) NULL,
	[cfe_etiquetaEspacoLinha] [numeric](5, 2) NULL,
	[cfe_etiquetaMsg] [nvarchar](100) NULL,
	[cfe_bufferImpressora] [int] NOT NULL,
	[pae_id] [int] NOT NULL,
	[cfe_densidadeImpressora] [int] NULL,
 CONSTRAINT [PK_SYS_ConfigEtiqueta_1] PRIMARY KEY CLUSTERED 
(
	[cfe_macTerminal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[SYS_Configuracao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SYS_Configuracao](
	[cfg_id] [int] IDENTITY(1,1) NOT NULL,
	[cfg_titulo] [nvarchar](200) NULL,
	[cfg_paginacao] [int] NULL,
	[cfg_emailHost] [nvarchar](100) NULL,
	[cfg_emailSuporte] [nvarchar](100) NULL,
	[cfg_paginaInicio] [nvarchar](100) NULL,
	[cfg_paginaErro] [nvarchar](100) NULL,
	[cfg_paginaExpira] [nvarchar](100) NULL,
	[cfg_paginaLogOff] [nvarchar](100) NULL,
	[cfg_bdProvider] [nvarchar](100) NULL,
	[cfg_diretorioVirtual] [nvarchar](200) NULL,
	[cfg_diretorioFisico] [nvarchar](100) NULL,
	[cfg_diretorioArquivo] [nvarchar](512) NULL,
	[cfg_extensaoArquivo] [nvarchar](512) NULL,
	[cfg_tamanhoMaxArquivo] [int] NULL,
	[cfg_servidorRelatorio] [nvarchar](512) NULL,
	[cfg_usuarioRelatorio] [nvarchar](512) NULL,
	[cfg_senhaRelatorio] [nvarchar](512) NULL,
	[cfg_dominioRelatorio] [nvarchar](512) NULL,
	[cfg_pastaRelatorio] [nvarchar](512) NULL,
	[cfg_wsSiafemUrl] [nvarchar](512) NULL,
	[cfg_wsSiafemUser] [nvarchar](512) NULL,
	[cfg_wsSiafemPwd] [nvarchar](512) NULL,
	[cfg_wsSiafemUsarProxy] [bit] NULL,
	[cfg_wsSiafemProxyIP] [nvarchar](128) NULL,
	[cfg_wsSiafemProxyPorta] [nvarchar](10) NULL,
	[cfg_wsSiafemUsarAutenticacao] [bit] NULL,
	[cfg_wsSiafemProxyUser] [nvarchar](512) NULL,
	[cfg_wsSiafemProxyPwd] [nvarchar](512) NULL,
	[cfg_valorMinimoPatrimonio] [money] NULL,
	[cfg_stcIdImportacao] [int] NULL,
	[cfg_mascaraEtiqueta] [nvarchar](50) NULL,
	[cfg_mascaraGPB] [nvarchar](50) NULL,
	[cfg_pastaDownload] [nvarchar](512) NULL,
	[cfg_diretorioVirtualDownload] [nvarchar](512) NULL,
	[cfg_cnpjFornLegado] [varchar](14) NULL,
	[cfg_autenticacaoSMTP] [bit] NULL,
	[cfg_userSMTP] [nvarchar](100) NULL,
	[cfg_senhaSMTP] [nvarchar](100) NULL,
	[cfg_utilizaCODMAT] [bit] NULL,
	[cfg_validaLoginPorCPF] [bit] NULL,
	[cfg_naoGerarMovimentRecebEstoque] [bit] NULL,
	[cfg_informarDocBaixa] [bit] NULL,
	[cfg_naoUtilizarSIAFEM] [bit] NULL,
	[cfg_nomeEmpresa] [nvarchar](100) NULL,
	[cfg_nomeEntidade] [nvarchar](100) NULL,
	[cfg_gerarRegPatrimonialBemAutomatico] [bit] NULL,
	[cfg_regPatriomonialAutomaticoAno] [nvarchar](4) NULL,
	[cfg_regPatriomonialAutomaticoUnidade] [nvarchar](10) NULL,
	[cfg_regPatriomonialAutomaticoUGE] [nvarchar](10) NULL,
	[cfg_tipoImpressao] [varchar](50) NULL,
	[cfg_qtdeImpressaoPorVez] [int] NULL,
	[cfg_intervaloImpressao] [int] NULL,
	[cfg_proxNumLegado] [bigint] NULL,
	[cfg_editarCIE] [bit] NULL,
	[cfg_validaUsoCore] [bit] NULL,
	[cfg_sistemID] [nvarchar](100) NULL,
 CONSTRAINT [PK_SYS_Configuracao] PRIMARY KEY CLUSTERED 
(
	[cfg_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SYS_Parametros]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SYS_Parametros](
	[par_id] [int] IDENTITY(1,1) NOT NULL,
	[par_chave] [varchar](100) NOT NULL,
	[par_valor] [varchar](1000) NOT NULL,
	[par_descricao] [varchar](max) NULL,
	[par_obrigatorio] [bit] NOT NULL CONSTRAINT [DF_SYS_Parametros_par_obrigatorio]  DEFAULT ((0)),
	[par_vigenciaInicio] [date] NOT NULL,
	[par_vigenciaFim] [date] NULL,
	[par_situacao] [tinyint] NOT NULL CONSTRAINT [DF_SYS_Parametros_par_situacao]  DEFAULT ((1)),
	[par_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_SYS_Parametros_par_dataCriacao]  DEFAULT (getdate()),
	[par_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_SYS_Parametros_par_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_SYS_Parametros] PRIMARY KEY CLUSTERED 
(
	[par_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SYS_ParametrosEtiqueta]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SYS_ParametrosEtiqueta](
	[pae_id] [int] IDENTITY(1,1) NOT NULL,
	[pae_descricao] [varchar](500) NOT NULL,
	[pae_chave] [varchar](200) NOT NULL,
	[pae_status] [tinyint] NOT NULL,
 CONSTRAINT [PK_ParametrosEtiqueta] PRIMARY KEY CLUSTERED 
(
	[pae_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SYS_ParametrosTela]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SYS_ParametrosTela](
	[pat_id] [int] IDENTITY(1,1) NOT NULL,
	[pat_descricao] [varchar](200) NOT NULL,
	[pat_chave] [varchar](200) NOT NULL,
	[pat_status] [tinyint] NOT NULL,
	[tel_id] [int] NOT NULL,
 CONSTRAINT [PK_ParametrosTela] PRIMARY KEY CLUSTERED 
(
	[pat_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SYS_Tela]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SYS_Tela](
	[tel_id] [int] IDENTITY(1,1) NOT NULL,
	[tel_descricao] [varchar](100) NOT NULL,
	[tte_id] [int] NOT NULL,
 CONSTRAINT [PK_Tela] PRIMARY KEY CLUSTERED 
(
	[tel_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TestTransaction]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TestTransaction](
	[Col1] [int] NULL,
	[Col2] [varchar](100) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TipoBem]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TipoBem](
	[tb_id] [varchar](5) NOT NULL,
	[tb_descricao] [varchar](100) NULL,
 CONSTRAINT [PK_TipoBem] PRIMARY KEY CLUSTERED 
(
	[tb_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TipoDependencia]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TipoDependencia](
	[tde_id] [int] IDENTITY(1,1) NOT NULL,
	[tde_nome] [varchar](100) NOT NULL,
	[tde_situacao] [tinyint] NOT NULL CONSTRAINT [DF_TipoDependencia_tde_situacao]  DEFAULT ((1)),
 CONSTRAINT [PK_TipoDependencia] PRIMARY KEY CLUSTERED 
(
	[tde_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TipoMovimentacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TipoMovimentacao](
	[tpm_id] [int] IDENTITY(1,1) NOT NULL,
	[tpm_nome] [varchar](100) NOT NULL,
	[tpm_nomeAbr] [varchar](30) NULL,
	[tpm_descricao] [varchar](1000) NULL,
	[tpm_operacao] [tinyint] NOT NULL CONSTRAINT [DF_TipoMovimentacao_tpm_operacao]  DEFAULT ((1)),
	[tpm_situacao] [tinyint] NOT NULL CONSTRAINT [DF_TipoMovimentacao_tpm_situacao]  DEFAULT ((1)),
	[tpm_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_TipoMovimentacao_tpm_dataCriacao]  DEFAULT (getdate()),
	[tpm_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_TipoMovimentacao_tpm_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_TipoMovimentacao] PRIMARY KEY CLUSTERED 
(
	[tpm_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TipoTela]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TipoTela](
	[tte_id] [int] IDENTITY(1,1) NOT NULL,
	[tte_descricao] [varchar](200) NOT NULL,
 CONSTRAINT [PK_TipoTela] PRIMARY KEY CLUSTERED 
(
	[tte_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tmp_bem_bit]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tmp_bem_bit](
	[bem_id] [bigint] NULL,
	[bit_id] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Unidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Unidade](
	[uni_id] [int] IDENTITY(1,1) NOT NULL,
	[ent_id] [uniqueidentifier] NOT NULL,
	[uad_id] [uniqueidentifier] NULL,
	[uni_codigoUO] [char](4) NULL,
	[uni_codigoUGE] [varchar](10) NULL,
	[uni_coletor] [bit] NOT NULL CONSTRAINT [DF_Unidade_uni_coletor]  DEFAULT ((0)),
	[uni_justificativaColetor] [varchar](2000) NULL,
	[uni_internet] [bit] NOT NULL CONSTRAINT [DF_Unidade_uni_internet]  DEFAULT ((1)),
	[uni_UA] [nvarchar](20) NULL,
	[uni_situacao] [tinyint] NOT NULL CONSTRAINT [DF_Unidade_uni_situacao]  DEFAULT ((1)),
	[uni_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_Unidade_uni_dataCriacao]  DEFAULT (getdate()),
	[uni_dateAlteracao] [datetime] NOT NULL CONSTRAINT [DF_Unidade_uni_dateAlteracao]  DEFAULT (getdate()),
	[Observacao_uni] [varchar](max) NULL,
	[uni_relacionaEtiquetaAutomatico] [bit] NULL,
 CONSTRAINT [PK_Unidade] PRIMARY KEY CLUSTERED 
(
	[uni_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UnidadeGestora]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UnidadeGestora](
	[uni_id] [int] NOT NULL,
	[uge_ultimaImportacao] [date] NULL,
	[uge_importaSIAFEM] [bit] NULL CONSTRAINT [DF_UnidadeGestora_uge_importaSIAFEM]  DEFAULT ((1)),
	[uge_situacao] [tinyint] NOT NULL CONSTRAINT [DF_UnidadeGestora_uge_situacao]  DEFAULT ((1)),
	[uge_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_UnidadeGestora_uge_dataCriacao]  DEFAULT (getdate()),
	[uge_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_UnidadeGestora_uge_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_UnidadeGestora] PRIMARY KEY CLUSTERED 
(
	[uni_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[UnidadeGuarda]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UnidadeGuarda](
	[uni_id] [int] NOT NULL,
	[ugu_situacao] [tinyint] NOT NULL CONSTRAINT [DF_UnidadeGuarda_ugu_situacao]  DEFAULT ((1)),
	[ugu_dataCriacao] [datetime] NOT NULL CONSTRAINT [DF_UnidadeGuarda_ugu_dataCriacao]  DEFAULT (getdate()),
	[ugu_dataAlteracao] [datetime] NOT NULL CONSTRAINT [DF_UnidadeGuarda_ugu_dataAlteracao]  DEFAULT (getdate()),
 CONSTRAINT [PK_UnidadeGuarda] PRIMARY KEY CLUSTERED 
(
	[uni_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  View [dbo].[VW_UnidadeAdministrativa]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* ====================================================================
 Author:		Rafael Guilherme Amado
 Create date: 18/08/2010 17:40
 Description:	Lista todas as unidade administrativa do MSTech SSO que 
				forem ligadas as unidades do conpat.
 ====================================================================*/
CREATE VIEW [dbo].[VW_UnidadeAdministrativa]
AS
SELECT     
	A.ent_id
	, A.uad_id
	, A.tua_id
	, A.uad_codigo
	, A.uad_nome
	, A.uad_sigla
	, A.uad_idSuperior
	, A.uad_situacao
	, A.uad_dataCriacao
	, A.uad_dataAlteracao
	, A.uad_integridade
	, U.uni_id
	, U.uni_codigoUGE

FROM
	dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS A 
INNER JOIN
	dbo.Unidade AS U 
		--ON A.ent_id = U.ent_id 
		ON A.uad_id = U.uad_id

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetUnidadeGestoraImediata]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION  [dbo].[FN_GetUnidadeGestoraImediata] 
(	
	@uni_id INT
)
RETURNS TABLE
AS
RETURN 
(
	SELECT
		  UAD.uni_id
		, UAD.uad_id
		, UAD.uad_nome
	FROM 
		VW_UnidadeAdministrativa UAD WITH(NOLOCK)		
	WHERE
		1 = 1 
		and UAD.uni_id = (
							CASE WHEN @uni_id IN (SELECT uni_id FROM UnidadeGestora with(nolock) where uge_situacao not in (3))
							THEN    @uni_id
							ELSE (	
									SELECT 
											UNI.uni_id
									FROM 
											Unidade UNI with(nolock)
											INNER JOIN UnidadeGestora UGE  with(nolock)
											ON UNI.uni_id = UGE.uni_id
									WHERE 
											UNI.uad_id = (
															SELECT 
																UAD.uad_idSuperior
															FROM
																VW_UnidadeAdministrativa UAD WITH(NOLOCK)
															WHERE 
																UAD.uni_id = @uni_id
														)  
								   )
							END
						)
)

/*

SELECT top 1 * FROM UnidadeGestora where uni_id = 6163

SELECT top 1 * FROM UnidadeGuarda where uni_id = 6163

*/
GO
/****** Object:  View [dbo].[VW_SeguradoraEntidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todas as entidade do MSTech SSO que forem ligadas
--				as seguradoras do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_SeguradoraEntidade]
AS
SELECT
	E.ent_id
	, E.ten_id
	, E.ent_nomeFantasia
	, E.ent_razaoSocial
	, E.ent_sigla
	, E.ent_cnpj
	, E.ent_inscricaoMunicipal
	, E.ent_inscricaoEstadual
	, E.ent_idSuperior
	, E.ent_codigo
	, E.ent_situacao
	, E.ent_dataCriacao
	, E.ent_dataAlteracao
	, E.ent_integridade
FROM
	Synonym_SYS_Entidade_SSO E
	INNER JOIN Seguradora S
		ON E.ent_id = S.ent_id;

GO
/****** Object:  View [dbo].[VW_SeguradoraEntidadeEndereco]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os endereço de entidade do MSTech SSO que forem 
--				ligadas as seguradoras do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_SeguradoraEntidadeEndereco]
AS
SELECT 
	EE.ent_id
	, EE.ene_id
	, EE.end_id
	, EE.ene_numero
	, EE.ene_complemento
	, EE.ene_situacao
	, EE.ene_dataCriacao
	, EE.ene_dataAlteracao
FROM 
	Synonym_SYS_EntidadeEndereco_SSO EE
	INNER JOIN VW_SeguradoraEntidade E
		ON E.ent_id = EE.ent_id;

GO
/****** Object:  View [dbo].[VW_SeguradoraEntidadeContato]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os contatos de entidade do MSTech SSO que forem 
--				ligadas as seguradoras do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_SeguradoraEntidadeContato]
AS
SELECT
	C.ent_id
	, C.enc_id
	, C.tmc_id
	, C.enc_contato
	, C.enc_situacao
	, C.enc_dataCriacao
	, C.enc_dataAlteracao
FROM
	Synonym_SYS_EntidadeContato_SSO C
	INNER JOIN VW_SeguradoraEntidade E
		ON E.ent_id = C.ent_id;

GO
/****** Object:  View [dbo].[VW_UnidadeAdministrativaEndereco]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os endereço de unidade administrativa do MSTech
--				SSO que forem ligadas as unidades do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_UnidadeAdministrativaEndereco]
AS
SELECT 
	EE.ent_id
	, EE.uad_id
	, EE.uae_id
	, EE.end_id
	, EE.uae_numero
	, EE.uae_complemento
	, EE.uae_situacao
	, EE.uae_dataCriacao
	, EE.uae_dataAlteracao
FROM
	Synonym_SYS_UnidadeAdministrativaEndereco_SSO EE
	INNER JOIN VW_UnidadeAdministrativa U
		ON U.ent_id = EE.ent_id AND U.uad_id = EE.uad_id;

GO
/****** Object:  View [dbo].[VW_UnidadeAdministrativaContato]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os contatos de unidade administrativa do MSTech
--				SSO que forem ligadas as unidades do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_UnidadeAdministrativaContato]
AS
SELECT
	C.ent_id
	, C.uad_id
	, C.uac_id
	, C.tmc_id
	, C.uac_contato
	, C.uac_situacao
	, C.uac_dataCriacao
	, C.uac_dataAlteracao
FROM
	Synonym_SYS_UnidadeAdministrativaContato_SSO C
	INNER JOIN VW_UnidadeAdministrativa U
		ON C.ent_id = U.ent_id AND U.uad_id = C.uad_id;

GO
/****** Object:  View [dbo].[VW_UnidadeEntidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* ========================================================================
 Author:		Rafael Guilherme Amado
 Create date: 18/08/2010 17:40
 Description:	Lista todas as entidade do MSTech SSO que forem ligadas
				as unidades do conpat.
 ========================================================================*/
CREATE VIEW [dbo].[VW_UnidadeEntidade]
AS
SELECT     E.ent_id, E.ten_id, E.ent_nomeFantasia, E.ent_razaoSocial, E.ent_sigla, E.ent_cnpj, E.ent_inscricaoMunicipal, E.ent_inscricaoEstadual, E.ent_idSuperior, 
                      E.ent_codigo, E.ent_situacao, E.ent_dataCriacao, E.ent_dataAlteracao, E.ent_integridade, U.uni_id
FROM         dbo.Synonym_SYS_Entidade_SSO AS E INNER JOIN
                      dbo.Unidade AS U ON E.ent_id = U.ent_id AND U.uad_id IS NULL

GO
/****** Object:  View [dbo].[VW_UnidadeEntidadeEndereco]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os endereço de entidade do MSTech SSO que forem 
--				ligadas as unidades do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_UnidadeEntidadeEndereco]
AS
SELECT
	EE.ent_id
	, EE.ene_id
	, EE.end_id
	, EE.ene_numero
	, EE.ene_complemento
	, EE.ene_situacao
	, EE.ene_dataCriacao
	, EE.ene_dataAlteracao
FROM
	Synonym_SYS_EntidadeEndereco_SSO EE
	INNER JOIN VW_UnidadeEntidade E
		ON EE.ent_id = E.ent_id;

GO
/****** Object:  View [dbo].[VW_UnidadeEntidadeContato]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os contatos de entidade do MSTech SSO que forem 
--				ligadas as unidades do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_UnidadeEntidadeContato]
AS
SELECT
	C.ent_id
	, C.enc_id
	, C.tmc_id
	, C.enc_contato
	, C.enc_situacao
	, C.enc_dataCriacao
	, C.enc_dataAlteracao
FROM
	Synonym_SYS_EntidadeContato_SSO C
	INNER JOIN VW_UnidadeEntidade E
		ON C.ent_id = E.ent_id;

GO
/****** Object:  View [dbo].[VW_FornecedorPessoa]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todas as pessoas do MSTech SSO que forem ligados
--				aos fornecedores do conpat.
-- ===================================================================
CREATE VIEW [dbo].[VW_FornecedorPessoa]
AS
SELECT
	P.pes_id
	, P.pes_nome
	, P.pes_nome_abreviado
	, P.pai_idNacionalidade
	, P.pes_naturalizado
	, P.cid_idNaturalidade
	, P.pes_dataNascimento
	, P.pes_estadoCivil
	, P.pes_racaCor
	, P.pes_sexo
	, P.pes_idFiliacaoPai
	, P.pes_idFiliacaoMae
	, P.tes_id
	, P.pes_foto
	, P.pes_situacao
	, P.pes_dataCriacao
	, P.pes_dataAlteracao
	, P.pes_integridade
FROM
	Synonym_PES_Pessoa_SSO P
	INNER JOIN FornecedorPF F
		ON P.pes_id = F.pes_id;

GO
/****** Object:  View [dbo].[VW_FornecedorPessoaEndereco]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os endereços da pessoa do MSTech SSO que forem 
--				ligados aos fornecedores do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_FornecedorPessoaEndereco]
AS
SELECT 
	PE.pes_id
	, PE.pse_id
	, PE.end_id
	, PE.pse_numero
	, PE.pse_complemento
	, PE.pse_situacao
	, PE.pse_dataCriacao
	, PE.pse_dataAlteracao
FROM
	Synonym_PES_PessoaEndereco_SSO PE
	INNER JOIN VW_FornecedorPessoa P
		ON PE.pes_id = P.pes_id;

GO
/****** Object:  View [dbo].[VW_FornecedorPessoaDocumento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os documentos da pessoa do MSTech SSO que forem 
--				ligados aos fornecedores do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_FornecedorPessoaDocumento]
AS
SELECT
	D.pes_id
	, D.tdo_id
	, D.psd_numero
	, D.psd_dataEmissao
	, D.psd_orgaoEmissao
	, D.unf_idEmissao
	, D.psd_infoComplementares
	, D.psd_situacao
	, D.psd_dataCriacao
	, D.psd_dataAlteracao
FROM
	Synonym_PES_PessoaDocumento_SSO D
	INNER JOIN VW_FornecedorPessoa P
		ON D.pes_id = P.pes_id;

GO
/****** Object:  View [dbo].[VW_FornecedorPessoaContato]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =======================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os contatos da pessoa do MSTech SSO que forem 
--				ligados aos fornecedores do conpat.
-- =======================================================================
CREATE VIEW [dbo].[VW_FornecedorPessoaContato]
AS
SELECT
	C.pes_id
	, C.psc_id
	, C.tmc_id
	, C.psc_contato
	, C.psc_situacao
	, C.psc_dataCriacao
	, C.psc_dataAlteracao
FROM
	Synonym_PES_PessoaContato_SSO C
	INNER JOIN VW_FornecedorPessoa P
		ON C.pes_id = P.pes_id;

GO
/****** Object:  View [dbo].[VW_ConPatGrupo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os grupos do MSTech SSO que forem ligados ao 
--				sistema do conpat.
-- =====================================================================
CREATE VIEW [dbo].[VW_ConPatGrupo]
AS

WIth SisID AS
(
SELECT dbo.FN_GetValorParemetrosAtivo('SISTEMA_CONPAT') as sisID

)
SELECT
	gru_id
	, gru_nome
	, gru_situacao
	, gru_dataCriacao
	, gru_dataAlteracao
	, vis_id
	, sis_id
	, gru_integridade
FROM 
	Synonym_SYS_Grupo_SSO
	
WHERE
	sis_id = (Select top 1 sisID from SisID);

GO
/****** Object:  View [dbo].[VW_ConPatUsuario]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/* =======================================================
 Author:		Rafael Guilherme Amado
 Create date: 18/08/2010 17:40
 Description:	Lista todas os usuários do sistema conpat.
 =======================================================*/
CREATE VIEW [dbo].[VW_ConPatUsuario]
AS

WITH UsuarioGrupo AS
(
SELECT     
	UG.usu_id
FROM          
	dbo.Synonym_SYS_UsuarioGrupo_SSO AS UG WITH(NOLOCK)
	INNER JOIN dbo.VW_ConPatGrupo AS G WITH(NOLOCK)
	ON G.gru_id = UG.gru_id
)

SELECT     
	usu_id
	, usu_login
	, usu_dominio
	, usu_email
	, usu_senha
	, usu_situacao
	, usu_dataCriacao
	, usu_dataAlteracao
	, pes_id
	, usu_integridade
	, ent_id
FROM         
	dbo.Synonym_SYS_Usuario_SSO AS U WITH(NOLOCK)
WHERE     
	EXISTS  (SELECT UG.usu_id
				FROM UsuarioGrupo as UG WITH(NOLOCK)
				WHERE (U.usu_id = UG.usu_id))

GO
/****** Object:  View [dbo].[VW_FornecedorEntidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todas as entidade do MSTech SSO que forem ligados
--				aos fornecedores do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_FornecedorEntidade]
AS
SELECT
	E.ent_id
	, E.ten_id
	, E.ent_nomeFantasia
	, E.ent_razaoSocial
	, E.ent_sigla
	, E.ent_cnpj
	, E.ent_inscricaoMunicipal
	, E.ent_inscricaoEstadual
	, E.ent_idSuperior
	, E.ent_codigo
	, E.ent_situacao
	, E.ent_dataCriacao
	, E.ent_dataAlteracao
	, E.ent_integridade
FROM
	Synonym_SYS_Entidade_SSO AS E
	INNER JOIN FornecedorPJ AS F
		ON E.ent_id = F.ent_id

GO
/****** Object:  View [dbo].[VW_FornecedorEntidadeEndereco]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os endereço de entidade do MSTech SSO que forem 
--				ligados aos fornecedores do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_FornecedorEntidadeEndereco]
AS
SELECT 
	EE.ent_id
	, EE.ene_id
	, EE.end_id
	, EE.ene_numero
	, EE.ene_complemento
	, EE.ene_situacao
	, EE.ene_dataCriacao
	, EE.ene_dataAlteracao
FROM 
	Synonym_SYS_EntidadeEndereco_SSO EE
	INNER JOIN VW_FornecedorEntidade E
		ON E.ent_id = EE.ent_id;

GO
/****** Object:  View [dbo].[VW_FornecedorEntidadeContato]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todos os contatos de entidade do MSTech SSO que forem 
--				ligados aos fornecedores do conpat.
-- ========================================================================
CREATE VIEW [dbo].[VW_FornecedorEntidadeContato]
AS
SELECT
	C.ent_id
	, C.enc_id
	, C.tmc_id
	, C.enc_contato
	, C.enc_situacao
	, C.enc_dataCriacao
	, C.enc_dataAlteracao
FROM
	Synonym_SYS_EntidadeContato_SSO C
	INNER JOIN VW_FornecedorEntidade E
		ON E.ent_id = C.ent_id;

GO
/****** Object:  View [dbo].[VW_ConPatUsuarioPessoa]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================
-- Author:		Rafael Guilherme Amado
-- Create date: 18/08/2010 17:40
-- Description:	Lista todas as pessoas do MSTech SSO que forem ligados
--				aos usuários do conpat.
-- ===================================================================
CREATE VIEW [dbo].[VW_ConPatUsuarioPessoa]
AS
SELECT
	P.pes_id
	, P.pes_nome
	, P.pes_nome_abreviado
	, P.pai_idNacionalidade
	, P.pes_naturalizado
	, P.cid_idNaturalidade
	, P.pes_dataNascimento
	, P.pes_estadoCivil
	, P.pes_racaCor
	, P.pes_sexo
	, P.pes_idFiliacaoPai
	, P.pes_idFiliacaoMae
	, P.tes_id
	, P.pes_foto
	, P.pes_situacao
	, P.pes_dataCriacao
	, P.pes_dataAlteracao
	, P.pes_integridade
FROM
	Synonym_PES_Pessoa_SSO P
	INNER JOIN VW_ConPatUsuario U
		ON U.pes_id = P.pes_id;

GO
/****** Object:  View [dbo].[VW_UnidadeGestora]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create VIEW [dbo].[VW_UnidadeGestora]
AS
SELECT
	U.uni_id
	, U.uni_coletor
	, U.uni_justificativaColetor
	, U.uni_internet
	, U.uni_codigoUGE
	, G.uge_situacao
	, G.uge_dataCriacao 
	, G.uge_dataAlteracao
	, E.ent_id --ent_id para entidade e unidade adm
	, null as uad_id --uad_id para unidade adm
	, E.ten_id as uni_tipo --uni_tipo para tipo de entidade ou unidade adm
	, E.ent_razaoSocial as uni_nome --uni_nome para razao social em entidade e uad_nome em unidade adm
	, E.ent_nomeFantasia --ent_nomeFantasia para entidade 
	, E.ent_sigla as uni_sigla --uni_sigla para entidade e unidade administrativa
	, E.ent_codigo as uad_codigo -- aud_codigo para unidade administrativa
	, E.ent_cnpj --ent_cnpj para entidade
	, E.ent_inscricaoMunicipal --ent_inscricaoEstadual para entidade
	, E.ent_inscricaoEstadual --ent_inscricaoEstadual para entidade
	, E.ent_idSuperior as uni_idSuperior --uni_idSuperior  da entidade para SYS_Entidade e unidade adm para SYS_UnidadeAdm
	, E.ent_situacao as uni_situacao --situacao da entidade ou unidade adm
	, E.ent_dataCriacao as uni_dataCriacao --data de criacao da entidade ou unidade adm
	, E.ent_dataAlteracao as uni_dataAlteracao --data de alteracao da entidade ou unidade adm
	, E.ent_integridade as uni_integridade --numero de dependentes de entidade ou unidade adm
	, 1 as uni_objeto -- 1-Entidade; 2-Unidade Administrativa
FROM
	VW_UnidadeEntidade E
	INNER JOIN Unidade U
		ON ((E.ent_id = U.ent_id) AND (U.uad_id IS NULL))
	INNER JOIN UnidadeGestora G
		ON U.uni_id = G.uni_id
UNION ALL
SELECT
	U.uni_id
	, U.uni_coletor
	, U.uni_justificativaColetor
	, U.uni_internet
	, U.uni_codigoUGE
	, G.uge_situacao
	, G.uge_dataCriacao 
	, G.uge_dataAlteracao
	, A.ent_id
	, A.uad_id
	, A.tua_id
	, A.uad_nome
	, null 
	, A.uad_sigla
	, A.uad_codigo
	, null
	, null
	, null
	, A.uad_idSuperior
	, A.uad_situacao
	, A.uad_dataCriacao
	, A.uad_dataAlteracao
	, A.uad_integridade
	, 2 as uni_tipo
FROM
	VW_UnidadeAdministrativa A
	INNER JOIN Unidade U
		ON ((A.ent_id = U.ent_id) AND (A.uad_id = U.uad_id))
	INNER JOIN UnidadeGestora G
		ON U.uni_id = G.uni_id
where
	u.uni_situacao = 1

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetDestinoGPB]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Fabio Nazima>
-- Create date: <01/10/2010>
-- Description:	<Retorna uma tabela com os campos de destino da GPB:
-- DO GRUPO DE BENS>
-- =============================================
CREATE FUNCTION [dbo].[FN_GetDestinoGPB]
(	
	@bem_id_Destino varchar(max),
	@bit_id_Destino varchar(max),
	@numGpbDestino varchar(max),
	@tpm_operacaoDestino varchar(max),
	@origem varchar(max),
	@destino varchar(max),
	@reimpressao bit
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT  distinct
		(dbo.CORE_END_Endereco.end_logradouro + ' nº '+ Localidade.loc_numero collate database_default +'/'+ISNULL( Localidade.loc_complemento, '')+' '+ RTRIM(LTRIM(dbo.CORE_END_Endereco.end_bairro)) + '-' +dbo.CORE_END_Cidade.cid_nome) as endereco
		,dbo.FN_GetUniNome(MovimentacaoBem.mov_unidadeDestino) as UnidadeDespesa
		,VW_UnidadeEntidade.ent_razaoSocial as Orgao
		,(select top 1 uni_nomegestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino)) as UnidadeOrcamentaria
		,  Case
			when not(Unidade.uni_codigoUGE is null)
				then 
					Unidade.uni_codigoUGE
				else
					(select top 1 uni_codigoUGE  
					from 
						Unidade as u inner join dbo.FN_GetUnidadesSuperiores(Unidade.uni_id)as unidadesup
							on u.uni_id=unidadesup.uni_idgestora)
			end
			as ent_codigo
		, Unidade.uni_id as UnidadeDestino
		, (dbo.CORE_END_Endereco.end_logradouro 
				+ ' nº ' + Localidade.loc_numero
				+ ' CEP ' + dbo.CORE_END_Endereco.end_cep
				+ '/' + ISNULL(Localidade.loc_complemento, '')
				+ ' ' + dbo.CORE_END_Endereco.end_bairro 
				+ '-' + dbo.CORE_END_Cidade.cid_nome)
				+ '/' + uf.unf_sigla AS enderecoRelGpbGrb

		, Unidade.uad_id 
FROM 
		MovimentacaoBem WITH(NoLock)
		inner join Unidade WITH(NoLock)
			on Unidade.uni_id = MovimentacaoBem.mov_unidadeDestino
		inner join Localidade with(nolock)
			on (Localidade.uni_id =MovimentacaoBem.mov_unidadeDestino
				and Localidade.loc_situacao=4)
		inner join dbo.CORE_END_Endereco with(nolock)
			on dbo.CORE_END_Endereco.end_id=Localidade.end_id
		inner join dbo.CORE_END_Cidade with(nolock)
			on dbo.CORE_END_Cidade.cid_id = dbo.CORE_END_Endereco.cid_id		
		inner join VW_UnidadeEntidade WITH(NoLock)
			on VW_UnidadeEntidade.ent_id = Unidade.ent_id
		inner join TipoMovimentacao WITH(NoLock)
			on TipoMovimentacao.tpm_id = MovimentacaoBem.tpm_id
		inner join dbo.Synonym_SYS_Entidade_SSO WITH(NoLock)
			on dbo.Synonym_SYS_Entidade_SSO.ent_id = VW_UnidadeEntidade.ent_id
		INNER JOIN dbo.Synonym_END_UnidadeFederativa_SSO AS uf WITH(NOLOCK)
			ON uf.unf_id = dbo.CORE_END_Cidade.unf_id

	where
		MovimentacaoBem.bem_id in (select valor from dbo.FN_StringToArrayInt64(@bem_id_Destino,','))
		and MovimentacaoBem.bit_id in(select valor from dbo.FN_StringToArrayInt64(@bit_id_Destino,',')) 
		and (TipoMovimentacao.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacaoDestino,',')))
		and ((@numGpbDestino='0') or (MovimentacaoBem.mov_GPB=@numGpbDestino))
		and MovimentacaoBem.mov_situacao <> 4
		AND (@reimpressao = 1 OR MovimentacaoBem.mov_situacao =5)
		and (MovimentacaoBem.mov_unidadeDestino!=MovimentacaoBem.mov_unidadeOrigem)
		and (@origem='0'or MovimentacaoBem.mov_unidadeOrigem in (select valor from dbo.FN_StringToArrayInt64(@origem,',')) )
		and (@destino='0' or MovimentacaoBem.mov_unidadeDestino in (select valor from dbo.FN_StringToArrayInt64(@destino,',')))
)

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetOrigemGPB]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Fabio Nazima>
-- Create date: <01/10/2010>
-- Description:	<Retorna uma tabela com os campos de origem da GPB:
-- DO GRUPO DE BENS>
-- =============================================
CREATE FUNCTION [dbo].[FN_GetOrigemGPB]
(	
	@bem_id_Origem varchar(max),
	@bit_id_Origem varchar(max),
	@numGpb varchar(max),
	@tpm_operacao varchar(max),
	@origem varchar(max),
	@destino varchar(max)
)
RETURNS TABLE 

AS
RETURN 
(
	SELECT DISTINCT
		(dbo.CORE_END_Endereco.end_logradouro 
		+ ' nº ' + Localidade.loc_numero collate database_default
		+ '/' + ISNULL(Localidade.loc_complemento, '')
		+ ' ' + dbo.CORE_END_Endereco.end_bairro 
		+ '-' + dbo.CORE_END_Cidade.cid_nome) AS endereco
		,dbo.FN_GetUniNome(MovimentacaoBem.mov_unidadeOrigem) as UnidadeDespesa
		,dbo.VW_UnidadeEntidade.ent_razaoSocial as Orgao
		,(select top 1 uni_nomegestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeOrigem)) as UnidadeOrcamentaria
		,Case
			when not(Unidade.uni_codigoUGE is null)
				then 
					Unidade.uni_codigoUGE
				else
					(select top 1 uni_codigoUGE  
					from 
						Unidade as u inner join dbo.FN_GetUnidadesSuperiores(Unidade.uni_id)as unidadesup
							on u.uni_id=unidadesup.uni_idgestora)
			end
			as ent_codigo
			,Unidade.uni_id as UnidadeOrigem
			, (dbo.CORE_END_Endereco.end_logradouro 
				+ ' nº ' + Localidade.loc_numero
				+ ' CEP ' + dbo.CORE_END_Endereco.end_cep
				+ '/' + ISNULL(Localidade.loc_complemento, '')
				+ ' ' + dbo.CORE_END_Endereco.end_bairro 
				+ '-' + dbo.CORE_END_Cidade.cid_nome)
				+ '/' + uf.unf_sigla AS enderecoRelGpbGrb

		, Unidade.uad_id
FROM 
		
		MovimentacaoBem  WITH(NoLock)
		inner join Unidade WITH(NoLock)
			on Unidade.uni_id = MovimentacaoBem.mov_unidadeOrigem
		inner join Localidade with(nolock)
			on (Localidade.uni_id =MovimentacaoBem.mov_unidadeOrigem 
				and Localidade.loc_situacao=4)
		inner join dbo.CORE_END_Endereco with(nolock)
			on dbo.CORE_END_Endereco.end_id=Localidade.end_id
		inner join dbo.CORE_END_Cidade with(nolock)
			on dbo.CORE_END_Cidade.cid_id = dbo.CORE_END_Endereco.cid_id		
		inner join dbo.VW_UnidadeEntidade WITH(NoLock)
			on dbo.VW_UnidadeEntidade.ent_id = Unidade.ent_id
		inner join TipoMovimentacao WITH(NoLock)
			on TipoMovimentacao.tpm_id = MovimentacaoBem.tpm_id
		inner join dbo.Synonym_SYS_Entidade_SSO  WITH(NoLock)
			on dbo.Synonym_SYS_Entidade_SSO.ent_id = VW_UnidadeEntidade.ent_id
		INNER JOIN dbo.Synonym_END_UnidadeFederativa_SSO AS uf WITH(NOLOCK)
			ON uf.unf_id = dbo.CORE_END_Cidade.unf_id

	where
		MovimentacaoBem.bem_id in (select valor from dbo.FN_StringToArrayInt64(@bem_id_Origem,','))
		and MovimentacaoBem.bit_id in(select valor from dbo.FN_StringToArrayInt64(@bit_id_Origem,',')) 
		and (TipoMovimentacao.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',')))
		and ((@numGpb='0') or (MovimentacaoBem.mov_GPB=@numGpb))
		and (@origem='0'or MovimentacaoBem.mov_unidadeOrigem in (select valor from dbo.FN_StringToArrayInt64(@origem,',')) )
		and (@destino='0' or MovimentacaoBem.mov_unidadeDestino in (select valor from dbo.FN_StringToArrayInt64(@destino,',')))
)

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetGrupoBensSuperiores]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Jorge Freitas>
-- Create date: <01/10/2010>
-- Description:	<Retorna a hierarquia ao contrário:
-- DO GRUPO DE BENS>
-- =============================================
CREATE FUNCTION [dbo].[FN_GetGrupoBensSuperiores] 
(	
	@grp_id int
)
RETURNS TABLE 
AS
RETURN 
(
	WITH
	grbEscolhida as (
	select 
		gb.grp_id
		, gb.grp_idPai 
		, gb.grp_nome
	from 
		GrupoBens AS gb WITH(NoLock)
	WHERE 
		gb.grp_id = @grp_id
	
	UNION ALL
	
	select 
		gb1.grp_id
		, gb1.grp_idPai
		, gb1.grp_nome 
	from 
		GrupoBens AS gb1 WITH(NoLock)
	INNER JOIN 
		grbEscolhida GBE ON
		(gb1.grp_id = GBE.grp_idPai AND GBE.grp_idPai IS NOT NULL )
	)
	
	SELECT * FROM grbEscolhida 
)

GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetGrupoBensSuperioresPai]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Jorge Freitas>
-- Create date: <01/10/2010>
-- Description:	<Retorna a hierarquia ao contrário:
-- DO GRUPO DE BENS>
-- =============================================
CREATE FUNCTION [dbo].[FN_GetGrupoBensSuperioresPai] 
(	
	@grp_id int
)
RETURNS TABLE 
AS
RETURN 
(
	WITH
	grbEscolhida as (
	select 
		gb.grp_id
		, gb.grp_idPai 
		, gb.grp_nome
	from 
		GrupoBens AS gb WITH(NoLock)
	WHERE 
		gb.grp_id = @grp_id
	
	UNION ALL
	
	select 
		gb1.grp_id
		, gb1.grp_idPai
		, gb1.grp_nome 
	from 
		GrupoBens AS gb1 WITH(NoLock)
	INNER JOIN 
		grbEscolhida GBE ON
		(gb1.grp_id = GBE.grp_idPai AND GBE.grp_idPai IS NOT NULL )
	)
	
	SELECT * FROM grbEscolhida where grp_idPai is  null
)


GO
/****** Object:  UserDefinedFunction [dbo].[FN_GetProximaGPB]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Fabio Nazima>
-- Create date: <01/10/2010>
-- Description:	<Retorna uma tabela com os campos de destino da GPB:
-- DO GRUPO DE BENS>
-- =============================================
CREATE FUNCTION [dbo].[FN_GetProximaGPB]
(	
	@ano char(4)
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT top 1
		gpb_ano
		,gpb_proximoNumero
	FROM 
		GPB WITH(NoLock)
	where 
		@ano=GPB.gpb_ano
		
)

GO
/****** Object:  View [dbo].[VW_Extracao_Geral]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[VW_Extracao_Geral]  as 


select 

		bi.bit_registropat
		, tipo = case bid_tipodoc 
					when 1 then 'Processo'
					when 2 then 'ContratoProcessual'
					when 3 then 'DocumentoCompra'
					when 4 then 'NotaEmpenho'
					when 6 then 'DocumentoBaixa'
					when 7 then 'Local'
					when 8 then 'nlEstorno'
					when 5 then 'Outros'
				end
				
		, bid.* 
		, bp.bem_descricao
		,bp.bem_dataEntrada

from 
	BemPatrimonial			bp		with(nolock) 
	inner join BemItem		bi		with(nolock) 
	on(bp.bem_id = bi.bem_id)
	inner join BemItemDocumento bid with(nolock) 
	on (bi.bit_id = bid.bit_id 
	and bi.bem_id = bid.bem_id)
where
	1 = 1
--	bp.bem_descricao like  '%impressora%'
and grp_id in (select * from FN_GetGrupoHierarquia(198))
and	bi.bit_status = 1
					


GO
/****** Object:  View [dbo].[vw_RelatorioDeExportacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vw_RelatorioDeExportacao] as 

SELECT	ISNULL(MB.mov_nl, '') AS 'NL',
		ISNULL(U.uni_codigoUGE, '') AS 'UGE',
		ISNULL(A.uad_codigo, '') AS 'CÓDIGO DA UNIDADE DE GUARDA',
		ISNULL(A.uad_nome, '') AS 'NOME DA UNIDADE DE GUARDA',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao,   0, 40), '')) AS 'DESCRIÇÃO DO BEM 1/6',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao,  40, 40), '')) AS 'DESCRIÇÃO DO BEM 2/6',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao,  80, 40), '')) AS 'DESCRIÇÃO DO BEM 3/6',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao, 120, 40), '')) AS 'DESCRIÇÃO DO BEM 4/6',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao, 160, 40), '')) AS 'DESCRIÇÃO DO BEM 5/6',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao, 200, 40), '')) AS 'DESCRIÇÃO DO BEM 6/6',
		ISNULL(MB.per_mes, '') AS 'MÊS',
		ISNULL(MB.per_ano, '') AS 'ANO',
		ISNULL(MB.cco_codigoDebito, '') AS 'CÓDIGO DE DÉBITO',
		ISNULL(MB.cco_codigoCredito, '') AS 'CÓDIGO DE CRÉDITO',
		ISNULL
		((
			SELECT uad_nome
			FROM Unidade AS U
			JOIN Synonym_SYS_UnidadeAdministrativa_SSO AS A ON (A.uad_id = U.uad_id)
			WHERE U.uni_id = MB.mov_unidadeOrigem
		), '') AS 'NOME DA UNIDADE DE ORIGEM',
		ISNULL
		((
			SELECT uad_nome
			FROM Unidade AS U
			INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO AS A ON (A.uad_id = U.uad_id)
			WHERE U.uni_id = MB.mov_unidadeDestino
		), '') AS 'NOME DA UNIDADE DE DESTINO',
		CONVERT(VARCHAR(40), ISNULL(MB.mov_valor, ''), 1) AS 'VALOR'
FROM MovimentacaoBem AS MB
INNER JOIN BemPatrimonial AS BP ON (BP.bem_id = MB.bem_id)
INNER JOIN Unidade AS U ON (U.uni_id = MB.mov_unidadeOrigem)
INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO AS A ON (A.uad_id = U.uad_id)
WHERE MB.mov_nl IS NOT NULL AND MB.per_ano = '2014'
--ORDER BY MB.mov_nl, MB.mov_data


GO
/****** Object:  View [dbo].[vw_siafemConsolidado]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--INSERT INTO OPENROWSET('Microsoft.Jet.OLEDB.4.0', 
--'Excel 12.0;Database=C:\teste.xls;User=Admin;Password=', 
--'SELECT UnidadeGestora,EventoDebito, EventoCredito,ClassificacaoDebito,ClassificacaoCredito,Valor,Observacao,UnidadeDestino,mov_gpb,per_mes,per_ano,uad_nome FROM [Sheet1$]')  
  											
create view [dbo].[vw_siafemConsolidado] as 
		SELECT
			--ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID
			--,
			-- REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao
			--, 
			--,
			U.uni_codigoUGE AS 'Unidade Gestora'
			--, '00001' AS Gestao		
			, PC.pco_evento as 'Evento Debito'
			, (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							
							( CASE (ABS(M.per_ano) - ABS(SUBSTRING(BIC.bid_numeroDoc,1, 4)))   
								WHEN 0 THEN PC.pco_eventoCredito
								WHEN 1 THEN '540170'
								ELSE '540172'
							END)
							
						ELSE PC.pco_eventoCredito
						END
			)as 'Evento Credito'
			--,PC.pco_eventoCredito
			, M.cco_codigoDebito as 'Classificacao Debito'
			,  (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							cast(BIC.bid_classificacao as varchar(20))
						ELSE 
							M.cco_codigoCredito
						END
			)		as 'Classificacao Credito'	
			, (SUM(M.mov_valor) * ISNULL(BIC.bid_porcentagem/100,1)) as Valor   -- *********************************
			, Observacao
			, Ud.uni_codigoUGE AS 'Unidade Destino'
			--, BIC.bid_numeroDoc AS InscricaoEvento    --- *********************************
			, M.mov_gpb				
			,M.per_mes
			,M.per_ano
			,uad.uad_nome
			
		FROM
			(
									SELECT 
								mov.bem_id,
								mov.bit_id,
								mov.mov_observacao as Observacao,
								mov.mov_unidadeDestino,
								mov.mov_gpb,
								mov.mov_valor,
								mov.cco_codigoCredito,
								mov.cco_codigoDebito,
								mov.per_ano,
								mov.tpm_id,
								mov.grp_id,
								mov.uni_id,
								mov.per_mes
		
							FROM
								 MovimentacaoBem as mov WITH(NOLOCK)
		
		
							WHERE
									mov.mov_situacao in (1,4)
								AND (null IS NULL OR mov.uni_id = null)
								AND mov.mov_nl is null	
								and per_ano = '2014'
								and per_mes in ('03','04','05','06','07','08','09','10','11','12')
									) as  M 

			INNER JOIN Unidade U WITH(NOLOCK)
				ON U.uni_id = M.uni_id

			left JOIN Unidade Ud WITH(NOLOCK)
				ON M.mov_unidadeDestino = Ud.uni_id 

			INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO as uad WITH(NOLOCK)
				ON	 uad.uad_id = U.uad_id AND
					 uad.ent_id = U.ent_id AND
					 uad.uad_situacao = 1					 		

			INNER JOIN ParametroContabil PC WITH(NOLOCK)
				ON M.cco_codigoDebito = PC.cco_codigoDebito
					AND M.cco_codigoCredito = PC.cco_codigoCredito
					AND M.grp_id = PC.grp_id
					AND M.tpm_id = PC.tpm_id	
			INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
				ON M.tpm_id = TM.tpm_id 
			LEFT JOIN 
			(
							SELECT 
						ROW_NUMBER() OVER (order  by BD.bem_id, BD.bit_id) as linha
						,BD.* 
					FROM
						BemItemDocumento AS BD WITH(NOLOCK) 
					INNER JOIN MovimentacaoBemEmExportacao AS MO WITH(NOLOCK) 
						on MO.bem_id = BD.bem_id
						and MO.bit_id = BD.bit_id
					WHERE
						mov_situacao in (1,4)
					AND uni_id = null

					AND bid_tipoDoc = 4
			) as  BIC   --- ***************************************
				ON BIC.bem_id = M.bem_id
				AND BIC.bit_id = M.bit_id
			
		WHERE 
			(PC.pco_evento IS NOT NULL) AND
			( TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
				OR M.tpm_id = 1))
				
			
				
		GROUP BY
			U.uni_codigoUGE
			, M.per_ano
			,M.per_mes
			, PC.pco_evento
			, PC.pco_eventoCredito
			, M.cco_codigoDebito
			, M.cco_codigoCredito
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc
			, BIC.bid_porcentagem
			, BIC.bid_classificacao			
			, M.mov_gpb
			, uad.uad_nome
			 ,Ud.uni_codigoUGE
			
		--ORDER BY 
		--	U.uni_codigoUGE
		--	, M.per_ano
		--	,M.per_mes
GO
/****** Object:  Index [ConPat_BemItem_BitUniGuarda]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [ConPat_BemItem_BitUniGuarda] ON [dbo].[BemItem]
(
	[bit_uniGuarda] ASC
)
INCLUDE ( 	[bit_valorLiquido],
	[bem_id],
	[bit_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IDX_BemItem__BitReg_BitSit]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IDX_BemItem__BitReg_BitSit] ON [dbo].[BemItem]
(
	[bit_registroPat] ASC,
	[bit_situacao] ASC
)
INCLUDE ( 	[bit_uniGestora],
	[bit_dataCriacao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_bit_registroPat_notnull]    Script Date: 02/05/2018 17:07:40 ******/
CREATE UNIQUE NONCLUSTERED INDEX [idx_bit_registroPat_notnull] ON [dbo].[BemItem]
(
	[bit_registroPat] ASC
)
WHERE ([bit_registroPat] IS NOT NULL)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemItem_bem_id_bit_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItem_bem_id_bit_id] ON [dbo].[BemItem]
(
	[bem_id] ASC,
	[bit_id] ASC,
	[bit_uniGestora] ASC,
	[bit_uniGuarda] ASC
)
INCLUDE ( 	[bit_registroPat],
	[bit_status]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemItem_bit_cotas_TUNING_DTX]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItem_bit_cotas_TUNING_DTX] ON [dbo].[BemItem]
(
	[bit_cotas] ASC,
	[bit_dataBaixa] ASC,
	[bit_dataIncorporacao] ASC,
	[bit_status] ASC
)
INCLUDE ( 	[bem_id],
	[bit_id],
	[bit_uniGestora],
	[bit_uniGuarda],
	[bit_registroPat]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemItem_bit_dataIncorporacao_TUNING_DTX]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItem_bit_dataIncorporacao_TUNING_DTX] ON [dbo].[BemItem]
(
	[bit_dataIncorporacao] ASC,
	[bit_registroPat] ASC,
	[bit_status] ASC
)
INCLUDE ( 	[bem_id],
	[bit_id],
	[bit_uniGestora],
	[bit_uniGuarda]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BEMITEM_BIT_REG]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BEMITEM_BIT_REG] ON [dbo].[BemItem]
(
	[bit_registroPat] ASC
)
INCLUDE ( 	[bem_id],
	[bit_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemItem_Bit_Reg_Sit]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItem_Bit_Reg_Sit] ON [dbo].[BemItem]
(
	[bit_registroPat] ASC,
	[bit_situacao] ASC
)
INCLUDE ( 	[bit_uniGestora],
	[bit_dataCriacao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_BemItem_bit_status_bit_situacao]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItem_bit_status_bit_situacao] ON [dbo].[BemItem]
(
	[bit_status] ASC,
	[bit_situacao] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemItem_bit_uniGestora_bit_status]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItem_bit_uniGestora_bit_status] ON [dbo].[BemItem]
(
	[bit_uniGestora] ASC,
	[bit_status] ASC,
	[bit_situacao] ASC,
	[bit_registroPat] ASC,
	[bem_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BEMITEM_BIT_UNIGESTORA_DATAINCORPORACAO_REGISTROPAT_STATUS_SIT]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BEMITEM_BIT_UNIGESTORA_DATAINCORPORACAO_REGISTROPAT_STATUS_SIT] ON [dbo].[BemItem]
(
	[bit_uniGestora] ASC,
	[bit_dataIncorporacao] ASC,
	[bit_registroPat] ASC,
	[bit_status] ASC,
	[bit_situacao] ASC
)
INCLUDE ( 	[bem_id],
	[bit_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemItem_bit_uniGuarda_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItem_bit_uniGuarda_bem_id] ON [dbo].[BemItem]
(
	[bit_uniGuarda] ASC,
	[bem_id] ASC,
	[bit_id] ASC,
	[bit_uniGestora] ASC
)
INCLUDE ( 	[bit_registroPat]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemItem_bit_uniGuarda_bit_situacao]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItem_bit_uniGuarda_bit_situacao] ON [dbo].[BemItem]
(
	[bit_uniGuarda] ASC,
	[bit_situacao] ASC,
	[bit_status] ASC,
	[bit_uniGestora] ASC,
	[bit_registroPat] ASC,
	[bem_id] ASC,
	[bit_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_ConPat_bit_uniGestora_bit_registroPat_Tuning]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_ConPat_bit_uniGestora_bit_registroPat_Tuning] ON [dbo].[BemItem]
(
	[bit_uniGestora] ASC,
	[bit_registroPat] ASC,
	[bit_status] ASC,
	[bit_situacao] ASC
)
INCLUDE ( 	[bem_id],
	[bit_id],
	[bit_uniGuarda]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_TB_BEMITEM_BIT_REGISTROPAT_BIT_UNIGUARDA_BIT_SITUACAO_DTX_TUNING]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_TB_BEMITEM_BIT_REGISTROPAT_BIT_UNIGUARDA_BIT_SITUACAO_DTX_TUNING] ON [dbo].[BemItem]
(
	[bem_id] ASC,
	[bit_registroPat] ASC,
	[bit_uniGuarda] ASC,
	[bit_situacao] ASC
)
INCLUDE ( 	[bit_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_TB_BEMITEM_BIT_UNIGUARDA_BIT_SITUACAO_BIT_REGISTROPAT_DTX_TUNING]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_TB_BEMITEM_BIT_UNIGUARDA_BIT_SITUACAO_BIT_REGISTROPAT_DTX_TUNING] ON [dbo].[BemItem]
(
	[bit_uniGuarda] ASC,
	[bit_situacao] ASC,
	[bit_registroPat] ASC
)
INCLUDE ( 	[bem_id],
	[bit_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemItemDocumento_Tunning]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItemDocumento_Tunning] ON [dbo].[BemItemDocumento]
(
	[bid_tipoDoc] ASC
)
INCLUDE ( 	[bem_id],
	[bit_id],
	[bid_numeroDoc]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemItemWfStatus_bws_situacao_wrk_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItemWfStatus_bws_situacao_wrk_id] ON [dbo].[BemItemWfStatus]
(
	[bws_situacao] ASC,
	[wrk_id] ASC,
	[bem_id] ASC,
	[bit_id] ASC,
	[stp_id] ASC
)
INCLUDE ( 	[biw_id],
	[bws_dataAlteracao],
	[bws_dataCriacao],
	[bws_id],
	[bws_observacao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemItemWfStatus_bws_situacao_wrk_id_stp_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItemWfStatus_bws_situacao_wrk_id_stp_id] ON [dbo].[BemItemWfStatus]
(
	[bws_situacao] ASC,
	[wrk_id] ASC,
	[stp_id] ASC,
	[bem_id] ASC,
	[bit_id] ASC
)
INCLUDE ( 	[biw_id],
	[bws_dataAlteracao],
	[bws_dataCriacao],
	[bws_id],
	[bws_observacao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  Index [IX_BemItemWfStatus_stp_id_wrk_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemItemWfStatus_stp_id_wrk_id] ON [dbo].[BemItemWfStatus]
(
	[stp_id] ASC,
	[wrk_id] ASC,
	[bws_situacao] ASC,
	[bem_id] ASC,
	[bit_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_BemPatrimonial_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemPatrimonial_bem_id] ON [dbo].[BemPatrimonial]
(
	[bem_id] ASC
)
INCLUDE ( 	[bem_descricao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET QUOTED_IDENTIFIER ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET NUMERIC_ROUNDABORT OFF

GO
/****** Object:  Index [IX_BemPatrimonial_bem_valorOrigem_Tuning]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_BemPatrimonial_bem_valorOrigem_Tuning] ON [dbo].[BemPatrimonial]
(
	[bem_id] ASC
)
INCLUDE ( 	[bem_descricao],
	[bem_valorOrigem],
	[calc_bem_dataEntrada]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_TUNING_DTX]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_TUNING_DTX] ON [dbo].[BemPatrimonial]
(
	[bem_id] ASC
)
INCLUDE ( 	[bem_descricao],
	[bem_valorOrigem]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_EXECUTARROBOSIAFEM_STATUS_EXPORTACAO]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_EXECUTARROBOSIAFEM_STATUS_EXPORTACAO] ON [dbo].[ExecutarRoboSiafem]
(
	[data_criacao] ASC,
	[per_mes] ASC,
	[per_ano] ASC,
	[status_exportacao] ASC
)
INCLUDE ( 	[uni_id],
	[user_siafem],
	[senha_siafem]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_EXECUTARROBOSIAFEM_UNI_ID_PER_MES_PER_ANO_USER_SIAFEM]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_EXECUTARROBOSIAFEM_UNI_ID_PER_MES_PER_ANO_USER_SIAFEM] ON [dbo].[ExecutarRoboSiafem]
(
	[uni_id] ASC,
	[per_mes] ASC,
	[per_ano] ASC,
	[user_siafem] ASC
)
INCLUDE ( 	[status_exportacao],
	[senha_siafem]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_GRP_IDPAI_GRP_SITUACAO]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_GRP_IDPAI_GRP_SITUACAO] ON [dbo].[GrupoBens]
(
	[grp_idPai] ASC,
	[grp_situacao] ASC,
	[grp_nome] ASC
)
INCLUDE ( 	[grp_nomeAbr],
	[grp_descricao],
	[grp_dataCriacao],
	[grp_dataAlteracao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  Index [IX_GrupoBens_grp_idPai]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_GrupoBens_grp_idPai] ON [dbo].[GrupoBens]
(
	[grp_idPai] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_LOCALIDADE_UNI_ID_LOC_SITUACAO]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_LOCALIDADE_UNI_ID_LOC_SITUACAO] ON [dbo].[Localidade]
(
	[uni_id] ASC,
	[loc_situacao] ASC
)
INCLUDE ( 	[loc_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IDX_Movimentacaobem_PerMes]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IDX_Movimentacaobem_PerMes] ON [dbo].[MovimentacaoBem]
(
	[per_mes] ASC,
	[per_ano] ASC,
	[uni_id] ASC,
	[cod_siafem] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MovimentacaoBem_Bem_ExportaDetalhes_TN]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_Bem_ExportaDetalhes_TN] ON [dbo].[MovimentacaoBem]
(
	[mov_nl] ASC,
	[mov_situacao] ASC,
	[uni_id] ASC,
	[per_mes] ASC,
	[per_ano] ASC,
	[mov_unidadeDestino] ASC,
	[mov_GPB] ASC,
	[tpm_id] ASC
)
INCLUDE ( 	[mov_data],
	[bem_id],
	[bit_id],
	[grp_id],
	[cco_codigoDebito],
	[cco_codigoCredito],
	[fat_id],
	[usu_id],
	[mov_valor],
	[mov_valorReavaliado],
	[mov_percentualBaixa],
	[mov_unidadeOrigem],
	[mov_observacao],
	[mov_origem],
	[mov_dataCriacao],
	[mov_dataAlteracao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MovimentacaoBem_bem_id_bit_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_bem_id_bit_id] ON [dbo].[MovimentacaoBem]
(
	[bem_id] ASC,
	[bit_id] ASC,
	[mov_GPB] ASC,
	[mov_situacao] ASC
)
INCLUDE ( 	[mov_unidadeDestino],
	[mov_unidadeOrigem],
	[mov_valor],
	[status_exportacao],
	[mov_nl],
	[per_ano],
	[per_mes],
	[uni_id],
	[mov_observacao],
	[fat_id],
	[usu_id],
	[mov_valorReavaliado],
	[mov_percentualBaixa],
	[mov_origem],
	[mov_dataCriacao],
	[mov_dataAlteracao],
	[mov_dataOriginal],
	[cod_siafem],
	[descricao_exportacao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MovimentacaoBem_cod_siafen_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_cod_siafen_uni_id] ON [dbo].[MovimentacaoBem]
(
	[cod_siafem] ASC,
	[uni_id] ASC,
	[per_mes] ASC,
	[per_ano] ASC
)
INCLUDE ( 	[mov_nl],
	[mov_situacao],
	[mov_observacao],
	[mov_unidadeDestino],
	[mov_valor]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = OFF, ALLOW_PAGE_LOCKS = OFF, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MovimentacaoBem_mov_GPB_mov_unidadeOrigem]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_mov_GPB_mov_unidadeOrigem] ON [dbo].[MovimentacaoBem]
(
	[mov_GPB] ASC,
	[mov_unidadeOrigem] ASC,
	[mov_unidadeDestino] ASC,
	[uni_id] ASC,
	[mov_situacao] ASC,
	[tpm_id] ASC,
	[bem_id] ASC,
	[bit_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MovimentacaoBem_mov_situacao_mov_unidadeDestino]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_mov_situacao_mov_unidadeDestino] ON [dbo].[MovimentacaoBem]
(
	[mov_situacao] ASC,
	[mov_unidadeDestino] ASC,
	[mov_unidadeOrigem] ASC,
	[mov_data] ASC,
	[bem_id] ASC,
	[bit_id] ASC,
	[tpm_id] ASC,
	[grp_id] ASC,
	[cco_codigoDebito] ASC,
	[cco_codigoCredito] ASC
)
INCLUDE ( 	[fat_id],
	[mov_dataAlteracao],
	[mov_dataCriacao],
	[mov_GPB],
	[mov_nl],
	[mov_observacao],
	[mov_origem],
	[mov_percentualBaixa],
	[mov_valor],
	[mov_valorReavaliado],
	[per_ano],
	[per_mes],
	[uni_id],
	[usu_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MovimentacaoBem_mov_situacao_mov_unidadeOrigen]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_mov_situacao_mov_unidadeOrigen] ON [dbo].[MovimentacaoBem]
(
	[mov_situacao] ASC,
	[mov_unidadeOrigem] ASC,
	[uni_id] ASC,
	[mov_unidadeDestino] ASC,
	[bem_id] ASC,
	[bit_id] ASC,
	[tpm_id] ASC
)
INCLUDE ( 	[mov_GPB]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MOVIMENTACAOBEM_PER_MES_ANO_UNI_ID_MOV_NL_MOV_SITUACAO]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MOVIMENTACAOBEM_PER_MES_ANO_UNI_ID_MOV_NL_MOV_SITUACAO] ON [dbo].[MovimentacaoBem]
(
	[per_mes] ASC,
	[per_ano] ASC,
	[uni_id] ASC,
	[mov_nl] ASC,
	[mov_situacao] ASC
)
INCLUDE ( 	[mov_data],
	[bem_id],
	[bit_id],
	[tpm_id],
	[grp_id],
	[cco_codigoDebito],
	[cco_codigoCredito],
	[mov_valor],
	[mov_GPB],
	[mov_unidadeDestino],
	[mov_observacao],
	[status_exportacao],
	[descricao_exportacao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MovimentacaoBem_per_mes_per_ano]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_per_mes_per_ano] ON [dbo].[MovimentacaoBem]
(
	[per_mes] ASC,
	[per_ano] ASC,
	[uni_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MovimentacaoBem_per_mes_TUNING]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_per_mes_TUNING] ON [dbo].[MovimentacaoBem]
(
	[per_mes] ASC,
	[per_ano] ASC,
	[uni_id] ASC,
	[mov_nl] ASC,
	[mov_situacao] ASC
)
INCLUDE ( 	[mov_data],
	[bem_id],
	[bit_id],
	[tpm_id],
	[grp_id],
	[cco_codigoDebito],
	[cco_codigoCredito],
	[mov_valor],
	[mov_GPB],
	[mov_unidadeOrigem],
	[mov_unidadeDestino],
	[mov_observacao],
	[status_exportacao],
	[descricao_exportacao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MovimentacaoBem_Situacao_]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_Situacao_] ON [dbo].[MovimentacaoBem]
(
	[mov_situacao] ASC,
	[mov_unidadeDestino] ASC,
	[mov_unidadeOrigem] ASC,
	[mov_data] ASC,
	[bem_id] ASC,
	[bit_id] ASC,
	[tpm_id] ASC,
	[grp_id] ASC,
	[cco_codigoDebito] ASC,
	[cco_codigoCredito] ASC
)
INCLUDE ( 	[fat_id],
	[mov_dataAlteracao],
	[mov_dataCriacao],
	[mov_GPB],
	[mov_nl],
	[mov_observacao],
	[mov_origem],
	[mov_percentualBaixa],
	[mov_valor],
	[mov_valorReavaliado],
	[per_ano],
	[per_mes],
	[uni_id],
	[usu_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  Index [IX_MovimentacaoBem_tpm_id_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_tpm_id_bem_id] ON [dbo].[MovimentacaoBem]
(
	[tpm_id] ASC,
	[bem_id] ASC,
	[bit_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MovimentacaoBem_tpm_id_grp_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_tpm_id_grp_id] ON [dbo].[MovimentacaoBem]
(
	[tpm_id] ASC,
	[grp_id] ASC,
	[cco_codigoDebito] ASC,
	[cco_codigoCredito] ASC
)
INCLUDE ( 	[uni_id],
	[mov_unidadeDestino],
	[mov_observacao],
	[cod_siafem],
	[per_mes],
	[per_ano],
	[mov_nl],
	[mov_GPB],
	[mov_situacao],
	[mov_dataAlteracao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  Index [IX_MovimentacaoBem_tpm_id_mov_situacao]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MovimentacaoBem_tpm_id_mov_situacao] ON [dbo].[MovimentacaoBem]
(
	[tpm_id] ASC,
	[mov_situacao] ASC
)
INCLUDE ( 	[bem_id],
	[bit_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MOVIMENTACAOBEM_TUNING]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MOVIMENTACAOBEM_TUNING] ON [dbo].[MovimentacaoBem]
(
	[per_mes] ASC,
	[uni_id] ASC,
	[mov_nl] ASC,
	[mov_situacao] ASC
)
INCLUDE ( 	[mov_data],
	[bem_id],
	[bit_id],
	[tpm_id],
	[grp_id],
	[cco_codigoDebito],
	[cco_codigoCredito],
	[per_ano],
	[mov_GPB],
	[mov_unidadeDestino],
	[mov_observacao],
	[mov_dataAlteracao],
	[cod_siafem]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_MOVIMENTACAOBEM_TUNING_02]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_MOVIMENTACAOBEM_TUNING_02] ON [dbo].[MovimentacaoBem]
(
	[mov_situacao] ASC,
	[tpm_id] ASC,
	[bem_id] ASC,
	[bit_id] ASC
)
INCLUDE ( 	[mov_observacao],
	[uni_id],
	[per_mes],
	[per_ano],
	[mov_nl],
	[mov_unidadeDestino],
	[mov_GPB]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [ix_movimentacaobem_uni_id_tuning_dtx]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [ix_movimentacaobem_uni_id_tuning_dtx] ON [dbo].[MovimentacaoBem]
(
	[uni_id] ASC,
	[mov_data] ASC
)
INCLUDE ( 	[per_mes],
	[per_ano],
	[fat_id],
	[usu_id],
	[mov_valor],
	[mov_valorReavaliado],
	[mov_percentualBaixa],
	[mov_GPB],
	[mov_unidadeOrigem],
	[mov_unidadeDestino],
	[mov_observacao],
	[mov_origem],
	[mov_nl],
	[mov_situacao],
	[mov_dataCriacao],
	[mov_dataAlteracao]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_ParametroContabil_cco_codigoDebito_cco_codigoCredito]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_ParametroContabil_cco_codigoDebito_cco_codigoCredito] ON [dbo].[ParametroContabil]
(
	[cco_codigoDebito] ASC,
	[cco_codigoCredito] ASC
)
INCLUDE ( 	[pco_evento],
	[pco_eventoCredito]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_sys_parametros_TN]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_sys_parametros_TN] ON [dbo].[SYS_Parametros]
(
	[par_chave] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_TipoOperacao_tpm_operacao]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_TipoOperacao_tpm_operacao] ON [dbo].[TipoMovimentacao]
(
	[tpm_operacao] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX_ConPat_Unidade_UadId]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IDX_ConPat_Unidade_UadId] ON [dbo].[Unidade]
(
	[uad_id] ASC
)
INCLUDE ( 	[uni_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unidade_TN]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_Unidade_TN] ON [dbo].[Unidade]
(
	[uni_situacao] ASC,
	[uni_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_Unidade_uad_id]    Script Date: 02/05/2018 17:07:40 ******/
CREATE NONCLUSTERED INDEX [IX_Unidade_uad_id] ON [dbo].[Unidade]
(
	[uad_id] ASC
)
INCLUDE ( 	[uni_id],
	[ent_id]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[ApoliceSeguro] ADD  CONSTRAINT [DF_ApoliceSeguro_aps_situacao]  DEFAULT ((1)) FOR [aps_situacao]
GO
ALTER TABLE [dbo].[ApoliceSeguro] ADD  CONSTRAINT [DF_ApoliceSeguro_aps_dataCriacao]  DEFAULT (getdate()) FOR [aps_dataCriacao]
GO
ALTER TABLE [dbo].[ApoliceSeguro] ADD  CONSTRAINT [DF_ApoliceSeguro_aps_dataAlteracao]  DEFAULT (getdate()) FOR [aps_dataAlteracao]
GO
ALTER TABLE [dbo].[BemItemComposto] ADD  CONSTRAINT [DF_BemItemComposto_bic_dataCriacao]  DEFAULT (getdate()) FOR [bic_dataCriacao]
GO
ALTER TABLE [dbo].[BemItemComposto] ADD  CONSTRAINT [DF_BemItemComposto_bic_dataAlteracao]  DEFAULT (getdate()) FOR [bic_dataAlteracao]
GO
ALTER TABLE [dbo].[Inventario] ADD  CONSTRAINT [DF_Inventario_inv_dataCriacao]  DEFAULT (getdate()) FOR [inv_dataCriacao]
GO
ALTER TABLE [dbo].[Inventario] ADD  CONSTRAINT [DF_Inventario_inv_dataAlteracao]  DEFAULT (getdate()) FOR [inv_dataAlteracao]
GO
ALTER TABLE [dbo].[Seguradora] ADD  CONSTRAINT [DF_Seguradora_seg_situacao]  DEFAULT ((1)) FOR [seg_situacao]
GO
ALTER TABLE [dbo].[Seguradora] ADD  CONSTRAINT [DF_Seguradora_seg_dataCriacao]  DEFAULT (getdate()) FOR [seg_dataCriacao]
GO
ALTER TABLE [dbo].[Seguradora] ADD  CONSTRAINT [DF_Seguradora_seg_dataAlteracao]  DEFAULT (getdate()) FOR [seg_dataAlteracao]
GO
ALTER TABLE [dbo].[ApoliceSeguro]  WITH CHECK ADD  CONSTRAINT [FK_ApoliceSeguro_Seguradora] FOREIGN KEY([seg_id])
REFERENCES [dbo].[Seguradora] ([seg_id])
GO
ALTER TABLE [dbo].[ApoliceSeguro] CHECK CONSTRAINT [FK_ApoliceSeguro_Seguradora]
GO
ALTER TABLE [dbo].[ApoliceSeguro]  WITH CHECK ADD  CONSTRAINT [FK_ApoliceSeguro_Unidade] FOREIGN KEY([uni_id])
REFERENCES [dbo].[Unidade] ([uni_id])
GO
ALTER TABLE [dbo].[ApoliceSeguro] CHECK CONSTRAINT [FK_ApoliceSeguro_Unidade]
GO
ALTER TABLE [dbo].[BemArquivo]  WITH CHECK ADD  CONSTRAINT [FK_BemArquivo_Arquivo] FOREIGN KEY([arq_id])
REFERENCES [dbo].[Arquivo] ([arq_id])
GO
ALTER TABLE [dbo].[BemArquivo] CHECK CONSTRAINT [FK_BemArquivo_Arquivo]
GO
ALTER TABLE [dbo].[BemArquivo]  WITH CHECK ADD  CONSTRAINT [FK_BemArquivo_BemPatrimonial] FOREIGN KEY([bem_id])
REFERENCES [dbo].[BemPatrimonial] ([bem_id])
GO
ALTER TABLE [dbo].[BemArquivo] CHECK CONSTRAINT [FK_BemArquivo_BemPatrimonial]
GO
ALTER TABLE [dbo].[BemItem]  WITH CHECK ADD  CONSTRAINT [FK_BemItem_ApoliceSeguro] FOREIGN KEY([aps_id])
REFERENCES [dbo].[ApoliceSeguro] ([aps_id])
GO
ALTER TABLE [dbo].[BemItem] CHECK CONSTRAINT [FK_BemItem_ApoliceSeguro]
GO
ALTER TABLE [dbo].[BemItem]  WITH CHECK ADD  CONSTRAINT [FK_BemItem_BemPatrimonial] FOREIGN KEY([bem_id])
REFERENCES [dbo].[BemPatrimonial] ([bem_id])
GO
ALTER TABLE [dbo].[BemItem] CHECK CONSTRAINT [FK_BemItem_BemPatrimonial]
GO
ALTER TABLE [dbo].[BemItem]  WITH CHECK ADD  CONSTRAINT [FK_BemItem_Dependencia] FOREIGN KEY([loc_id], [dep_id])
REFERENCES [dbo].[Dependencia] ([loc_id], [dep_id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BemItem] CHECK CONSTRAINT [FK_BemItem_Dependencia]
GO
ALTER TABLE [dbo].[BemItem]  WITH CHECK ADD  CONSTRAINT [FK_BemItem_FatorDepreciacao] FOREIGN KEY([fat_id])
REFERENCES [dbo].[FatorDepreciacao] ([fat_id])
GO
ALTER TABLE [dbo].[BemItem] CHECK CONSTRAINT [FK_BemItem_FatorDepreciacao]
GO
ALTER TABLE [dbo].[BemItem]  WITH CHECK ADD  CONSTRAINT [FK_BemItem_Localidade] FOREIGN KEY([loc_id])
REFERENCES [dbo].[Localidade] ([loc_id])
GO
ALTER TABLE [dbo].[BemItem] CHECK CONSTRAINT [FK_BemItem_Localidade]
GO
ALTER TABLE [dbo].[BemItem]  WITH CHECK ADD  CONSTRAINT [FK_BemItem_MotivoCancelamento] FOREIGN KEY([moc_id])
REFERENCES [dbo].[MotivoCancelamento] ([moc_id])
GO
ALTER TABLE [dbo].[BemItem] CHECK CONSTRAINT [FK_BemItem_MotivoCancelamento]
GO
ALTER TABLE [dbo].[BemItem]  WITH CHECK ADD  CONSTRAINT [FK_BemItem_SituacaoPatrimonial] FOREIGN KEY([sp_id])
REFERENCES [dbo].[SituacaoPatrimonial] ([sp_id])
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[BemItem] CHECK CONSTRAINT [FK_BemItem_SituacaoPatrimonial]
GO
ALTER TABLE [dbo].[BemItem]  WITH CHECK ADD  CONSTRAINT [FK_BemItem_StatusConcervacao] FOREIGN KEY([stc_id])
REFERENCES [dbo].[StatusConservacao] ([stc_id])
GO
ALTER TABLE [dbo].[BemItem] CHECK CONSTRAINT [FK_BemItem_StatusConcervacao]
GO
ALTER TABLE [dbo].[BemItem]  WITH CHECK ADD  CONSTRAINT [FK_BemItem_TipoBem] FOREIGN KEY([tb_id])
REFERENCES [dbo].[TipoBem] ([tb_id])
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[BemItem] CHECK CONSTRAINT [FK_BemItem_TipoBem]
GO
ALTER TABLE [dbo].[BemItemArquivo]  WITH CHECK ADD  CONSTRAINT [FK_BemItemArquivo_Arquivo] FOREIGN KEY([arq_id])
REFERENCES [dbo].[Arquivo] ([arq_id])
GO
ALTER TABLE [dbo].[BemItemArquivo] CHECK CONSTRAINT [FK_BemItemArquivo_Arquivo]
GO
ALTER TABLE [dbo].[BemItemArquivo]  WITH CHECK ADD  CONSTRAINT [FK_BemItemArquivo_BemItem] FOREIGN KEY([bem_id], [bit_id])
REFERENCES [dbo].[BemItem] ([bem_id], [bit_id])
GO
ALTER TABLE [dbo].[BemItemArquivo] CHECK CONSTRAINT [FK_BemItemArquivo_BemItem]
GO
ALTER TABLE [dbo].[BemItemComposto]  WITH CHECK ADD  CONSTRAINT [FK_BemItemComposto_BemItem] FOREIGN KEY([bem_id], [bit_id])
REFERENCES [dbo].[BemItem] ([bem_id], [bit_id])
GO
ALTER TABLE [dbo].[BemItemComposto] CHECK CONSTRAINT [FK_BemItemComposto_BemItem]
GO
ALTER TABLE [dbo].[BemItemComposto]  WITH CHECK ADD  CONSTRAINT [FK_BemItemComposto_BemItem1] FOREIGN KEY([bem_idParent], [bit_idParent])
REFERENCES [dbo].[BemItem] ([bem_id], [bit_id])
GO
ALTER TABLE [dbo].[BemItemComposto] CHECK CONSTRAINT [FK_BemItemComposto_BemItem1]
GO
ALTER TABLE [dbo].[BemItemWfStatus]  WITH CHECK ADD  CONSTRAINT [FK_BemItemWfStatus_BemItemWorkflow] FOREIGN KEY([bem_id], [bit_id], [biw_id])
REFERENCES [dbo].[BemItemWorkflow] ([bem_id], [bit_id], [biw_id])
GO
ALTER TABLE [dbo].[BemItemWfStatus] CHECK CONSTRAINT [FK_BemItemWfStatus_BemItemWorkflow]
GO
ALTER TABLE [dbo].[BemItemWfStatus]  WITH CHECK ADD  CONSTRAINT [FK_BemItemWfStatus_PatrimonioWfStatus] FOREIGN KEY([wrk_id], [stp_id])
REFERENCES [dbo].[PatrimonioWfStatus] ([wrk_id], [stp_id])
GO
ALTER TABLE [dbo].[BemItemWfStatus] CHECK CONSTRAINT [FK_BemItemWfStatus_PatrimonioWfStatus]
GO
ALTER TABLE [dbo].[BemItemWorkflow]  WITH CHECK ADD  CONSTRAINT [FK_BemItemWorkflow_BemItem] FOREIGN KEY([bem_id], [bit_id])
REFERENCES [dbo].[BemItem] ([bem_id], [bit_id])
GO
ALTER TABLE [dbo].[BemItemWorkflow] CHECK CONSTRAINT [FK_BemItemWorkflow_BemItem]
GO
ALTER TABLE [dbo].[BemItemWorkflow]  WITH CHECK ADD  CONSTRAINT [FK_BemItemWorkflow_PatrimonioWorkflow] FOREIGN KEY([wrk_id])
REFERENCES [dbo].[PatrimonioWorkflow] ([wrk_id])
GO
ALTER TABLE [dbo].[BemItemWorkflow] CHECK CONSTRAINT [FK_BemItemWorkflow_PatrimonioWorkflow]
GO
ALTER TABLE [dbo].[BemPatrimonial]  WITH CHECK ADD  CONSTRAINT [FK_BemPatrimonial_Fornecedor] FOREIGN KEY([for_id])
REFERENCES [dbo].[Fornecedor] ([for_id])
GO
ALTER TABLE [dbo].[BemPatrimonial] CHECK CONSTRAINT [FK_BemPatrimonial_Fornecedor]
GO
ALTER TABLE [dbo].[BemPatrimonial]  WITH CHECK ADD  CONSTRAINT [FK_BemPatrimonial_GrupoBens] FOREIGN KEY([grp_id])
REFERENCES [dbo].[GrupoBens] ([grp_id])
GO
ALTER TABLE [dbo].[BemPatrimonial] CHECK CONSTRAINT [FK_BemPatrimonial_GrupoBens]
GO
ALTER TABLE [dbo].[BemPatrimonialLegado]  WITH CHECK ADD  CONSTRAINT [FK_BemPatrimonialLegado_SituacaoPatrimonial] FOREIGN KEY([bpl_situacaoPatrimonial])
REFERENCES [dbo].[SituacaoPatrimonial] ([sp_id])
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[BemPatrimonialLegado] CHECK CONSTRAINT [FK_BemPatrimonialLegado_SituacaoPatrimonial]
GO
ALTER TABLE [dbo].[BemPatrimonialLegado]  WITH CHECK ADD  CONSTRAINT [FK_BemPatrimonialLegado_TipoBem] FOREIGN KEY([bpl_tipoBem])
REFERENCES [dbo].[TipoBem] ([tb_id])
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[BemPatrimonialLegado] CHECK CONSTRAINT [FK_BemPatrimonialLegado_TipoBem]
GO
ALTER TABLE [dbo].[Cod_Especie_GrupoBens]  WITH CHECK ADD  CONSTRAINT [FK_Cod_Especie_GrupoBens_GrupoBens] FOREIGN KEY([grp_id])
REFERENCES [dbo].[GrupoBens] ([grp_id])
GO
ALTER TABLE [dbo].[Cod_Especie_GrupoBens] CHECK CONSTRAINT [FK_Cod_Especie_GrupoBens_GrupoBens]
GO
ALTER TABLE [dbo].[ContasContabeis]  WITH CHECK ADD  CONSTRAINT [FK_ContasContabeis_ContasContabeis] FOREIGN KEY([cco_codigoSup])
REFERENCES [dbo].[ContasContabeis] ([cco_codigo])
GO
ALTER TABLE [dbo].[ContasContabeis] CHECK CONSTRAINT [FK_ContasContabeis_ContasContabeis]
GO
ALTER TABLE [dbo].[CORE_END_Cidade]  WITH NOCHECK ADD  CONSTRAINT [FK_CORE_END_Cidade_CORE_END_Pais] FOREIGN KEY([pai_id])
REFERENCES [dbo].[CORE_END_Pais] ([pai_id])
GO
ALTER TABLE [dbo].[CORE_END_Cidade] CHECK CONSTRAINT [FK_CORE_END_Cidade_CORE_END_Pais]
GO
ALTER TABLE [dbo].[CORE_END_Cidade]  WITH NOCHECK ADD  CONSTRAINT [FK_CORE_END_Cidade_CORE_END_UnidadeFederativa] FOREIGN KEY([unf_id])
REFERENCES [dbo].[CORE_END_UnidadeFederativa] ([unf_id])
GO
ALTER TABLE [dbo].[CORE_END_Cidade] CHECK CONSTRAINT [FK_CORE_END_Cidade_CORE_END_UnidadeFederativa]
GO
ALTER TABLE [dbo].[CORE_END_Endereco]  WITH NOCHECK ADD  CONSTRAINT [FK_CORE_END_Endereco_CORE_END_Cidade] FOREIGN KEY([cid_id])
REFERENCES [dbo].[CORE_END_Cidade] ([cid_id])
GO
ALTER TABLE [dbo].[CORE_END_Endereco] CHECK CONSTRAINT [FK_CORE_END_Endereco_CORE_END_Cidade]
GO
ALTER TABLE [dbo].[CORE_END_UnidadeFederativa]  WITH NOCHECK ADD  CONSTRAINT [FK_CORE_END_UnidadeFederativa_CORE_END_Pais] FOREIGN KEY([pai_id])
REFERENCES [dbo].[CORE_END_Pais] ([pai_id])
GO
ALTER TABLE [dbo].[CORE_END_UnidadeFederativa] CHECK CONSTRAINT [FK_CORE_END_UnidadeFederativa_CORE_END_Pais]
GO
ALTER TABLE [dbo].[CORE_SYS_UnidadeAdministrativaEndereco]  WITH NOCHECK ADD  CONSTRAINT [FK_CORE_SYS_UnidadeAdministrativaEndereco_CORE_END_Endereco] FOREIGN KEY([end_id])
REFERENCES [dbo].[CORE_END_Endereco] ([end_id])
GO
ALTER TABLE [dbo].[CORE_SYS_UnidadeAdministrativaEndereco] CHECK CONSTRAINT [FK_CORE_SYS_UnidadeAdministrativaEndereco_CORE_END_Endereco]
GO
ALTER TABLE [dbo].[Dependencia]  WITH CHECK ADD  CONSTRAINT [FK_Dependencia_Localidade] FOREIGN KEY([loc_id])
REFERENCES [dbo].[Localidade] ([loc_id])
GO
ALTER TABLE [dbo].[Dependencia] CHECK CONSTRAINT [FK_Dependencia_Localidade]
GO
ALTER TABLE [dbo].[Dependencia]  WITH CHECK ADD  CONSTRAINT [FK_Dependencia_TipoDependencia] FOREIGN KEY([tde_id])
REFERENCES [dbo].[TipoDependencia] ([tde_id])
GO
ALTER TABLE [dbo].[Dependencia] CHECK CONSTRAINT [FK_Dependencia_TipoDependencia]
GO
ALTER TABLE [dbo].[Etiqueta_ElementosDimensao]  WITH CHECK ADD  CONSTRAINT [FK_Etiqueta_ElementosDimensao_SYS_Configuracao] FOREIGN KEY([cfg_id])
REFERENCES [dbo].[SYS_Configuracao] ([cfg_id])
GO
ALTER TABLE [dbo].[Etiqueta_ElementosDimensao] CHECK CONSTRAINT [FK_Etiqueta_ElementosDimensao_SYS_Configuracao]
GO
ALTER TABLE [dbo].[EtiquetaPatrimonial]  WITH CHECK ADD  CONSTRAINT [FK_EtiquetaPatrimonial_UnidadeGestora] FOREIGN KEY([uni_id])
REFERENCES [dbo].[UnidadeGestora] ([uni_id])
GO
ALTER TABLE [dbo].[EtiquetaPatrimonial] CHECK CONSTRAINT [FK_EtiquetaPatrimonial_UnidadeGestora]
GO
ALTER TABLE [dbo].[FornecedorPF]  WITH CHECK ADD  CONSTRAINT [FK_FornecedorPF_Fornecedor] FOREIGN KEY([for_id])
REFERENCES [dbo].[Fornecedor] ([for_id])
GO
ALTER TABLE [dbo].[FornecedorPF] CHECK CONSTRAINT [FK_FornecedorPF_Fornecedor]
GO
ALTER TABLE [dbo].[FornecedorPJ]  WITH CHECK ADD  CONSTRAINT [FK_FornecedorPJ_Fornecedor] FOREIGN KEY([for_id])
REFERENCES [dbo].[Fornecedor] ([for_id])
GO
ALTER TABLE [dbo].[FornecedorPJ] CHECK CONSTRAINT [FK_FornecedorPJ_Fornecedor]
GO
ALTER TABLE [dbo].[GrupoBens]  WITH CHECK ADD  CONSTRAINT [FK_GrupoBens_GrupoBens] FOREIGN KEY([grp_idPai])
REFERENCES [dbo].[GrupoBens] ([grp_id])
GO
ALTER TABLE [dbo].[GrupoBens] CHECK CONSTRAINT [FK_GrupoBens_GrupoBens]
GO
ALTER TABLE [dbo].[GrupoBens_IndicadorGerencial]  WITH CHECK ADD  CONSTRAINT [FK_GrupoBens_IndicadorGerencial_GrupoBens] FOREIGN KEY([grp_id])
REFERENCES [dbo].[GrupoBens] ([grp_id])
GO
ALTER TABLE [dbo].[GrupoBens_IndicadorGerencial] CHECK CONSTRAINT [FK_GrupoBens_IndicadorGerencial_GrupoBens]
GO
ALTER TABLE [dbo].[GrupoBens_IndicadorGerencial]  WITH CHECK ADD  CONSTRAINT [FK_GrupoBens_IndicadorGerencial_IndicadorGerencial] FOREIGN KEY([faq_id])
REFERENCES [dbo].[IndicadorGerencial] ([faq_id])
GO
ALTER TABLE [dbo].[GrupoBens_IndicadorGerencial] CHECK CONSTRAINT [FK_GrupoBens_IndicadorGerencial_IndicadorGerencial]
GO
ALTER TABLE [dbo].[Inventario]  WITH CHECK ADD  CONSTRAINT [FK_Inventario_Unidade] FOREIGN KEY([uni_id])
REFERENCES [dbo].[Unidade] ([uni_id])
GO
ALTER TABLE [dbo].[Inventario] CHECK CONSTRAINT [FK_Inventario_Unidade]
GO
ALTER TABLE [dbo].[Localidade]  WITH CHECK ADD  CONSTRAINT [FK_Localidade_Unidade] FOREIGN KEY([uni_id])
REFERENCES [dbo].[Unidade] ([uni_id])
GO
ALTER TABLE [dbo].[Localidade] CHECK CONSTRAINT [FK_Localidade_Unidade]
GO
ALTER TABLE [dbo].[MapaArrolamento]  WITH CHECK ADD  CONSTRAINT [FK_BemItem_MapaArrolamento] FOREIGN KEY([bem_id], [bit_id])
REFERENCES [dbo].[BemItem] ([bem_id], [bit_id])
GO
ALTER TABLE [dbo].[MapaArrolamento] CHECK CONSTRAINT [FK_BemItem_MapaArrolamento]
GO
ALTER TABLE [dbo].[MovimentacaoBem]  WITH CHECK ADD  CONSTRAINT [FK_MovimentacaoBem_BemItem] FOREIGN KEY([bem_id], [bit_id])
REFERENCES [dbo].[BemItem] ([bem_id], [bit_id])
GO
ALTER TABLE [dbo].[MovimentacaoBem] CHECK CONSTRAINT [FK_MovimentacaoBem_BemItem]
GO
ALTER TABLE [dbo].[MovimentacaoBem]  WITH CHECK ADD  CONSTRAINT [FK_MovimentacaoBem_FatorDepreciacao] FOREIGN KEY([fat_id])
REFERENCES [dbo].[FatorDepreciacao] ([fat_id])
GO
ALTER TABLE [dbo].[MovimentacaoBem] CHECK CONSTRAINT [FK_MovimentacaoBem_FatorDepreciacao]
GO
ALTER TABLE [dbo].[MovimentacaoBem]  WITH CHECK ADD  CONSTRAINT [FK_MovimentacaoBem_ParametroContabil] FOREIGN KEY([tpm_id], [grp_id], [cco_codigoDebito], [cco_codigoCredito])
REFERENCES [dbo].[ParametroContabil] ([tpm_id], [grp_id], [cco_codigoDebito], [cco_codigoCredito])
GO
ALTER TABLE [dbo].[MovimentacaoBem] CHECK CONSTRAINT [FK_MovimentacaoBem_ParametroContabil]
GO
ALTER TABLE [dbo].[MovimentacaoBem]  WITH CHECK ADD  CONSTRAINT [FK_MovimentacaoBem_PeriodoUnidade] FOREIGN KEY([per_mes], [per_ano], [uni_id])
REFERENCES [dbo].[PeriodoUnidade] ([per_mes], [per_ano], [uni_id])
GO
ALTER TABLE [dbo].[MovimentacaoBem] CHECK CONSTRAINT [FK_MovimentacaoBem_PeriodoUnidade]
GO
ALTER TABLE [dbo].[MovimentacaoBem]  WITH CHECK ADD  CONSTRAINT [FK_MovimentacaoBem_Unidade] FOREIGN KEY([mov_unidadeOrigem])
REFERENCES [dbo].[Unidade] ([uni_id])
GO
ALTER TABLE [dbo].[MovimentacaoBem] CHECK CONSTRAINT [FK_MovimentacaoBem_Unidade]
GO
ALTER TABLE [dbo].[MovimentacaoBem]  WITH CHECK ADD  CONSTRAINT [FK_MovimentacaoBem_Unidade1] FOREIGN KEY([mov_unidadeDestino])
REFERENCES [dbo].[Unidade] ([uni_id])
GO
ALTER TABLE [dbo].[MovimentacaoBem] CHECK CONSTRAINT [FK_MovimentacaoBem_Unidade1]
GO
ALTER TABLE [dbo].[ParametroContabil]  WITH CHECK ADD  CONSTRAINT [FK_ParametroContabil_ContasContabeis] FOREIGN KEY([cco_codigoCredito])
REFERENCES [dbo].[ContasContabeis] ([cco_codigo])
GO
ALTER TABLE [dbo].[ParametroContabil] CHECK CONSTRAINT [FK_ParametroContabil_ContasContabeis]
GO
ALTER TABLE [dbo].[ParametroContabil]  WITH CHECK ADD  CONSTRAINT [FK_ParametroContabil_ContasContabeis1] FOREIGN KEY([cco_codigoDebito])
REFERENCES [dbo].[ContasContabeis] ([cco_codigo])
GO
ALTER TABLE [dbo].[ParametroContabil] CHECK CONSTRAINT [FK_ParametroContabil_ContasContabeis1]
GO
ALTER TABLE [dbo].[ParametroContabil]  WITH CHECK ADD  CONSTRAINT [FK_ParametroContabil_GrupoBens] FOREIGN KEY([grp_id])
REFERENCES [dbo].[GrupoBens] ([grp_id])
GO
ALTER TABLE [dbo].[ParametroContabil] CHECK CONSTRAINT [FK_ParametroContabil_GrupoBens]
GO
ALTER TABLE [dbo].[ParametroContabil]  WITH CHECK ADD  CONSTRAINT [FK_ParametroContabil_TipoMovimentacao] FOREIGN KEY([tpm_id])
REFERENCES [dbo].[TipoMovimentacao] ([tpm_id])
GO
ALTER TABLE [dbo].[ParametroContabil] CHECK CONSTRAINT [FK_ParametroContabil_TipoMovimentacao]
GO
ALTER TABLE [dbo].[PatrimonioWfDepedente]  WITH CHECK ADD  CONSTRAINT [FK_PatrimonioWfDepedente_PatrimonioWorkflow] FOREIGN KEY([wrk_id])
REFERENCES [dbo].[PatrimonioWorkflow] ([wrk_id])
GO
ALTER TABLE [dbo].[PatrimonioWfDepedente] CHECK CONSTRAINT [FK_PatrimonioWfDepedente_PatrimonioWorkflow]
GO
ALTER TABLE [dbo].[PatrimonioWfDepedente]  WITH CHECK ADD  CONSTRAINT [FK_PatrimonioWfDepedente_PatrimonioWorkflow1] FOREIGN KEY([wfd_wfParent])
REFERENCES [dbo].[PatrimonioWorkflow] ([wrk_id])
GO
ALTER TABLE [dbo].[PatrimonioWfDepedente] CHECK CONSTRAINT [FK_PatrimonioWfDepedente_PatrimonioWorkflow1]
GO
ALTER TABLE [dbo].[PatrimonioWfStatus]  WITH CHECK ADD  CONSTRAINT [FK_PatrimonioWfStatus_StatusPatrimonio] FOREIGN KEY([stp_id])
REFERENCES [dbo].[StatusPatrimonio] ([stp_id])
GO
ALTER TABLE [dbo].[PatrimonioWfStatus] CHECK CONSTRAINT [FK_PatrimonioWfStatus_StatusPatrimonio]
GO
ALTER TABLE [dbo].[PatrimonioWfStatus]  WITH CHECK ADD  CONSTRAINT [FK_PatrimonioWfStatus_StatusPatrimonio1] FOREIGN KEY([stp_idProximo])
REFERENCES [dbo].[StatusPatrimonio] ([stp_id])
GO
ALTER TABLE [dbo].[PatrimonioWfStatus] CHECK CONSTRAINT [FK_PatrimonioWfStatus_StatusPatrimonio1]
GO
ALTER TABLE [dbo].[PeriodoUnidade]  WITH CHECK ADD  CONSTRAINT [FK_PeriodoUnidade_Periodo] FOREIGN KEY([per_mes], [per_ano])
REFERENCES [dbo].[Periodo] ([per_mes], [per_ano])
GO
ALTER TABLE [dbo].[PeriodoUnidade] CHECK CONSTRAINT [FK_PeriodoUnidade_Periodo]
GO
ALTER TABLE [dbo].[PeriodoUnidade]  WITH CHECK ADD  CONSTRAINT [FK_PeriodoUnidade_Unidade] FOREIGN KEY([uni_id])
REFERENCES [dbo].[Unidade] ([uni_id])
GO
ALTER TABLE [dbo].[PeriodoUnidade] CHECK CONSTRAINT [FK_PeriodoUnidade_Unidade]
GO
ALTER TABLE [dbo].[SYS_ConfigEtiqueta]  WITH CHECK ADD  CONSTRAINT [FK_SYS_ConfigEtiqueta_ParametrosEtiqueta] FOREIGN KEY([pae_id])
REFERENCES [dbo].[SYS_ParametrosEtiqueta] ([pae_id])
GO
ALTER TABLE [dbo].[SYS_ConfigEtiqueta] CHECK CONSTRAINT [FK_SYS_ConfigEtiqueta_ParametrosEtiqueta]
GO
ALTER TABLE [dbo].[SYS_ConfigEtiqueta]  WITH CHECK ADD  CONSTRAINT [FK_SYS_ConfigEtiqueta_Unidade] FOREIGN KEY([uni_id])
REFERENCES [dbo].[Unidade] ([uni_id])
GO
ALTER TABLE [dbo].[SYS_ConfigEtiqueta] CHECK CONSTRAINT [FK_SYS_ConfigEtiqueta_Unidade]
GO
ALTER TABLE [dbo].[SYS_ParametrosTela]  WITH CHECK ADD  CONSTRAINT [FK_ParametrosTela_Tela] FOREIGN KEY([tel_id])
REFERENCES [dbo].[SYS_Tela] ([tel_id])
GO
ALTER TABLE [dbo].[SYS_ParametrosTela] CHECK CONSTRAINT [FK_ParametrosTela_Tela]
GO
ALTER TABLE [dbo].[SYS_Tela]  WITH CHECK ADD  CONSTRAINT [FK_Tela_TipoTela] FOREIGN KEY([tte_id])
REFERENCES [dbo].[TipoTela] ([tte_id])
GO
ALTER TABLE [dbo].[SYS_Tela] CHECK CONSTRAINT [FK_Tela_TipoTela]
GO
ALTER TABLE [dbo].[UnidadeGestora]  WITH CHECK ADD  CONSTRAINT [FK_UnidadeGestora_Unidade] FOREIGN KEY([uni_id])
REFERENCES [dbo].[Unidade] ([uni_id])
GO
ALTER TABLE [dbo].[UnidadeGestora] CHECK CONSTRAINT [FK_UnidadeGestora_Unidade]
GO
ALTER TABLE [dbo].[UnidadeGuarda]  WITH CHECK ADD  CONSTRAINT [FK_UnidadeGuarda_Unidade] FOREIGN KEY([uni_id])
REFERENCES [dbo].[Unidade] ([uni_id])
GO
ALTER TABLE [dbo].[UnidadeGuarda] CHECK CONSTRAINT [FK_UnidadeGuarda_Unidade]
GO
/****** Object:  StoredProcedure [dbo].[
NEW_Unidade_SelectBy_GestoraOrGuarda]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[
NEW_Unidade_SelectBy_GestoraOrGuarda]
	@funcao INT,
	@uni_id INT
	
AS
BEGIN
	----- FUNÇÃO GESTORA -----
	IF(@funcao = 1)
	BEGIN
	
		SELECT 
			* 
		FROM 
			UnidadeGestora 
		WHERE 
			uni_id = @uni_id
		and uge_situacao not in(3)
		
		SELECT @@ROWCOUNT	
	END
	----- FUNÇÃO GUARDA ---
--
	ELSE IF(@funcao = 2)
	BEGIN
	
		SELECT 
			* 
		FROM 
			UnidadeGuarda 
		WHERE 
			uni_id = @uni_id
		AND NOT EXISTS (SELECT * FROM UnidadeGestora WHERE uni_id = @uni_id)
	
		SELECT @@ROWCOUNT	
	END
END



GO
/****** Object:  StoredProcedure [dbo].[_NEW_MovimentacaoBemEmExportacao_Agrupados_bkp20140523]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==========================================================================================
-- Author:		Debora Cavaglieri
-- Create date: 25/04/13
-- Description:	Função que carrega os movimentos enviados para exportação mas que
--              não tiveram um retorno adequado.
-- Alteração: Luana Piva
-- Date:18/12/2013
-- Description: Adicionar retornor dos campos pc.cco_codigo_credito e pc.pco_codigodebito
-- ==========================================================================================
CREATE PROCEDURE [dbo].[_NEW_MovimentacaoBemEmExportacao_Agrupados_bkp20140523]
	 @uni_id INT
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)

AS
BEGIN

SET LANGUAGE Portuguese
DECLARE @tpm_id INT
SELECT 
		@tpm_id= CAST(PA.par_valor AS INT) 
	FROM SYS_Parametros AS PA 
		WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';
		
WITH MoviBem AS
(
	SELECT 
		bem_id,
		bit_id,
		mov_observacao as Observacao,
		mov_unidadeDestino,
		mov_gpb,
		mov_valor,
		cco_codigoCredito,
		cco_codigoDebito,
		per_ano,
		tpm_id,
		grp_id,
		uni_id
		
	FROM
		MovimentacaoBemEmExportacao WITH(NOLOCK)
	WHERE
		    mov_situacao in (1,4)
		AND uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano	
)

,BemNotaEmpenho AS 
(
	SELECT 
		ROW_NUMBER() OVER (partition by BD.bem_id, BD.bit_id order  by BD.bem_id, BD.bit_id) as linha
		,BD.* 
	FROM
		BemItemDocumento AS BD WITH(NOLOCK) 
	INNER JOIN MovimentacaoBemEmExportacao AS MO WITH(NOLOCK) 
		on MO.bem_id = BD.bem_id
		and MO.bit_id = BD.bit_id
	WHERE
		mov_situacao in (1,4)
	AND uni_id = @uni_id
	AND per_mes = @per_mes
	AND per_ano = @per_ano	
	AND bid_tipoDoc = 4
)
	  
		SELECT
			ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID
			, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao
			, U.uni_codigoUGE AS UnidadeGestora
			, '00001' AS Gestao		
			, PC.pco_evento as EventoD
			, EventoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							
							( CASE (ABS(M.per_ano) - ABS(SUBSTRING(BIC.bid_numeroDoc,1, 4)))   
								WHEN 0 THEN PC.pco_eventoCredito
								WHEN 1 THEN '540170'
								ELSE '540172'
							END)
							
						ELSE PC.pco_eventoCredito
						END
			)
			,PC.pco_eventoCredito
			, M.cco_codigoDebito as ClassificacaoD
			, ClassificacaoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							cast(BIC.bid_classificacao as varchar(20))
						ELSE 
							M.cco_codigoCredito
						END
			)			
			--, (SUM(M.mov_valor) * ISNULL(BIC.bid_porcentagem/100,1)) as Valor   -- *********************************
			, (SUM(M.mov_valor)) as Valor   -- *********************************
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc AS InscricaoEvento    --- *********************************
			, M.mov_gpb
			,PC.pco_eventoCredito
			,PC.cco_codigoDebito
			,PC.cco_codigoCredito
			
		FROM
			MoviBem M 
			INNER JOIN Unidade U WITH(NOLOCK)
				ON U.uni_id = M.uni_id
			INNER JOIN ParametroContabil PC WITH(NOLOCK)
				ON M.cco_codigoDebito = PC.cco_codigoDebito
					AND M.cco_codigoCredito = PC.cco_codigoCredito
					AND M.grp_id = PC.grp_id
					AND M.tpm_id = PC.tpm_id	
			INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
				ON M.tpm_id = TM.tpm_id 
			LEFT JOIN BemNotaEmpenho BIC   --- ***************************************
				ON BIC.bem_id = M.bem_id
				AND BIC.bit_id = M.bit_id
				AND BIC.linha = 1
		WHERE 
			( TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
				OR M.tpm_id = @tpm_id))		
				
							
		GROUP BY
			U.uni_codigoUGE
			, PC.pco_evento
			, PC.pco_eventoCredito
			, M.cco_codigoDebito
			, M.cco_codigoCredito
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc
			, BIC.bid_porcentagem
			, BIC.bid_classificacao
			, M.per_ano
			, M.mov_gpb
			,PC.cco_codigoDebito
			,PC.cco_codigoCredito
END


GO
/****** Object:  StoredProcedure [dbo].[ContasContabeis_Bloqueia_Parametros]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Luana Piva
-- Create date: 28/10/2013
-- Description:	<Ao bloquear uma cco, pesquisa os pco que utilizavam essa conta e alteram seu status 
--para '5'(bloqueado pela conta)>
-- =============================================
CREATE PROCEDURE [dbo].[ContasContabeis_Bloqueia_Parametros]

@cco_codigo varchar(20)

AS
BEGIN

DECLARE 
@rowCount1 INT,
@rowCount2 INT

	UPDATE ParametroContabil
	SET pco_situacao = 5 
	
	WHERE 
		(@cco_codigo = cco_codigoCredito OR
		@cco_codigo = cco_codigoDebito)
		AND pco_situacao = 1 --ativo	
		
	SET @rowCount1 = @@ROWCOUNT	
		
	UPDATE ParametroContabil
	SET pco_situacao = 6
	
	WHERE 
		(@cco_codigo = cco_codigoCredito OR
		@cco_codigo = cco_codigoDebito)
		AND pco_situacao = 4 -- interno de sistema
		
	SET @rowCount2 = @@ROWCOUNT	
	SELECT @rowCount1 + @rowCount2 quantidade
	
END

GO
/****** Object:  StoredProcedure [dbo].[ContasContabeis_Desbloqueia_Parametros]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Luana Piva
-- Create date: 28/10/2013
-- Description:	<Ao desbloquear uma cco, pesquisa os pco que utilizavam essa conta e alteram seu status 
--para '2'(bloqueado pela conta) ou '4'(interno de sistema)>
-- =============================================
CREATE PROCEDURE [dbo].[ContasContabeis_Desbloqueia_Parametros]

@cco_codigo varchar(20)

AS
BEGIN

DECLARE 
@rowCount1 INT,
@rowCount2 INT

	UPDATE ParametroContabil
	SET pco_situacao = 1--ativo
	
	WHERE 
		(@cco_codigo = cco_codigoCredito OR
		@cco_codigo = cco_codigoDebito)
		AND pco_situacao = 5
		AND NOT EXISTS(SELECT cco_codigo FROM ContasContabeis as cco WITH(NOLOCK)
		WHERE --verifica se a outra conta utilizada também não esta bloqueada
		(cco.cco_codigo = cco_codigoCredito OR
		cco.cco_codigo = cco_codigoDebito) 
		AND cco_situacao = 2)
		
			
	SET @rowCount1 = @@ROWCOUNT	
		
	UPDATE ParametroContabil
	SET pco_situacao = 4-- interno de sistema
	
	WHERE 
		(@cco_codigo = cco_codigoCredito OR
		@cco_codigo = cco_codigoDebito)
		AND pco_situacao = 6 
		AND NOT EXISTS(SELECT cco_codigo FROM ContasContabeis as cco WITH(NOLOCK)
		WHERE --verifica se a outra conta utilizada também não esta bloqueada
		(cco.cco_codigo = cco_codigoCredito OR
		cco.cco_codigo = cco_codigoDebito) 
		AND cco_situacao = 2)
		
	SET @rowCount2 = @@ROWCOUNT	
	SELECT @rowCount1 + @rowCount2 quantidade
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ApoliceSeguro_MontaRelatorioRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		Fabio A
-- Create date: 16/08/2010 09:45
-- Description:	Retorna todas as apólices de seguro que não foram 
--				excluídas logicamente, fitradas por 
--				UA do usuário logado (para filtrar 
--				as UAs apenas da hierarquia da UA do usuário logado),
--				número da apólice, descrição da apólice e nome da seguradora 
-- ===========================================================================
create PROCEDURE [dbo].[NEW_ApoliceSeguro_MontaRelatorioRS]
	@uni_id INT,
	@datainicio date,
	@datafim date
AS
BEGIN

	SELECT 
		aps_apolice,
		BemPatrimonial.bem_descricao,
		aps_descricao,
	    aps_valorApolice, 
		aps_valorSeguro,
		aps_vigenciaFim,
		aps_vigenciaInicio,
		aps_dataAlteracao,
		aps_dataCriacao
	FROM 
		ApoliceSeguro AS APS WITH(NOLOCK)
		Left JOIN BemItem 
			ON BemItem.aps_id = APS.aps_id
		Left JOIN BemPatrimonial  WITH(NOLOCK) 
			ON BemPatrimonial.bem_id=BemItem.bem_id
		INNER JOIN Unidade AS UNI WITH (NOLOCK) 
			ON APS.uni_id = UNI.uni_id
		
	WHERE
		aps_situacao <> 3
		AND ((@uni_id IS NULL) 
			  OR (UNI.uni_id  IN(SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id))
			  OR (BemItem.bit_uniGuarda =  @uni_id ))
			)
		AND ((@datainicio is NULL) or (APS.aps_vigenciaInicio>=@datainicio) or APS.aps_vigenciaInicio is null)
		AND ((@datafim is NULL ) or (APS.aps_vigenciaFim<=@datafim ) or APS.aps_vigenciaFim is null)
	
	GROUP BY 
		aps_apolice
		, BemPatrimonial.bem_descricao
		, aps_descricao
		, aps_valorApolice
		, aps_valorSeguro
		, aps_vigenciaFim
		, aps_vigenciaInicio
		, aps_dataAlteracao
		, aps_dataCriacao
	ORDER BY 
		APS.aps_vigenciaFim	
		
SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ApoliceSeguro_MontaRelatorioSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		Fabio A
-- Create date: 16/08/2010 09:45
-- Description:	Retorna todas as apólices de seguro que não foram 
--				excluídas logicamente, fitradas por 
--				UA do usuário logado (para filtrar 
--				as UAs apenas da hierarquia da UA do usuário logado),
--				número da apólice, descrição da apólice e nome da seguradora 
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_ApoliceSeguro_MontaRelatorioSP]
	@uni_id INT,
	@datainicio date,
	@datafim date
AS
BEGIN

	SELECT 
		aps_apolice,
		BemPatrimonial.bem_descricao,
		aps_descricao,
	    aps_valorApolice, 
		aps_valorSeguro,
		aps_vigenciaFim,
		aps_vigenciaInicio,
		aps_dataAlteracao,
		aps_dataCriacao
	FROM 
		ApoliceSeguro AS APS WITH(NOLOCK)
		Left JOIN BemItem 
			ON BemItem.aps_id = APS.aps_id
		Left JOIN BemPatrimonial  WITH(NOLOCK) 
			ON BemPatrimonial.bem_id=BemItem.bem_id
		INNER JOIN Unidade AS UNI WITH (NOLOCK) 
			ON APS.uni_id = UNI.uni_id
		
	WHERE
		aps_situacao <> 3
		AND ((@uni_id IS NULL) 
			  OR (UNI.uni_id  IN(SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id))
			  OR (BemItem.bit_uniGuarda =  @uni_id ))
			)
		AND ((@datainicio is NULL) or (APS.aps_vigenciaInicio>=@datainicio AND APS.aps_vigenciainicio < @datafim) or APS.aps_vigenciaInicio is null)
		AND ((@datafim is NULL ) or (APS.aps_vigenciaFim<=@datafim AND APS.aps_vigenciaFim > @datainicio) or APS.aps_vigenciaFim is null)
	
	GROUP BY 
		aps_apolice
		, BemPatrimonial.bem_descricao
		, aps_descricao
		, aps_valorApolice
		, aps_valorSeguro
		, aps_vigenciaFim
		, aps_vigenciaInicio
		, aps_dataAlteracao
		, aps_dataCriacao
	ORDER BY 
		APS.aps_vigenciaFim	
		
SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ApoliceSeguro_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		Aline Dornelas
-- Create date: 16/08/2010 09:45
-- Description:	Retorna todas as apólices de seguro que não foram 
--				excluídas logicamente, fitradas por 
--				UA do usuário logado (para filtrar 
--				as UAs apenas da hierarquia da UA do usuário logado),
--				número da apólice, descrição da apólice e nome da seguradora 
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_ApoliceSeguro_SelectBy_All]
	@uni_id INT,
	@aps_apolice VARCHAR(50),
	@aps_descricao VARCHAR(max),
	@ent_razaoSocial VARCHAR(200)
AS
BEGIN

	SELECT 
		aps_id,
		aps_apolice,
		aps_descricao,
		ent_razaoSocial
	FROM 
		ApoliceSeguro AS APS WITH(NOLOCK)
		INNER JOIN Seguradora  AS SEG WITH(NOLOCK)
		ON APS.seg_id = SEG.seg_id
		INNER JOIN VW_SeguradoraEntidade AS ENT WITH(NOLOCK)
		ON SEG.ent_id = ENT.ent_id
		INNER JOIN Unidade AS UNI WITH (NOLOCK)
		ON APS.uni_id = UNI.uni_id
	WHERE
		aps_situacao <> 3
		AND ((@aps_apolice IS NULL) OR (aps_apolice LIKE '%' + @aps_apolice + '%'))
		AND ((@aps_descricao IS NULL) OR (aps_descricao LIKE '%' + @aps_descricao + '%'))
		AND ((@ent_razaoSocial IS NULL) OR (ent_razaoSocial LIKE '%' + @ent_razaoSocial + '%'))
		AND ((@uni_id IS NULL) OR (UNI.uni_id  IN(SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id))))
	ORDER BY 
		ent_razaoSocial	
		
SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ApoliceSeguro_SelectBy_aps_apolice]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================
-- Author:		Aline Dornelas
-- Create date: 16/08/2010 15:20:00
-- Description:	Utilizado na busca de número da apólice de seguro, 
--				retorna as apólices de seguro que não foram excluídas 
--				logicamente, filtrados por: número da apólice.
-- ===================================================================
CREATE PROCEDURE [dbo].[NEW_ApoliceSeguro_SelectBy_aps_apolice]
	@aps_id_alteracao BIGINT,
	@aps_apolice VARCHAR(50)

AS
BEGIN
	SELECT
		aps_id
	FROM
		ApoliceSeguro WITH(NOLOCK)
	WHERE
		aps_situacao <> 3
		AND  aps_apolice = @aps_apolice
		AND ((@aps_id_alteracao IS NULL) or (aps_id <> @aps_id_alteracao))
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ApoliceSeguro_SelectBy_Filtrado]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		hethini ribeiro
-- Create date: 26/07/2013 10:48
-- Description:	Retorna todas as apólices de seguro que não foram 
--				excluídas logicamente, fitradas por 
--				UA do usuário logado (para filtrar 
--				as UAs apenas da hierarquia da UA do usuário logado),
--				número da apólice, descrição da apólice e nome da seguradora 
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_ApoliceSeguro_SelectBy_Filtrado]
--declare
	@uni_id INT,
	@aps_apolice VARCHAR(50),
	@aps_descricao VARCHAR(max),
	@ent_razaoSocial VARCHAR(200)
AS
BEGIN

	SELECT 
		aps_id,
		aps_apolice,
		aps_descricao,
		ent_razaoSocial,
		seg_situacao
	FROM 
		ApoliceSeguro AS APS WITH(NOLOCK)
		INNER JOIN Seguradora  AS SEG WITH(NOLOCK)
		ON APS.seg_id = SEG.seg_id
		INNER JOIN VW_SeguradoraEntidade AS ENT WITH(NOLOCK)
		ON SEG.ent_id = ENT.ent_id
		INNER JOIN Unidade AS UNI WITH (NOLOCK)
		ON APS.uni_id = UNI.uni_id
	WHERE
		aps_situacao <> 3
		and SEG.seg_situacao <> 2
		AND ((@aps_apolice IS NULL) OR (aps_apolice LIKE '%' + @aps_apolice + '%'))
		AND ((@aps_descricao IS NULL) OR (aps_descricao LIKE '%' + @aps_descricao + '%'))
		AND ((@ent_razaoSocial IS NULL) OR (ent_razaoSocial LIKE '%' + @ent_razaoSocial + '%'))
		AND ((@uni_id IS NULL) OR (UNI.uni_id  IN(SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id))))
	ORDER BY 
		ent_razaoSocial	
		
SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ApoliceSeguro_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Aline Dornelas
-- Create date: 16/08/2010 15:40 
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ApoliceSeguro_UPDATE]
	@aps_id BIGINT,
	@seg_id INT,
	@uni_id INT,
	@aps_apolice VARCHAR (50),
	@aps_descricao VARCHAR (MAX),
	@aps_valorApolice MONEY,
	@aps_valorSeguro MONEY,
	@aps_vigenciaInicio DATETIME,
	@aps_vigenciaFim DATETIME,
	@aps_situacao TINYINT,
	@aps_dataAlteracao DATETIME

AS
BEGIN
	UPDATE ApoliceSeguro 
	SET 
		seg_id = @seg_id, 
		uni_id = @uni_id,
		aps_apolice = @aps_apolice, 
		aps_descricao = @aps_descricao, 
		aps_valorApolice = @aps_valorApolice, 
		aps_valorSeguro = @aps_valorSeguro, 
		aps_vigenciaInicio = @aps_vigenciaInicio, 
		aps_vigenciaFim = @aps_vigenciaFim, 
		aps_situacao = @aps_situacao,
		aps_dataAlteracao = @aps_dataAlteracao 

	WHERE 
		aps_id = @aps_id 

	RETURN ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Atestado_Recebimento_BuscaMateriais]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Olivia Mattiazzo
-- Create date: 12/02/2014 as 15:18
-- Description:	Busca os itens de acordo com os filtros do atestado de recebimento

-- Alteração:	Luana Piva
-- Data:		24/03/2014
--				Buscar apenas bens que tenham sido recebidos pela unidade do parâmetro e/ou filhas

-- Alteração:	Allex Rocha
-- Data:		02/12/2014
--				Correção do erro de timeout
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Atestado_Recebimento_BuscaMateriais]
	@notaEmpenho varchar(MAX),
	@docCompr varchar(MAX),
	@GPB varchar(MAX),
	@GRB varchar(MAX),
	@uni_idRestricao int
WITH RECOMPILE
AS
BEGIN
	;WITH MoviBem AS
	(
		SELECT
			bem_id
			,bit_id	
			,mov_unidadeOrigem
			,mov_unidadeDestino
			,ISNULL(MovimentacaoBem.mov_GPB, 'Não possui guia') AS mov_GPB
			,MovimentacaoBem.tpm_id
			,tpm_operacao			
		FROM 
			MovimentacaoBem WITH (NoLock)
			INNER JOIN TipoMovimentacao WITH(NOLOCK)
				ON MovimentacaoBem.tpm_id = TipoMovimentacao.tpm_id
				AND mov_unidadeDestino IN(SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_idRestricao))
		WHERE
		    (MovimentacaoBem.mov_unidadeDestino != MovimentacaoBem.mov_unidadeOrigem)						
	)	
	
	SELECT 
		BPat.bem_id,
		BPat.bem_descricao,
		GrpB.grp_id,
		GrpB.grp_nome,
		MoviBem.mov_unidadeOrigem as origem,
		MoviBem.mov_unidadeDestino as destino,
		COUNT(MoviBem.bit_id) as quantidade,
		MoviBem.mov_GPB,
		dbo.FN_BuscarBitID(MoviBem.mov_unidadeDestino,GrpB.grp_id,BPat.bem_descricao,0,NULL,MoviBem.tpm_operacao,@GPB,BItem.bem_id) AS bit_id
	FROM BemPatrimonial BPat WITH(NOLOCK)
		INNER JOIN GrupoBens GrpB WITH(NOLOCK)
			ON BPat.grp_id = GrpB.grp_id
		INNER JOIN MoviBem WITH(NOLOCK)
			ON MoviBem.bem_id = BPat.bem_id
		INNER JOIN BemItem BItem WITH(NOLOCK)
			ON BItem.bem_id = BPat.bem_id
			AND MoviBem.bit_id = bitem.bit_id
		LEFT JOIN BemItemDocumento Bid WITH(NOLOCK)
			ON BItem.bem_id = Bid.bem_id
			AND BItem.bit_id = Bid.bit_id
	WHERE
		(Bid.bid_tipoDoc = 4 AND Bid.bid_numeroDoc LIKE '%' + @notaEmpenho + '%')
		OR (BItem.bit_GPB LIKE '%' + @GPB + '%')
		OR (BItem.bit_GRB LIKE '%' + @GRB + '%')
		OR (Bid.bid_tipoDoc = 3 AND Bid.bid_numeroDoc LIKE '%' + @docCompr + '%')
	GROUP BY
		BPat.bem_id,
		BPat.bem_descricao,
		GrpB.grp_id,
		GrpB.grp_nome,
		MoviBem.mov_unidadeOrigem,
		MoviBem.mov_unidadeDestino,
		MoviBem.mov_GPB,
		BItem.bem_id,
		MoviBem.tpm_id,
		MoviBem.tpm_operacao
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_Atestado_RecebimentoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Renan Claro Pereira
-- Create date: 28/09/2010
-- Description:	Retorna dados para a elaboração do Atestado de Recebimento
-- Alteração
-- Author: Luana Piva
-- Description: Corrigir select e parâmetros bateado no relatório de SP.
-- Date: 04/04/2014
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Atestado_RecebimentoRS]

	
	@bem_id varchar(max),
	@bit_id varchar(max),
	@numGpbDestino varchar(max),
	@origem varchar(max),
	@destino varchar(max),
	@tpm_operacaoDestino varchar(max),
	@uni_id int
AS
BEGIN
WITH UnidadeEFilhas
AS
(
	SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id)
),
BemSelecionado AS
(
	select 
		ROW_NUMBER() OVER(order by valor) as ID,
		(CONVERT(varchar(max),valor)) as bem_id
	from 
		dbo.FN_StringToArrayInt64(@bem_id, ',')
),
BemItemSelecionado AS
(
	select 
		ROW_NUMBER() OVER(order by valor) as ID,
		(CONVERT(varchar(max),valor)) as bit_id
	from 
		dbo.FN_StringToArrayInt64(@bit_id, ',')
)

	SELECT 		
		BP.bem_dataEntrada, 
		BID.bid_numeroDoc AS bem_ne,		
		BP.bem_id,
		BP.bem_descricao, 
		COUNT(BI.bit_id) as qtde,
		BI.bit_valorOrigem,		
		(BI.bit_valorOrigem * COUNT(BI.bit_id)) as total,
		
		mov.mov_unidadeOrigem
		,mov.mov_unidadeDestino
		
		, uniAdm1.uad_nome as UnidadeOrcamentariaDestino
		, uniAdm2.uad_nome as UnidadeDespesaDestino
		
		 --tabelaDestino.UnidadeOrcamentaria as UnidadeOrcamentariaDestino,
		 --tabelaDestino.UnidadeDespesa as UnidadeDespesaDestino
		 
	FROM
		BemItem BI WITH(NoLock)
	LEFT JOIN BemItemDocumento AS BID WITH (NoLock)
		ON BID.bem_id = bi.bem_id
		AND BID.bit_id = bi.bit_id
		AND BID.bid_tipoDoc = 4	
	INNER JOIN BemPatrimonial BP WITH(NoLock)
		ON BI.bem_id = BP.bem_id
		
	inner join MovimentacaoBem mov WITH(NoLock)
		on mov.bem_id = BI.bem_id 
		and mov.bit_id = BI.bit_id 
		and mov.mov_unidadeDestino != mov.mov_unidadeOrigem
	--inner join dbo.FN_GetDestinoGPB(@bem_id ,@bit_id,@numGpbDestino,@tpm_operacaoDestino,@origem,@destino,0) tabelaDestino
	--	on tabelaDestino.UnidadeDestino=mov.mov_unidadeDestino	
		
	inner join Unidade uni1 WITH(NOLOCK)
		ON mov.mov_unidadeOrigem = uni1.uni_id
	inner join Unidade uni2 WITH (NOLOCK)
		ON mov.mov_unidadeDestino = uni2.uni_id
	inner join Synonym_SYS_UnidadeAdministrativa_SSO uniAdm1 WITH(NOLOCK)
		on uniAdm1.ent_id = uni1.ent_id
		and uniAdm1.uad_id = uni1.uad_id
	inner join Synonym_SYS_UnidadeAdministrativa_SSO uniAdm2 WITH(NOLOCK)
	on uniAdm2.ent_id = uni2.ent_id
	and uniAdm2.uad_id = uni2.uad_id

	WHERE (CONVERT(varchar(max),BP.bem_id)+','+CONVERT(varchar(max),BI.bit_id)) IN (SELECT BemSelecionado.bem_id +','+BemItemSelecionado.bit_id from BemSelecionado inner join BemItemSelecionado on BemSelecionado.id=BemItemSelecionado.id)

	GROUP BY 
		BP.bem_id,
		BP.bem_descricao,
		BP.bem_valorOrigem,		 
		BP.bem_dataEntrada, 
		BID.bid_numeroDoc,
		BI.bit_uniGestora, 
		BI.bit_uniGuarda,
		BI.bit_valorOrigem
		,mov.mov_unidadeOrigem
		,mov.mov_unidadeDestino
		, uniAdm1.uad_nome
		, uniAdm2.uad_nome
		--tabelaDestino.UnidadeOrcamentaria,
		--tabelaDestino.UnidadeDespesa
	Order by 
		BP.bem_descricao, BP.bem_dataEntrada

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Atestado_RecebimentoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Renan Claro Pereira
-- Create date: 28/09/2010
-- Description:	Retorna dados para a elaboração do Atestado de Recebimento

-- Author:		Nicholas Assis
-- Create date: 20/01/2014
-- Description:	Otimização do select
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Atestado_RecebimentoSP]

	@bem_id varchar(max),
	@bit_id varchar(max),
	@numGpbDestino varchar(max),
	@origem varchar(max),
	@destino varchar(max),
	@tpm_operacaoDestino varchar(max),
	@uni_id int
AS
BEGIN
WITH UnidadeEFilhas
AS
(
	SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id)
),
BemSelecionado AS
(
	select 
		ROW_NUMBER() OVER(order by valor) as ID,
		(CONVERT(varchar(max),valor)) as bem_id
	from 
		dbo.FN_StringToArrayInt64(@bem_id, ',')
),
BemItemSelecionado AS
(
	select 
		ROW_NUMBER() OVER(order by valor) as ID,
		(CONVERT(varchar(max),valor)) as bit_id
	from 
		dbo.FN_StringToArrayInt64(@bit_id, ',')
)

	SELECT 		
		BP.bem_dataEntrada, 
		BID.bid_numeroDoc AS bem_ne,		
		BP.bem_id,
		BP.bem_descricao, 
		COUNT(BI.bit_id) as qtde,
		BI.bit_valorOrigem,		
		(BI.bit_valorOrigem * COUNT(BI.bit_id)) as total,
		
		mov.mov_unidadeOrigem
		,mov.mov_unidadeDestino
		
		, uniAdm1.uad_nome as UnidadeOrcamentariaDestino
		, uniAdm2.uad_nome as UnidadeDespesaDestino
		
		 --tabelaDestino.UnidadeOrcamentaria as UnidadeOrcamentariaDestino,
		 --tabelaDestino.UnidadeDespesa as UnidadeDespesaDestino
		 
	FROM
		BemItem BI WITH(NoLock)
	LEFT JOIN BemItemDocumento AS BID WITH (NoLock)
		ON BID.bem_id = bi.bem_id
		AND BID.bit_id = bi.bit_id
		AND BID.bid_tipoDoc = 4	
	INNER JOIN BemPatrimonial BP WITH(NoLock)
		ON BI.bem_id = BP.bem_id
		
	inner join MovimentacaoBem mov WITH(NoLock)
		on mov.bem_id = BI.bem_id 
		and mov.bit_id = BI.bit_id 
		and mov.mov_unidadeDestino != mov.mov_unidadeOrigem
	--inner join dbo.FN_GetDestinoGPB(@bem_id ,@bit_id,@numGpbDestino,@tpm_operacaoDestino,@origem,@destino,0) tabelaDestino
	--	on tabelaDestino.UnidadeDestino=mov.mov_unidadeDestino	
		
	inner join Unidade uni1 WITH(NOLOCK)
		ON mov.mov_unidadeOrigem = uni1.uni_id
	inner join Unidade uni2 WITH (NOLOCK)
		ON mov.mov_unidadeDestino = uni2.uni_id
	inner join Synonym_SYS_UnidadeAdministrativa_SSO uniAdm1 WITH(NOLOCK)
		on uniAdm1.ent_id = uni1.ent_id
		and uniAdm1.uad_id = uni1.uad_id
	inner join Synonym_SYS_UnidadeAdministrativa_SSO uniAdm2 WITH(NOLOCK)
	on uniAdm2.ent_id = uni2.ent_id
	and uniAdm2.uad_id = uni2.uad_id

	WHERE (CONVERT(varchar(max),BP.bem_id)+','+CONVERT(varchar(max),BI.bit_id)) IN (SELECT BemSelecionado.bem_id +','+BemItemSelecionado.bit_id from BemSelecionado inner join BemItemSelecionado on BemSelecionado.id=BemItemSelecionado.id)

	GROUP BY 
		BP.bem_id,
		BP.bem_descricao,
		BP.bem_valorOrigem,		 
		BP.bem_dataEntrada, 
		BID.bid_numeroDoc,
		BI.bit_uniGestora, 
		BI.bit_uniGuarda,
		BI.bit_valorOrigem
		,mov.mov_unidadeOrigem
		,mov.mov_unidadeDestino
		, uniAdm1.uad_nome
		, uniAdm2.uad_nome
		--tabelaDestino.UnidadeOrcamentaria,
		--tabelaDestino.UnidadeDespesa
	Order by 
		BP.bem_descricao, BP.bem_dataEntrada

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Aviso_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =====================================================================
-- Author:		Pedro Gimenez
-- Create date: 19/01/2012
-- Description:	Retorna todos avisos que não foram excluídos
--				logicamente, fitradas por título, data inicial e final
-- ======================================================================
CREATE PROCEDURE [dbo].[NEW_Aviso_SelectBy_All]
	@avs_titulo VARCHAR(100),
	@avs_dataInicial DATETIME,
	@avs_dataFinal DATETIME
AS
BEGIN
	SELECT 
		AVS.avs_id,
		AVS.avs_titulo,
		AVS.avs_texto,
		CONVERT(DATETIME,AVS.avs_dataInicial,103) AS avs_dataInicial,
		CONVERT(DATETIME,AVS.avs_dataFinal,103) AS avs_dataFinal,
		CASE AVS.avs_situacao 
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
		  END AS situacao
	FROM 
		Aviso as AVS WITH (NOLOCK)
	WHERE
		AVS.avs_situacao <> 3
		AND ((@avs_titulo IS NULL) OR (AVS.avs_titulo LIKE '%' + @avs_titulo + '%')) 
		AND ((@avs_dataInicial IS NULL) OR (AVS.avs_dataInicial >= @avs_dataInicial))
		AND ((@avs_dataFinal IS NULL) OR (AVS.avs_dataFinal >= @avs_dataFinal))
	ORDER BY
		AVS.avs_dataInicial desc, AVS.avs_dataFinal
		
SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_AvisoDestinatario_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =====================================================================
-- Author:		Pedro Gimenez
-- Create date: 19/01/2012
-- Description:	Retorna todos os destinatários que não foram excluídos
--				logicamente, fitradas por aviso
-- ======================================================================
CREATE PROCEDURE [dbo].[NEW_AvisoDestinatario_SelectBy_All]
	@avs_id INT
AS
BEGIN
	SELECT 
		AVD.avs_id,
		AVD.avd_id,
		AVD.uni_id,
		(CASE WHEN AVD.uni_id IS NOT NULL 
			THEN dbo.FN_GetUniNome(AVD.uni_id) 
			ELSE '' 
			END)
		AS unidade,		
		AVD.avd_incluiDependente,
		CASE AVD.avd_incluiDependente 
			WHEN 1 THEN 'Para esta unidade e suas dependentes'
			WHEN 0 THEN 'Apenas para esta unidade'
		END AS dependente,
		AVD.avd_tipoUnidade,
		(CASE WHEN AVD.avd_tipoUnidade IS NOT NULL 
			THEN (SELECT tua_nome FROM dbo.Synonym_SYS_TipoUnidadeAdministrativa_SSO WHERE tua_id = AVD.avd_tipoUnidade)
			ELSE '' 
			END)
		AS tipounidade,
		CASE AVD.avd_situacao 
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
		END 
		AS situacao,
		AVD.avd_dataAlteracao,
		AVD.avd_dataCriacao
	FROM 
		AvisoDestinatario as AVD WITH (NOLOCK)
	WHERE
		AVD.avd_situacao <> 3
		AND ((@avs_id IS NULL) OR (AVD.avs_id = @avs_id)) 
	ORDER BY
		AVD.avd_id
		
SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_AvisoQuadro_SelectBy_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================
-- Author:		Pedro Gimenez
-- Create date: 20/01/2012
-- Description:	busca avisos que serão mostrados para uni_id
-- =========================================================
CREATE PROCEDURE [dbo].[NEW_AvisoQuadro_SelectBy_uni_id]
	@uni_id INT
AS
BEGIN
	SELECT distinct
		  AVS.avs_id,
		  AVS.avs_titulo,
		  AVS.avs_texto
		  		
	FROM AvisoDestinatario AS AVD WITH(NOLOCK)
		 INNER JOIN Aviso AS AVS WITH(NOLOCK)
			ON AVS.avs_id = AVD.avs_id
	WHERE
		( (AVD.uni_id = @uni_id AND AVD.avd_incluiDependente = 0) OR
		  (AVD.uni_id in (SELECT uni_id FROM [dbo].[FN_GetUnidadesSuperiores] (@uni_id)) AND AVD.avd_incluiDependente = 1)
		)
		AND GETDATE() BETWEEN AVS.avs_dataInicial AND AVS.avs_dataFinal
		AND AVS.avs_situacao = 1
		
	UNION 
		
	SELECT 
		  AVS.avs_id,
		  AVS.avs_titulo,
		  AVS.avs_texto
		  		
	FROM AvisoDestinatario AS AVD WITH(NOLOCK)		
		 INNER JOIN Aviso AS AVS WITH(NOLOCK)
			ON AVS.avs_id = AVD.avs_id
	WHERE
		(
		    AVD.uni_id IS NULL AND AVD.avd_tipoUnidade = (SELECT TOP 1 CoreUad.tua_id 
														    FROM VW_UnidadeAdministrativa AS CoreUad
																 INNER JOIN dbo.Unidade AS uniGua WITH(NOLOCK)
																	ON CoreUad.uad_id = uniGua.uad_id
														    WHERE uniGua.uni_id = @uni_id															     
		                                                   ) 		  
		)		
		AND GETDATE() BETWEEN AVS.avs_dataInicial AND AVS.avs_dataFinal	
		AND AVS.avs_situacao = 1		
					
	ORDER BY AVS.avs_id				 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemArquivo_SelectBy_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		Aline Dornelas
-- Create date: 06/09/2010 14:51:30
-- Description:
-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_BemArquivo_SelectBy_bem_id]
	@bem_id BIGINT
AS
BEGIN

	SELECT
		ARQ.arq_id
		, bea_tipo AS arq_tipo
		, bea_legenda AS arq_legenda
		, arq_nome AS arq_nome
		, arq_tamanho AS arq_tamanho
		, arq_typeMime AS arq_typeMime
	FROM
		BemArquivo AS BEA WITH (NOLOCK)
	INNER JOIN Arquivo AS ARQ WITH (NOLOCK)
		ON BEA.arq_id = ARQ.arq_id
	WHERE
		BEA.bem_id = @bem_id
	ORDER BY 
		arq_id DESC

	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemArquivo_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Aline Dornelas
-- Create date: 08/09/2010 09:44:15
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemArquivo_UPDATE]
	@bem_id BIGINT
	, @arq_id BIGINT
	, @bea_legenda VARCHAR (100)
	, @bea_observacao VARCHAR (2000)
	, @bea_tipo TINYINT
	, @bea_dataAlteracao DATETIME

AS
BEGIN
	UPDATE BemArquivo 
	SET 
		bea_legenda = @bea_legenda 
		, bea_observacao = @bea_observacao 
		, bea_tipo = @bea_tipo 
		, bea_dataAlteracao = @bea_dataAlteracao 

	WHERE 
		bem_id = @bem_id 
		AND arq_id = @arq_id 

		
	RETURN ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_ContagemManual_SelectBy_loc_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===================================================================================
-- Author:		Gabriel Malinosqui
-- Create Data: 28/03/2014 16:54
-- Description: Retorna todos os bens itens que não foram excluídos 
--				logicamente, filtrados pelo código da Localidade
--				@tipobusca = 0 para só não contados
--				@tipobusca = 1 para só contados
--				@tipobusca = 2 para todos
--				@dep_id = 0 para buscar em todas dependencias
--				e não retorna bens excluidos nem bloqueados
-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_ContagemManual_SelectBy_loc_id]
	@loc_id INT,
	@bit_registroPat VARCHAR(20),
	@tipobusca INT,
	@dep_id INT
AS
BEGIN
		
	SELECT
		BEM.bem_id,
		BEM.bem_descricao,
		bit_id,
		aps_id,
		LOC.loc_id,
		loc_nome,
		STC.stc_id,
		stc_nome,
		bit_registroPat,
		bit_referencia,
		bit_contado,
		CASE bit_status 
			WHEN 1 THEN 'Utilizado'
			WHEN 2 THEN 'Disponível'
		END AS bit_status,
		CASE bit_situacao
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
		END AS bit_situacao,
		bit_uniGestora,
		dbo.FN_GetUniNome(bit_uniGestora) AS bit_uniGestora_nome,
		bit_uniGuarda,
		dbo.FN_GetUniNome(bit_uniGuarda) AS bit_uniGuarda_nome,
		dep.dep_id,
		dep.dep_nome
	FROM
		BemItem AS BET WITH (NOLOCK)
		INNER JOIN StatusConservacao AS STC WITH (NOLOCK)
			ON BET.stc_id = STC.stc_id
		INNER JOIN Localidade AS LOC WITH (NOLOCK)
			ON BET.loc_id = LOC.loc_id
		INNER JOIN dbo.BemPatrimonial AS BEM WITH(NoLock)
			ON BEM.bem_id = bet.bem_id
		LEFT OUTER JOIN dbo.Dependencia AS dep 
			ON BET.dep_id = dep.dep_id AND BET.loc_id = dep.loc_id

	WHERE
		bit_situacao = 1 AND (BET.loc_id = @loc_id OR (@bit_registroPat IS NOT NULL))
		AND bit_status <> 3
		AND (bet.bit_registroPat LIKE @bit_registroPat OR @bit_registroPat IS NULL)
		AND ((bit_contado = 0 AND (@tipobusca = 0 OR @tipobusca = 2))
		OR  (bit_contado = 1 AND (@tipobusca = 1 OR @tipobusca = 2)))
		AND (BET.dep_id = @dep_id OR @dep_id IS NULL) 
		
	ORDER BY BET.dep_id, bit_registroPat 
	
	 SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_CriarRelatorioEtiquetaBemIDRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  PROCEDURE [dbo].[NEW_BemItem_CriarRelatorioEtiquetaBemIDRS]
	@bem_id varchar(max)
AS
BEGIN
	
	SELECT
		 BemPatrimonial.bem_descricao Descricao,
		 BemPatrimonial.bem_id ID
	From
		BemPatrimonial 
	inner join BemItem with(nolock)
		on BemItem.bem_id = BemItem.bem_id 
	where
		(@bem_id is null or  BemPatrimonial.bem_id in (select valor from dbo.FN_StringToArrayInt64(@bem_id,',')))
	group by BemPatrimonial.bem_id,bem_descricao
	
	order by Descricao
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_CriarRelatorioEtiquetaBemIDSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[NEW_BemItem_CriarRelatorioEtiquetaBemIDSP]
	@bem_id varchar(max)
AS
BEGIN
	
	SELECT
		 BemPatrimonial.bem_descricao Descricao,
		 BemPatrimonial.bem_id ID
	From
		BemPatrimonial 
	inner join BemItem with(nolock)
		on BemItem.bem_id = BemItem.bem_id 
	where
		(@bem_id is null or  BemPatrimonial.bem_id in (select valor from dbo.FN_StringToArrayInt64(@bem_id,',')))
	group by BemPatrimonial.bem_id,bem_descricao
	
	order by Descricao
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_CriarRelatorioEtiquetaCodigodeBarrasRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Fabio N
-- Create date: 23/08/2010
-- Description:	Monta relatorio que tras as etiquetas impressas junto
-- ===========================================================================
create PROCEDURE [dbo].[NEW_BemItem_CriarRelatorioEtiquetaCodigodeBarrasRS]
	@uni_id int,
	@loc_id varchar(max)
AS
BEGIN
	
	SELECT
		 BemPatrimonial.bem_descricao Descricao,
		 BemItem.bit_registroPat RegistroPat,
		 BemItem.loc_id,
		 Localidade.loc_nome,
		 ISNULL(BemItem.dep_id, '-1') as dependencia,
		 ISNULL(Dependencia.dep_nome,'Dependencia Vazia') as dep_nome
	From
	 BemPatrimonial with(nolock)
		inner join GrupoBens with(nolock)
			on GrupoBens.grp_id = BemPatrimonial.grp_id		
		inner join BemItem with(nolock)
			on BemPatrimonial.bem_id = BemItem.bem_id
		inner join Localidade
			on Localidade.loc_id = BemItem.loc_id
		Left join Dependencia
			on Dependencia.dep_id = BemItem.dep_id 
			and Dependencia.loc_id = BemItem.loc_id
			
	where
		BemItem.bit_uniGuarda = @uni_id
		and (BemItem.loc_id in (select valor from dbo.FN_StringToArrayInt64(@loc_id,',')))
		
	group by 
		BemItem.loc_id
		, BemPatrimonial.bem_id
		, bem_descricao
		, bit_registroPat
		, Localidade.loc_nome
		, BemItem.dep_id
		, Dependencia.dep_nome
	
	order by 
		loc_id
	 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_CriarRelatorioEtiquetaCodigodeBarrasSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Fabio N
-- Create date: 23/08/2010
-- Description:	Monta relatorio que tras as etiquetas impressas junto
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_CriarRelatorioEtiquetaCodigodeBarrasSP]
	@uni_id int,
	@loc_id varchar(max)
AS
BEGIN
	
	SELECT
		 BemPatrimonial.bem_descricao Descricao,
		 BemItem.bit_registroPat RegistroPat,
		 BemItem.loc_id,
		 Localidade.loc_nome,
		 ISNULL(BemItem.dep_id, '-1') as dependencia,
		 ISNULL(Dependencia.dep_nome,'Dependência Vazia') as dep_nome
	From
	 BemPatrimonial with(nolock)
		inner join GrupoBens with(nolock)
			on GrupoBens.grp_id = BemPatrimonial.grp_id		
		inner join BemItem with(nolock)
			on BemPatrimonial.bem_id = BemItem.bem_id
		inner join Localidade
			on Localidade.loc_id = BemItem.loc_id
		Left join Dependencia
			on Dependencia.dep_id = BemItem.dep_id 
			and Dependencia.loc_id = BemItem.loc_id
			
	where
		BemItem.bit_uniGuarda = @uni_id
		and (BemItem.loc_id in (select valor from dbo.FN_StringToArrayInt64(@loc_id,',')))
		
	group by 
		BemItem.loc_id
		, BemPatrimonial.bem_id
		, bem_descricao
		, bit_registroPat
		, Localidade.loc_nome
		, BemItem.dep_id
		, Dependencia.dep_nome
	
	order by 
		loc_id
	 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_DisponivelRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Pedro Gimenez
-- Create date: 22/12/2011
-- Description:	Busca bens disponíveis

-- Author: Wellington Santana
-- Create date: 07/02/2014
-- Description: adicionado condição no where (@uniges_id = 0 OR BI.bit_uniGestora = @uniges_id)
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_DisponivelRS]
	@uniges_id int,
	@uniguarda_id int,
	@data_inicial date,
	@data_final date,
	@grp_id int,
	@descricao varchar(100),
	--@uad_id uniqueidentifier,
	@status int,
	@stc_id int
AS
BEGIN
	
	--WITH
	
	--tbIdGestora AS (
	
	--	SELECT
	--		uni_id	AS unidade		
	--	FROM 
	--		VW_UnidadeAdministrativa
	--	WHERE
	--		(@uniges_id = 0 AND uad_id = @uad_id)
	--		OR
	--		uni_id = @uniges_id
	
	--)

	--,tbUnidades AS (
	
	--	SELECT uni_id, uad_id
	--	FROM
	--		dbo.FN_GetUnidadeEFilhas( (SELECT TOP 1 unidade FROM tbIdGestora) )		
	--	WHERE 
	--		uni_situacao <> 3
	--)	
	
	SELECT
		 BP.bem_id
		, BI.bit_id 
		, bem_descricao 
		, BP.grp_id
		, GB.grp_nome 
		, BI.bit_uniGestora 
		, dbo.FN_GetUniNome(BI.bit_uniGestora) as uniGestora
		, BI.bit_uniGuarda 
		, dbo.FN_GetUniNome(BI.bit_uniGuarda) as uniGuarda
		, BI.bit_dataIncorporacao
		, BI.bit_registroPat
		, BI.bit_valorLiquido
		, BI.bit_observacao
		, dbo.FN_GetUniNome(BI.bit_uniGestora)
		, BP.bem_dataEntrada
		, SC.stc_decricao
		,BI.bit_dataAlteracaoStatus
		--, MB.mov_GPB
		
	FROM	
		BemPatrimonial AS BP WITH(NoLock)
	INNER JOIN 
		BemItem AS BI WITH(NoLock) 
		ON BP.bem_id = BI.bem_id 
	LEFT JOIN 
		Unidade as UniGua WITH(NoLock)
		ON UniGua.uni_id = BI.bit_uniGuarda 	
	INNER JOIN
		GrupoBens AS GB WITH(NoLock)
		ON GB.grp_id = BP.grp_id  
	INNER JOIN 
		StatusConservacao AS SC WITH(NoLock)
		ON SC.stc_id = BI.stc_id
	--INNER JOIN 
	--	tbUnidades AS tbUni
	--	ON tbUni.uni_id = UniGua.uni_id	
	WHERE
		(@uniges_id = 0 OR BI.bit_uniGestora = @uniges_id)
		AND	(@uniguarda_id = 0         OR BI.bit_uniGuarda = @uniguarda_id) 
		AND (@grp_id   = 0         OR GB.grp_id = @grp_id) 
		AND (@stc_id   = 0         OR BI.stc_id = @stc_id) 
		AND (@data_inicial IS NULL OR CONVERT(DATE, BP.bem_dataEntrada,103) >= @data_inicial) 
		AND (@data_final IS NULL   OR CONVERT(DATE, BP.bem_dataEntrada,103) <= @data_final)	
		AND ((@descricao IS NULL)  OR (UPPER(BP.bem_descricao) LIKE '%' + UPPER(@descricao) + '%'))	
		AND BI.bit_status = @status 
		
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_DisponivelSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_DisponivelSP]
	@uniges_id INT, 
	@uniguarda_id INT, 
	@data_inicial DATE, 
	@data_final date,
	@grp_id INT, 
	@descricao varchar(100),
	@uad_id UNIQUEIDENTIFIER ,
	@status INT,
	@stc_id INT 
AS
BEGIN
	
	WITH
	
	tbIdGestora AS (
		SELECT
			uni_id	AS unidade		
		FROM 
			VW_UnidadeAdministrativa
		WHERE
			(@uniges_id = 0 AND uad_id = @uad_id)
			OR
			uni_id = @uniges_id
	)

	,tbUnidades AS (
	
		SELECT 
			uni_id, uad_id
		FROM
			dbo.FN_GetUnidadeEFilhas( (SELECT TOP 1 unidade FROM tbIdGestora) )		
		WHERE 
			uni_situacao <> 3
	)	
	
	SELECT
		 BP.bem_id
		, BI.bit_id 
		, bem_descricao 
		, BP.grp_id
		, GB.grp_nome 
		, BI.bit_uniGestora 
		, dbo.FN_GetUniNome(BI.bit_uniGestora) as uniGestora
		, BI.bit_uniGuarda 
		, dbo.FN_GetUniNome(BI.bit_uniGuarda) as uniGuarda
		, BI.bit_dataIncorporacao
		, BI.bit_registroPat
		, BI.bit_valorLiquido
		, BI.bit_observacao
		, dbo.FN_GetUniNome(BI.bit_uniGestora)
		, BP.bem_dataEntrada
		, SC.stc_decricao
		,BI.bit_dataAlteracaoStatus
		
	FROM	
		BemPatrimonial AS BP WITH(NoLock)
	INNER JOIN 
		BemItem AS BI WITH(NoLock) 
		ON BP.bem_id = BI.bem_id 
	LEFT JOIN 
		Unidade as UniGua WITH(NoLock)
		ON UniGua.uni_id = BI.bit_uniGuarda 	
	INNER JOIN
		GrupoBens AS GB WITH(NoLock)
		ON GB.grp_id = BP.grp_id  
	INNER JOIN 
		StatusConservacao AS SC WITH(NoLock)
		ON SC.stc_id = BI.stc_id
	LEFT JOIN 
		tbUnidades AS tbUni
		ON tbUni.uni_id = UniGua.uni_id	
	WHERE
		1 = 1
		/*(@uniges_id = 0 OR BI.bit_uniGestora = @uniges_id)
		/*AND (@uniguarda_id = 0        OR BI.bit_uniGuarda = @uniguarda_id) 
		AND (@grp_id   = 0         OR GB.grp_id = @grp_id) 
		AND (@stc_id   = 0         OR BI.stc_id = @stc_id) */
		AND (@data_inicial IS NULL OR BP.bem_dataEntrada >= @data_inicial) 
		AND (@data_final IS NULL   OR BP.bem_dataEntrada <= @data_final)*/	
		AND (@grp_id   = 0         OR GB.grp_id = @grp_id) 
		AND (@descricao IS NULL  OR (UPPER(BP.bem_descricao) LIKE '%' + UPPER(@descricao) + '%'
											COLLATE Latin1_General_CI_AI)) --ignora acentuacao	
		AND BI.bit_status = @status 
		and BI.bit_uniGestora <> -1
		
	SELECT @@ROWCOUNT		
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_DivergenciasLocalidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 12/09/2010
-- Description:	retorna os Bens que tem divergencias
-- =============================================

CREATE PROCEDURE [dbo].[NEW_BemItem_DivergenciasLocalidade] 
	@loc_id INT,
	@dep_id INT
AS
BEGIN
SELECT bi.bem_id ,
        bi.bit_id ,
        bi.stc_id ,
        bi.loc_id ,
        bi.dep_id ,
        bi.aps_id ,
        bi.fat_id ,
        bi.bit_referencia ,
        bi.bit_uniGestora ,
        bi.bit_uniGuarda ,
        bi.bit_registroPat ,
        bi.bit_GPB ,
        bi.bit_valorOrigem ,
        bi.bit_valorLiquido ,
        bi.bit_vidaUtil ,
        bi.bit_cotas ,
        bi.bit_dataDepInicio ,
        bi.bit_dataDepFim ,
        bi.bit_doctoBaixa ,
        bi.bit_dataBaixa ,
        --bi.bit_dataIncorporacao ,
        (SELECT TOP 1
				mov_data
			FROM 
				MovimentacaoBem as MovBem
			WHERE 
				MovBem.bem_id = bi.bem_id
				AND MovBem.bit_id = bi.bit_id 
				AND tpm_id IN(SELECT tpm_id FROM TipoMovimentacao WHERE tpm_operacao = 1)
				AND movBem.mov_situacao <> 3) 
		as bit_dataIncorporacao,
        bi.bit_contado,
		CASE bit_contado 
			WHEN 0 THEN 'Não Contado'
			WHEN 1 THEN 'Contado'
		END AS contado,
        bi.bit_dataInventario ,
        bi.bit_status ,
        bi.bit_observacao ,
        bi.bit_situacao ,
        bi.bit_dataCriacao ,
        bi.bit_dataAlteracao,
        bem.bem_descricao,
        loc.loc_nome,
        sc.stc_nome,
        bi.loc_id,
        dep_nome
        
    FROM 
		dbo.BemItem AS bi WITH(NoLock)
    INNER JOIN 
		dbo.BemPatrimonial as bem  WITH(NoLock)
		ON bi.bem_id = bem.bem_id 
    INNER JOIN 
		dbo.Localidade as loc  WITH(NoLock)
		ON bi.loc_id = loc.loc_id
    INNER JOIN dbo.StatusConservacao AS sc WITH(NoLock)
		ON sc.stc_id = bi.stc_id
	LEFT OUTER JOIN dbo.Dependencia AS dep
		ON bi.dep_id = dep.dep_id AND loc.loc_id = dep.loc_id
    
	WHERE 
	((bit_contado = 0 AND bit_dataBaixa IS NULL)
		OR (bit_contado = 1 AND NOT EXISTS (SELECT 
												mov_data
											FROM 
												MovimentacaoBem as MovBem
											WHERE 
												MovBem.bem_id = bi.bem_id
												AND MovBem.bit_id = bi.bit_id 
												AND tpm_id IN(SELECT tpm_id FROM TipoMovimentacao WHERE tpm_operacao = 1)
												AND movBem.mov_situacao <> 3) ))
	AND bi.loc_id = @loc_id
	AND (bi.dep_id = @dep_id OR @dep_id IS NULL)
	
	ORDER BY dep_nome, bi.bit_registroPat
	
	 RETURN @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_DivergenciasUnidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 26/08/2010
-- Description:	retorna os Bens que tem divergencias
-- =============================================

CREATE PROCEDURE [dbo].[NEW_BemItem_DivergenciasUnidade] 
	@uni_id INT,
	@loc_id INT
AS
BEGIN
SELECT BemItem.bem_id ,
        BemItem.bit_id ,
        BemItem.stc_id ,
        BemItem.loc_id ,
        BemItem.dep_id ,
        BemItem.aps_id ,
        BemItem.fat_id ,
        BemItem.bit_referencia ,
        BemItem.bit_uniGestora ,
        BemItem.bit_uniGuarda ,
        BemItem.bit_registroPat ,
        BemItem.bit_GPB ,
        BemItem.bit_valorOrigem ,
        BemItem.bit_valorLiquido ,
        BemItem.bit_vidaUtil ,
        BemItem.bit_cotas ,
        BemItem.bit_dataDepInicio ,
        BemItem.bit_dataDepFim ,
        BemItem.bit_doctoBaixa ,
        BemItem.bit_dataBaixa ,
        --BemItem.bit_dataIncorporacao ,
        (SELECT TOP 1
				mov_data
			FROM 
				MovimentacaoBem as MovBem
			WHERE 
				MovBem.bem_id = BemItem.bem_id
				AND MovBem.bit_id = BemItem.bit_id 
				AND tpm_id IN(SELECT tpm_id FROM TipoMovimentacao WHERE tpm_operacao = 1)
				AND movBem.mov_situacao <> 3 ) 
		as bit_dataIncorporacao,
        BemItem.bit_contado ,
        BemItem.bit_dataInventario ,
        BemItem.bit_status ,
        BemItem.bit_observacao ,
        BemItem.bit_situacao ,
        BemItem.bit_dataCriacao ,
        BemItem.bit_dataAlteracao,
        bem.bem_descricao,
        loc.loc_nome
        
    FROM 
		BemItem WITH(NoLock)
    INNER JOIN 
		BemPatrimonial as bem WITH(NoLock)
		ON BemItem.bem_id = bem.bem_id
    INNER JOIN 
		Localidade as loc WITH(NoLock)
		ON BemItem.loc_id = loc.loc_id
	WHERE 
		((bit_contado = 0 AND bit_dataBaixa IS NULL)
		OR (bit_contado = 1 AND NOT EXISTS (SELECT 
												mov_data
											FROM 
												MovimentacaoBem as MovBem
											WHERE 
												MovBem.bem_id = BemItem.bem_id
												AND MovBem.bit_id = BemItem.bit_id 
												AND tpm_id IN(SELECT tpm_id FROM TipoMovimentacao WHERE tpm_operacao = 1)
												AND movBem.mov_situacao <> 3)))
	AND bit_uniGuarda = @uni_id 
	AND(@loc_id = 0 OR BemItem.loc_id = @loc_id)
	 
	 RETURN @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_DivergenciasUnidadeRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 26/08/2010
-- Description:	retorna os Bens que tem divergencias
-- =============================================

create PROCEDURE [dbo].[NEW_BemItem_DivergenciasUnidadeRS] 
	@uni_id INT,
	@loc_id INT
AS
BEGIN
SELECT BemItem.bem_id ,
        BemItem.bit_id ,
        BemItem.stc_id ,
        BemItem.loc_id ,
        BemItem.dep_id ,
        BemItem.aps_id ,
        BemItem.fat_id ,
        BemItem.bit_referencia ,
        BemItem.bit_uniGestora ,
        BemItem.bit_uniGuarda ,
        BemItem.bit_registroPat ,
        BemItem.bit_GPB ,
        BemItem.bit_valorOrigem ,
        BemItem.bit_valorLiquido ,
        BemItem.bit_vidaUtil ,
        BemItem.bit_cotas ,
        BemItem.bit_dataDepInicio ,
        BemItem.bit_dataDepFim ,
        BemItem.bit_doctoBaixa ,
        BemItem.bit_dataBaixa ,
        --BemItem.bit_dataIncorporacao ,
        (SELECT TOP 1
				mov_data
			FROM 
				MovimentacaoBem as MovBem
			WHERE 
				MovBem.bem_id = BemItem.bem_id
				AND MovBem.bit_id = BemItem.bit_id 
				AND tpm_id IN(SELECT tpm_id FROM TipoMovimentacao WHERE tpm_operacao = 1)
				AND movBem.mov_situacao <> 3 ) 
		as bit_dataIncorporacao,
        BemItem.bit_contado ,
        BemItem.bit_dataInventario ,
        BemItem.bit_status ,
        BemItem.bit_observacao ,
        BemItem.bit_situacao ,
        BemItem.bit_dataCriacao ,
        BemItem.bit_dataAlteracao,
        bem.bem_descricao,
        loc.loc_nome
        
    FROM 
		BemItem WITH(NoLock)
    INNER JOIN 
		BemPatrimonial as bem WITH(NoLock)
		ON BemItem.bem_id = bem.bem_id
    INNER JOIN 
		Localidade as loc WITH(NoLock)
		ON BemItem.loc_id = loc.loc_id
	WHERE 
		((bit_contado = 0 AND bit_dataBaixa IS NULL)
		OR (bit_contado = 1 AND NOT EXISTS (SELECT 
												mov_data
											FROM 
												MovimentacaoBem as MovBem
											WHERE 
												MovBem.bem_id = BemItem.bem_id
												AND MovBem.bit_id = BemItem.bit_id 
												AND tpm_id IN(SELECT tpm_id FROM TipoMovimentacao WHERE tpm_operacao = 1)
												AND movBem.mov_situacao <> 3)))
	AND bit_uniGuarda = @uni_id 
	AND(@loc_id = 0 OR BemItem.loc_id = @loc_id)
	 
	 RETURN @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_DivergenciasUnidadeSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 26/08/2010
-- Description:	retorna os Bens que tem divergencias
-- =============================================

CREATE PROCEDURE [dbo].[NEW_BemItem_DivergenciasUnidadeSP] 
	@uni_id INT,
	@loc_id INT
AS
BEGIN
SELECT BemItem.bem_id ,
        BemItem.bit_id ,
        BemItem.stc_id ,
        BemItem.loc_id ,
        BemItem.dep_id ,
        BemItem.aps_id ,
        BemItem.fat_id ,
        BemItem.bit_referencia ,
        BemItem.bit_uniGestora ,
        BemItem.bit_uniGuarda ,
        BemItem.bit_registroPat ,
        BemItem.bit_GPB ,
        BemItem.bit_valorOrigem ,
        BemItem.bit_valorLiquido ,
        BemItem.bit_vidaUtil ,
        BemItem.bit_cotas ,
        BemItem.bit_dataDepInicio ,
        BemItem.bit_dataDepFim ,
        BemItem.bit_doctoBaixa ,
        BemItem.bit_dataBaixa ,
        --BemItem.bit_dataIncorporacao ,
        (SELECT TOP 1
				mov_data
			FROM 
				MovimentacaoBem as MovBem
			WHERE 
				MovBem.bem_id = BemItem.bem_id
				AND MovBem.bit_id = BemItem.bit_id 
				AND tpm_id IN(SELECT tpm_id FROM TipoMovimentacao WHERE tpm_operacao = 1)
				AND movBem.mov_situacao <> 3 ) 
		as bit_dataIncorporacao,
        BemItem.bit_contado ,
        BemItem.bit_dataInventario ,
        BemItem.bit_status ,
        BemItem.bit_observacao ,
        BemItem.bit_situacao ,
        BemItem.bit_dataCriacao ,
        BemItem.bit_dataAlteracao,
        bem.bem_descricao,
        loc.loc_nome
        
    FROM 
		BemItem WITH(NoLock)
    INNER JOIN 
		BemPatrimonial as bem WITH(NoLock)
		ON BemItem.bem_id = bem.bem_id
    INNER JOIN 
		Localidade as loc WITH(NoLock)
		ON BemItem.loc_id = loc.loc_id
	WHERE 
		((bit_contado = 0 AND bit_dataBaixa IS NULL)
		OR (bit_contado = 1 AND NOT EXISTS (SELECT 
												mov_data
											FROM 
												MovimentacaoBem as MovBem
											WHERE 
												MovBem.bem_id = BemItem.bem_id
												AND MovBem.bit_id = BemItem.bit_id 
												AND tpm_id IN(SELECT tpm_id FROM TipoMovimentacao WHERE tpm_operacao = 1)
												AND movBem.mov_situacao <> 3)))
	AND bit_uniGuarda = @uni_id 
	AND(@loc_id = 0 OR BemItem.loc_id = @loc_id)
	 
	 RETURN @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Etiquetar]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_Etiquetar]
@bem_id bigint,
	@bem_descricao varchar(100),
	@grp_id int,
	@uniGuarda int,
	@anoCadastro varchar(4),
	@workEtiquetar int,
	@stepEspera int
	
AS

if (@anoCadastro = '')
begin
	select @anoCadastro = null
end

BEGIN
	
	SELECT
		 BP.bem_id
		, BI.bit_id 
		, BIWf.biw_id 
		, BIWS.bws_id  
		, bem_descricao 
		, BP.grp_id
		, GB.grp_nome 
		, BI.bit_uniGuarda 
		, dbo.FN_GetUniNome(BI.bit_uniGuarda) as uniGuarda
		, BI.loc_id 
		, Loc.loc_nome
		, BP.bem_dataEntrada
		, BP.bem_dataCriacao
		, BI.bit_registroPat
		, BI.dep_id 
		, Dep.dep_nome
		--,BP.bem_dataCriacao
		--,BI.bit_uniGuarda 
		,dbo.FN_GetUniNome(BI.bit_uniGestora) as uniG
	FROM	
		BemPatrimonial AS BP WITH(NoLock)
	INNER JOIN 
		BemItem AS BI WITH(NoLock) 
		ON BP.bem_id = BI.bem_id 
	INNER JOIN 
		BemItemWorkflow AS BIWf WITH(NoLock)
		ON BI.bem_id = BIWf.bem_id 
		   AND BI.bit_id = BIWf.bit_id 
	INNER JOIN
		BemItemWfStatus AS BIWS WITH(NoLock)
		ON (BIWf.bem_id = BIWS.bem_id
		   AND BIWf.wrk_id = BIWS.wrk_id   
		   AND BIWf.bit_id = BIWS.bit_id 
		   AND BIWf.biw_id = BIWS.biw_id 		
		   AND BIWS.wrk_id = @workEtiquetar 
		   AND BIWS.stp_id = @stepEspera
		   AND BIWS.bws_situacao = 1)	
	LEFT JOIN 
		Unidade as UniGua WITH(NoLock)
		ON UniGua.uni_id = BI.bit_uniGuarda 	
	LEFT JOIN
		Localidade AS Loc WITH(NoLock)
		ON  Loc.uni_id = UniGua.uni_id
		   AND Loc.loc_id = BI.loc_id 
	LEFT JOIN
		Dependencia AS Dep WITH(NoLock)
		ON Dep.loc_id = Loc.loc_id 
		AND Dep.dep_id = BI.dep_id 
 
	INNER JOIN
		GrupoBens AS GB WITH(NoLock)
		ON GB.grp_id = BP.grp_id   
	WHERE
		BP.bem_id = isnull(@bem_id,BP.bem_id) -- (@bem_id IS NULL OR BP.bem_id = @bem_id)
		AND BP.bem_descricao LIKE '%' + isnull(@bem_descricao, BP.bem_descricao)+ '%' -- (@bem_descricao IS NULL OR BP.bem_descricao LIKE '%' + @bem_descricao + '%')
		--AND (@dataEntrada IS NULL OR BP.bem_dataEntrada = @dataEntrada) --BP.bem_dataEntrada = isnull(@dataEntrada,BP.bem_dataEntrada)--
		AND (@anoCadastro IS NULL OR year(BP.bem_dataCriacao) = year(@anoCadastro)) 
		AND  (@grp_id IS NULL OR @grp_id IN ( SELECT grp_id FROM dbo.FN_GetGrupoBensSuperiores(BP.grp_id)))

		AND (@uniGuarda  IS NULL OR BI.bit_uniGuarda = @uniGuarda)-- BI.bit_uniGuarda = isnull(BI.bit_uniGuarda,@uniGuarda)
			
	SELECT @@ROWCOUNT		
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_EtiquetarImportacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Debora Cavaglieri
-- Create date: 17/12/2010
-- Description:	Busca bens que estão sem o número da
--				etiqueta patrimonial.
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_EtiquetarImportacao]
	@bem_id bigint,
	@uniGuarda int,
	@workEtiquetar int,
	@stepEspera int
	
AS
BEGIN
	
	SELECT TOP 1
		 BP.bem_id
		, BI.bit_id 
		, BIWf.biw_id 
		, BIWS.bws_id  
		, BP.bem_dataEntrada
	FROM	
		BemPatrimonial AS BP WITH(NoLock)
	INNER JOIN 
		BemItem AS BI WITH(NoLock) 
		ON BP.bem_id = BI.bem_id 
	INNER JOIN 
		BemItemWorkflow AS BIWf WITH(NoLock)
		ON BI.bem_id = BIWf.bem_id 
		   AND BI.bit_id = BIWf.bit_id 
	INNER JOIN
		BemItemWfStatus AS BIWS WITH(NoLock)
		ON (BIWf.bem_id = BIWS.bem_id
		   AND BIWf.wrk_id = BIWS.wrk_id   
		   AND BIWf.bit_id = BIWS.bit_id 
		   AND BIWf.biw_id = BIWS.biw_id 		
		   AND BIWS.wrk_id = @workEtiquetar 
		   AND BIWS.stp_id = @stepEspera
		   AND BIWS.bws_situacao = 1)				 
	WHERE
		BP.bem_id = @bem_id
		--AND (BI.bit_registroPat IS NULL OR BI.bit_registroPat = '')
		AND ((@uniGuarda  IS NULL) 
			OR (BI.bit_uniGuarda = @uniGuarda))
			
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_GarantiaRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Pedro Gimenez
-- Create date: 05/01/2012
-- Description:	Busca bens com garantia
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_GarantiaRS]
	@uniges_id int,
	@uniguarda_id int,
	@data_inicial date,
	@data_final date,
	@grp_id int,
	@descricao varchar(100),
	@apolice varchar(100),
	@seguradora varchar(100)
AS
BEGIN
	
	SELECT
		 BP.bem_id
		, BI.bit_id 
		, bem_descricao 
		, BP.grp_id
		, GB.grp_nome 
		, BI.bit_uniGestora 
		, dbo.FN_GetUniNome(BI.bit_uniGestora) as uniGestora
		, BI.bit_uniGuarda 
		, dbo.FN_GetUniNome(BI.bit_uniGuarda) as uniGuarda
		, BI.bit_dataIncorporacao
		, BI.bit_registroPat
		, BI.bit_valorLiquido
		, BI.bit_observacao
		, BI.bit_dataFimGarantia
		, CASE WHEN (bit_dataFimGarantia > GETDATE()) THEN
			 DATEDIFF(DAY,BI.bit_dataFimGarantia,GETDATE())  
			 ELSE 0 END
			AS Prazo
		, E.ent_nomeFantasia
		 ,E.ent_razaoSocial
		, BP.bem_dataEntrada
		, AP.aps_apolice
		, AP.aps_valorSeguro
		, uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo
		
	FROM	
		BemPatrimonial AS BP WITH(NOLOCK)
	INNER JOIN 
		BemItem AS BI WITH(NOLOCK) 
		ON BP.bem_id = BI.bem_id 	
	INNER JOIN
		GrupoBens AS GB WITH(NOLOCK)
		ON GB.grp_id = BP.grp_id 
	INNER JOIN 
		ApoliceSeguro AS AP WITH(NOLOCK)	
		ON AP.aps_id = BI.aps_id
	INNER JOIN 
		Seguradora AS SE WITH(NOLOCK)
		ON SE.seg_id = AP.seg_id
	INNER JOIN 
		Synonym_SYS_Entidade_SSO E WITH(NOLOCK)
		ON SE.ent_id = E.ent_id
	INNER JOIN dbo.VW_UnidadeAdministrativa AS UA WITH(NoLock)
		ON UA.uni_id = BI.bit_uniGuarda					
	WHERE
		BI.bit_dataFimGarantia IS NOT NULL
		AND (@uniguarda_id = 0     OR BI.bit_uniGuarda = @uniguarda_id) 
		AND (@uniges_id = 0        OR BI.bit_uniGestora = @uniges_id)
		AND (@grp_id  = 0          OR GB.grp_id = @grp_id) 
		AND (@apolice = 0          OR AP.aps_id = @apolice) 
		AND (@data_inicial IS NULL OR CONVERT(DATE, BP.bem_dataEntrada,103) >= @data_inicial) 
		AND (@data_final IS NULL   OR CONVERT(DATE, BP.bem_dataEntrada,103) <= @data_final)	
		AND ((@descricao IS NULL)  OR (UPPER(BP.bem_descricao) LIKE '%' + UPPER(@descricao) + '%'))	
		AND ((@seguradora IS NULL) OR (UPPER(E.ent_razaoSocial) LIKE '%' + UPPER(@seguradora) + '%'))
			
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_GarantiaSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Pedro Gimenez
-- Create date: 05/01/2012
-- Description:	Busca bens com garantia
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_GarantiaSP]
	@uniges_id int,
	@uniguarda_id int,
	@data_inicial date,
	@data_final date,
	@grp_id int,
	@descricao varchar(100),
	@apolice varchar(100),
	@seguradora varchar(100)
AS
BEGIN
	
	SELECT
		 BP.bem_id
		, BI.bit_id 
		, bem_descricao 
		, BP.grp_id
		, GB.grp_nome 
		, BI.bit_uniGestora 
		, dbo.FN_GetUniNome(BI.bit_uniGestora) as uniGestora
		, BI.bit_uniGuarda 
		, dbo.FN_GetUniNome(BI.bit_uniGuarda) as uniGuarda
		, BI.bit_dataIncorporacao
		, BI.bit_registroPat
		, BI.bit_valorLiquido
		, BI.bit_observacao
		, BI.bit_dataFimGarantia
		, CASE WHEN (bit_dataFimGarantia > GETDATE()) THEN
			 DATEDIFF(DAY,BI.bit_dataFimGarantia,GETDATE())  
			 ELSE 0 END
			AS Prazo
		, E.ent_nomeFantasia
		 ,E.ent_razaoSocial
		, BP.bem_dataEntrada
		, AP.aps_apolice
		, AP.aps_valorSeguro
		, uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo
		
	FROM	
		BemPatrimonial AS BP WITH(NOLOCK)
	INNER JOIN 
		BemItem AS BI WITH(NOLOCK) 
		ON BP.bem_id = BI.bem_id 	
	INNER JOIN
		GrupoBens AS GB WITH(NOLOCK)
		ON GB.grp_id = BP.grp_id 
	INNER JOIN 
		ApoliceSeguro AS AP WITH(NOLOCK)	
		ON AP.aps_id = BI.aps_id
	INNER JOIN 
		Seguradora AS SE WITH(NOLOCK)
		ON SE.seg_id = AP.seg_id
	INNER JOIN 
		Synonym_SYS_Entidade_SSO E WITH(NOLOCK)
		ON SE.ent_id = E.ent_id
	INNER JOIN dbo.VW_UnidadeAdministrativa AS UA WITH(NoLock)
		ON UA.uni_id = BI.bit_uniGuarda					
	WHERE
		BI.bit_dataFimGarantia IS NOT NULL
		AND (@uniguarda_id = 0     OR BI.bit_uniGuarda = @uniguarda_id) 
		AND (@uniges_id = 0        OR BI.bit_uniGestora = @uniges_id)
		AND (@grp_id  = 0          OR GB.grp_id = @grp_id) 
		AND (@apolice = 0          OR AP.aps_id = @apolice) 
		AND (@data_inicial IS NULL OR CONVERT(DATE, BP.bem_dataEntrada,103) >= @data_inicial) 
		AND (@data_final IS NULL   OR CONVERT(DATE, BP.bem_dataEntrada,103) <= @data_final)	
		AND ((@descricao IS NULL)  OR (UPPER(BP.bem_descricao) LIKE '%' + UPPER(@descricao) + '%' 
													COLLATE Latin1_General_CI_AI)) --ignora acentuacao	
		AND ((@seguradora IS NULL) OR (UPPER(E.ent_razaoSocial) LIKE '%' + UPPER(@seguradora) + '%' 		
													COLLATE Latin1_General_CI_AI)) --ignora acentuacao
			
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Get_Qtde_Valor]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		JORGE FREITAS
-- Create date: 19/11/2010 
-- Description: Retorna a qtde de itens e o valor total de um determinado bem_id
-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_Get_Qtde_Valor]
	@bem_id BIGINT
AS
BEGIN
	
	SELECT 
		COUNT(bem_id) AS bem_qtdeInicial
		, SUM(bit_valorLiquido) AS bem_valorOrigem 
	FROM 
		dbo.BemItem with (noLock)
	WHERE 
		bem_id = @bem_id
		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_getEntity_nolock]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_getEntity_nolock]
	 @bem_id BigInt
	, @bit_id Int
	
AS
BEGIN
	SELECT	Top 1
		 bem_id  
		, bit_id 
		, stc_id 
		, loc_id 
		, dep_id 
		, aps_id 
		, fat_id 
		, bit_referencia 
		, bit_uniGestora 
		, bit_uniGuarda 
		, bit_registroPat 
		, bit_GPB 
		, bit_GRB 
		, bit_valorOrigem 
		, bit_valorLiquido 
		, bit_vidaUtil 
		, bit_cotas 
		, bit_dataDepInicio 
		, bit_dataDepFim 
		, bit_doctoBaixa 
		, bit_dataBaixa 
		, bit_dataIncorporacao 
		, bit_contado 
		, bit_dataInventario 
		, bit_status 
		, bit_dataAlteracaoStatus 
		, bit_observacao 
		, bit_dataFimGarantia 
		, bit_situacao 
		, bit_dataCriacao 
		, bit_dataAlteracao 
		, bit_registroPatAnterior 
		, bit_nroSerie 
		, bit_marca 
		, bit_modelo 
		, bit_tipo 
		, bit_placa 
		, bit_chassi 
		, bit_anoFabricacao 
		, bit_quilometragem 
		, bit_potencia 
		, bit_unidadePotencia 
		, bit_cilindros 
		, sp_id 
		, tb_id 
		, bit_codProgFinanc 
		, bit_matriculaPessoa 
		, bit_codEspecie 

 	FROM
 		BemItem with(nolock)
	WHERE 
		bem_id = @bem_id
		AND ((bit_id = @bit_id)OR(@bit_id is null))
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_INSERT_BATCH]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Wellington Rossi
-- Create date: 31/10/2013
-- Description:	Insertção e Alteração em Lote
-- Alteração: cópia para Conpat (04/12/2013)
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItem_INSERT_BATCH]
    @DataTable dbo.BemItemTableType READONLY 
AS
BEGIN 

    MERGE INTO dbo.BemItem AS M
    USING @DataTable AS T
	ON (M.bem_id = T.bem_id 
		AND M.bit_id = T.bit_id) 
    WHEN MATCHED THEN 
		UPDATE SET 
			stc_id = T.stc_id 
			, loc_id = T.loc_id 
			, dep_id = T.dep_id 
			, aps_id = T.aps_id 
			, fat_id = T.fat_id 
			, bit_referencia = T.bit_referencia 
			, bit_uniGestora = T.bit_uniGestora 
			, bit_uniGuarda = T.bit_uniGuarda 
			, bit_registroPat = T.bit_registroPat 
			, bit_GPB = T.bit_GPB 
			, bit_GRB = T.bit_GRB 
			, bit_valorOrigem = T.bit_valorOrigem 
			, bit_valorLiquido = T.bit_valorLiquido 
			, bit_vidaUtil = T.bit_vidaUtil 
			, bit_cotas = T.bit_cotas 
			, bit_dataDepInicio = T.bit_dataDepInicio 
			, bit_dataDepFim = T.bit_dataDepFim 
			, bit_doctoBaixa = T.bit_doctoBaixa 
			, bit_dataBaixa = T.bit_dataBaixa 
			, bit_dataIncorporacao = T.bit_dataIncorporacao 
			, bit_contado = T.bit_contado 
			, bit_dataInventario = T.bit_dataInventario 
			, bit_status = T.bit_status 
			, bit_dataAlteracaoStatus = T.bit_dataAlteracaoStatus 
			, bit_observacao = T.bit_observacao 
			, bit_dataFimGarantia = T.bit_dataFimGarantia
			, bit_situacao = T.bit_situacao 
			, bit_dataAlteracao = T.bit_dataAlteracao 
    WHEN NOT MATCHED THEN 
		INSERT (bem_id 
				--, bit_id 
				, stc_id 
				, loc_id 
				, dep_id 
				, aps_id 
				, fat_id 
				, bit_referencia 
				, bit_uniGestora 
				, bit_uniGuarda 
				, bit_registroPat 
				, bit_GPB 
				, bit_GRB 
				, bit_valorOrigem 
				, bit_valorLiquido 
				, bit_vidaUtil 
				, bit_cotas 
				, bit_dataDepInicio 
				, bit_dataDepFim 
				, bit_doctoBaixa 
				, bit_dataBaixa 
				, bit_dataIncorporacao 
				, bit_contado 
				, bit_dataInventario 
				, bit_status 
				, bit_dataAlteracaoStatus 
				, bit_observacao 
				, bit_dataFimGarantia 
				, bit_situacao 
				, bit_dataCriacao 
				, bit_dataAlteracao
				)
		VALUES (T.bem_id 
				--, T.bit_id 
				, T.stc_id 
				, T.loc_id 
				, T.dep_id 
				, T.aps_id 
				, T.fat_id 
				, T.bit_referencia 
				, T.bit_uniGestora 
				, T.bit_uniGuarda 
				, T.bit_registroPat 
				, T.bit_GPB 
				, T.bit_GRB 
				, T.bit_valorOrigem 
				, T.bit_valorLiquido 
				, T.bit_vidaUtil 
				, T.bit_cotas 
				, T.bit_dataDepInicio 
				, T.bit_dataDepFim 
				, T.bit_doctoBaixa 
				, T.bit_dataBaixa 
				, T.bit_dataIncorporacao 
				, T.bit_contado 
				, T.bit_dataInventario 
				, T.bit_status 
				, T.bit_dataAlteracaoStatus 
				, T.bit_observacao 
				, T.bit_dataFimGarantia 
				, T.bit_situacao 
				, T.bit_dataCriacao 
				, T.bit_dataAlteracao 
				);
	
	SELECT ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_InservivelRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Debora Cavaglieri
-- Create date: 25/01/2011
-- Description:	Busca bens inserviveis

-- Alteração: Wellington Santana
-- Date:27/03/2014
-- Description: Adicionado parametro @bid_numeroDoc, LEFT JOIN BemItemDocumento
-- no where tipoMovimentação adicionado tpm_operacao = 10, no INNER JOIN, MovimentacaoBem
-- estava, AND MB.bit_id = BI.bem_id trocado por AND MB.bit_id = BI.bit_id
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_InservivelRS]
@uniGuarda INT
,@data_incorporacao DATETIME
,@status INT
,@bid_numeroDoc VARCHAR(50)

AS
BEGIN
	SELECT
		 BP.bem_id
		, BI.bit_id 
		, bem_descricao 
		, BP.grp_id
		, GB.grp_nome 
		, BI.bit_uniGestora 
		, dbo.FN_GetUniNome(BI.bit_uniGestora) as uniGestora
		, BI.bit_uniGuarda 
		, dbo.FN_GetUniNome(BI.bit_uniGuarda) as uniGuarda
		, BI.bit_dataIncorporacao
		, BI.bit_registroPat
		, BI.bit_valorLiquido
		, BI.bit_observacao
		, MB.mov_GPB
		,BID.bid_numeroDoc
		
	FROM	
		BemPatrimonial AS BP WITH(NoLock)
	INNER JOIN 
		BemItem AS BI WITH(NoLock) 
		ON BP.bem_id = BI.bem_id 
	LEFT JOIN 
		Unidade as UniGua WITH(NoLock)
		ON UniGua.uni_id = BI.bit_uniGuarda 	
	INNER JOIN
		GrupoBens AS GB WITH(NoLock)
		ON GB.grp_id = BP.grp_id   
	INNER JOIN
		MovimentacaoBem AS MB WITH(NoLock)
		ON MB.bem_id = BP.bem_id 
		AND MB.bit_id = BI.bit_id
	LEFT JOIN
		BemItemDocumento AS BID WITH(NOLOCK)
		on BID.bid_tipoDoc = 6
		and BID.bit_id = BI.bit_id
		and BID.bem_id = BI.bem_id
	WHERE
		MB.tpm_id IN (SELECT tpm_id FROM TipoMovimentacao WHERE tpm_operacao = 3 OR tpm_operacao = 10)
		AND(@data_incorporacao IS NULL OR BI.bit_dataIncorporacao = @data_incorporacao)	
		AND (@uniGuarda  IS NULL OR BI.bit_uniGestora = @uniGuarda) 
		AND (BI.stc_id = @status)
		AND (@bid_numeroDoc IS NULL OR (@bid_numeroDoc = BID.bid_numeroDoc))
		
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_InservivelSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================          
-- Author:  Debora Cavaglieri          
-- Create date: 25/01/2011          
-- Description: Busca bens inserviveis          
-- Alteração: (Luana Piva - 08/10/2013)          
-- ===========================================================================          
CREATE PROCEDURE [dbo].[NEW_BemItem_InservivelSP]          
--declare      
@uniGuarda INT = null--1217 -- 1265         
,@uniGestora INT  = 52      
,@data_incorporacao DATETIME   =null       
,@status INT    =3      
,@bid_numeroDoc VARCHAR(50)  =null        
,@mar_guid VARCHAR(50) = null--'T20170828122258'  --  = null      
           
  AS          
BEGIN          
 SELECT     
   BP.bem_id         
   ,BI.bit_id    
  , ROW_NUMBER() OVER(ORDER BY  BI.bit_uniGuarda  ASC)   as  numero_linha           
  , Bp.bem_descricao           
  , BP.grp_id          
  , GB.grp_nome           
  , BI.bit_uniGestora           
  , dbo.FN_GetUniNome(BI.bit_uniGestora) as uniGestora          
  , BI.bit_uniGuarda           
  , dbo.FN_GetUniNome(BI.bit_uniGuarda) as uniGuarda          
  , BI.bit_dataBaixa          
  , BI.bit_registroPat          
  , BI.bit_valorLiquido          
  , BI.bit_observacao          
  --, MB.mov_GPB          
  ,BID.bid_numeroDoc          
  , CASE  WHEN BI.bit_dataBaixa IS NULL THEN MA.mar_guid     
  ELSE  isnull(MA.mar_guid ,'NÃO APLICAVEL') END    
    as mar_guid    
  --,MB.tpm_id    
 FROM           
  BemPatrimonial AS BP WITH(NoLock)          
 INNER JOIN           
  BemItem AS BI WITH(NoLock)           
  ON BP.bem_id = BI.bem_id           
 LEFT JOIN           
  Unidade as UniGua WITH(NoLock)          
  ON UniGua.uni_id = BI.bit_uniGuarda            
 INNER JOIN          
  GrupoBens AS GB WITH(NoLock)          
  ON GB.grp_id = BP.grp_id             
 --inner JOIN          
 -- MovimentacaoBem AS MB WITH(NoLock)          
 -- ON MB.bem_id = BP.bem_id           
 -- AND MB.bit_id = BI.bit_id           
 LEFT JOIN          
  BemItemDocumento AS BID WITH(NOLOCK)          
  on BID.bid_tipoDoc = 6          
  and BID.bit_id = BI.bit_id          
  and BID.bem_id = BI.bem_id          
 LEFT JOIN          
  MapaArrolamento AS MA WITH(NOLOCK)          
  on MA.bit_id = BI.bit_id          
  and MA.bem_id = BI.bem_id          
            
            
 WHERE          
 -- MB.tpm_id IN (SELECT tpm_id FROM TipoMovimentacao WHERE tpm_operacao = 3 OR tpm_operacao = 10)          
  --AND    
  (@data_incorporacao IS NULL OR BI.bit_dataBaixa = @data_incorporacao)           
  AND    
   (@uniGestora  IS NULL OR BI.bit_uniGestora = @uniGestora)           
  AND (@uniGuarda  IS NULL OR BI.bit_uniGuarda = @uniGuarda)           
  AND (BI.stc_id = @status)          
  AND (@bid_numeroDoc IS NULL OR (@bid_numeroDoc = BID.bid_numeroDoc))          
  AND (@mar_guid IS NULL OR (@mar_guid = MA.mar_guid))          
           
  -- SELECT * FROM TipoMovimentacao WHERE tpm_id in (22,23,1,4) tpm_operacao = 3 OR tpm_operacao = 10         
        --  order by uniGuarda desc  
 SELECT @@ROWCOUNT            
END       
    
    
--(22,23,1,4)    
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Mapa_Arrolamento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Objetivo :	Gerar Relatório: Relatorios > Mapa de Arrolamento
	
	Autor	 :			Mar, 2017
	
	Alteracao:			
	
	Testes	 : 

	sp_helptext 
					NEW_BemItem_Mapa_Arrolamento 10

*/

create procedure [dbo].[NEW_BemItem_Mapa_Arrolamento](
	@uni_id int = null

	 /*
	 @bem_ids varchar(max) = '' -- Recebe uma string separada por ',' de bem_id e a fnSplit monta uma tbl para relacionar.	
	,@uni_id int = 0
	,@wrk_id int = 0
	,@stp_id int = 0
	,@bem_dataCadastro	date = null
	,@bem_dataCadastroFim	date = null
	*/
)
as

begin

select top 10
		 item = RANK() OVER (ORDER BY bi.bem_id) 
		,bem_descricao 
		,quantidade = 1
		,bem_dataEntrada
		,bit_registroPat
		,bit_valorLiquido
		,stc_nome
from
		BemPatrimonial					bp with(nolock)
		inner join BemItem				bi with(nolock)
		on (bp.bem_id = bi.bem_id)
		inner join StatusConservacao	sc with(nolock)
		on (sc.stc_id = bi.stc_id)
where
		1 = 1
		and ((@uni_id is null) or (bit_uniGestora = @uni_id))
end

	


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Mapa_Arrolamento_s]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*          
 Objetivo : Procedure de leitura / Gerar Relatório: Relatorios > Mapa de Arrolamento > Pede uni_id e guid do relatorio          
           
 Autor  :   Mar, 2017          
           
 Alteracao:             
           
 Testes  :           
          
     select * from MapaArrolamento where mar_guid is not null          
     NEW_BemItem_Mapa_Arrolamento_s 'C', 5          
     NEW_BemItem_Mapa_Arrolamento_s 'L', 5          
     NEW_BemItem_Mapa_Arrolamento_s 'R', 1603, null,'T20170718123328'          
*/          
          
CREATE procedure [dbo].[NEW_BemItem_Mapa_Arrolamento_s](          
--declare    
  @funcao char   = null-- 'R'        
 ,@uni_id int    = null --1217       
 ,@loc_id int   = null           
 ,@mar_guid varchar(50) = null --'T20170828122258'        
     
) as          
          
declare           
  @email  varchar(50) = null          
 ,@telefone varchar(50) = null      
 ,@notaGuarda varchar(100) = 'Material deverá permanecer na Unidade de Guarda, até a sua retirada pelo órgão donatário.'    
 ,@notaGestora varchar(100) = 'O Material acima relacionado deve permanecer na Unidade, conforme determina o Decreto nº 50.179 de 07/08/1968.'        
        
if(@funcao = 'L')          
begin          
  select           
    value = '-1'          
    ,text = '-- Selecione a Localização --'          
        
 union all          
        
  select          
     value = lc.loc_id          
    ,text  = lc.loc_nome          
  from          
    MapaArrolamento      ma with(nolock)        
    inner join Localidade    lc with(nolock)          
    on (lc.uni_id = ma.uni_id          
    and ma.loc_id = lc.loc_id)          
  where          
    1 = 1          
    and ((@uni_id is null) or (ma.uni_id = @uni_id))          
    and ma.mar_situacao = 1          
    and mar_guid is null          
  group by          
     lc.loc_id          
    ,lc.loc_nome          
  order by          
    text          
end           
          
if(@funcao = 'C')          
begin         
 select           
   value = '-1'          
   ,text = '-- Selecione o Mapa --'          
           
 union all          
           
 select          
   value = mar_guid          
   ,text  = mar_guid + ' - ' + lc.loc_nome          
 from          
   MapaArrolamento ma with(nolock)              
   inner join Localidade    lc with(nolock)          
   on (lc.uni_id = ma.uni_id          
   and ma.loc_id = lc.loc_id)          
 where          
   1 = 1          
   and ((@uni_id is null) or (ma.uni_id = @uni_id))          
   and ma.mar_situacao = 1          
   and ma.mar_imprimir = 0        
   and mar_guid is not null          
 group by          
   mar_guid          
   ,loc_nome          
end           
          
if(@funcao = 'I')          
begin         
 select @telefone = isnull((          
         select   top 1        
           uac_contato          
         from          
            unidade             un with(nolock)          
            inner join coresso..SYS_UnidadeAdministrativaContato ua with(nolock)          
            on (ua.ent_id = un.ent_id          
            and ua.uad_id = un.uad_id)          
          
            inner join coresso..SYS_TipoMeioContato     tm with(nolock)          
            on( tm.tmc_id = ua.tmc_id)          
         where          
            1 = 1          
            and tm.tmc_validacao = 3          
            and un.uni_id = @uni_id           
         ),'')          
            
 select @email = isnull((          
        select    top 1        
           uac_contato          
        from          
           unidade             un with(nolock)          
                     
           inner join coresso..SYS_UnidadeAdministrativaContato ua with(nolock)          
           on (ua.ent_id = un.ent_id          
           and ua.uad_id = un.uad_id)          
          
           inner join coresso..SYS_TipoMeioContato     tm with(nolock)          
           on( tm.tmc_id = ua.tmc_id)          
        where          
           1 = 1          
           and tm.tmc_validacao = 1          
           and un.uni_id = @uni_id           
        ),'')          
           
 select           
    item = ROW_NUMBER() OVER(ORDER BY ma.bit_id  ASC)           
   ,ma.bem_descricao           
   ,quantidade = 1          
   ,ma.bem_dataEntrada          
   ,ma.bit_registroPat          
   ,ma.bit_valorLiquido          
   ,(case when ma.bit_composicao = 1           
          then 'Ferro'           
    when ma.bit_composicao = 2        
    then 'Madeira'        
          else 'Todos'           
        End  ) as bit_composicao        
   ,stc_nome          
   ,ma.mar_guid          
   ,uniGuarda  = 'Unidade Despesa: '   + (dbo.FN_GetUniNome(ma.bit_uniGuarda))          
   ,uniGestora  = 'Unidade Orçamentária: '  + (select uad_nome from dbo.FN_GetUnidadeGestoraImediata(ma.bit_uniGuarda))          
   ,uniArrolado = 'Material Arrolado no: '  + (dbo.FN_GetUniNome(ma.bit_uniGuarda))          
   ,endereco  = (          
         'Endereço: ' + isNull(en.end_logradouro,'')   + ' - '           
             + isNull(en.end_bairro,'')    + ' - '           
             + isNull(en.end_distrito,'')+ ' - '  + 'CEP: '           
             + isNull(en.end_cep,'')  + ' - '  + 'Fone: '           
             + isNull(@telefone,'')  + ' - '  + 'Email: '          
             + isNull(@email,'')          
        )    
    ,uac_contato = (case    
   when ma.bit_uniGuarda = ma.bit_uniGestora     
    then @notaGestora    
    else    
     @notaGuarda    
  end )      
 from          
   MapaArrolamento   ma with(nolock)          
    
     inner join StatusConservacao  sc with(nolock)          
   on (sc.stc_id = ma.stc_id)   
  
   inner join Localidade    lc with(nolock)          
   on (lc.uni_id = ma.bit_uniGuarda          
   and ma.loc_id = lc.loc_id)          
               
   inner join coresso..end_Endereco en with(nolock)          
   on (en.end_id = lc.end_id)          
 where          
   1 = 1          
   and ((@uni_id is null) or (ma.bit_uniGuarda = @uni_id))          
   and ((@loc_id is null) or (ma.loc_id = @loc_id))          
   and ((@mar_guid is null) or (ma.mar_guid = @mar_guid))          
   and ma.mar_situacao = 1          
   and ma.mar_imprimir = 0        
        
 if (select @@ROWCOUNT  ) > 0        
  begin        
 update MapaArrolamento set mar_imprimir = 1        
 where         
   ((@uni_id is null) or (uni_id = @uni_id))            
   and mar_guid = @mar_guid        
   and mar_situacao = 1          
   and mar_imprimir = 0        
  end        
end          
          
 if(@funcao = 'R')          
begin         
 select @telefone = isnull((          
         select   top 1        
           uac_contato          
         from          
            unidade             un with(nolock)          
            inner join coresso..SYS_UnidadeAdministrativaContato ua with(nolock)          
            on (ua.ent_id = un.ent_id          
            and ua.uad_id = un.uad_id)          
          
            inner join coresso..SYS_TipoMeioContato     tm with(nolock)          
            on( tm.tmc_id = ua.tmc_id)          
         where          
            1 = 1          
            and tm.tmc_validacao = 3          
            and un.uni_id = @uni_id           
         ),'')          
            
 select @email = isnull((          
        select    top 1        
           uac_contato          
        from          
           unidade             un with(nolock)          
                     
           inner join coresso..SYS_UnidadeAdministrativaContato ua with(nolock)          
           on (ua.ent_id = un.ent_id          
           and ua.uad_id = un.uad_id)          
          
           inner join coresso..SYS_TipoMeioContato     tm with(nolock)          
           on( tm.tmc_id = ua.tmc_id)          
        where          
           1 = 1          
           and tm.tmc_validacao = 1          
           and un.uni_id = @uni_id           
        ),'')          
           
 select           
    item = ROW_NUMBER() OVER(ORDER BY ma.bit_id  ASC)   
   ,ma.bem_descricao           
   ,quantidade = 1          
   ,ma.bem_dataEntrada          
   ,ma.bit_registroPat          
   ,ma.bit_valorLiquido          
   ,(case when ma.bit_composicao = 1      
          then 'Ferro'           
    when ma.bit_composicao = 2        
    then 'Madeira'        
          else 'Todos'           
        End  ) as bit_composicao        
   ,stc_nome          
   ,ma.mar_guid          
   ,uniGuarda  = 'Unidade Despesa: '   + (dbo.FN_GetUniNome(ma.bit_uniGuarda))          
   ,uniGestora  = 'Unidade Orçamentária: '  + (select uad_nome from dbo.FN_GetUnidadeGestoraImediata(ma.bit_uniGuarda))          
   ,uniArrolado = 'Material Arrolado no: '  + (dbo.FN_GetUniNome(ma.bit_uniGuarda))          
   ,endereco  = (          
         'Endereço: ' + isNull(en.end_logradouro,'')   + ' - '           
             + isNull(en.end_bairro,'')    + ' - '           
             + isNull(en.end_distrito,'')+ ' - '  + 'CEP: '           
             + isNull(en.end_cep,'')  + ' - '  + 'Fone: '           
             + isNull(@telefone,'')  + ' - '  + 'Email: '          
             + isNull(@email,'')          
        )          
     ,uac_contato = (case    
   when ma.bit_uniGuarda = ma.bit_uniGestora     
    then @notaGestora    
    else    
     @notaGuarda    
  end )  ,
  ma.bem_id,
  ma.bit_id     
 from          
 MapaArrolamento   ma with(nolock)          
  -- on (ma.bem_id = bi.bem_id          
   --and ma.bit_id = bi.bit_id          
   --and ma.uni_id = bi.bit_uniGuarda )          
          
     inner join StatusConservacao  sc with(nolock)          
   on (sc.stc_id = ma.stc_id)          
        
  
   inner join Localidade    lc with(nolock)          
   on (lc.uni_id = ma.bit_uniGuarda          
   and ma.loc_id = lc.loc_id)          
               
   inner join coresso..end_Endereco en with(nolock)          
   on (en.end_id = lc.end_id)          
 where          
   1 = 1          
   and ((@uni_id is null) or (ma.bit_uniGuarda = @uni_id))          
   and ((@loc_id is null) or (ma.loc_id = @loc_id))          
   and ((@mar_guid is null) or (ma.mar_guid = @mar_guid))          
   and ma.mar_situacao = 1         
   and ma.mar_imprimir = 1         
end 
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_MontaExtratodeBemRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna o relatorio de extrato de bens
--				parametro:
-- =============================================
create procedure [dbo].[NEW_BemItem_MontaExtratodeBemRS]
@dataIncial date,
@dataFinal date,
@uni_id int,
@bit_id varchar(max),
@bem_id int
AS
BEGIN
	SELECT 
		TipoMovimentacao.tpm_nome as Tipo,
		BemItem.bit_registroPat as regPat,
		MovimentacaoBem.mov_nl as situacao,
		BemPatrimonial.bem_descricao as Descricao,
		dbo.FN_GetUniNome(MovimentacaoBem.mov_unidadeOrigem) as UnidadeOrigem ,
		dbo.FN_GetUniNome(MovimentacaoBem.mov_unidadeDestino)as UnidadeDestino ,
		MovimentacaoBem.mov_valor as Valor,
		MovimentacaoBem.mov_observacao as Observacao,
		MovimentacaoBem.per_mes as mes,
		MovimentacaoBem.per_ano as ano,
		case
		when MovimentacaoBem.mov_situacao=3 then 'Sim'
		else 'Não'
		end as Cancelado
	From 
		BemPatrimonial WITH(NoLock)
	inner join BemItem with(nolock)
		on BemPatrimonial.bem_id = BemItem.bem_id
	inner join MovimentacaoBem with(nolock)
		on MovimentacaoBem.bem_id = BemItem.bem_id 
		and MovimentacaoBem.bit_id=BemItem.bit_id
	inner join TipoMovimentacao with(nolock)
		on MovimentacaoBem.tpm_id = TipoMovimentacao.tpm_id
	
	where
	((MovimentacaoBem.bem_id=@bem_id and MovimentacaoBem.bit_id in (select valor from dbo.FN_StringToArrayInt64(@bit_id, ','))) or (@bit_id ='-1' and MovimentacaoBem.bem_id=@bem_id ))
	And ((MovimentacaoBem.mov_unidadeOrigem in (select uni_id from dbo.FN_GetUnidadeEFilhas(@uni_id))) or (MovimentacaoBem.mov_unidadeDestino in (select uni_id from dbo.FN_GetUnidadeEFilhas(@uni_id))))
	And (@dataIncial is null or (CONVERT(int,MovimentacaoBem.per_ano)=YEAR(@dataIncial) and CONVERT(int,MovimentacaoBem.per_mes)>=CONVERT(int, Month(@dataIncial))) or (CONVERT(int,MovimentacaoBem.per_ano)>CONVERT(int,YEAR(@dataIncial))))
	And (@dataFinal is null or (CONVERT(int,MovimentacaoBem.per_ano)= Convert(int,YEAR(@dataFinal)) and CONVERT(int,MovimentacaoBem.per_mes)<=CONVERT(int,Month(@dataFinal))) or (CONVERT(int,MovimentacaoBem.per_ano)<CONVERT(int, YEAR(@dataFinal))))
	order by 
		MovimentacaoBem.mov_data
		,MovimentacaoBem.mov_dataCriacao
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_MontaExtratodeBemSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[NEW_BemItem_MontaExtratodeBemSP]
	@dataIncial date,
	@dataFinal date,
	@uni_id int,
	@bit_id varchar(max),
	@bem_id int
AS
BEGIN
	SELECT 
		TipoMovimentacao.tpm_nome as Tipo,
		BemItem.bit_registroPat as regPat,
		MovimentacaoBem.mov_nl as situacao,
		BemPatrimonial.bem_descricao as Descricao,
		dbo.FN_GetUniNome(MovimentacaoBem.mov_unidadeOrigem) as UnidadeOrigem ,
		dbo.FN_GetUniNome(MovimentacaoBem.mov_unidadeDestino)as UnidadeDestino ,
		MovimentacaoBem.mov_valor as Valor,
		MovimentacaoBem.mov_observacao as Observacao,
		MovimentacaoBem.per_mes as mes,
		MovimentacaoBem.per_ano as ano,
		Cancelado =	case MovimentacaoBem.mov_situacao
					when 3 then	'Sim'
					else		'Não'
				end 
	From 
		BemPatrimonial WITH(NoLock)
	inner join BemItem with(nolock)
		on BemPatrimonial.bem_id = BemItem.bem_id
	inner join MovimentacaoBem with(nolock)
		on MovimentacaoBem.bem_id = BemItem.bem_id 
		and MovimentacaoBem.bit_id=BemItem.bit_id
	inner join TipoMovimentacao with(nolock)
		on MovimentacaoBem.tpm_id = TipoMovimentacao.tpm_id
	
	where
		1 = 1
		and ((MovimentacaoBem.bem_id=@bem_id and MovimentacaoBem.bit_id in (select valor from dbo.FN_StringToArrayInt64(@bit_id, ','))) or (@bit_id ='-1' and MovimentacaoBem.bem_id=@bem_id ))
		And (@dataIncial is null or (CONVERT(int,MovimentacaoBem.per_ano)=YEAR(@dataIncial) and CONVERT(int,MovimentacaoBem.per_mes)>=CONVERT(int, Month(@dataIncial))) or (CONVERT(int,MovimentacaoBem.per_ano)>CONVERT(int,YEAR(@dataIncial))))
		And (@dataFinal is null or (CONVERT(int,MovimentacaoBem.per_ano)= Convert(int,YEAR(@dataFinal)) and CONVERT(int,MovimentacaoBem.per_mes)<=CONVERT(int,Month(@dataFinal))) or (CONVERT(int,MovimentacaoBem.per_ano)<CONVERT(int, YEAR(@dataFinal))))
	order by 
		MovimentacaoBem.mov_data
		,MovimentacaoBem.mov_dataCriacao
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_MontaRelatorioMovimentacaoNomeMovimentacaoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna campo dos nomes dos tipos de movimentações selecionadas 
--				
-- =============================================
create procedure [dbo].[NEW_BemItem_MontaRelatorioMovimentacaoNomeMovimentacaoRS]
@stmp_id varchar(max)
AS
BEGIN
	select dbo.FN_BuscaNomeMovimentacao(@stmp_id)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_MontaRelatorioMovimentacaoNomeMovimentacaoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna campo dos nomes dos tipos de movimentações selecionadas 
--				
-- =============================================
CREATE procedure [dbo].[NEW_BemItem_MontaRelatorioMovimentacaoNomeMovimentacaoSP]
@stmp_id varchar(max)
AS
BEGIN
	select dbo.FN_BuscaNomeMovimentacao(@stmp_id)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_MontaRelatorioMovimentacaoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna o relatorio de movimentacao de bens
--				parametro:tpm_id (string com tds os tipos separada por virgula),uni_id,
--						  data incial, data final

-- Author: Wellington Santana
-- Alter date: 08/04/2014
-- Description: Procedure alterado para trazer todas movimentações
--				onde MOV.uni_id = @uni_id
-- =============================================
CREATE  procedure [dbo].[NEW_BemItem_MontaRelatorioMovimentacaoRS]
	@stmp_id varchar(max),
	@dataInicial date,
	@dataFinal date,
	@uni_id int
AS
BEGIN

WITH 

MoviUnidade as(
SELECT 
		mov_valor,
		mov_observacao,
		per_mes,
		per_ano,
		mov_nl,
		mov_data,
		bem_id,
		bit_id,
		mov_unidadeOrigem,
		mov_unidadeDestino,
		tpm_id,
		mov_dataCriacao,
		uni_id,
		mov_situacao
FROM
	MovimentacaoBem as MOV WITH (NoLock)
WHERE
		MOV.uni_id = @uni_id
		AND MOV.mov_data BETWEEN @dataInicial AND @dataFinal 
		and MOV.mov_situacao NOT IN (5,3) 
)
	SELECT 
		MovimentacaoBem.bem_id,
		MovimentacaoBem.bit_id,
		MovimentacaoBem.uni_id,
		TipoMovimentacao.tpm_nome as Tipo,
		BemPatrimonial.bem_descricao as Descricao,
		dbo.FN_GetUniNome(MovimentacaoBem.mov_unidadeOrigem) as UnidadeOrigem ,
		dbo.FN_GetUniNome(ISNULL(MovimentacaoBem.mov_unidadeDestino,MovimentacaoBem.mov_unidadeOrigem))as UnidadeDestino,
		MovimentacaoBem.mov_valor as Valor,
		MovimentacaoBem.mov_observacao as Observacao,
		MovimentacaoBem.per_mes as mes,
		MovimentacaoBem.per_ano as ano,
		MovimentacaoBem.mov_nl as situacao,
		MovimentacaoBem.mov_data as data, --adicionado 07/01/14 - pedido sp
		BemItem.bit_registroPat as etiqueta,
		dbo.FN_GetUniNome(MovimentacaoBem.uni_id) as uniGestora,
		MovimentacaoBem.mov_situacao
	FROM 
		MoviUnidade as MovimentacaoBem   WITH(NoLock)
	INNER JOIN BemPatrimonial WITH(NoLock)
		on BemPatrimonial.bem_id = MovimentacaoBem.bem_id
	INNER JOIN BemItem with(nolock)
		on MovimentacaoBem.bem_id = BemItem.bem_id 
		and MovimentacaoBem.bit_id=BemItem.bit_id
	INNER JOIN TipoMovimentacao WITH(NoLock)
		on MovimentacaoBem.tpm_id = TipoMovimentacao.tpm_id
	WHERE
		MovimentacaoBem.tpm_id in (select valor from dbo.FN_StringToArrayInt64(@stmp_id, ','))

	ORDER BY
		BemItem.bem_id
		, BemItem.bit_id 
		, MovimentacaoBem.mov_data
		, MovimentacaoBem.mov_dataCriacao 
	
	SELECT @@ROWCOUNT
	
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_MontaRelatorioMovimentacaoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[NEW_BemItem_MontaRelatorioMovimentacaoSP]
	 @stmp_id		varchar(max)
	,@dataInicial		date
	,@dataFinal		date
	,@uni_id		int
	,@mov_nl		varchar(11) =null
	,@mov_unidadeOrigem	int = 0
	,@mov_unidadeDestino	int = 0

AS
BEGIN

if(@mov_unidadeOrigem = 0 and @mov_unidadeDestino = 0)
begin
	WITH 


	MoviUnidade as(
	SELECT 
			mov_valor,
			mov_observacao,
			per_mes,
			per_ano,
			mov_nl,
			mov_data,
			bi.bem_id,
			bi.bit_id,
			mov_unidadeOrigem,
			mov_unidadeDestino,
			tpm_id,
			mov_dataCriacao,
			uni_id,
			mov_situacao
	FROM
		MovimentacaoBem as MOV WITH (NoLock)
		
		inner join bemitem		bi WITH(NOLOCK)
		on (mov.bem_id = bi.bem_id
		and mov.bit_id = bi.bit_id)
	WHERE
			1 = 1
			and MOV.uni_id = @uni_id
			AND MOV.mov_data BETWEEN @dataInicial AND @dataFinal 
			and MOV.mov_situacao NOT IN (5,3) 
			and (@mov_nl			is null	or MOV.mov_nl			= @mov_nl)
			and bi.bit_status not in (5)
			and mov_dataCriacao > convert(date,'2014-02-28') 

	)

		SELECT 
			MovimentacaoBem.bem_id,
			MovimentacaoBem.bit_id,
			MovimentacaoBem.uni_id,
			TipoMovimentacao.tpm_nome as Tipo,
			BemPatrimonial.bem_descricao as Descricao,
			dbo.FN_GetUniNome(MovimentacaoBem.mov_unidadeOrigem) as UnidadeOrigem ,
			dbo.FN_GetUniNome(ISNULL(MovimentacaoBem.mov_unidadeDestino,MovimentacaoBem.mov_unidadeOrigem))as UnidadeDestino,
			MovimentacaoBem.mov_valor as Valor,
			MovimentacaoBem.mov_observacao as Observacao,
			MovimentacaoBem.per_mes as mes,
			MovimentacaoBem.per_ano as ano,
			MovimentacaoBem.mov_nl as situacao,
			MovimentacaoBem.mov_data as data, --adicionado 07/01/14 - pedido sp
			BemItem.bit_registroPat as etiqueta,
			--dbo.FN_GetUniNome(MovimentacaoBem.uni_id) as uniGestora,
			(select uad_nome from dbo.FN_GetUnidadeGestoraImediata(ISNULL(MovimentacaoBem.mov_unidadeDestino,MovimentacaoBem.mov_unidadeOrigem))) as uniGestora,
			MovimentacaoBem.mov_situacao
		FROM 
			MoviUnidade as MovimentacaoBem   WITH(NoLock)
		INNER JOIN BemPatrimonial WITH(NoLock)
			on BemPatrimonial.bem_id = MovimentacaoBem.bem_id
		INNER JOIN BemItem with(nolock)
			on MovimentacaoBem.bem_id = BemItem.bem_id 
			and MovimentacaoBem.bit_id=BemItem.bit_id
		INNER JOIN TipoMovimentacao WITH(NoLock)
			on MovimentacaoBem.tpm_id = TipoMovimentacao.tpm_id
		WHERE
			MovimentacaoBem.tpm_id in (select valor from dbo.FN_StringToArrayInt64(@stmp_id, ','))

		ORDER BY
			BemItem.bem_id
			, BemItem.bit_id 
			, MovimentacaoBem.mov_data
			, MovimentacaoBem.mov_dataCriacao 
	
		SELECT @@ROWCOUNT
	
	end

else -- if(@mov_unidadeOrigem = 0 and @mov_unidadeDestino = 0)

	WITH 


	MoviUnidade as(
	SELECT 
			mov_valor,
			mov_observacao,
			per_mes,
			per_ano,
			mov_nl,
			mov_data,
			bem_id,
			bit_id,
			mov_unidadeOrigem,
			mov_unidadeDestino,
			tpm_id,
			mov_dataCriacao,
			uni_id,
			mov_situacao
	FROM
		MovimentacaoBem as MOV WITH (NoLock)
	WHERE
			1 = 1
			--and MOV.uni_id = @uni_id
			AND MOV.mov_data BETWEEN @dataInicial AND @dataFinal 
			and MOV.mov_situacao NOT IN (5,3) 
		
			-- Task #2019
			and (@mov_nl			is null	or MOV.mov_nl			= @mov_nl)
			and (@mov_unidadeOrigem		= 0	or MOV.mov_unidadeOrigem	= @mov_unidadeOrigem)
			--and (@mov_unidadeDestino	= 0	or MOV.mov_unidadeDestino	= @mov_unidadeDestino)
	)

		SELECT 
			MovimentacaoBem.bem_id,
			MovimentacaoBem.bit_id,
			MovimentacaoBem.uni_id,
			TipoMovimentacao.tpm_nome as Tipo,
			BemPatrimonial.bem_descricao as Descricao,
			dbo.FN_GetUniNome(MovimentacaoBem.mov_unidadeOrigem) as UnidadeOrigem ,
			dbo.FN_GetUniNome(ISNULL(MovimentacaoBem.mov_unidadeDestino,MovimentacaoBem.mov_unidadeOrigem))as UnidadeDestino,
			MovimentacaoBem.mov_valor as Valor,
			MovimentacaoBem.mov_observacao as Observacao,
			MovimentacaoBem.per_mes as mes,
			MovimentacaoBem.per_ano as ano,
			MovimentacaoBem.mov_nl as situacao,
			MovimentacaoBem.mov_data as data, --adicionado 07/01/14 - pedido sp
			BemItem.bit_registroPat as etiqueta,
			--dbo.FN_GetUniNome(MovimentacaoBem.uni_id) as uniGestora,
			(select uad_nome from dbo.FN_GetUnidadeGestoraImediata(ISNULL(MovimentacaoBem.mov_unidadeDestino,MovimentacaoBem.mov_unidadeOrigem))) as uniGestora,
			MovimentacaoBem.mov_situacao
		FROM 
			MoviUnidade as MovimentacaoBem   WITH(NoLock)
		INNER JOIN BemPatrimonial WITH(NoLock)
			on BemPatrimonial.bem_id = MovimentacaoBem.bem_id
		INNER JOIN BemItem with(nolock)
			on MovimentacaoBem.bem_id = BemItem.bem_id 
			and MovimentacaoBem.bit_id=BemItem.bit_id
		INNER JOIN TipoMovimentacao WITH(NoLock)
			on MovimentacaoBem.tpm_id = TipoMovimentacao.tpm_id
		inner join (select uni_id from FN_GetUnidadeEFilhasImediatas(@mov_unidadeDestino)) as unidadesFilhas
			on MovimentacaoBem.mov_unidadeDestino = unidadesFilhas.uni_id
		WHERE
			MovimentacaoBem.tpm_id in (select valor from dbo.FN_StringToArrayInt64(@stmp_id, ','))

		ORDER BY
			BemItem.bem_id
			, BemItem.bit_id 
			, MovimentacaoBem.mov_data
			, MovimentacaoBem.mov_dataCriacao 
	
		SELECT @@ROWCOUNT
	
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_MontaRelatorioTipoDocumentoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===========================================================================
-- Author:		Marcia Haga
-- Create date: 05/04/2013
-- Description:	Busca bens por tipo de documento
-- ===========================================================================
create PROCEDURE [dbo].[NEW_BemItem_MontaRelatorioTipoDocumentoRS]
	@uniges_id int,
	@uniguarda_id int,
	@tipo_doc int,
	@num_doc varchar(50),
	@serie_doc varchar(100),
	@data_inicial date,
	@data_final date,
	@nome_doc varchar(500)

AS
BEGIN
		
	SELECT 
		  bem.bem_id,
		  bi.bit_id,
		  bi.bit_uniGestora,
		  dbo.FN_GetUniNome(bi.bit_uniGestora) as uniGestora,		  
		  bi.bit_uniGuarda,
		  dbo.FN_GetUniNome(bi.bit_uniGuarda) as uniGuarda,
		  bi.bit_registroPat,
		  bem.bem_descricao,		
		  grp.grp_nome,
		  dbo.FN_GetFornecedorNome(bem.for_id) as FornecedorNome,
		  bi.bit_valorOrigem,
		  bem.bem_dataEntrada,
		  bi.bit_dataIncorporacao,
		  bi.dep_id,
		  dep.dep_nome,
		  bid.bid_id,
		  bid.bid_numeroDoc,
		  bid.bid_serie,
		  bid.bid_dataEmissaoDoc
		  		  
	FROM BemPatrimonial AS bem WITH(NoLock)
	     INNER JOIN BemItem AS bi with(nolock)
			ON bem.bem_id = bi.bem_id
		 INNER JOIN BemItemDocumento AS bid with(nolock)
			ON (bi.bem_id = bid.bem_id AND bi.bit_id = bid.bit_id)	
		 INNER JOIN dbo.Unidade AS uniGes with(nolock)
			ON uniGes.uni_id = bi.bit_uniGestora
		 INNER JOIN GrupoBens AS grp with(nolock)
			ON bem.grp_id = grp.grp_id		 
		 LEFT JOIN Localidade AS loc with(nolock)
			ON bi.loc_id = loc.loc_id
		 LEFT JOIN Dependencia as dep with(nolock)
			ON dep.loc_id = loc.loc_id
			and bi.dep_id = dep.dep_id
		 
	WHERE
		((@uniges_id = 0) OR (bi.bit_uniGestora = @uniges_id))
		AND ((@uniguarda_id = 0) OR (bi.bit_uniGuarda = @uniguarda_id))
		AND ((@tipo_doc = 0) OR (bid.bid_tipoDoc = @tipo_doc))
		AND ((@num_doc IS NULL) OR (bid.bid_numeroDoc = @num_doc))
		AND ((@serie_doc IS NULL) OR (bid.bid_serie = @serie_doc))
		AND (@data_inicial IS NULL OR CONVERT(DATE, bid.bid_dataEmissaoDoc,103) >= @data_inicial) 
		AND (@data_final IS NULL OR CONVERT(DATE, bid.bid_dataEmissaoDoc,103) <= @data_final)
		AND uniGes.uni_situacao <> 3
	
	ORDER BY uniGestora	
		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Select_BemDisponivel]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Pedro Gimenez
-- Create date: 09/01/2011
-- Description:	Busca o número total de bens que estão disponiveis 
--				em uma unidade de guarda 
-- ==================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_Select_BemDisponivel]
	--@uni_id 0 int
AS
BEGIN

		SELECT  
			COUNT(bi.bem_id) 
		FROM 
			BemItem bi WITH(NoLock)
		WHERE 
			bi.bit_situacao <> 3
			AND bi.bit_status = 2
			--AND (@uni_id IS NULL OR bi.bit_uniGuarda = @uni_id) --permitir unidade nula para buscar bens de todas as unidades
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Select_BemDisponivelSistema]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Christian Freitas
-- Create date: 12/12/2013
-- Description:	Retorna todos os bens disponiveis ou não do sistema do sistema
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItem_Select_BemDisponivelSistema]
	
	@bit_status int
	
AS
BEGIN
	
	
	SELECT
		 bm.bem_id
		, bi.bit_id 
		, bem_descricao 
		, bm.grp_id
		, gp.grp_nome 
		, bi.bit_uniGestora 
		, dbo.FN_GetUniNome(BI.bit_uniGestora) as uniGestora
		, bi.bit_uniGuarda 
		, dbo.FN_GetUniNome(BI.bit_uniGuarda) as uniGuarda
		, bi.bit_dataIncorporacao
		, bi.bit_registroPat
		, bi.bit_valorLiquido
		, bi.bit_observacao
		, dbo.FN_GetUniNome(BI.bit_uniGestora)
		, bm.bem_dataEntrada
		, sc.stc_decricao
		,bi.bit_dataAlteracaoStatus
		
	FROM	
		BemPatrimonial AS bm WITH(NoLock)
	inner JOIN 
		BemItem AS bi WITH(NoLock) 
		ON bm.bem_id = bi.bem_id 
	inner JOIN 
		Unidade as uGua WITH(NoLock)
		ON uGua.uni_id = bi.bit_uniGuarda 	
	inner JOIN
		GrupoBens AS gp WITH(NoLock)
		ON gp.grp_id = bm.grp_id  
	inner JOIN 
		StatusConservacao AS sc WITH(NoLock)
		ON sc.stc_id = bi.stc_id
	WHERE BI.bit_status = @bit_status and 
		  BI.bit_situacao <> 3
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Select_FaltaEtiqueta]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_Select_FaltaEtiqueta]
	@uni_id int
AS
BEGIN

		select  
			COUNT(bi.bem_id) 
		from 
			BemItem bi WITH(NoLock)
			INNER JOIN BemPatrimonial bp WITH(NOLOCK)
			on bi.bem_id = bp.bem_id
		where 
			bi.bit_situacao <> 3
			AND bi.bit_status not in (3,5)
			AND (bi.bit_uniGuarda = @uni_id OR bi.bit_uniGestora = @uni_id)
			AND (bi.bit_registroPat IS NULL OR bi.bit_registroPat ='')
			--AND (bp.bem_legado = 0)
		    AND	NOT EXISTS
				(
					SELECT 
						bem_id
						, bit_id
					FROM
						BemItemWorkflow biw	WITH(NoLock)			
					WHERE 
						bi.bem_id = biw.bem_id 
						AND bi.bit_id = biw.bit_id
						AND wrk_id = 1
						AND biw_situacao <> 3					
				)
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Select_FaltaIncorporar]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_Select_FaltaIncorporar]
	  @uni_id int
AS
BEGIN
	  DECLARE @TipoMov TABLE (tpm_id INT NOT NULL)
	  INSERT INTO @TipoMov (tpm_id)
	  SELECT tpm_id FROM TipoMovimentacao WITH(NOLOCK) WHERE tpm_operacao  in( 1,12)

DECLARE @TEMP_BI AS TABLE
(
	BEM_ID BIGINT,
	BIT_ID INT
)
INSERT INTO @TEMP_BI
SELECT BI.BEM_ID, BI.BIT_ID FROM BemItem bi WITH(NOLOCK)
	where 
			bi.bit_situacao <> 3
			AND bi.bit_status not in (3,5)
			and bi.bit_dataIncorporacao is null
			AND bi.bit_uniGestora = @UNI_ID
			AND NOT (bi.bit_registroPat IS NULL OR bi.bit_registroPat ='')

		select  
			COUNT(bi.bem_id) 
		from 
			@TEMP_BI bi
		INNER JOIN BemPatrimonial as Bp WITH(NOLOCK)   
			ON BP.bem_id = bi.bem_id
		where 
			--bi.bit_situacao <> 3
			--AND bi.bit_status not in (3,5)
			--and bi.bit_dataIncorporacao is null
			--AND bi.bit_uniGestora = @uni_id
			--AND NOT (bi.bit_registroPat IS NULL OR bi.bit_registroPat ='')
			(select count(mv.mov_data) from MovimentacaoBem mv WITH(NOLOCK)   
					where mv.bem_id = bi.bem_id  
						and mv.bit_id = bi.bit_id
						and mv.mov_situacao <> 3
						and tpm_id IN (SELECT tpm_id FROM @TipoMov)) = 0			

end


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Select_FaltaIncorporar_TUNING]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[NEW_BemItem_Select_FaltaIncorporar_TUNING]
	  @uni_id int
AS
BEGIN
	  DECLARE @TipoMov TABLE (tpm_id INT NOT NULL)
	  INSERT INTO @TipoMov (tpm_id)
	  SELECT tpm_id FROM TipoMovimentacao WITH(NOLOCK) WHERE tpm_operacao  in( 1,12)

DECLARE @TEMP_BI AS TABLE
(
	BEM_ID BIGINT,
	BIT_ID INT
)
INSERT INTO @TEMP_BI
SELECT BI.BEM_ID, BI.BIT_ID FROM BemItem bi WITH(NOLOCK)
	where 
			bi.bit_situacao <> 3
			AND bi.bit_status not in (3,5)
			and bi.bit_dataIncorporacao is null
			AND bi.bit_uniGestora = @UNI_ID
			AND NOT (bi.bit_registroPat IS NULL OR bi.bit_registroPat ='')

		select  
			COUNT(bi.bem_id) 
		from 
			@TEMP_BI bi
		INNER JOIN BemPatrimonial as Bp WITH(NOLOCK)   
			ON BP.bem_id = bi.bem_id
		where 
			--bi.bit_situacao <> 3
			--AND bi.bit_status not in (3,5)
			--and bi.bit_dataIncorporacao is null
			--AND bi.bit_uniGestora = @uni_id
			--AND NOT (bi.bit_registroPat IS NULL OR bi.bit_registroPat ='')
			(select count(mv.mov_data) from MovimentacaoBem mv WITH(NOLOCK)   
					where mv.bem_id = bi.bem_id  
						and mv.bit_id = bi.bit_id
						and mv.mov_situacao <> 3
						and tpm_id IN (SELECT tpm_id FROM @TipoMov)) = 0			

end



GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Select_FaltaIncorporarTudoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Fabio Akira
-- Create date: 06/12/2010
-- Description:	Busca o número total de bens que está em uma unidade
--				gestora e que não tem movimento de incorporação -> Usado no relatorio
-- ==================================================================
create PROCEDURE [dbo].[NEW_BemItem_Select_FaltaIncorporarTudoRS]
	  @uni_id int
AS
BEGIN

	  DECLARE @TipoMov TABLE (tpm_id INT NOT NULL)
	  INSERT INTO @TipoMov (tpm_id)
	  SELECT tpm_id FROM TipoMovimentacao WITH(NOLOCK) WHERE tpm_operacao = 1

		select  
			bp.bem_descricao,
			bi.bem_id,
			COUNT(bit_id),
			UniAdm.uad_nome as nomeGuarda
						
		from 
			BemItem bi WITH(NoLock) 
		inner join BemPatrimonial bp WITH(NoLock) 
			on bi.bem_id=bp.bem_id
		INNER JOIN 
			VW_UnidadeAdministrativa as UniAdm
			ON UniAdm.uni_id = bi.bit_uniGuarda
		where 
			bi.bit_situacao <> 3
			AND bi.bit_status <> 3
			AND bp.bem_legado = 0
			AND bi.bit_uniGestora = @uni_id
			AND NOT (bi.bit_registroPat IS NULL OR bi.bit_registroPat ='')
			AND (select count(mv.mov_data) from MovimentacaoBem mv  WITH(NOLOCK)
					where mv.bem_id = bi.bem_id  
						and mv.bit_id = bi.bit_id
						and tpm_id IN (SELECT tpm_id FROM @TipoMov)) = 0			
		group by 
			bp.bem_descricao
			, bi.bem_id
			, uad_nome
			
	
end

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Select_FaltaIncorporarTudoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_Select_FaltaIncorporarTudoSP]
	  @uni_id int
AS
BEGIN

	  DECLARE @TipoMov TABLE (tpm_id INT NOT NULL)
	  INSERT INTO @TipoMov (tpm_id)
	  SELECT tpm_id FROM TipoMovimentacao WITH(NOLOCK) WHERE tpm_operacao in( 1,12)

		select  
			bp.bem_descricao,
			bi.bem_id,
			COUNT(bit_id),
			UniAdm.uad_nome as nomeGuarda
						
		from 
			BemItem bi WITH(NoLock) 
		inner join BemPatrimonial bp WITH(NoLock) 
			on bi.bem_id=bp.bem_id
		INNER JOIN 
			VW_UnidadeAdministrativa as UniAdm WITH(NoLock)
			ON UniAdm.uni_id = bi.bit_uniGuarda
		where 
			bi.bit_situacao in(1,2)
			and bi.bit_dataIncorporacao is null
			AND bi.bit_status not in (3,5)
			--AND bp.bem_legado = 0
			AND bi.bit_uniGestora = @uni_id
			AND NOT (bi.bit_registroPat IS NULL OR bi.bit_registroPat ='')
			AND (select count(mv.mov_data) from MovimentacaoBem mv  WITH(NOLOCK)
					where mv.bem_id = bi.bem_id  
						and mv.bit_id = bi.bit_id
						and mv.mov_situacao in(1,4,5)
						and tpm_id IN (SELECT tpm_id FROM @TipoMov)) = 0			
		group by 
			bp.bem_descricao
			, bi.bem_id
			, uad_nome
			
	
end


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Select_TodosFaltaEtiquetaRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Fabio Akira Nazima
-- Create date: 06/12/2010
-- Description:	Busca o número total de bens que está em uma unidade
--				de guarda e que não tem etiqueta nem solicitação para
--				impressão

-- Alterado: Wellington Santana [21/02/2014]
-- Description:	adicionado biw_situacao <> 3.
-- ==================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_Select_TodosFaltaEtiquetaRS]
	@uni_id int
AS
BEGIN

		select  
			bem_descricao,
			bi.bem_id,
			COUNT (bit_id) total,
			UniAdm.uad_nome as nomeGuarda
		from 
			BemItem bi  WITH(NoLock)
		inner join BemPatrimonial WITH(NoLock)
				on bi.bem_id= BemPatrimonial.bem_id 
		INNER JOIN
			VW_UnidadeAdministrativa as UniAdm
			ON UniAdm.uni_id = bi.bit_uniGuarda
			
		where 
			bi.bit_situacao <> 3
			AND bi.bit_status <> 3
			AND (bi.bit_uniGuarda = @uni_id OR bi.bit_uniGestora = @uni_id)
			AND (bi.bit_registroPat IS NULL OR bi.bit_registroPat ='')
		    AND	NOT EXISTS
				(
					SELECT 
						bem_id
						, bit_id
					FROM
						BemItemWorkflow biw	WITH(NoLock)			
					WHERE 
						bi.bem_id = biw.bem_id 
						AND bi.bit_id = biw.bit_id
						AND wrk_id = 1
						AND biw_situacao <> 3
				)
		group by 
			bi.bem_id
			, bem_descricao
			, uad_nome
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Select_TodosFaltaEtiquetaSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_Select_TodosFaltaEtiquetaSP]
	@uni_id int
AS
BEGIN

		select  
			bem_descricao,
			bi.bem_id,
			COUNT (bit_id) total,
			UniAdm.uad_nome as nomeGuarda
		from 
			BemItem bi  WITH(NoLock)
		inner join BemPatrimonial WITH(NoLock)
				on bi.bem_id= BemPatrimonial.bem_id 
		INNER JOIN
			VW_UnidadeAdministrativa as UniAdm
			ON UniAdm.uni_id = bi.bit_uniGuarda
			
		where 
			bi.bit_situacao <> 3
			AND bi.bit_status not in (3,5)
			AND (bi.bit_uniGuarda = @uni_id OR bi.bit_uniGestora = @uni_id)
			AND (bi.bit_registroPat IS NULL OR bi.bit_registroPat ='')
			--AND BemPatrimonial.bem_legado = 0
		    AND	NOT EXISTS
				(
					SELECT 
						bem_id
						, bit_id
					FROM
						BemItemWorkflow biw	WITH(NoLock)			
					WHERE 
						bi.bem_id = biw.bem_id 
						AND bi.bit_id = biw.bit_id
						AND wrk_id = 1
						AND biw_situacao <> 3
				)
		group by 
			bi.bem_id
			, bem_descricao
			, uad_nome
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBemIDBy_RegistroPat]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBemIDBy_RegistroPat]
	@bit_registroPat VARCHAR(20)
AS
BEGIN
	SELECT
		bp.bem_id,
		bp.bem_tipo
	FROM 
		BemItem as bi WITH(NOLOCK)
		INNER JOIN BemPatrimonial as bp WITH(NOLOCK)
		ON bi.bem_id = bp.bem_id
	WHERE 
		bi.bit_situacao not in (3,5)
		AND bi.bit_registroPat = @bit_registroPat
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_BaixaAutomatica]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Jorge Freitas
-- Create date: 16/03/2011
-- Description:	Pesquisa dados dos bens (BEMITEM) que devem entrar no 
--				processo de baixa automatica de cedidos
-- ==================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_BaixaAutomatica]
	@dtIni DATETIME
	,@dtFim DATETIME 
	,@uni_id int 
AS
BEGIN
	Select 
		bi.bem_id
		, bi.bit_id
		, bi.bit_dataIncorporacao
		, bi.bit_uniGuarda
		, bi.bit_uniGestora
		, bi.bit_registroPat 
		, bi.bit_valorLiquido 
		, bp.bem_legado 
		, bp.grp_id 	 
	from 
		BemItem AS bi WITH(NoLock)
	INNER JOIN 
		BemPatrimonial AS bp WITH(NoLock)
			ON bp.bem_id = bi.bem_id 
			and bp.bem_legado = 0
	INNER JOIN 
		MovimentacaoBem AS mb WITH(NoLock)
			ON mb.bem_id = bi.bem_id  and mb.bit_id = bi.bit_id
			and mb.mov_situacao  <> 3
	INNER JOIN 
		TipoMovimentacao tm   
			ON tm.tpm_id = mb.tpm_id 
			AND tm.tpm_operacao = 7
	WHERE  
		bi.bit_situacao = 1
		and bi.bit_uniGuarda = @uni_id 
		and (bi.bit_dataIncorporacao < @dtFim and bi.bit_dataIncorporacao is not null)
		and (bi.bit_dataBaixa is null or bi.bit_dataBaixa >= @dtFim ) 
		and (bi.bit_registroPat is not null)		
		and bi.bit_status <> 3
	ORDER BY bem_id , bit_id
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_BaixaInservivelAutomatica]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_BaixaInservivelAutomatica]          
     
@DTINI DATETIME = NULL,        
@DTFIM DATETIME =  NULL,        
@IDS DBO.INTEGERTABLETYPE READONLY      
AS        
 BEGIN  
  SELECT   
  MB.MAR_GUID,      
  MB.UNI_ID        
  FROM    BEMITEM AS BI WITH(NOLOCK)          
  INNER JOIN BEMPATRIMONIAL   AS BP WITH(NOLOCK)          
   ON  BP.BEM_ID = BI.BEM_ID      
  INNER JOIN MAPAARROLAMENTO  AS MB WITH(NOLOCK)         
   ON  MB.BEM_ID = BI.BEM_ID         
   AND MB.BIT_ID = BI.BIT_ID       
  WHERE             
   BI.BIT_SITUACAO = 1         
    AND BI.BIT_UNIGUARDA  IN(SELECT ID FROM @IDS)   
    AND (BI.BIT_DATABAIXA IS NULL )               
    AND  BI.STC_ID = 3        
    AND MB.MAR_GUID IS NOT NULL         
    GROUP BY  MB.MAR_GUID,      
     MB.UNI_ID        
    ORDER BY        
    MB.MAR_GUID,      
    MB.UNI_ID       
  END 

  --select * from MAPAARROLAMENTO where uni_id = 5387 and bem_id =877278 and bit_id = 1993848

  --select * from bemItem where bit_registroPat = '2015.266.0006098'

  --select * from [dbo].[StatusConservacao] 
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_BaixaInservivelAutomaticaUnico]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext NEW_BemItem_SelectBy_BaixaInservivelAutomaticaUnico  
   
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_BaixaInservivelAutomaticaUnico]   
@UNI_ID INT ,   
@MAR_GUID VARCHAR(50)  
AS    
 BEGIN  
  SELECT        
  BI.BEM_ID,     
  BI.BIT_ID,     
  BI.BIT_DATAINCORPORACAO,     
  BI.BIT_UNIGUARDA,     
  BI.BIT_UNIGESTORA,     
  BI.BIT_REGISTROPAT,     
  BI.BIT_VALORLIQUIDO,     
  BP.BEM_LEGADO,     
  BP.GRP_ID ,  
  MB.MAR_GUID,    
  MB.UNI_ID          
  FROM    BEMITEM AS BI WITH(NOLOCK)      
  INNER JOIN BEMPATRIMONIAL   AS BP WITH(NOLOCK)      
   ON  BP.BEM_ID = BI.BEM_ID  
  INNER JOIN MAPAARROLAMENTO  AS MB WITH(NOLOCK)     
   ON  MB.BEM_ID = BI.BEM_ID     
   AND MB.BIT_ID = BI.BIT_ID     
     
  WHERE         
   BI.BIT_SITUACAO = 1     
    AND  BI.BIT_UNIGUARDA = @UNI_ID     
    AND (BI.BIT_DATABAIXA IS NULL )         
    AND  BI.STC_ID = 3    
    AND MB.MAR_GUID = @MAR_GUID    
   ORDER BY    
    BEM_ID, BIT_ID    
     
  END     
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================  
-- Author:  Aline Dornelas  
-- Create date: 25/08/2010 13:41:17  
-- Description: Retorna todos os bens itens que não foram excluídos   
--    logicamente, filtrados pelo código do bem patrimonial  
-- ===================================================================================  
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_bem_id]  
 @bem_id BIGINT  
 , @uni_id INT  
 , @bit_uniGestora INT  
 , @bit_status TINYINT  
 , @bit_registroPat VARCHAR(20)  
--WITH RECOMPILE  
AS  
BEGIN  
    
 SELECT  
  bem_id  
  , bit_id  
  , LOC.loc_id  
  , loc_nome  
  , DEP.dep_id  
  , dep_nome  
  , STC.stc_id  
  , stc_nome  
  , bit_registroPat  
  , bit_registroPatAnterior  
  , bit_referencia  
  , CONVERT(VARCHAR,bit_dataIncorporacao,103) AS bit_dataIncorporacao  
  , APS.aps_id   
  , aps_apolice  
  , CASE bit_status   
   WHEN 1 THEN 'Utilizado'  
   WHEN 2 THEN 'Disponível'  
   WHEN 3 THEN 'Inativo'  
   WHEN 4 THEN 'Remessa'     
  END AS bit_status  
  , CASE bit_situacao  
   WHEN 1 THEN 'Ativo'  
   WHEN 2 THEN 'Bloqueado'  
  END AS bit_situacao  
  , bit_uniGestora  
  , dbo.FN_GetUniNome(bit_uniGestora) AS bit_uniGestora_nome  
  , bit_uniGuarda  
  , dbo.FN_GetUniNome(bit_uniGuarda) AS bit_uniGuarda_nome  
 FROM  
  BemItem AS BET WITH (NOLOCK)  
  INNER JOIN StatusConservacao AS STC WITH (NOLOCK)  
   ON BET.stc_id = STC.stc_id  
  INNER JOIN Localidade AS LOC WITH (NOLOCK)  
   ON BET.loc_id = LOC.loc_id  
  LEFT JOIN Dependencia AS DEP WITH (NOLOCK)  
   ON BET.dep_id = DEP.dep_id AND LOC.loc_id = DEP.loc_id  
  LEFT JOIN ApoliceSeguro AS APS WITH (NOLOCK)  
   ON BET.aps_id = APS.aps_id  
 WHERE  
  bit_situacao <> 3  
  AND  bem_id = @bem_id  
  AND ((@bit_registroPat IS NULL) OR (bit_registroPat = @bit_registroPat))  
  AND ((@bit_status IS NULL) OR (bit_status = @bit_status))  
  AND ((@bit_uniGestora IS NULL) OR (bit_uniGestora = @bit_uniGestora))  
  AND ((@uni_id IS NULL) OR (bit_uniGuarda  IN(SELECT uni_id FROM dbo.FN_GetUnidadesHierarquiaImediata(@uni_id))))  
 SELECT @@ROWCOUNT   
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_bem_id_bit_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_bem_id_bit_id]
	@bem_id BIGINT
	, @bit_id INT
AS
BEGIN
	SELECT	Top 1
		 bem_id  
		, bit_id 
		, stc_id
		, fat_id 
		, bit_referencia 
		, bit_uniGestora
		, dbo.FN_GetUniNome(bit_uniGestora) AS bit_uniGestora_nome
		, bit_uniGuarda
		, dbo.FN_GetUniNome(bit_uniGuarda) AS bit_uniGuarda_nome
		, bit_registroPat 
		, bit_registroPatAnterior
		, bit_GPB
		, bit_GRB 
		, bit_valorOrigem 
		, bit_valorLiquido 
		, bit_vidaUtil 
		, bit_cotas 
		, bit_dataDepInicio 
		, bit_dataDepFim 
		, bit_doctoBaixa 
		, bit_dataBaixa 
		, bit_dataIncorporacao 
		, bit_contado 
		, bit_dataInventario 
		, bit_status 
		, bit_observacao 
		, bit_situacao 
		, bit_dataCriacao 
		, bit_dataAlteracao
		, LOC.loc_id 
		, loc_nome
		, DEP.dep_id
		, dep_nome 
		, APS.aps_id 
		, aps_apolice
		, SEG.seg_id 
		, ent_razaoSocial AS seg_seguradora_nome
		, BET.bit_dataFimGarantia
		, BET.bit_nroSerie
		, BET.bit_marca
		, BET.bit_modelo
		, BET.bit_tipo
		, BET.bit_placa
		, BET.bit_chassi
		, BET.bit_anoFabricacao
		, BET.bit_quilometragem
		, BET.bit_potencia
		, BET.bit_unidadePotencia
		, BET.bit_cilindros
		, bit_composicao
		, bit_peso
	FROM 
		BemItem AS BET WITH (NOLOCK)
	INNER JOIN Localidade AS LOC WITH (NOLOCK)
		ON BET.loc_id = LOC.loc_id
	LEFT JOIN ApoliceSeguro AS APS WITH (NOLOCK)
		ON BET.aps_id = APS.aps_id
	LEFT JOIN Seguradora AS SEG WITH (NOLOCK)
		ON APS.seg_id = SEG.seg_id
	LEFT JOIN VW_SeguradoraEntidade as ENT WITH (NOLOCK)
		ON SEG.ent_id = ENT.ent_id
	LEFT JOIN Dependencia AS DEP WITH (NOLOCK)
		ON BET.dep_id = DEP.dep_id 
		AND BET.loc_id = DEP.loc_id
	WHERE 
		bit_situacao <> 3
		AND bem_id = @bem_id
		AND ((bit_id = @bit_id)OR(@bit_id IS NULL))
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_bem_id_bit_uniGuarda]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		JORGE FREITAS
-- Create date: 19/11/2010
-- Description: 
-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_bem_id_bit_uniGuarda]
	@bem_id BIGINT
	, @bit_uniGuarda INT
	
AS
BEGIN
	SELECT
		bem_id
		, bit_id
		, bit_uniGuarda
	FROM
		BemItem AS BET WITH (NOLOCK)
	WHERE
		bit_situacao <> 3
		AND (@bem_id IS NULL OR  bem_id = @bem_id)
		AND (@bit_uniGuarda IS NULL OR bit_uniGuarda = @bit_uniGuarda)
		
	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_bit_RegistroPat]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_bit_RegistroPat]  (
--declare
 @bit_registroPat varchar(20)-- =  '2017.101.0000005' 
 , @bem_id BIGINT =null--165207-- null  
 , @bit_id int -- = null
 ,@cod_status int --= 3
 ,@Ids dbo.IntegerTableType READONLY
 )
WITH RECOMPILE  
AS  
BEGIN  
 SELECT  top 1 bem.*,
   bem.bem_id  bem_id   
  , bit_id   
  , fat_id   
  , bit_uniGestora   
  , bit_uniGuarda   
  , bit_registroPat   
  , bit_GPB   
  , bit_valorOrigem   
  , bit_valorLiquido   
  , bit_vidaUtil   
  , bit_dataIncorporacao   
  , bit_dataBaixa   
  , bit_cotas  
  , bpa.grp_id grp_id   
  , bpa.bem_tipo bem_tipo  
  , bit_status  
  ,stc_id 
  FROM  
   BemItem bem WITH(NoLock)  
  INNER JOIN   
   BemPatrimonial bpa  WITH(NoLock) on   
   [bpa].bem_id = [bem].bem_id   
 WHERE   
  (bit_registroPat = @bit_registroPat or @bit_registroPat is null)  
  and (bem.bem_id = @bem_id or @bem_id is null)  
  and (bem.bit_id = @bit_id or @bit_id is null)  
  and (bem.stc_id = @cod_status or @cod_status is null)  
  and (bem.bit_id in (select * from @Ids) or (select count(1) from @Ids) = 0 )

END  
  

--  CREATE TYPE IntegerTableType AS TABLE
--(Id INT)
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_bit_RegistroPat_OLD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================  
-- Author:  Jorge Freitas  
-- Create date: 25/08/2010  
-- Description: Pesquisa dados do bem (item e patrimonial)  
--              necessarios para gravar tabela de movimentacao  
--              Filtro: Registro Patrimonial do bem (bit_registroPat)    
-- ==================================================================  
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_bit_RegistroPat_OLD]  
 @bit_registroPat varchar(20)  
 , @bem_id BIGINT  
 , @bit_id int  
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT Top 1  
   bem.bem_id  bem_id   
  , bit_id   
  , fat_id   
  , bit_uniGestora   
  , bit_uniGuarda   
  , bit_registroPat   
  , bit_GPB   
  , bit_valorOrigem   
  , bit_valorLiquido   
  , bit_vidaUtil   
  , bit_dataIncorporacao   
  , bit_dataBaixa   
  , bit_cotas  
  , bpa.grp_id grp_id   
  , bpa.bem_tipo bem_tipo  
  , bit_status   
  FROM  
   BemItem bem WITH(NoLock)  
  INNER JOIN   
   BemPatrimonial bpa  WITH(NoLock) on   
   [bpa].bem_id = [bem].bem_id   
 WHERE   
  (bit_registroPat = @bit_registroPat or @bit_registroPat is null)  
  and (bem.bem_id = @bem_id or @bem_id is null)  
  and (bem.bit_id = @bit_id or @bit_id is null)

 end
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_bit_RegistroPat_TUNING]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_bit_RegistroPat_TUNING]  
  @bit_registroPat varchar(20)  
 , @bem_id BIGINT  
 , @bit_id int  
--WITH RECOMPILE  
 AS
 BEGIN
 SELECT Top 1  
   bem.bem_id  bem_id   
  , bit_id   
  , fat_id   
  , bit_uniGestora   
  , bit_uniGuarda   
  , bit_registroPat   
  , bit_GPB   
  , bit_valorOrigem   
  , bit_valorLiquido   
  , bit_vidaUtil   
  , bit_dataIncorporacao   
  , bit_dataBaixa   
  , bit_cotas  
  , bpa.grp_id grp_id   
  , bpa.bem_tipo bem_tipo  
  , bit_status   
  FROM  
   BemItem bem WITH(NoLock)  
  INNER JOIN   
   BemPatrimonial bpa  WITH(NoLock) on   
   [bpa].bem_id = [bem].bem_id   
 WHERE   
  (bit_registroPat = @bit_registroPat)
  and (bem.bem_id = @bem_id )
  and (bem.bit_id = @bit_id )

UNION

 SELECT Top 1  
   bem.bem_id  bem_id   
  , bit_id   
  , fat_id   
  , bit_uniGestora   
  , bit_uniGuarda   
  , bit_registroPat   
  , bit_GPB   
  , bit_valorOrigem   
  , bit_valorLiquido   
  , bit_vidaUtil   
  , bit_dataIncorporacao   
  , bit_dataBaixa   
  , bit_cotas  
  , bpa.grp_id grp_id   
  , bpa.bem_tipo bem_tipo  
  , bit_status   
  FROM  
   BemItem bem WITH(NoLock)  
  INNER JOIN   
   BemPatrimonial bpa  WITH(NoLock) on   
   [bpa].bem_id = [bem].bem_id   
 WHERE   
   (@bit_registroPat is null)
   and (@bem_id is null)  
  and (@bit_id is null)
  END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_CessaoAutomatica]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Jorge Freitas
-- Create date: 20/01/2011
-- Description:	Pesquisa dados dos bens (BEMITEM) que devem entrar no 
--				processo de cessão automatica
-- Alteração: Luana Piva
-- Data: 28/03/2014
-- descrição: considerar movimentações manuais e automáticas.
-- ==================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_CessaoAutomatica]
	@dtIni DATETIME
	,@dtFim DATETIME 
	,@uni_id int 
AS
BEGIN

	select 
		bi.bem_id
		, bi.bit_id
		, bi.bit_dataIncorporacao
		, bi.bit_uniGuarda
		, bi.bit_uniGestora
		, bi.bit_registroPat 
		, bi.bit_valorLiquido 
		, bp.bem_legado 
		, bp.grp_id 	 
	from BemItem bi WITH(NoLock)
	INNER JOIN
		 BemPatrimonial bp WITH(NoLock)
		ON bp.bem_id = bi.bem_id 
		and bp.bem_legado = 0
	where 
		bi.bit_situacao = 1
		and bi.bit_uniGuarda = @uni_id 
		and (bi.bit_dataIncorporacao < @dtFim and bi.bit_dataIncorporacao is not null)
		and (bi.bit_dataBaixa is null or bi.bit_dataBaixa >= @dtFim ) 
		and (bi.bit_registroPat is not null)		
		and Not Exists (select 
							mb.mov_data  
						from MovimentacaoBem as mb 
						inner join 
							TipoMovimentacao tm
							on tm.tpm_id = mb.tpm_id 
							and tm.tpm_operacao = 7
						where 
							mb.bem_id = bi.bem_id  and mb.bit_id = bi.bit_id
							and (mb.mov_data >= @dtIni and mb.mov_data < @dtFim)
							and mb.mov_situacao  <> 3)
							--and mb.mov_origem = 1) 
		
		order by bem_id , bit_id
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_CompleteRegPat]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_CompleteRegPat]
@bit_registroPat varchar(20),
@uniGuarda int

AS 

   BEGIN


 

      SELECT bi.bit_registroPat , 

         bp.bem_descricao 

      FROM BemItem bi 

      WITH 

         (

            nolock

         ) 

      INNER JOIN BemPatrimonial bp 

      WITH 

         (

            nolock

         ) 

      ON bi.bem_id = bp.bem_id 

      WHERE bi.bit_registroPat LIKE '%' + @bit_registroPat + '%'

     AND bi.bit_uniGuarda = @uniGuarda 

     AND bi.bit_situacao in ( 1 ,2,4,5)

      ORDER BY bi.bit_registroPat, 

         bi.bem_id, 

         bi.bit_id

     END 



	-- exec [dbo].[NEW_BemItem_SelectBy_CompleteRegPat_DATAEX_TESTE] '2011.305.0000007',52
	-- exec [dbo].[NEW_BemItem_SelectBy_CompleteRegPat]  '2011.305.0000007',52
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_DepreciacaoAutomatica]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Jorge Freitas
-- Create date: 19/09/2010
-- Description:	Pesquisa dados dos bens (BEMITEM) que devem entrar no 
--				processo de depreciacao automatica

-- Alteração: Luana Piva
-- Data: 28/03/2014
-- descrição: considerar movimentações manuais e automáticas.
-- ==================================================================

CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_DepreciacaoAutomatica]
	@dtIni date
	,@dtFim date 
	,@uni_id int 
AS
BEGIN
	select	
		bi.bem_id
		, bi.bit_id
		, bi.bit_uniGuarda
		, bi.bit_uniGestora
		, bi.bit_registroPat
		, bi.bit_valorLiquido 
		, bp.grp_id
		, bi.fat_id 
		, fd.fat_coeficiente 	
	from 
		BemItem as bi WITH(NoLock)	
	INNER JOIN BemPatrimonial as bp WITH(NoLock)
		ON bp.bem_id = bi.bem_id		
	INNER JOIN FatorDepreciacao as fd	
		ON fd.fat_id = bi.fat_id 
		and fd.fat_situacao = 1
	where 
		bi.bit_situacao = 1
		and bi.bit_uniGuarda = @uni_id 
		and (bi.bit_dataDepInicio  < @dtFim) 
		and (bi.bit_dataDepFim >= @dtIni) 
		and bi.bit_cotas > 0
		and (bi.bit_dataIncorporacao < @dtFim and bi.bit_dataIncorporacao is not null)
		and (bi.bit_dataBaixa is null or bi.bit_dataBaixa >= @dtFim ) 
		and bi.bit_registroPat is not null
		and NOT EXISTS(select 
							mb.mov_data  
						from MovimentacaoBem as mb 
						inner join TipoMovimentacao tm
							on tm.tpm_id = mb.tpm_id 
							and tm.tpm_operacao = 4 
						where 
							mb.bem_id = bi.bem_id  
							and mb.bit_id = bi.bit_id
							and (mb.mov_data >= @dtIni and mb.mov_data < @dtFim)
							and mb.mov_situacao  <> 3)
							--and mb.mov_origem = 1) 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_Hierarquia]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================  
-- Author:  Jorge Freitas  
-- Create date: 14/09/2010  
-- Description: Pesquisa dados dos bens (BEMITEM) pertencentes às   
--              unidades de guarda da hierarquia do usuario     
-- ==================================================================  
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_Hierarquia]  
  @bem_id int  
  , @uni_id int  
  , @bit_registroPat varchar(20)  
--WITH RECOMPILE  
AS  
BEGIN  
 select   
  [bem_id]  
      ,[bit_id]  
      ,[stc_id]  
      ,[loc_id]  
      ,[dep_id]  
      ,[aps_id]  
      ,[fat_id]  
      ,[bit_referencia]  
      ,[bit_uniGestora]  
      ,[bit_uniGuarda]  
      ,[bit_registroPat]  
      ,[bit_GPB]  
      ,[bit_GRB]  
      ,[bit_valorOrigem]  
      ,[bit_valorLiquido]  
      ,[bit_vidaUtil]  
      ,[bit_cotas]  
      ,[bit_dataDepInicio]  
      ,[bit_dataDepFim]  
      ,[bit_doctoBaixa]  
      ,[bit_dataBaixa]  
      ,[bit_dataIncorporacao]  
      ,[bit_contado]  
      ,[bit_dataInventario]  
      ,[bit_status]  
      ,[bit_observacao]  
      ,[bit_dataFimGarantia]  
      ,[bit_situacao]  
      ,[bit_dataCriacao]  
      ,[bit_dataAlteracao]   
 from   
  BemItem bi WITH(NoLock)  
 inner join   
  dbo.FN_GetUnidadeEFilhasImediatas(@uni_id) u  
  on u.uni_id = bi.bit_uniGuarda   
 where   
  (@bem_id is null or bi.bem_id = @bem_id )   
  and (@bit_registroPat is null or bi.bit_registroPat like  @bit_registroPat + '%')  
 order by   
   bi.bit_registroPat   
   , bi.bem_id, bi.bit_id     
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_Incorporacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_Incorporacao]
	 @incorporacao int
	 , @bem_id int
	 , @uni_id int
	 , @bit_registroPat varchar(20)
	 , @bit_gpb varchar (20)
AS
BEGIN
	-- Sem incorporação e sem bit_registroPat
	IF @incorporacao = 0
	BEGIN
		SELECT
			 [bem_id]
			,[bit_id]
			,[stc_id]
			,[loc_id]
			,[dep_id]
			,[aps_id]
			,[fat_id]
			,[bit_referencia]
			,[bit_uniGestora]
			,[bit_uniGuarda]
			,[bit_registroPat]
			,[bit_GPB]
			,[bit_GRB]
			,[bit_valorOrigem]
			,[bit_valorLiquido]
			,[bit_vidaUtil]
			,[bit_cotas]
			,[bit_dataDepInicio]
			,[bit_dataDepFim]
			,[bit_doctoBaixa]
			,[bit_dataBaixa]
			,[bit_dataIncorporacao]
			,[bit_contado]
			,[bit_dataInventario]
			,[bit_status]
			,[bit_observacao]
			,[bit_dataFimGarantia]
			,[bit_situacao]
			,[bit_dataCriacao]
			,[bit_dataAlteracao]
		FROM 
			BemItem bi WITH(NoLock)		
		WHERE 
			(@bem_id IS NULL OR bi.bem_id = @bem_id ) 
			AND (bi.bit_uniGuarda = @uni_id) 
			AND (bi.bit_registroPat IS NULL OR bi.bit_registroPat = '') -- Sem registro patrimonial
			AND (bi.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (bi.bit_situacao <> 3)
			AND (bi.bit_status <> 3 AND bi.bit_status <> 4)
		ORDER BY bi.bit_registroPat, bi.bem_id, bi.bit_id 
		
		SELECT @@ROWCOUNT
	END
	
	-- Sem incorporação e sem bit_registroPat, mas com recebimento
	IF @incorporacao = 5
	BEGIN
		SELECT
			 [bem_id]
			,[bit_id]
			,[stc_id]
			,[loc_id]
			,[dep_id]
			,[aps_id]
			,[fat_id]
			,[bit_referencia]
			,[bit_uniGestora]
			,[bit_uniGuarda]
			,[bit_registroPat]
			,[bit_GPB]
			,[bit_GRB]
			,[bit_valorOrigem]
			,[bit_valorLiquido]
			,[bit_vidaUtil]
			,[bit_cotas]
			,[bit_dataDepInicio]
			,[bit_dataDepFim]
			,[bit_doctoBaixa]
			,[bit_dataBaixa]
			,[bit_dataIncorporacao]
			,[bit_contado]
			,[bit_dataInventario]
			,[bit_status]
			,[bit_observacao]
			,[bit_dataFimGarantia]
			,[bit_situacao]
			,[bit_dataCriacao]
			,[bit_dataAlteracao]
		FROM 
			BemItem BI WITH(NoLock)		
		WHERE 
			(@bem_id IS NULL OR bi.bem_id = @bem_id ) 
			AND (bi.bit_uniGuarda = @uni_id) 
			AND (bi.bit_registroPat IS NULL OR bi.bit_registroPat = '') -- Sem registro patrimonial
			AND (bi.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (bi.bit_situacao <> 3)
			AND (bi.bit_status <> 3 AND bi.bit_status <> 4)
			AND (SELECT COUNT(MOV.mov_data) FROM MovimentacaoBem AS MOV 
					WHERE MOV.bem_id = BI.bem_id AND
					MOV.bit_id = BI.bit_id AND 
					MOV.tpm_id = (SELECT par_valor FROM SYS_Parametros WHERE par_chave = 'MOVIMENTO_RECEBIMENTO')
					GROUP BY MOV.bem_id, MOV.bit_id, MOV.tpm_id ) > 0							
		ORDER BY 
			bi.bit_registroPat
			, bi.bem_id
			, bi.bit_id 
		
		SELECT @@ROWCOUNT
	END
	
	-- Sem incorporação e com bit_registroPat
	IF @incorporacao = 1
	BEGIN
		SELECT
			 [bem_id]
			,[bit_id]
			,[stc_id]
			,[loc_id]
			,[dep_id]
			,[aps_id]
			,[fat_id]
			,[bit_referencia]
			,[bit_uniGestora]
			,[bit_uniGuarda]
			,[bit_registroPat]
			,[bit_GPB]
			,[bit_GRB]
			,[bit_valorOrigem]
			,[bit_valorLiquido]
			,[bit_vidaUtil]
			,[bit_cotas]
			,[bit_dataDepInicio]
			,[bit_dataDepFim]
			,[bit_doctoBaixa]
			,[bit_dataBaixa]
			,[bit_dataIncorporacao]
			,[bit_contado]
			,[bit_dataInventario]
			,[bit_status]
			,[bit_observacao]
			,[bit_dataFimGarantia]
			,[bit_situacao]
			,[bit_dataCriacao]
			,[bit_dataAlteracao]
		FROM 
			BemItem bi WITH(NoLock)		
		WHERE 
			(@bem_id IS NULL OR bi.bem_id = @bem_id)
			AND bit_dataIncorporacao is null
			AND (bi.bit_uniGuarda = @uni_id)
			AND (bi.bit_registroPat IS NOT NULL OR bi.bit_registroPat >= @bit_registroPat) -- Com registro patrimonial
			AND (bi.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (bi.bit_situacao <> 3)
			AND NOT EXISTS (SELECT 
							mv.mov_data 
							FROM 
								MovimentacaoBem mv
							INNER JOIN TipoMovimentacao TP 
								ON mv.tpm_id = TP.tpm_id
								AND TP.tpm_operacao = 1 								
							WHERE mv.bem_id = bi.bem_id 
								AND MV.bit_id = bi.bit_id 
								AND mv.mov_situacao <> 3)
			AND (bi.bit_status <> 3 AND bi.bit_status <> 4)							
		ORDER BY bi.bit_registroPat, bi.bem_id, bi.bit_id 
		
		SELECT @@ROWCOUNT
	END
	
	-- Sem incorporação, com bit_registroPat e legado
	IF @incorporacao = 12
	BEGIN
		SELECT
			 [bem_id]
			,[bit_id]
			,[stc_id]
			,[loc_id]
			,[dep_id]
			,[aps_id]
			,[fat_id]
			,[bit_referencia]
			,[bit_uniGestora]
			,[bit_uniGuarda]
			,[bit_registroPat]
			,[bit_GPB]
			,[bit_GRB]
			,[bit_valorOrigem]
			,[bit_valorLiquido]
			,[bit_vidaUtil]
			,[bit_cotas]
			,[bit_dataDepInicio]
			,[bit_dataDepFim]
			,[bit_doctoBaixa]
			,[bit_dataBaixa]
			,[bit_dataIncorporacao]
			,[bit_contado]
			,[bit_dataInventario]
			,[bit_status]
			,[bit_observacao]
			,[bit_dataFimGarantia]
			,[bit_situacao]
			,[bit_dataCriacao]
			,[bit_dataAlteracao]
		FROM 
			BemItem bi WITH(NoLock)		
		WHERE 
			(@bem_id IS NULL OR bi.bem_id = @bem_id)
			AND bit_dataIncorporacao is null
			AND (bi.bit_uniGuarda = @uni_id)
			AND (bi.bit_registroPat IS NOT NULL OR bi.bit_registroPat >= @bit_registroPat) -- Com registro patrimonial
			AND (bi.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (bi.bit_situacao <> 3)
			AND NOT EXISTS (SELECT 
							mv.mov_data 
							FROM 
								MovimentacaoBem mv
							INNER JOIN TipoMovimentacao TP 
								ON mv.tpm_id = TP.tpm_id AND TP.tpm_operacao = 12 								
							WHERE mv.bem_id = bi.bem_id 
								AND MV.bit_id = bi.bit_id 
								AND mv.mov_situacao <> 3)
			AND (bi.bit_status <> 3 AND bi.bit_status <> 4)							
		ORDER BY bi.bit_registroPat, bi.bem_id, bi.bit_id 
		
		SELECT @@ROWCOUNT
	END
	
	-- Somente bens incorporados
	IF @incorporacao = 2
	BEGIN
		SELECT
			 [bem_id]
			,[bit_id]
			,[stc_id]
			,[loc_id]
			,[dep_id]
			,[aps_id]
			,[fat_id]
			,[bit_referencia]
			,[bit_uniGestora]
			,[bit_uniGuarda]
			,[bit_registroPat]
			,[bit_GPB]
			,[bit_GRB]
			,[bit_valorOrigem]
			,[bit_valorLiquido]
			,[bit_vidaUtil]
			,[bit_cotas]
			,[bit_dataDepInicio]
			,[bit_dataDepFim]
			,[bit_doctoBaixa]
			,[bit_dataBaixa]
			,[bit_dataIncorporacao]
			,[bit_contado]
			,[bit_dataInventario]
			,[bit_status]
			,[bit_observacao]
			,[bit_dataFimGarantia]
			,[bit_situacao]
			,[bit_dataCriacao]
			,[bit_dataAlteracao] 
		FROM 
			BemItem bi WITH(NoLock)
		WHERE 
			(@bem_id IS NULL OR bi.bem_id = @bem_id)
			AND (bi.bit_uniGuarda = @uni_id)
			AND (bi.bit_registroPat IS NOT NULL OR bi.bit_registroPat >= @bit_registroPat) -- Com registro patrimonial
			AND (bi.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND NOT EXISTS (SELECT 
								mv.mov_data 
							FROM 
								MovimentacaoBem mv
							WHERE mv.bem_id = bi.bem_id
								AND mv.bit_id = bi.bit_id
								AND mv.mov_situacao = 5)		
			AND EXISTS (SELECT 
							mv.mov_data 
							FROM 
								MovimentacaoBem mv
							INNER JOIN TipoMovimentacao TP 
								ON mv.tpm_id = TP.tpm_id
								AND TP.tpm_operacao in (1,12)							
							WHERE mv.bem_id = bi.bem_id 
								AND MV.bit_id = bi.bit_id 
								AND mv.mov_situacao <> 3)	
			AND (bi.bit_situacao <> 3)
			AND (bi.bit_status <> 3 AND bi.bit_status <> 4)	
		ORDER BY bi.bit_registroPat, bi.bem_id, bi.bit_id 
		
		SELECT @@ROWCOUNT
	end	
	
	-- Todos os itens
	IF @incorporacao = 3
	BEGIN
		SELECT
			 [bem_id]
			,[bit_id]
			,[stc_id]
			,[loc_id]
			,[dep_id]
			,[aps_id]
			,[fat_id]
			,[bit_referencia]
			,[bit_uniGestora]
			,[bit_uniGuarda]
			,[bit_registroPat]
			,[bit_GPB]
			,[bit_GRB]
			,[bit_valorOrigem]
			,[bit_valorLiquido]
			,[bit_vidaUtil]
			,[bit_cotas]
			,[bit_dataDepInicio]
			,[bit_dataDepFim]
			,[bit_doctoBaixa]
			,[bit_dataBaixa]
			,[bit_dataIncorporacao]
			,[bit_contado]
			,[bit_dataInventario]
			,[bit_status]
			,[bit_observacao]
			,[bit_dataFimGarantia]
			,[bit_situacao]
			,[bit_dataCriacao]
			,[bit_dataAlteracao] 
		FROM 
			BemItem bi WITH(NoLock)
		WHERE 
			(@bem_id IS NULL OR bi.bem_id = @bem_id)
			AND (bi.bit_uniGuarda = @uni_id)
			AND (bi.bit_situacao <> 3)
			AND (bi.bit_registroPat IS NOT NULL OR bi.bit_registroPat >= @bit_registroPat) -- Com registro patrimonial
		ORDER BY bi.bit_registroPat, bi.bem_id, bi.bit_id
		
		SELECT @@ROWCOUNT
	end
	
	-- Hierarquia completa
	IF @incorporacao = 4
	BEGIN
		SELECT
			 [bem_id]
			,[bit_id]
			,[stc_id]
			,[loc_id]
			,[dep_id]
			,[aps_id]
			,[fat_id]
			,[bit_referencia]
			,[bit_uniGestora]
			,[bit_uniGuarda]
			,[bit_registroPat]
			,[bit_GPB]
			,[bit_GRB]
			,[bit_valorOrigem]
			,[bit_valorLiquido]
			,[bit_vidaUtil]
			,[bit_cotas]
			,[bit_dataDepInicio]
			,[bit_dataDepFim]
			,[bit_doctoBaixa]
			,[bit_dataBaixa]
			,[bit_dataIncorporacao]
			,[bit_contado]
			,[bit_dataInventario]
			,[bit_status]
			,[bit_observacao]
			,[bit_dataFimGarantia]
			,[bit_situacao]
			,[bit_dataCriacao]
			,[bit_dataAlteracao] 
		FROM 
			BemItem bi WITH(NoLock)
		INNER JOIN 
			[FN_GetUnidadeEFilhas](@uni_id) u
		ON
			u.uni_id = bi.bit_uniGuarda 
		WHERE 
			(@bem_id IS NULL OR bi.bem_id = @bem_id ) 
			AND (bi.bit_situacao <> 3)
			AND (bi.bit_registroPat IS NOT NULL OR bi.bit_registroPat >= @bit_registroPat) -- Com registro patrimonial
		ORDER BY bi.bit_registroPat, bi.bem_id, bi.bit_id
		
		SELECT @@ROWCOUNT
	END
	
	-- Todos os itens
	IF @incorporacao = 6
	BEGIN
		SELECT
			 bi.[bem_id]
			,bi.[bit_id]
			,[stc_id]
			,[loc_id]
			,[dep_id]
			,[aps_id]
			,bi.[fat_id]
			,[bit_referencia]
			,[bit_uniGestora]
			,[bit_uniGuarda]
			,[bit_registroPat]
			,[bit_GPB]
			,[bit_GRB]
			,[bit_valorOrigem]
			,[bit_valorLiquido]
			,[bit_vidaUtil]
			,[bit_cotas]
			,[bit_dataDepInicio]
			,[bit_dataDepFim]
			,[bit_doctoBaixa]
			,[bit_dataBaixa]
			,[bit_dataIncorporacao]
			,[bit_contado]
			,[bit_dataInventario]
			,[bit_status]
			,[bit_observacao]
			,[bit_dataFimGarantia]
			,[bit_situacao]
			,[bit_dataCriacao]
			,[bit_dataAlteracao] 
		FROM 
			BemItem bi WITH(NoLock)
		INNER JOIN 
		MovimentacaoBem AS mb WITH(NoLock)
			ON mb.bem_id = bi.bem_id AND mb.bit_id = bi.bit_id
			AND mb.mov_situacao <> 3
		INNER JOIN 
		TipoMovimentacao tm 
			ON tm.tpm_id = mb.tpm_id 
			AND tm.tpm_operacao = 7 -- Se tem movimento de cessão
		WHERE 
			(@bem_id IS NULL OR bi.bem_id = @bem_id)
			AND (bi.bit_uniGuarda = @uni_id)
			AND (bi.bit_situacao <> 3)
			AND (bi.bit_registroPat IS NOT NULL OR bi.bit_registroPat >= @bit_registroPat) -- Com registro patrimonial
		ORDER BY bi.bit_registroPat, bi.bem_id, bi.bit_id
		
		SELECT @@ROWCOUNT
	END
-- Sem incorporação, com bit_registroPat e legado
	IF @incorporacao = 7
	BEGIN
		SELECT
			 [bem_id]
			,[bit_id]
			,[stc_id]
			,[loc_id]
			,[dep_id]
			,[aps_id]
			,[fat_id]
			,[bit_referencia]
			,[bit_uniGestora]
			,[bit_uniGuarda]
			,[bit_registroPat]
			,[bit_GPB]
			,[bit_GRB]
			,[bit_valorOrigem]
			,[bit_valorLiquido]
			,[bit_vidaUtil]
			,[bit_cotas]
			,[bit_dataDepInicio]
			,[bit_dataDepFim]
			,[bit_doctoBaixa]
			,[bit_dataBaixa]
			,[bit_dataIncorporacao]
			,[bit_contado]
			,[bit_dataInventario]
			,[bit_status]
			,[bit_observacao]
			,[bit_dataFimGarantia]
			,[bit_situacao]
			,[bit_dataCriacao]
			,[bit_dataAlteracao]
		FROM 
			BemItem bi WITH(NoLock)		
		WHERE 
			(@bem_id IS NULL OR bi.bem_id = @bem_id)
			AND bit_dataIncorporacao is null
			AND (bi.bit_uniGuarda = @uni_id)
			AND (bi.bit_registroPat IS NOT NULL OR bi.bit_registroPat >= @bit_registroPat) -- Com registro patrimonial
			AND (bi.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (bi.bit_situacao <> 3)
			AND NOT EXISTS (SELECT 
							mv.mov_data 
							FROM 
								MovimentacaoBem mv
							INNER JOIN TipoMovimentacao TP 
								ON mv.tpm_id = TP.tpm_id
								AND TP.tpm_operacao = 12 								
							WHERE mv.bem_id = bi.bem_id 
								AND MV.bit_id = bi.bit_id 
								AND mv.mov_situacao <> 3)
			AND (bi.bit_status <> 3 AND bi.bit_status <> 4)							
		ORDER BY bi.bit_registroPat, bi.bem_id, bi.bit_id 
		
		SELECT @@ROWCOUNT
	END
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_IncorporacaoAutomatica]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_IncorporacaoAutomatica]  
 @dtIni DATETIME  
 ,@dtFim DATETIME   
 ,@uni_id int   
AS  
BEGIN  
-- SELECIONA OS BEM-ITENS QUE POSSUEM DATA DE INCORPORACAO PORÉM NAO POSSUEM MOVIMENTO DE INCORPORACAO  
-- O QUER DIZER QUE ESTAO COM INCORPORACAO PROGRAMADA (PARA EXECUTAR AUTOMATICAMENTE)  
-- PORÉM ESTES ITENS NAO PODEM TER OUTROS TIPOS DE MOVIMENTOS, A NÃO SER RECEBIMENTO E TRANSF. SEM INCORP.   
-- A DATA DE INCORP. DEVE ESTAR EM UM DADO INTERVALO  
   
 select   
  bi.bem_id  
  , bi.bit_id  
  , bi.bit_dataIncorporacao  
  , bi.bit_uniGuarda  
  , bi.bit_uniGestora  
  , bi.bit_registroPat   
  , bi.bit_valorLiquido   
  , bp.bem_legado   
  , bp.grp_id     
 from   
  BemItem bi WITH(NoLock)  
 INNER JOIN   
  BemPatrimonial bp WITH(NoLock)  
  ON bp.bem_id = bi.bem_id   
  and bp.bem_legado = 0  
 where   
  bi.bit_situacao = 1  
   AND bi.bit_status not in(3,5)
  and bi.bit_uniGuarda = @uni_id   
  and ((bi.bit_dataIncorporacao >= @dtIni and bi.bit_dataIncorporacao < @dtfim) OR (bi.bit_dataIncorporacao IS NULL))  
  and (bi.bit_registroPat is not null)  
  and bp.bem_legado = 0  
  and bp.bem_natureza not in (3)  
  
  AND NOT EXISTS (SELECT   
        mv.mov_data   
       FROM   
        MovimentacaoBem mv WITH(NoLock)  
       INNER JOIN TipoMovimentacao TP WITH(NoLock)  
        ON mv.tpm_id = TP.tpm_id  
        AND TP.tpm_operacao in( 1,12) -- alterado dia 05/05/2015       
       WHERE mv.bem_id = bp.bem_id   
        AND MV.bit_id = bi.bit_id  
        AND mv.mov_situacao <> 3)    
  order by   
   bem_id   
   , bit_id  
END  
  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_IncorporacaoDoacaoAutomatica]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_IncorporacaoDoacaoAutomatica]    
 @dtIni DATETIME    
 ,@dtFim DATETIME    
 ,@uni_id int    
AS    
BEGIN    
-- SELECIONA OS BEM-ITENS QUE POSSUEM DATA DE INCORPORACAO E SEJAM LEGADO PORÉM NAO POSSUEM MOVIMENTO DE INCORPORACAO    
-- O QUER DIZER QUE ESTAO COM INCORPORACAO PROGRAMADA (PARA EXECUTAR AUTOMATICAMENTE)    
-- PORÉM ESTES ITENS NAO PODEM TER OUTROS TIPOS DE MOVIMENTOS, A NÃO SER RECEBIMENTO E TRANSF. SEM INCORP.     
-- A DATA DE INCORP. DEVE ESTAR EM UM DADO INTERVALO    
     
 select     
  bi.bem_id    
  , bi.bit_id    
  , bi.bit_dataIncorporacao    
  , bi.bit_uniGuarda    
  , bi.bit_uniGestora    
  , bi.bit_registroPat     
  , bi.bit_valorLiquido     
  , bp.bem_legado     
  , bp.grp_id       
 from     
  BemItem bi WITH(NoLock)    
 INNER JOIN     
  BemPatrimonial bp WITH(NoLock)    
  ON bp.bem_id = bi.bem_id     
 where     
  bi.bit_situacao = 1    
  and bi.bit_status not in(3,5)  
  and bi.bit_uniGuarda = @uni_id     
  and ((bi.bit_dataIncorporacao >= @dtIni and bi.bit_dataIncorporacao < @dtfim) OR (bi.bit_dataIncorporacao IS NULL))    
  and (bi.bit_registroPat is not null)    
   and bp.for_id in    
     (SELECT    
      --ent_razaoSocial AS for_nome,    
      fon.for_id    
     FROM    
      Fornecedor AS FON WITH(NOLOCK)    
     INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)    
      ON FON.for_id = PJ.for_id    
     INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)    
      ON PJ.ent_id = ENT.ent_id    
      
     WHERE    
      for_situacao <> 3    
      and ent_razaoSocial like '%'+'APM'+'%'    
      or ent_razaoSocial like '%'+'FUNDO NACIONAL DE DESENVOLVIMENTO DA EDUCACAO  - FNDE'+'%'    
      or ent_razaoSocial like '%'+'DOACAO TELEFONICA'+'%'    
      )    
  and NOT EXISTS (select     
       mb.bem_id      
      from      
       MovimentacaoBem mb WITH(NoLock)        
      left join     
       TipoMovimentacao tm WITH(NoLock)     
       on tm.tpm_id = mb.tpm_id    
      where     
       mb.bem_id = bi.bem_id     
       and mb.bit_id = bi.bit_id     
       and mb.mov_situacao  <> 3    
       and (tm.tpm_operacao in( 1,12))  )    
  order by     
   bem_id     
   , bit_id    
END    
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_IncorporacaoLegadoAutomatica]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_IncorporacaoLegadoAutomatica]
	@dtIni DATETIME
	,@dtFim DATETIME
	,@uni_id int
AS
BEGIN
-- SELECIONA OS BEM-ITENS QUE POSSUEM DATA DE INCORPORACAO E SEJAM LEGADO PORÉM NAO POSSUEM MOVIMENTO DE INCORPORACAO
-- O QUER DIZER QUE ESTAO COM INCORPORACAO PROGRAMADA (PARA EXECUTAR AUTOMATICAMENTE)
-- PORÉM ESTES ITENS NAO PODEM TER OUTROS TIPOS DE MOVIMENTOS, A NÃO SER RECEBIMENTO E TRANSF. SEM INCORP. 
-- A DATA DE INCORP. DEVE ESTAR EM UM DADO INTERVALO
	
	select 
		bi.bem_id
		, bi.bit_id
		, bi.bit_dataIncorporacao
		, bi.bit_uniGuarda
		, bi.bit_uniGestora
		, bi.bit_registroPat 
		, bi.bit_valorLiquido 
		, bp.bem_legado 
		, bp.grp_id 	 
	from 
		BemItem bi WITH(NoLock)
	INNER JOIN 
		BemPatrimonial bp WITH(NoLock)
		ON bp.bem_id = bi.bem_id 
		and bp.bem_legado = 1
	where 
		bi.bit_situacao = 1
		and bi.bit_uniGuarda = @uni_id 
		and ((bi.bit_dataIncorporacao >= @dtIni and bi.bit_dataIncorporacao < @dtfim) OR (bi.bit_dataIncorporacao IS NULL))
		and (bi.bit_registroPat is not null)
		and bp.bem_legado = 1
		and bp.for_id = 2616 -- GEMAT LEGADO
		and bi.bit_status not in(3,5) 
		and NOT EXISTS (select 
							mb.bem_id  
						from  
							MovimentacaoBem mb WITH(NoLock) 			
						left join 
							TipoMovimentacao tm WITH(NoLock) 
							on tm.tpm_id = mb.tpm_id
						where 
							mb.bem_id = bi.bem_id 
							and mb.bit_id = bi.bit_id 
							and mb.mov_situacao  <> 3
							and (tm.tpm_operacao in( 1, 12))	
							)	
		order by 
			bem_id 
			, bit_id
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_IncorporacaoLegadoAutomatica_robo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext NEW_BemItem_SelectBy_IncorporacaoLegadoAutomatica

CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_IncorporacaoLegadoAutomatica_robo]
	@dtIni DATETIME
	,@dtFim DATETIME
	,@uni_id int
AS
BEGIN
-- SELECIONA OS BEM-ITENS QUE POSSUEM DATA DE INCORPORACAO E SEJAM LEGADO PORÉM NAO POSSUEM MOVIMENTO DE INCORPORACAO
-- O QUER DIZER QUE ESTAO COM INCORPORACAO PROGRAMADA (PARA EXECUTAR AUTOMATICAMENTE)
-- PORÉM ESTES ITENS NAO PODEM TER OUTROS TIPOS DE MOVIMENTOS, A NÃO SER RECEBIMENTO E TRANSF. SEM INCORP. 
-- A DATA DE INCORP. DEVE ESTAR EM UM DADO INTERVALO
	
	select 
		bi.bem_id
		, bi.bit_id
		, bi.bit_dataIncorporacao
		, bi.bit_uniGuarda
		, bi.bit_uniGestora
		, bi.bit_registroPat 
		, bi.bit_valorLiquido 
		, bp.bem_legado 
		, bp.grp_id 	 
	from 
		BemItem bi WITH(NoLock)
	INNER JOIN 
		BemPatrimonial bp WITH(NoLock)
		ON bp.bem_id = bi.bem_id 
		and bp.bem_legado = 1
	where 
		bi.bit_situacao = 1
		and bi.bit_uniGuarda = @uni_id 
		and ((bi.bit_dataIncorporacao >= @dtIni and bi.bit_dataIncorporacao < @dtfim) OR (bi.bit_dataIncorporacao IS NULL))
		and (bi.bit_registroPat is not null)
		and bp.bem_legado = 1
		and bp.for_id = 2616
		and bi.bit_status != 3
		and NOT EXISTS (select 
							mb.bem_id  
						from  
							MovimentacaoBem mb WITH(NoLock) 			
						left join 
							TipoMovimentacao tm WITH(NoLock) 
							on tm.tpm_id = mb.tpm_id
						where 
							mb.bem_id = bi.bem_id 
							and mb.bit_id = bi.bit_id 
							and mb.mov_situacao  <> 3
							and (tm.tpm_operacao = 1 
								or (tm.tpm_operacao = 2)
								or tm.tpm_operacao = 3 
								or tm.tpm_operacao = 4  
								or tm.tpm_operacao = 5 
								or tm.tpm_operacao = 6
								or tm.tpm_operacao = 7
								or tm.tpm_operacao = 8
								or tm.tpm_operacao = 9
								or tm.tpm_operacao = 10
								or tm.tpm_operacao = 11
								or tm.tpm_operacao = 12))		
		order by 
			bem_id 
			, bit_id
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_loc_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===================================================================================
-- Author:		João Victor Rossetti Vieira	
-- Create date: 06/09/2010 11:11
-- Description: Retorna todos os bens itens que não foram excluídos 
--				logicamente, filtrados pelo código da Localidade
--				@tipobusca = 0 para só não contados
--				@tipobusca = 1 para só contados
--				@tipobusca = 2 para todos
--				@dep_id = 0 para buscar em todas dependencias
--				e não retorna bens excluidos nem bloqueados
-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_loc_id]
	@loc_id INT,
	@bit_registroPat VARCHAR(20),
	@tipobusca INT,
	@dep_id INT
AS
BEGIN
		
	SELECT
		BEM.bem_id,
		BEM.bem_descricao,
		bit_id,
		aps_id,
		LOC.loc_id,
		loc_nome,
		STC.stc_id,
		stc_nome,
		bit_registroPat,
		bit_referencia,
		bit_contado,
		CASE bit_status 
			WHEN 1 THEN 'Utilizado'
			WHEN 2 THEN 'Disponível'
		END AS bit_status,
		CASE bit_situacao
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
		END AS bit_situacao,
		bit_uniGestora,
		dbo.FN_GetUniNome(bit_uniGestora) AS bit_uniGestora_nome,
		bit_uniGuarda,
		dbo.FN_GetUniNome(bit_uniGuarda) AS bit_uniGuarda_nome,
		dep.dep_id,
		dep.dep_nome
	FROM
		BemItem AS BET WITH (NOLOCK)
		INNER JOIN StatusConservacao AS STC WITH (NOLOCK)
			ON BET.stc_id = STC.stc_id
		INNER JOIN Localidade AS LOC WITH (NOLOCK)
			ON BET.loc_id = LOC.loc_id
		INNER JOIN dbo.BemPatrimonial AS BEM WITH(NoLock)
			ON BEM.bem_id = bet.bem_id
		LEFT OUTER JOIN dbo.Dependencia AS dep 
			ON BET.dep_id = dep.dep_id AND BET.loc_id = dep.loc_id

	WHERE
		bit_situacao = 1 AND (BET.loc_id = @loc_id OR (@bit_registroPat IS NOT NULL))
		AND bit_status <> 3
		AND (bet.bit_registroPat LIKE @bit_registroPat OR @bit_registroPat IS NULL)
		AND ((bit_contado = 0 AND (@tipobusca = 0 OR @tipobusca = 2))
		OR  (bit_contado = 1 AND (@tipobusca = 1 OR @tipobusca = 2)))
		AND (BET.dep_id = @dep_id OR @dep_id IS NULL) 
		
	ORDER BY BET.dep_id, bit_registroPat 
	
	 SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_RegistroPat]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==============================================================================
-- Author:		Aline Dornelas
-- Create date: 08/30/2010 17:03:20
-- Description:	Utilizado na busca de número do registro patrimonial do bem, 
--				retorna os BemItem que não foram excluídos 
--				logicamente, filtrados por: número do registro patrimonial
-- ==============================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_RegistroPat]
	@bem_id_alteracao BIGINT,
	@bit_id_alteracao INT,
	@bit_registroPat VARCHAR(20)
AS
BEGIN
	SELECT
		bem_id,
		bit_id
	FROM 
		BemItem WITH(NOLOCK)
	WHERE 
		bit_situacao <> 3
		AND bit_registroPat = @bit_registroPat
		AND (bem_id + bit_id) <> (@bem_id_alteracao + @bit_id_alteracao)
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectBy_RegistroPat2]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==============================================================================
-- Author:		Aline Dornelas
-- Create date: 08/30/2010 17:03:20
-- Description:	Utilizado na busca de número do registro patrimonial do bem, 
--				retorna os BemItem que não foram excluídos 
--				logicamente, filtrados por: número do registro patrimonial
-- ==============================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectBy_RegistroPat2]
	@bit_registroPat VARCHAR(20)
AS
BEGIN
	SELECT
		bem_id,
		bit_id
	FROM 
		BemItem WITH(NOLOCK)
	WHERE 
		bit_situacao <> 3
		AND bit_registroPat = @bit_registroPat
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_SelectTodosBensEntidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================

-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_SelectTodosBensEntidade]
	@ent_id uniqueidentifier
AS
BEGIN
	select
		COUNT(BemItem.bit_id) TotalObjetos,
		Sum(BemItem.bit_valorLiquido) TotalValor,
		(select COUNT(uni_id) from Unidade ) numeroUnidades,
		(select COUNT(u.uni_id) from Unidade u where u.uni_situacao=1 ) unidadesAtivas
	from BemItem inner join Unidade g
		on BemItem.bit_uniGestora = g.uni_id
	
	where g.ent_id=@ent_id
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_UPDATE]
	@bem_id BIGINT
	, @bit_id INT
	, @stc_id INT
	, @loc_id INT
	, @dep_id INT
	, @aps_id BIGINT
	, @fat_id INT
	, @bit_referencia VARCHAR (250)
	, @bit_uniGestora INT
	, @bit_uniGuarda INT
	, @bit_registroPat VARCHAR (20)
	, @bit_GPB VARCHAR (20)
	, @bit_GRB VARCHAR (20)
	, @bit_valorOrigem MONEY
	, @bit_valorLiquido MONEY
	, @bit_vidaUtil INT
	, @bit_cotas INT
	, @bit_dataDepInicio DATETIME
	, @bit_dataDepFim DATETIME
	, @bit_doctoBaixa VARCHAR (20)
	, @bit_dataBaixa DATETIME
	, @bit_dataIncorporacao DATETIME
	, @bit_contado BIT
	, @bit_dataInventario DATETIME
	, @bit_status TINYINT
	, @bit_dataAlteracaoStatus DATETIME
	, @bit_dataFimGarantia DATETIME
	, @bit_observacao VARCHAR(MAX)
	, @bit_situacao TINYINT
	, @bit_dataAlteracao DATETIME
	, @bit_registroPatAnterior VARCHAR (20)
	, @bit_nroSerie VARCHAR (30)
	, @bit_marca VARCHAR (30)
	, @bit_modelo VARCHAR (30)
	, @bit_tipo VARCHAR (30)
	, @bit_placa VARCHAR (10)
	, @bit_chassi VARCHAR (50)
	, @bit_anoFabricacao VARCHAR (4)
	, @bit_quilometragem INT
	, @bit_potencia VARCHAR (10)
	, @bit_unidadePotencia VARCHAR (10)
	, @bit_cilindros VARCHAR (10)
	, @sp_id VarChar(5)
	, @tb_id VarChar(5)
	, @bit_codProgFinanc VarChar(100)
	, @bit_matriculaPessoa VarChar(100)
	, @bit_codEspecie VarChar(50)

AS
BEGIN
	UPDATE BemItem 
	SET 
		stc_id = @stc_id 
		, loc_id = @loc_id 
		, dep_id = @dep_id 
		, aps_id = @aps_id 
		, fat_id = @fat_id 
		, bit_referencia = @bit_referencia 
		, bit_uniGestora = @bit_uniGestora 
		, bit_uniGuarda = @bit_uniGuarda 
		, bit_registroPat = @bit_registroPat 
		, bit_GPB = @bit_GPB 
		, bit_GRB = @bit_GRB 
		, bit_valorOrigem = @bit_valorOrigem 
		, bit_valorLiquido = @bit_valorLiquido 
		, bit_vidaUtil = @bit_vidaUtil 
		, bit_cotas = @bit_cotas 
		, bit_dataDepInicio = @bit_dataDepInicio 
		, bit_dataDepFim = @bit_dataDepFim 
		, bit_doctoBaixa = @bit_doctoBaixa 
		, bit_dataBaixa = @bit_dataBaixa 
		, bit_dataIncorporacao = @bit_dataIncorporacao 
		, bit_contado = @bit_contado 
		, bit_dataInventario = @bit_dataInventario 
		, bit_status = @bit_status 
		, bit_dataAlteracaoStatus = @bit_dataAlteracaoStatus 
		, bit_observacao = @bit_observacao 
		, bit_dataFimGarantia = @bit_dataFimGarantia
		, bit_situacao = @bit_situacao 
		, bit_dataAlteracao = @bit_dataAlteracao 
		, bit_registroPatAnterior = @bit_registroPatAnterior 
		, bit_nroSerie = @bit_nroSerie 
		, bit_marca = @bit_marca 
		, bit_modelo = @bit_modelo 
		, bit_tipo = @bit_tipo 
		, bit_placa = @bit_placa 
		, bit_chassi = @bit_chassi 
		, bit_anoFabricacao = @bit_anoFabricacao 
		, bit_quilometragem = @bit_quilometragem 
		, bit_potencia = @bit_potencia 
		, bit_unidadePotencia = @bit_unidadePotencia 
		, bit_cilindros = @bit_cilindros 
		, sp_id = @sp_id
		, tb_id = @tb_id
		, bit_codProgFinanc = @bit_codProgFinanc
		, bit_matriculaPessoa = @bit_matriculaPessoa
		, bit_codEspecie = @bit_codEspecie

	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 


	RETURN ISNULL(@@ROWCOUNT,-1)

END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_UPDATE_BemPatrimonial]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_UPDATE_BemPatrimonial]
	  @bem_id BIGINT
	, @bit_id INT
	, @bit_registroPat VARCHAR (250)
AS
BEGIN

	if not exists(  select 
				top 1  bit_registroPat 
			from 
				BemItem with(nolock)	WHERE 
					bem_id = @bem_id 
			AND		bit_id = @bit_id
			AND		bit_registroPat is not null
			
			)

	begin

		UPDATE 
				BemItem 
		SET 

				bit_registroPat = @bit_registroPat 
		WHERE 
				bem_id = @bem_id 
		AND		bit_id = @bit_id 
	end 

	RETURN ISNULL(@@ROWCOUNT,-1)

END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_UPDATE_DataIncorporacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ====================================================================
-- Author:		Wellington Santana
-- Create date: 20/05/2014
-- Description:	Atualiza data de incorporação do bem.
-- ====================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_UPDATE_DataIncorporacao]
	@bem_id BIGINT
	, @bit_id BIGINT
	, @bit_dataIncorporacao DATETIME
	, @bit_dataAlteracao DATETIME

AS
BEGIN
	UPDATE BemItem 
	SET 
		bit_dataIncorporacao = @bit_dataIncorporacao 
		, bit_dataAlteracao = @bit_dataAlteracao 
	WHERE 
		bem_id = @bem_id 
		and bit_id = @bit_id

	RETURN ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_UPDATE_registroPat]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_UPDATE_registroPat]
	 @bem_id BIGINT
	, @bit_id INT
	, @bit_registroPat VARCHAR (20)
	, @loc_id INT
	, @dep_id INT
	, @bit_dataAlteracao DATETIME

AS
BEGIN
	IF(@dep_id =0)
		BEGIN
			UPDATE BemItem 
			SET 
				 -- bit_registroPat = @bit_registroPat 
				  loc_id = @loc_id
				, bit_dataAlteracao = @bit_dataAlteracao 		
			WHERE 
				bem_id = @bem_id 
				AND bit_id = @bit_id 
		END
	ELSE
		BEGIN
			UPDATE BemItem 
			SET 
				-- bit_registroPat = @bit_registroPat 
				  loc_id = @loc_id
				, dep_id = @dep_id
				, bit_dataAlteracao = @bit_dataAlteracao 
			WHERE 
				bem_id = @bem_id 
				AND bit_id = @bit_id 
		END
	
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END




GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_UPDATE_ValorOrigem_ValorLiquido]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ====================================================================  
-- Author:  Aline Dornelas  
-- Create date: 31/08/2010 12:33:19  
-- Description: Atualiza o valor de origem e valor líquido do BemItem.  
  
-- Author:  Wellington Santana  
-- Create date: 26/02/2014  
-- Description: Retirado o parametro @bit_id e bit_id = @bit_id  
--    na hora de dar update ele vai atualizar todos do bem_id  
--    selecionado para edição.  
-- ====================================================================  
CREATE PROCEDURE [dbo].[NEW_BemItem_UPDATE_ValorOrigem_ValorLiquido]  
  @bem_id BIGINT  
  ,@bit_id INT
  , @bit_valorOrigem MONEY  
 , @bit_valorLiquido MONEY  
 , @bit_dataAlteracao DATETIME  
  
AS  
BEGIN  
 UPDATE BemItem   
 SET   
  bit_valorOrigem = @bit_valorOrigem   
  , bit_valorLiquido = @bit_valorLiquido   
  , bit_dataAlteracao = @bit_dataAlteracao   
 WHERE   
  bem_id = @bem_id and bit_id = @bit_id
  
 RETURN ISNULL(@@ROWCOUNT,-1)  
   
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_UPDATE_ValorOrigem_ValorLiquido_BATCH]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Wellington Rossi
-- Create date: 04/11/2013
-- Description:	Atualiza o valor de origem e valor líquido do BemItem em Lote
-- Alteração: cópia para Conpat 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItem_UPDATE_ValorOrigem_ValorLiquido_BATCH]
    @DataTable dbo.BemItemTableType READONLY 
AS
BEGIN 
    MERGE INTO dbo.BemItem AS M
    USING @DataTable AS T
	ON (M.bem_id = T.bem_id 
		AND M.bit_id = T.bit_id) 
    WHEN MATCHED THEN 
		UPDATE SET 
			bit_valorOrigem = T.bit_valorOrigem 
			, bit_valorLiquido = T.bit_valorLiquido 
			, bit_dataAlteracao = T.bit_dataAlteracao;
	
	RETURN ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[New_BemItem_updateCancelamento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[New_BemItem_updateCancelamento]
 @bem_id BIGINT
,@bit_id BIGINT
,@bit_obsCancelamento varchar(100)
,@moc_id int
,@funcao int

AS

BEGIN

	if(@funcao = 1)
	begin

		update
			BemItem
		set
			 bit_status		= 5
			,bit_obsCancelamento	= @bit_obsCancelamento
			,moc_id			= @moc_id
		where 
			bem_id = @bem_id 
		and	bit_id = @bit_id
	end
	
	else if(@funcao = 2)
	begin
		update
			MovimentacaoBem
		set 
			mov_situacao = 3
		where 
			bem_id = @bem_id 
		and	bit_id = @bit_id
	end
		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END








GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_VerficaQtdeDisponivelLote]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		JORGE FREITAS
-- Create date: <02/09/10>
-- Description:	<Retorna qtde de itens disponiveis
--				qdo o bem é de lote >
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItem_VerficaQtdeDisponivelLote]
	@bem_id BIGINT
AS
BEGIN
	Select 
		bem_id
		, bit_id 
		, bit_registroPat 
		
	FROM 
		BemItem AS Bem WITH (NOLOCK) 
	WHERE 
		Bem.bem_id = @bem_id 
		and bit_situacao = 1 
		and Bem.bit_dataBaixa is null 
	order by bit_id  		
	
	RETURN @@ROWCOUNT
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Verifica_MovimentacaoAtiva]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Luana Piva
-- Create date: 31/10/2013 
-- Description:	Verificar se existe movimentação ativa do bem de acordo com parâmetros
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItem_Verifica_MovimentacaoAtiva]
	@tpm_operacao tinyint,
	@bem_id BIGINT	

AS
BEGIN
	
	SELECT
	MOV.bem_id
	
	FROM MovimentacaoBem as MOV WITH(NOLOCK)
	INNER JOIN TipoMovimentacao as TPM WITH(NOLOCK)
	ON 
	   TPM.tpm_operacao = @tpm_operacao AND
	   MOV.tpm_id = TPM.tpm_id 
	
	WHERE 				
		MOV.bem_id = @bem_id AND
		mov_situacao <> 3 		

	SELECT @@ROWCOUNT
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_Verifica_registroPat]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Debora Cavaglieri
-- Create date: 26/08/2010
-- Description:	Verifica se o numero de registro patrimonial é unico.
--				Se não for unico verifica se o bem é composto e 
--				o registro foi lançado para outra parte do bem (composto). 
--		Retirado o Bem Item Composto por Henrique em 13/08/2015
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_BemItem_Verifica_registroPat]
	@bem_id bigint,
	@bit_id int,
	@bit_registroPat varchar(20)

AS
BEGIN

		--WITH BemComposto AS  (
		--	-- bens pai
		--	SELECT
		--		 BI.bem_id
		--		, BI.bit_id 
		--		, 'B' + CAST(BI.bem_id as varchar(50))+ 'I' + CAST(BI.bit_id as varchar(10)) as codigo
		--	FROM	
		--		BemItem AS BI WITH(NoLock)			
		--	INNER JOIN 
		--		BemItemComposto AS BIC WITH(NoLock)
		--		  ON BIC.bem_idParent = BI.bem_id 
		--			AND BIC.bit_idParent = BI.bit_id   
		--	WHERE
		--		BIC.bem_id  = @bem_id
		--		AND BIC.bit_id = @bit_id
				
		--	UNION ALL
			
		--	 -- bens filhos
		--	SELECT
		--		 BI.bem_id
		--		, BI.bit_id 
		--		,'B' + CAST(BI.bem_id as varchar(50))+ 'I' + CAST(BI.bit_id as varchar(10))   as codigo
		--	FROM	
		--		BemItem AS BI WITH(NoLock)
		--	INNER JOIN 
		--		BemItemComposto AS BIC WITH(NoLock)
		--		 ON BIC.bem_id = BI.bem_id 
		--			AND BIC.bit_id = BI.bit_id   
		--	WHERE
		--		BIC.bem_idParent  = @bem_id
		--		AND BIC.bit_idParent = @bit_id
		--	)		


	SELECT
		 BI.bem_id
		, BI.bit_id 
		, bem_descricao 
		, BP.bem_dataEntrada
		, BI.bit_registroPat
	FROM	
		BemPatrimonial AS BP WITH(NoLock)
	INNER JOIN 
		BemItem AS BI WITH(NoLock)
		ON BP.bem_id = BI.bem_id    
	WHERE
		BI.bit_registroPat = @bit_registroPat
		AND (BP.bem_id <> @bem_id OR ( BP.bem_id = @bem_id  AND bi.bit_id <> @bit_id))
		--AND  NOT EXISTS (SELECT codigo from BemComposto WHERE codigo = ('B' + CAST(BI.bem_id as varchar(50)) + 'I' + CAST(BI.bit_id AS VARCHAR(10))  ))
			
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItem_VerificaEtiquetaExistenteAnoUniBem]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItem_VerificaEtiquetaExistenteAnoUniBem]
	@uniGestora_id int		
   ,@ano int
   ,@bit_registroPat varchar(20)
AS
BEGIN
select bem_id, bit_id 
from bemitem with (nolock) 
where
--[bit_uniGestora] = @uniGestora_id
--and
bit_registroPat = @bit_registroPat
--and
--@ano = DATEPART (YEAR ,bit_dataCriacao)

end

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemArquivo_SelectBy_bem_id_bit_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================================== -- Author:  Aline Dornelas -- Create date: 08/09/2010 14:29:30 -- Description: 
-- =================================================================================== 
CREATE PROCEDURE [dbo].[NEW_BemItemArquivo_SelectBy_bem_id_bit_id] 
--declare
 @bem_id BIGINT,-- = 92663 , 
 @bit_id INT --= 1
 AS 
 BEGIN   
 SELECT   ARQ.arq_id   , bia_tipo AS arq_tipo   , bia_legenda AS arq_legenda   , arq_nome AS arq_nome   
 , case when arq_tamanho is null then 0 else arq_tamanho end AS arq_tamanho   
 , arq_typeMime AS arq_typeMime  
 FROM   BemItemArquivo AS BIA WITH (NOLOCK) 
  INNER JOIN Arquivo AS ARQ WITH (NOLOCK)   
  ON BIA.arq_id = ARQ.arq_id 
   WHERE   BIA.bem_id = @bem_id   AND BIA.bit_id = @bit_id  
   ORDER BY    arq_id 
   DESC   
   SELECT @@ROWCOUNT  
   END 
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemArquivo_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Aline Dornelas
-- Create date: 08/09/2010 14:33:15
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemArquivo_UPDATE]
	@bem_id BIGINT
	, @bit_id INT
	, @arq_id BIGINT
	, @bia_legenda VARCHAR (100)
	, @bia_observacao VARCHAR (2000)
	, @bia_tipo TINYINT
	, @bia_dataAlteracao DATETIME

AS
BEGIN
	UPDATE BemItemArquivo 
	SET 
		bia_legenda = @bia_legenda 
		, bia_observacao = @bia_observacao 
		, bia_tipo = @bia_tipo 
		, bia_dataAlteracao = @bia_dataAlteracao 

	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND arq_id = @arq_id 

		
	RETURN ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemDocumento_INSERT_BATCH]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Luana Piva
-- Create date: 25/02/2014
-- Description:	Insertção e Alteração em Lote
-- Alteração: cópia para Conpat 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemDocumento_INSERT_BATCH]
    @DataTable dbo.BemItemDocumentoTableType READONLY 
AS
BEGIN 

    MERGE INTO dbo.BemItemDocumento AS BID
    USING @DataTable AS T 
	ON (BID.bid_id = T.bid_id 
		AND BID.bem_id = T.bem_id 
		AND BID.bit_id = T.bit_id) 		
    WHEN MATCHED THEN 
		UPDATE SET 
			bem_id = T.bem_id 
			, bit_id = T.bit_id 
			--, bid_id = T.bid_id 
			, bid_tipoDoc = T.bid_tipoDoc 
			, bid_numeroDoc = T.bid_numeroDoc 
			, bid_porcentagem = T.bid_porcentagem 
			, bid_classificacao = T.bid_classificacao 			
			, bid_observacao = T.bid_observacao 
			, bid_dataAlteracao = T.bid_dataAlteracao 
			, bid_dataCriacao = T.bid_dataCriacao 
			, bid_serie = T.bid_serie 
			, bid_dataEmissaoDoc = T.bid_dataEmissaoDoc 
			
    WHEN NOT MATCHED THEN 
		INSERT (bem_id  
			, bit_id
		--	, bid_id
			, bid_tipoDoc
			, bid_numeroDoc
			, bid_porcentagem 
			, bid_classificacao			
			, bid_observacao
			, bid_dataAlteracao
			, bid_dataCriacao
			, bid_serie
			, bid_dataEmissaoDoc)
		VALUES (T.bem_id 
			,T.bit_id 
		--	,T.bid_id 
			,T.bid_tipoDoc 
			,T.bid_numeroDoc 
			,T.bid_porcentagem 
			,T.bid_classificacao 			
			,T.bid_observacao 
			,T.bid_dataAlteracao 
			,T.bid_dataCriacao 
			,T.bid_serie 
			,T.bid_dataEmissaoDoc 
				);
	
	SELECT ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemDocumento_SelectAll]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Debora Cavaglieri
-- Create date: 04/01/2011
-- Description:	Busca todos od documentos do bem
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_BemItemDocumento_SelectAll]
@bem_id bigint,
@bit_id int,
@bid_tipoDoc int
	
AS
BEGIN
	
	SELECT 
		bem_id
		,bit_id
		,bid_id
		,bid_tipoDoc
		,bid_numeroDoc
		,bid_porcentagem
		,bid_classificacao
		,bid_observacao
		,bid_serie
		,bid_dataEmissaoDoc

	FROM 
		BemItemDocumento WITH(NOLOCK) 
	WHERE
		bem_id = @bem_id
		AND ((bit_id = @bit_id)OR(@bit_id is null))
		AND (@bid_tipoDoc IS NULL  OR bid_tipoDoc = @bid_tipoDoc)
	
			
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemDocumento_SelectBy_Numero]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Debora Cavaglieri
-- Create date: 14/05/2013
-- Description:	Busca o documento do bem buscando pelo numero
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_BemItemDocumento_SelectBy_Numero]
@bem_id bigint,
@bit_id int,
@bid_tipoDoc int,
@bid_numeroDoc varchar(50)

	
AS
BEGIN
	
	SELECT 
		bem_id
		,bit_id
		,bid_id
	FROM 
		BemItemDocumento WITH(NOLOCK) 
	WHERE
		bem_id = @bem_id
		AND bit_id = @bit_id
		AND bid_tipoDoc = @bid_tipoDoc
		AND bid_numeroDoc = @bid_numeroDoc
	
			
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[New_BemItemSelectMotivos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[New_BemItemSelectMotivos]
 @moc_id tinyint	= null
,@moc_nome varchar(100) = null
,@funcao varchar(1)

AS

-- Chave Key
if(@funcao = 'K')
begin

	
	select 
		*
	from 
		MotivoCancelamento mc with(nolock)
	where
		moc_id = @moc_id

end

--Combo
if(@funcao = 'C')
begin
	select 
		moc_id = -1
		,moc_nome = '-- Selecione um motivo --'

	union
	
	select 
		moc_id,moc_nome	
	from 
		MotivoCancelamento mc with(nolock)
	where
		mc.moc_situacao = 1
end

--All
if(@funcao = 'A')
begin
	
	select 

		 moc_id		
		,moc_nome		
		,moc_nomeAbr		
		,moc_descricao		
		,moc_situacao = case 
				
					when 
						moc_situacao = 1 
					then 
						'Ativo'
					when
						 moc_situacao = 3
					then
						'Excluido' 
					else 
						'Inativo' 
				end		
		
	from 
		MotivoCancelamento mc with(nolock)
	where
		moc_situacao <> 3

end


--by nome
if(@funcao = 'N')
begin
	
	select 
	
		 moc_id 
		,moc_nome
		,moc_nomeAbr
		,moc_descricao
		,moc_situacao = case 
				
					when 
						moc_situacao = 1 
					then 
						'Ativo'
					when
						 moc_situacao = 3
					then
						'Excluido' 
					else 
						'Inativo' 
				end
		,moc_dataCriacao         
		,moc_dataAlteracao
	from
		
		MotivoCancelamento mc with(nolock)
	where
		mc.moc_nome like '%' + @moc_nome +  '%'
end
		
GO
/****** Object:  StoredProcedure [dbo].[New_BemItemSelectMovimentos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[New_BemItemSelectMovimentos]
@bem_id BIGINT
,@bit_id BIGINT
,@funcao char

AS

/*
@funcao

d - Default qq movimento
e - Movimento de etiqueta wrk 1 ou 2
i - Incorporado e gerado NL siafem

*/


if(@funcao = 'd')
begin
	select 
		count(1)
	from 
		MovimentacaoBem mb with(nolock)
	where
		mb.bem_id = @bem_id
	and	mb.bit_id = @bit_id
	
end

if(@funcao = 'e')
begin
	update BemItemWorkflow set biw_situacao = 2 where bem_id =  @bem_id and  bit_id =  @bit_id  and  (wrk_id = 1 or wrk_id = 2)
	update BemItemWfStatus set bws_situacao = 2 where bem_id =  @bem_id and  bit_id =  @bit_id  and  (wrk_id = 1 or wrk_id = 2)
	
	select ISNULL(@@ROWCOUNT,-1)
end


if(@funcao = 'i')
begin
	select 
		count(1)
	from 
		MovimentacaoBem mb with(nolock)
	where
		mb.bem_id = @bem_id
	and	mb.bit_id = @bit_id
	and	mov_nl is not null
	
end		
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWfStatus_AtualizaSituacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Figueiredo
-- Create date: 01/09/2010
-- Description:	Stored procedure que permite alterar 
-- a situaçao de um status de workflow: 1 - Em andamento 2 - Concluído 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemWfStatus_AtualizaSituacao] 
	@bem_id int,
	@bit_id int,
	@biw_id int,
	@bws_id int
AS
BEGIN
    UPDATE 
		BemItemWfStatus
    SET
		bws_situacao = 2
		, bws_dataAlteracao = GETDATE()
	WHERE
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND biw_id = @biw_id 
		AND bws_id = @bws_id
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWfStatus_DELETE_BATCH]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Wellington Rossi
-- Create date: 04/11/2013
-- Description:	Exclusão em Lote
-- Alteração: cópia para Conpat 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemWfStatus_DELETE_BATCH]
    @DataTable dbo.BemItemWfStatusTableType READONLY 
AS
BEGIN 

    MERGE INTO dbo.BemItemWfStatus AS M
    USING @DataTable AS T 
	ON (M.bem_id = T.bem_id 
		AND M.bit_id = T.bit_id 
		AND M.biw_id = T.biw_id
		AND M.bws_id = T.bws_id) 
    WHEN MATCHED THEN DELETE;
	
	SELECT ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWfStatus_INSERT_BATCH]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Wellington Rossi
-- Create date: 01/11/2013
-- Description:	Insertção e Alteração em Lote
-- Alteração: cópia para Conpat 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemWfStatus_INSERT_BATCH]
    @DataTable dbo.BemItemWfStatusTableType READONLY 
AS
BEGIN 

    MERGE INTO dbo.BemItemWfStatus AS M
    USING @DataTable AS T 
	ON (M.bem_id = T.bem_id 
		AND M.bit_id = T.bit_id 
		AND M.biw_id = T.biw_id
		AND M.bws_id = T.bws_id) 
    WHEN MATCHED THEN 
		UPDATE SET 
				wrk_id = T.wrk_id 
				, stp_id = T.stp_id 
				, usu_id = T.usu_id 
				, bws_observacao = T.bws_observacao 
				, bws_situacao = T.bws_situacao 
				, bws_dataCriacao = T.bws_dataCriacao 
				, bws_dataAlteracao = T.bws_dataAlteracao 
    WHEN NOT MATCHED THEN 
		INSERT (bem_id 
				, bit_id 
				, biw_id 
				, wrk_id 
				, stp_id 
				, usu_id 
				, bws_observacao 
				, bws_situacao 
				, bws_dataCriacao 
				, bws_dataAlteracao 
				)
		VALUES (T.bem_id 
				, T.bit_id 
				, T.biw_id 
				, T.wrk_id 
				, T.stp_id 
				, T.usu_id 
				, T.bws_observacao 
				, T.bws_situacao 
				, T.bws_dataCriacao 
				, T.bws_dataAlteracao 
				);
	
	SELECT ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWfStatus_SelectBy_ID]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Lukas Figueiredo  
-- Create date: 01/09/2010  
-- Description: Stored procedure que retorna itens de bem patrimonial com etiquetas já solicitada, aguardando a impressão.  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_BemItemWfStatus_SelectBy_ID]   
 @biw_id int,  
 @bws_id int  
--WITH RECOMPILE  
AS  
BEGIN  
  
 SELECT   
  [bem_id]  
      ,[bit_id]  
      ,[biw_id]  
      ,[bws_id]  
      ,[wrk_id]  
      ,[stp_id]  
      ,[usu_id]  
      ,[bws_observacao]  
      ,[bws_situacao]  
      ,[bws_dataCriacao]  
      ,[bws_dataAlteracao]   
 FROM   
  BemItemWfStatus AS bws WITH(NoLock)  
 WHERE   
    bws.biw_id = @biw_id    
    and bws.bws_id = @bws_id  
    and bws.wrk_id = 1   
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWfStatus_SelectBy_StpId]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Pedro Gimenez  
-- Create date: 20/12/2011  
-- Description: Busca PatrimonioStatus informado, do último workflow criado para o bem/item   
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_BemItemWfStatus_SelectBy_StpId]  
 @bem_id int,  
 @bit_id int,  
 @stp_id int  
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT TOP 1  
  [bem_id]  
      ,[bit_id]  
      ,[biw_id]  
      ,[bws_id]  
      ,[wrk_id]  
      ,[stp_id]  
      ,[usu_id]  
      ,[bws_observacao]  
      ,[bws_situacao]  
      ,[bws_dataCriacao]  
      ,[bws_dataAlteracao]  
 FROM   
  BemItemWfStatus AS bws WITH(NoLock)  
   
 WHERE   
  (bws.bem_id = @bem_id or  @bem_id is null)      
  and (bws.bit_id = @bit_id or @bit_id is null)     
  and(bws.stp_id = @stp_id or @stp_id is null)     
  and bws.bws_situacao <> 3  
    
 ORDER BY bws.bws_dataCriacao DESC  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWfStatus_SelectBy_WorkID]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Lukas Figueiredo  
-- Create date: 03/09/2010  
-- Description: Stored procedure que verifica se já existe um status de workflow ativo para um determinado processo  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_BemItemWfStatus_SelectBy_WorkID]  
 @bem_id int,  
 @bit_id int,  
 @biw_id int,  
 @wrk_id int  
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT   
  [bem_id]  
      ,[bit_id]  
      ,[biw_id]  
      ,[bws_id]  
      ,[wrk_id]  
      ,[stp_id]  
      ,[usu_id]  
      ,[bws_observacao]  
      ,[bws_situacao]  
      ,[bws_dataCriacao]  
      ,[bws_dataAlteracao]  
 FROM   
  BemItemWfStatus AS bws WITH(NoLock)  
   
 WHERE   
  (bws.bem_id = @bem_id or  @bem_id is null)      
  and (bws.bit_id = @bit_id or @bit_id is null)     
  and(bws.biw_id = @biw_id or @biw_id is null)     
  and(bws.wrk_id = @wrk_id or @wrk_id is null)     
  and bws.bws_situacao = 1  
    
 ORDER BY bws.bws_id DESC  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWfStatus_SelectBy_WorkID_BATCH]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Wellington Rossi
-- Create date: 05/11/2013
-- Description:	Stored procedure que verifica se já existe um status de workflow ativo para um determinado processo
-- Alteração: cópia para Conpat 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemWfStatus_SelectBy_WorkID_BATCH]
    @DataTable dbo.BemItemWorkflowTableType READONLY 
AS
BEGIN 
WITH BIWF AS 
(
	SELECT
		biw.bem_id
        , biw.bit_id 
        , biw.biw_id
        , biw.wrk_id 
	FROM
		BemItemWorkflow as biw WITH(NOLOCK) 
    INNER JOIN @DataTable as dt 
		ON biw.bem_id = dt.bem_id
		AND biw.bit_id = dt.bit_id
        AND biw.wrk_id = dt.wrk_id
)
SELECT
	bws.[bem_id]
    ,bws.[bit_id]
    ,bws.[biw_id]
    ,bws.[bws_id]
    ,bws.[wrk_id]
    ,bws.[stp_id]
    ,bws.[usu_id]
    ,bws.[bws_observacao]
    ,bws.[bws_situacao]
    ,bws.[bws_dataCriacao]
    ,bws.[bws_dataAlteracao] 
FROM 
	BemItemWfStatus AS bws WITH(NoLock) 
INNER JOIN BIWF as bw 
	ON (bws.bem_id = bw.bem_id )       
	and(bws.bit_id = bw.bit_id )   
	and(bws.biw_id = bw.biw_id or 1=1)    
	and(bws.wrk_id = bw.wrk_id )    
	and bws.bws_situacao = 1 
ORDER BY bws.bws_id DESC
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWfStatus_SelectBy_wrk_id_stp_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Aline Dornelas
-- Create date: 08/10/2010
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemWfStatus_SelectBy_wrk_id_stp_id]
	@bem_id INT
	, @bit_id INT
	, @biw_id INT
	, @wrk_id INT
	, @stp_id INT
AS
BEGIN
	SELECT 
		[bem_id]
      ,[bit_id]
      ,[biw_id]
      ,[bws_id]
      ,[wrk_id]
      ,[stp_id]
      ,[usu_id]
      ,[bws_observacao]
      ,[bws_situacao]
      ,[bws_dataCriacao]
      ,[bws_dataAlteracao]
	FROM 
		BemItemWfStatus WITH(NOLOCK)
	WHERE 
		(bem_id = @bem_id)	   
		AND (bit_id = @bit_id)
		AND (biw_id = @biw_id)	  
		AND (wrk_id = @wrk_id)	
		AND (stp_id = @stp_id) 
		AND bws_situacao = 1
		
	SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWfStatus_SelectBy_wrk_id_stp_id_ALL]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Debora Cavaglieri
-- Create date: 23/07/2012
-- Description:	Carrega todos os passos já executados
--              Usado na exclusão do Bem
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemWfStatus_SelectBy_wrk_id_stp_id_ALL]
	@bem_id INT
	, @bit_id INT
	, @biw_id INT
	, @wrk_id INT
AS
BEGIN
	SELECT 
		[bem_id]
      ,[bit_id]
      ,[biw_id]
      ,[bws_id]
      ,[wrk_id]
      ,[stp_id]
      ,[usu_id]
      ,[bws_observacao]
      ,[bws_situacao]
      ,[bws_dataCriacao]
      ,[bws_dataAlteracao]
	FROM 
		BemItemWfStatus WITH(NOLOCK)
	WHERE 
		(bem_id = @bem_id)	   
		AND (bit_id = @bit_id)
		AND (biw_id = @biw_id)	  
		AND (wrk_id = @wrk_id)	
		
	SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWorkflow_BemItemBy_StatusPatrimonio]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItemWorkflow_BemItemBy_StatusPatrimonio] 
	@UNI_ID INT
	,@WRK_ID INT
	,@STP_ID INT
WITH RECOMPILE
AS
BEGIN
	if( @STP_ID = 14)
	begin
		IF ( EXISTS(SELECT uni_id FROM UnidadeGestora WITH(NOLOCK) WHERE uni_id = @UNI_ID AND uge_situacao = 1))
			BEGIN
		SELECT  top 300
			BWS.bem_id
			, BWS.bit_id
			, BWS.biw_id
			, BWS.bws_id
			, BWS.wrk_id
			, BWS.stp_id
			, ISNULL(BWS.bws_dataAlteracao, BWS.bws_dataCriacao) as bws_data
			--Task #2012 --
			, case when @WRK_ID > 2 then 'Guia: '  + ISNULL (MB.mov_GPB,'') + ' - ' + BP.bem_descricao + ISNULL (' - ' + CAST(BI.bit_registroPat as VARCHAR(500)),'') else + BP.bem_descricao + ISNULL (' - ' + CAST(BI.bit_registroPat as VARCHAR(500)),'') end as bem_descricao 
			, bws.bws_observacao			
			,ISNULL(
				 dbo.FN_GetUniNome(mb.mov_unidadeDestino) 
				 ,dbo.FN_GetUniNome(bi.bit_uniGuarda) )	
			 AS Origem			
			,ISNULL(
				 dbo.FN_GetUnidadeGestoraImediataNome(mb.mov_unidadeDestino) 
				 ,dbo.FN_GetUniNome(bi.bit_uniGestora) )	
			 AS Destino

			--CASE WHEN @WRK_ID = 1 OR @WRK_ID = 2
			--THEN
			--	(SELECT dbo.FN_GetUniNome(bi.bit_uniGestora))
			--ELSE
			--	 ISNULL(
			--	  dbo.FN_GetUniNome(mb.mov_unidadeDestino),
			--	  dbo.FN_GetUniNome(bi.bit_uniGuarda))				
			--END AS Destino				
			, mb.mov_data
			, BI.bit_uniGuarda
			, MB.mov_GPB
			, ISNULL (CAST(BI.bit_registroPat as VARCHAR(500)),'Sem Registro Patrimonial') as bit_registroPat
		FROM
			BemItemWorkflow BWF WITH(NOLOCK)
				INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)
					ON ((BWS.bem_id = BWF.bem_id) 
					AND (BWS.bit_id = BWF.bit_id) 
					AND (BWS.biw_id = BWF.biw_id))
				INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)
					ON ((BWS.wrk_id = PWS.wrk_id) 
					AND (BWS.stp_id = PWS.stp_id) 
					--AND (PWS.wfs_uniGestora = 1)
					)
				INNER JOIN BemItem BI WITH(NOLOCK)
					ON ((BWS.bem_id = BI.bem_id) AND (BWS.bit_id = BI.bit_id))
				INNER JOIN BemPatrimonial BP WITH(NOLOCK)
					ON (BWS.bem_id = BP.bem_id)	
				INNER JOIN dbo.MovimentacaoBem AS MB WITH(NOLOCK)
					ON BWF.bem_id = MB.bem_id 
					AND BWF.bit_id = MB.bit_id 
					AND (
							BWF.wrk_id = 3 AND MB.mov_situacao = 3 and BWS.stp_id = 14 
							and
							 mov_data = (select top 1 mb_data.mov_data from MovimentacaoBem as mb_data with(nolock) where mb_data.bem_id = BWF.bem_id and  mb_data.bit_id = BWF.bit_id and mb_data.mov_situacao= 3 order by mov_data desc, mov_dataCriacao desc)						
						 )		
		WHERE
			BI.bit_uniGestora = @UNI_ID
			AND BWF.wrk_id = @WRK_ID
			AND BWS.stp_id = @STP_ID		
			AND BWF.biw_situacao = 1
			AND BWS.bws_situacao = 1
			AND PWS.wfs_situacao = 1
			AND BI.bit_situacao = 1
			AND ((PWS.wfs_uniGestora = 1) 
				OR (BI.bit_uniGuarda = BI.bit_uniGestora AND PWS.wfs_uniGuarda = 1))
			AND BI.bit_status not in (3,5)
		ORDER BY
			MB.mov_GPB
			,BWS.bem_id 
			, BWS.bit_id
			, BI.bit_registroPat
	
		
		SELECT @@ROWCOUNT		
		END
		ELSE

		BEGIN
			SELECT  top 300
			BWS.bem_id
			, BWS.bit_id
			, BWS.biw_id
			, BWS.bws_id
			, BWS.wrk_id
			, BWS.stp_id
			, ISNULL(BWS.bws_dataAlteracao, BWS.bws_dataCriacao) as bws_data
			--Task #2012 --
			, case when @WRK_ID > 2 then 'Guia: '  + ISNULL (MB.mov_GPB,'') + ' - ' + BP.bem_descricao + ISNULL (' - ' + CAST(BI.bit_registroPat as VARCHAR(500)),'') else + BP.bem_descricao + ISNULL (' - ' + CAST(BI.bit_registroPat as VARCHAR(500)),'') end as bem_descricao 
			, bws.bws_observacao
			,ISNULL(
				 dbo.FN_GetUniNome(mb.mov_unidadeDestino) 
				 ,dbo.FN_GetUniNome(bi.bit_uniGuarda) )	
			 AS Origem			
			,ISNULL(
				 dbo.FN_GetUnidadeGestoraImediataNome(mb.mov_unidadeDestino) 
				 ,dbo.FN_GetUniNome(bi.bit_uniGestora) )	
			 AS Destino
			, mb.mov_data
			, bi.bit_uniGuarda
			, MB.mov_GPB
			, ISNULL (CAST(BI.bit_registroPat as VARCHAR(500)),'Sem Registro Patrimonial') as bit_registroPat
		FROM
			BemItemWorkflow BWF WITH(NOLOCK)
				INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)
					ON ((BWS.bem_id = BWF.bem_id) 
					AND (BWS.bit_id = BWF.bit_id) 
					AND (BWS.biw_id = BWF.biw_id))
				INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)
					ON ((BWS.wrk_id = PWS.wrk_id) 
					AND (BWS.stp_id = PWS.stp_id) 
					AND (PWS.wfs_uniGuarda = 1))
				INNER JOIN BemItem BI WITH(NOLOCK)
					ON ((BWS.bem_id = BI.bem_id) 
					AND (BWS.bit_id = BI.bit_id))
				INNER JOIN BemPatrimonial BP WITH(NOLOCK)
					ON (BWS.bem_id = BP.bem_id)		
				INNER JOIN dbo.MovimentacaoBem AS MB WITH(NOLOCK)
					ON BWF.bem_id = MB.bem_id AND BWF.bit_id = MB.bit_id 
					AND (
						   MB.mov_situacao = 3 AND BWF.wrk_id = 3 and BWS.stp_id = 14 
						  	and
							 mov_data = (select top 1 mb_data.mov_data from MovimentacaoBem as mb_data with(nolock) where mb_data.bem_id = BWF.bem_id and  mb_data.bit_id = BWF.bit_id and mb_data.mov_situacao= 3 order by mov_data desc, mov_dataCriacao desc)
						)	
		WHERE
			BI.bit_uniGuarda = @UNI_ID
			AND BWF.wrk_id = @WRK_ID
			AND BWS.stp_id = @STP_ID		
			AND BWF.biw_situacao = 1
			AND BWS.bws_situacao = 1
			AND PWS.wfs_situacao = 1
			AND BI.bit_situacao = 1
			AND BI.bit_status not in (3,5)
		ORDER BY
			MB.mov_GPB
			,BWS.bem_id 
			, BWS.bit_id 
			, BI.bit_registroPat
			
		
			SELECT @@ROWCOUNT		 
		END
	end
	else
			
	begin
		IF ( EXISTS(SELECT uni_id FROM UnidadeGestora WITH(NOLOCK) WHERE uni_id = @UNI_ID AND uge_situacao = 1))
		
			BEGIN
			print'aui'
				SELECT
			BWS.bem_id
			, BWS.bit_id
			, BWS.biw_id
			, BWS.bws_id
			, BWS.wrk_id
			, BWS.stp_id
			, BWS.bws_dataCriacao as bws_data
			--Task #2012 --
			, case when @WRK_ID > 2 then 'Guia: '  + ISNULL (MB.mov_GPB,'') + ' - ' + BP.bem_descricao + ISNULL (' - ' + CAST(BI.bit_registroPat as VARCHAR(500)),'') else + BP.bem_descricao + ISNULL (' - ' + CAST(BI.bit_registroPat as VARCHAR(500)),'') end as bem_descricao 
			, bws.bws_observacao
			, CASE WHEN @WRK_ID= 1 OR @WRK_ID = 2
			THEN  
				dbo.FN_GetUniNome(bi.bit_uniGuarda) 
			ELSE
				 ISNULL(
				 dbo.FN_GetUniNome(mb.mov_unidadeOrigem) 
				 ,dbo.FN_GetUniNome(bi.bit_uniGestora) )	
			END AS Origem,
			CASE WHEN @WRK_ID = 1 OR @WRK_ID = 2
			THEN
				(SELECT dbo.FN_GetUniNome(bi.bit_uniGestora))
			ELSE
				 ISNULL(
				  dbo.FN_GetUniNome(mb.mov_unidadeDestino),
				  dbo.FN_GetUniNome(bi.bit_uniGuarda))				
			END AS Destino				
			, mb.mov_data
			, BI.bit_uniGuarda
			, MB.mov_GPB
			, ISNULL (CAST(BI.bit_registroPat as VARCHAR(500)),'Sem Registro Patrimonial') as bit_registroPat
		FROM
			BemItemWorkflow BWF WITH(NOLOCK)
				INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)
					ON ((BWS.bem_id = BWF.bem_id) 
					AND (BWS.bit_id = BWF.bit_id) 
					AND (BWS.biw_id = BWF.biw_id))
				INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)
					ON ((BWS.wrk_id = PWS.wrk_id) 
					AND (BWS.stp_id = PWS.stp_id) 
					--AND (PWS.wfs_uniGestora = 1)
					)
				INNER JOIN BemItem BI WITH(NOLOCK)
					ON ((BWS.bem_id = BI.bem_id) AND (BWS.bit_id = BI.bit_id))
				INNER JOIN BemPatrimonial BP WITH(NOLOCK)
					ON (BWS.bem_id = BP.bem_id)	
				LEFT JOIN dbo.MovimentacaoBem AS MB WITH(NOLOCK)
					ON BWF.bem_id = MB.bem_id 
					AND BWF.bit_id = MB.bit_id 
					AND (
							(BWF.wrk_id = 3 AND MB.mov_situacao = 5) 
							OR( BWF.wrk_id = 4 
								AND MB.mov_situacao = 1 
								AND BI.bit_status = 4 
								AND MB.tpm_id IN (SELECT tpm_id FROM dbo.TipoMovimentacao WITH(NOLOCK)
													WHERE tpm_operacao = 8)
								)
						 )		
		WHERE
			BI.bit_uniGestora = @UNI_ID
			AND BWF.wrk_id = @WRK_ID
			AND BWS.stp_id = @STP_ID		
			AND BWF.biw_situacao = 1
			AND BWS.bws_situacao = 1
			AND PWS.wfs_situacao = 1
			AND BI.bit_situacao = 1
			AND ((PWS.wfs_uniGestora = 1) 
				OR (BI.bit_uniGuarda = BI.bit_uniGestora AND PWS.wfs_uniGuarda = 1))
			AND BI.bit_status not in (3,5)
		ORDER BY
			bi.bit_uniGuarda
			,BWS.bws_dataCriacao
			, BWS.bem_id 
			, BWS.bit_id
			, BI.bit_registroPat 
		
		SELECT @@ROWCOUNT		
	END
		ELSE

			BEGIN
				SELECT 
			BWS.bem_id
			, BWS.bit_id
			, BWS.biw_id
			, BWS.bws_id
			, BWS.wrk_id
			, BWS.stp_id
			, BWS.bws_dataCriacao as bws_data
			--Task #2012 --
			, case when @WRK_ID > 2 then 'Guia: '  + ISNULL (MB.mov_GPB,'') + ' - ' + BP.bem_descricao + ISNULL (' - ' + CAST(BI.bit_registroPat as VARCHAR(500)),'') else + BP.bem_descricao + ISNULL (' - ' + CAST(BI.bit_registroPat as VARCHAR(500)),'') end as bem_descricao 
			, bws.bws_observacao
			, CASE WHEN @WRK_ID= 1 OR @WRK_ID = 2
			THEN  
				(SELECT dbo.FN_GetUniNome(bi.bit_uniGuarda)) 
			ELSE
				 dbo.FN_GetUniNome(mb.mov_unidadeOrigem)
				
			END AS Origem
			,CASE WHEN @WRK_ID = 1 OR @WRK_ID = 2
			THEN
				(SELECT dbo.FN_GetUniNome(bi.bit_uniGestora) )
			ELSE
				(
				ISNULL(
				dbo.FN_GetUniNome(bi.bit_uniGuarda),
				dbo.FN_GetUniNome(mb.mov_unidadeDestino) ) 
				)
			END AS Destino
			, mb.mov_data
			, bi.bit_uniGuarda
			, MB.mov_GPB
			, ISNULL (CAST(BI.bit_registroPat as VARCHAR(500)),'Sem Registro Patrimonial') as bit_registroPat
		FROM
			BemItemWorkflow BWF WITH(NOLOCK)
				INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)
					ON ((BWS.bem_id = BWF.bem_id) 
					AND (BWS.bit_id = BWF.bit_id) 
					AND (BWS.biw_id = BWF.biw_id))
				INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)
					ON ((BWS.wrk_id = PWS.wrk_id) 
					AND (BWS.stp_id = PWS.stp_id) 
					AND (PWS.wfs_uniGuarda = 1))
				INNER JOIN BemItem BI WITH(NOLOCK)
					ON ((BWS.bem_id = BI.bem_id) 
					AND (BWS.bit_id = BI.bit_id))
				INNER JOIN BemPatrimonial BP WITH(NOLOCK)
					ON (BWS.bem_id = BP.bem_id)		
				LEFT JOIN dbo.MovimentacaoBem AS MB WITH(NOLOCK)
					ON BWF.bem_id = MB.bem_id AND BWF.bit_id = MB.bit_id 
					AND (
						  (MB.mov_situacao = 5 AND BWF.wrk_id = 3) 
						  OR( BWF.wrk_id = 4 
							  AND MB.mov_situacao = 1 
							  AND BI.bit_status = 4 
							  AND MB.tpm_id IN (
												SELECT tpm_id FROM dbo.TipoMovimentacao  WITH(NOLOCK)
												WHERE tpm_operacao = 8
												)
							)
						)	
		WHERE
			BI.bit_uniGuarda = @UNI_ID
			AND BWF.wrk_id = @WRK_ID
			AND BWS.stp_id = @STP_ID		
			AND BWF.biw_situacao = 1
			AND BWS.bws_situacao = 1
			AND PWS.wfs_situacao = 1
			AND BI.bit_situacao = 1
			-- Teste bit_status <> 3 inativo
			AND BI.bit_status not in (3,5)
		ORDER BY
			BWS.bem_id 
			, BWS.bit_id 
			, BI.bit_registroPat
		
		SELECT @@ROWCOUNT		 
	END
	end
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWorkflow_BemItemBy_StatusPatrimonio_V2]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- ===========================================================================================  
-- Author:  rafael sanchez  
-- Create date: 25/04/2018  
-- Description: Stored procedure que permite alterar a situação de bens independente da unidade Id   
-- a situaçao de um status de workflow: 1 - Em andamento 2 - Concluído   
-- ===========================================================================================  
  
  
CREATE PROCEDURE [dbo].[NEW_BemItemWorkflow_BemItemBy_StatusPatrimonio_V2]   
  
WITH RECOMPILE  
AS  
BEGIN  
  
  
 DECLARE @usu_id UNIQUEIDENTIFIER = '07860125-8D8F-E111-95F8-B8AC6FB2D553';  
 DECLARE @UNI_ID INT -- REMOVER EM PROD  
  
 DECLARE   @bem_id int  
   , @bit_id int  
   , @biw_id int  
   , @bws_id int  
   , @wrk_id int  
   , @stp_id Int  
   , @bws_situacao TinyInt  
   , @dadosAtu varchar(500)  
   , @dadosInsert varchar(500)  
   , @bws_dataCriacao DateTime  
   , @bws_dataAlteracao DateTime  
   , @DtAtual DateTime = getdate()  
  
 SET @bws_situacao = 2;  
 SET @WRK_ID = 1;  
 SET  @STP_ID = 6;  
 SET @UNI_ID = 42; -- ATENCAO- AJUSTE AQUI PARA CASO DESEJE RODAR PARA UMA UNIDADE  
 --*****************************************************************************  
  
 If exists (select 1 from tempdb..sysobjects where name = '##Temp_BensPatimonio_')          
 drop table ##Temp_BensPatimonio_    
  
 -- *****************************************************************************  
 SELECT   
    BWS.bem_id  
    , BWS.bit_id  
    , BWS.biw_id  
    , BWS.bws_id  
    , BWS.wrk_id  
    , BWS.stp_id  
    , BWS.bws_dataCriacao  
    , BWS.bws_dataAlteracao  
   
   into ##Temp_BensPatimonio_   
    
   FROM  
    BemItemWorkflow BWF WITH(NOLOCK)  
     INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)  
      ON ((BWS.bem_id = BWF.bem_id)   
      AND (BWS.bit_id = BWF.bit_id)   
      AND (BWS.biw_id = BWF.biw_id))  
     INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)  
      ON ((BWS.wrk_id = PWS.wrk_id)   
      AND (BWS.stp_id = PWS.stp_id)   
      --AND (PWS.wfs_uniGestora = 1)  
      )  
     INNER JOIN BemItem BI WITH(NOLOCK)  
      ON ((BWS.bem_id = BI.bem_id) AND (BWS.bit_id = BI.bit_id))  
     INNER JOIN BemPatrimonial BP WITH(NOLOCK)  
      ON (BWS.bem_id = BP.bem_id)   
     LEFT JOIN dbo.MovimentacaoBem AS MB WITH(NOLOCK)  
      ON BWF.bem_id = MB.bem_id   
      AND BWF.bit_id = MB.bit_id   
      AND (  
        (BWF.wrk_id = 3 AND MB.mov_situacao = 5)   
        OR( BWF.wrk_id = 4   
         AND MB.mov_situacao = 1   
         AND BI.bit_status = 4   
         AND MB.tpm_id IN (SELECT tpm_id FROM dbo.TipoMovimentacao WITH(NOLOCK)  
              WHERE tpm_operacao = 8)  
         )  
        )    
   WHERE  
   -- BI.bit_uniGuarda = @UNI_ID AND -- COMENTAR EM PROD - OU UTILIZE PARA UMA UNIDADE !  
    BWF.wrk_id = @WRK_ID  
    AND BWS.stp_id = @STP_ID    
    AND BWF.biw_situacao = 1  
    AND BWS.bws_situacao = 1  
    AND PWS.wfs_situacao = 1  
    AND BI.bit_situacao = 1  
    AND ((PWS.wfs_uniGestora = 1)   
     OR (BI.bit_uniGuarda = BI.bit_uniGestora AND PWS.wfs_uniGuarda = 1))  
    AND BI.bit_status not in (3,5)  
   ORDER BY  
     bi.bit_uniGuarda  
    ,BWS.bws_dataCriacao  
    , BWS.bem_id   
    , BWS.bit_id  
    , BI.bit_registroPat   
  
  
 -- ******************************************************************************************  
  
   -- Cursor para percorrer os nomes dos objetos   
   DECLARE cursor_objects CURSOR FOR  
    SELECT  
       bem_id , bit_id , biw_id , bws_id, wrk_id, stp_id,  bws_dataCriacao, bws_dataAlteracao  
    FROM  
       ##Temp_BensPatimonio_  
     
   -- Abrindo Cursor para leitura  
   OPEN cursor_objects  
  
   -- Lendo a próxima linha  
   FETCH NEXT FROM cursor_objects INTO  @bem_id, @bit_id, @biw_id, @bws_id, @wrk_id, @stp_id,   
    @bws_dataCriacao , @bws_dataAlteracao  
  
   -- Percorrendo linhas do cursor (enquanto houverem)  
   WHILE @@FETCH_STATUS = 0  
   BEGIN  
  
   set @bws_dataCriacao = CONVERT(varchar, @bws_dataCriacao, 120); -- yy/mm/dd hh:mm:ss  
   set @DtAtual =  CONVERT( varchar, getdate(), 120);  
     
   EXEC NEW_BemItemWfStatus_AtualizaSituacao @bem_id, @bit_id , @biw_id ,  @bws_id ;  
  
  -- EXEC STP_BemItemWfStatus_INSERT @bem_id , @bit_id , @biw_id , @WRK_ID ,  7 , @usu_id, 'ajustes globais de patrimonio' , @bws_situacao ,  
  -- @bws_dataCriacao , @DtAtual ;  
  
  INSERT INTO   
   BemItemWfStatus  
   (   
    bem_id   
    , bit_id   
    , biw_id      
    , wrk_id   
    , stp_id   
    , usu_id   
    , bws_situacao   
    , bws_dataCriacao   
    , bws_dataAlteracao   
    , bws_observacao  
    )  
  VALUES  
   (   
    @bem_id   
    , @bit_id   
    , @biw_id      
    , @wrk_id   
    , 7   
    , @usu_id   
    , @bws_situacao   
    , @bws_dataCriacao   
    , @DtAtual   
    , 'ajustes globais de patrimonio'  
   
   )  
    -- Lendo a próxima linha  
    FETCH NEXT FROM cursor_objects INTO  @bem_id, @bit_id, @biw_id, @bws_id, @wrk_id, @stp_id   
             , @bws_dataCriacao , @bws_dataAlteracao  
   END  
  
   -- Fechando Cursor para leitura  
   CLOSE cursor_objects  
  
   -- Desalocando o cursor  
   DEALLOCATE cursor_objects   
  
  
 -- ******************************************************************************************  
 -- retorno  
  select 101;  
  
END -- fim procedure  
  
  
--************************************************************************************************************************  
-- QUERIES ABAIXO PARA FACILITAR DEBUG  
  
-- SELECT * FROM  ##Temp_BensPatimonio_;  
/*  
  UPDATE   
  BemItemWfStatus  
    SET  
  bws_situacao = 2  
  , bws_dataAlteracao = GETDATE()  
 WHERE  
  bem_id = 1426578  
  AND bit_id = 5000950  
  AND biw_id =9627708  
  AND bws_id =24865677;  
  
SELECT * FROM BemItemWfStatus WHERE bem_id = 1426578 ORDER BY BWS_DATAALTERACAO DESC;  
  
EXEC NEW_BemItemWfStatus_AtualizaSituacao 1426578 ,  5000950 , 9627708 ,24865677 ;  
  
 -- SELECT @dadosAtu =  @bem_id + ',' + @bit_id + ',' + @biw_id + ',' +  @bws_id ;  
  
 -- SELECT @dadosInsert =  @bem_id + ',' + @bit_id + ',' + @biw_id + ',' + @WRK_ID + ',' +  @stp_id + ',' +   
      
  CONVERT(varchar(50), @usu_id) + ',' + NULL + ',' + @bws_situacao + ',' + @bws_dataCriacao  + ',' + GETDATE() ;  
  
SELECT * FROM  ##Temp_BensPatimonio_;  
SELECT top 30 * FROM BemItemWfStatus ORDER BY BWS_DATAALTERACAO DESC ;  
select count(*) totais from BemItemWfStatus;   
  
select count(*) from  BemItemWfStatus where bem_id=1426578;  
SELECT * FROM  ##Temp_BensPatimonio_;  
select * from  BemItemWfStatus where bem_id=1426578 and stp_id=7;  
-- 28116093  
  
  
 select top 3 * from   
      BemItemWfStatus with(nolock)  
    where   
      1 = 1   
      and bem_id = 1426578  
      and bit_id= 5000950   
      and biw_id = 9627708   
      and wrk_id = 1   
      and stp_id = 6  
      and bws_situacao = 2  
  
  
INSERT INTO   
   BemItemWfStatus  
   (   
    bem_id   
    , bit_id   
    , biw_id      
    , wrk_id   
    , stp_id   
    , usu_id   
    , bws_situacao   
    , bws_dataCriacao   
    , bws_dataAlteracao   
    )  
  VALUES  
   (   
    1426578  
    , 5000950  
    ,9627708     
    , 1   
    , 7   
    , '07860125-8D8F-E111-95F8-B8AC6FB2D553'  
    ,2   
    , '2018/04/24'  
    , '2018/04/24'  
   
   )  
  
  
*/  
  
  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWorkflow_DELETE_BATCH]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Wellington Rossi
-- Create date: 04/11/2013
-- Description:	Exclusão em Lote
-- Alteração: cópia para Conpat 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemWorkflow_DELETE_BATCH]
    @DataTable dbo.BemItemWorkflowTableType READONLY 
AS
BEGIN 
    MERGE INTO dbo.BemItemWorkflow AS M
    USING @DataTable AS T 
	ON (M.bem_id = T.bem_id 
		AND M.bit_id = T.bit_id 
		AND M.biw_id = T.biw_id) 
    WHEN MATCHED THEN DELETE;
	
	SELECT ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWorkflow_INSERT_BATCH]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Wellington Rossi
-- Create date: 01/11/2013
-- Description:	Insertção e Alteração em Lote
-- Alteração: cópia para Conpat 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemWorkflow_INSERT_BATCH]
    @DataTable dbo.BemItemWorkflowTableType READONLY 
AS
BEGIN 

	DECLARE @BemItemWorkflow TABLE(
		bem_id				bigint,
		bit_id				int,
		biw_id				int,--Chave auto-incremento
		wrk_id				int,
		biw_situacao		tinyint,
		biw_dataCriacao		datetime,
		biw_dataAlteracao	datetime,
		ctrl_Id				int
	);

    MERGE INTO dbo.BemItemWorkflow AS M
    USING @DataTable AS T 
	ON (M.bem_id = T.bem_id 
		AND M.bit_id = T.bit_id 
		AND M.biw_id = T.biw_id) 
    WHEN MATCHED THEN 
		UPDATE SET 
			wrk_id = T.wrk_id 
			, biw_situacao = T.biw_situacao 
			, biw_dataCriacao = T.biw_dataCriacao 
			, biw_dataAlteracao = T.biw_dataAlteracao 
    WHEN NOT MATCHED THEN 
		INSERT (bem_id 
				, bit_id 
				, wrk_id 
				, biw_situacao 
				, biw_dataCriacao 
				, biw_dataAlteracao 
				)
		VALUES (T.bem_id 
				, T.bit_id 
				, T.wrk_id 
				, T.biw_situacao 
				, T.biw_dataCriacao 
				, T.biw_dataAlteracao 
				)
	OUTPUT Inserted.bem_id
			, Inserted.bit_id
			, Inserted.biw_id
			, Inserted.wrk_id
			, Inserted.biw_situacao
			, Inserted.biw_dataCriacao
			, Inserted.biw_dataAlteracao 
			, T.ctrl_Id
	INTO @BemItemWorkflow;	
	
	SELECT * FROM @BemItemWorkflow
	--SELECT ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWorkflow_Qtde_PatrimonioWorkFlow]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItemWorkflow_Qtde_PatrimonioWorkFlow] 
@UNI_ID INT

AS
BEGIN

IF ( EXISTS(SELECT uni_id FROM UnidadeGestora WITH(NOLOCK) WHERE uni_id = @UNI_ID AND uge_situacao = 1))
BEGIN
	SELECT
		PWF.wrk_id
		, wrk_nome
		, COUNT(bws_id) AS qtde
	FROM
		BemItem BI WITH(NOLOCK)
			
			INNER JOIN BemItemWorkflow BWF WITH(NOLOCK)
				ON ((BWF.bem_id = BI.bem_id) 
				AND (BWF.bit_id = BI.bit_id))
			INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)
				ON ((BWS.bem_id = BWF.bem_id) 
				AND (BWS.bit_id = BWF.bit_id) 
				AND (BWS.biw_id = BWF.biw_id)
				AND (BWS.wrk_id = BWF.wrk_id)
				)
				
			INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)
				ON ((BWS.wrk_id = PWS.wrk_id) 
				AND (BWS.stp_id = PWS.stp_id) )
			INNER JOIN PatrimonioWorkflow PWF WITH(NOLOCK)
				ON (BWS.wrk_id = PWF.wrk_id)
				
				
			LEFT JOIN dbo.MovimentacaoBem AS MB WITH(NOLOCK)
					ON BWF.bem_id = MB.bem_id 
					AND BWF.bit_id = MB.bit_id 
					AND (
							(BWF.wrk_id = 3 AND MB.mov_situacao = 5) 
							OR( BWF.wrk_id = 4 
								AND MB.mov_situacao = 1 
								AND BI.bit_status = 4 
								AND MB.tpm_id IN (SELECT tpm_id FROM dbo.TipoMovimentacao WITH(NOLOCK)
													WHERE tpm_operacao = 8)
								)
						 )
			
	WHERE
		BI.bit_uniGestora = @UNI_ID
		AND BWF.biw_situacao = 1
		AND BWS.bws_situacao = 1
		AND PWS.wfs_situacao = 1
		AND PWF.wrk_situacao = 1
		AND BI.bit_situacao = 1
		AND ((PWS.wfs_uniGestora = 1) 
			OR (BI.bit_uniGuarda = BI.bit_uniGestora AND PWS.wfs_uniGuarda = 1))
		AND BI.bit_status not in(3,5)
	GROUP BY PWF.wrk_id, wrk_nome
	ORDER BY PWF.wrk_id
END
ELSE
BEGIN
	SELECT
		PWF.wrk_id
		, wrk_nome
		, COUNT(bws_id)  AS qtde
		
	FROM
		BemItemWorkflow BWF WITH(NOLOCK)
			INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)
				ON ((BWS.bem_id = BWF.bem_id) 
				AND (BWS.bit_id = BWF.bit_id) 
				AND (BWS.biw_id = BWF.biw_id)
				AND (BWS.wrk_id = BWF.wrk_id)
				)
			INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)
				ON ((BWS.wrk_id = PWS.wrk_id) 
				AND (BWS.stp_id = PWS.stp_id) 
				AND (PWS.wfs_uniGuarda = 1))
			INNER JOIN PatrimonioWorkflow PWF WITH(NOLOCK)
				ON (BWS.wrk_id = PWF.wrk_id)
			INNER JOIN BemItem BI WITH(NOLOCK)
				ON ((BWF.bem_id = BI.bem_id) 
				   AND (BWF.bit_id = BI.bit_id))
	WHERE
		BI.bit_uniGuarda = @UNI_ID
		AND BWF.biw_situacao = 1
		AND BWS.bws_situacao = 1
		AND PWS.wfs_situacao = 1
		AND PWF.wrk_situacao = 1
		AND BI.bit_situacao = 1
		AND BI.bit_status not in(3,5)
	GROUP BY PWF.wrk_id, wrk_nome
END

END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWorkflow_Qtde_StatusPatrimonio]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItemWorkflow_Qtde_StatusPatrimonio]
	@UNI_ID INT
	,@WRK_ID INT
AS
BEGIN

IF ( EXISTS(SELECT uni_id FROM UnidadeGestora WITH(NOLOCK) WHERE uni_id = @UNI_ID AND uge_situacao = 1))
BEGIN
	SELECT
	SP.stp_id
	, SP.stp_nome
	, COUNT(bws_id) as qtde
	FROM
		BemItemWorkflow BWF WITH(NOLOCK)
			INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)
				ON ((BWS.bem_id = BWF.bem_id) 
				AND (BWS.bit_id = BWF.bit_id) 
				AND (BWS.biw_id = BWF.biw_id)
				AND (BWS.wrk_id = BWF.wrk_id))
			INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)
				ON ((BWS.wrk_id = PWS.wrk_id) AND (BWS.stp_id = PWS.stp_id)
				--AND (PWS.wfs_uniGestora = 1)
				)
			INNER JOIN StatusPatrimonio SP WITH(NOLOCK)
				ON (BWS.stp_id = SP.stp_id)
			INNER JOIN BemItem BI WITH(NOLOCK)
				ON ((BWS.bem_id = BI.bem_id) AND (BWS.bit_id = BI.bit_id))
				
			LEFT JOIN dbo.MovimentacaoBem AS MB WITH(NOLOCK)
					ON BWF.bem_id = MB.bem_id
					AND BWF.bit_id = MB.bit_id
					AND (
							(BWF.wrk_id = 3 AND MB.mov_situacao = 5)
							OR( BWF.wrk_id = 4 
								AND MB.mov_situacao = 1 
								AND BI.bit_status = 4 
								AND MB.tpm_id IN (SELECT tpm_id FROM dbo.TipoMovimentacao WITH(NOLOCK)
													WHERE tpm_operacao = 8)
								)
						 )
	WHERE
		BI.bit_uniGestora = @UNI_ID
		AND BWF.wrk_id = @WRK_ID
		AND BWF.biw_situacao = 1
		AND BWS.bws_situacao = 1
		AND PWS.wfs_situacao = 1
		AND SP.stp_situacao = 1
		AND BI.bit_situacao = 1
		AND ((PWS.wfs_uniGestora = 1) 
			OR (BI.bit_uniGuarda = BI.bit_uniGestora AND PWS.wfs_uniGuarda = 1))

		AND BI.bit_status NOT IN (3,5)
			
	GROUP BY SP.stp_id, SP.stp_nome
	ORDER BY SP.stp_id
END
ELSE
BEGIN
	SELECT
	SP.stp_id
	, SP.stp_nome
	, COUNT(bws_id) as qtde
	FROM
		BemItemWorkflow BWF WITH(NOLOCK)
			INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)
				ON ((BWS.bem_id = BWF.bem_id)
				AND (BWS.bit_id = BWF.bit_id)
				AND (BWS.biw_id = BWF.biw_id)
				AND (BWS.wrk_id = BWF.wrk_id))
			INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)
				ON ((BWS.wrk_id = PWS.wrk_id) AND (BWS.stp_id = PWS.stp_id)
				AND (PWS.wfs_uniGuarda = 1))
			INNER JOIN StatusPatrimonio SP WITH(NOLOCK)
				ON (BWS.stp_id = SP.stp_id)
			INNER JOIN BemItem BI WITH(NOLOCK)
				ON ((BWS.bem_id = BI.bem_id) AND (BWS.bit_id = BI.bit_id))
	WHERE
		BI.bit_uniGuarda = @UNI_ID
		AND BWF.wrk_id = @WRK_ID
		AND BWF.biw_situacao = 1
		AND BWS.bws_situacao = 1
		AND PWS.wfs_situacao = 1
		AND SP.stp_situacao = 1
		AND BI.bit_situacao = 1
		AND BI.bit_status NOT IN (3,5)
	GROUP BY SP.stp_id, SP.stp_nome
	ORDER BY SP.stp_id
END
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWorkflow_SelecionaBemItem_WorkFlow_Aberto]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		Luana Piva
-- Create date: 22/01/2014
-- Description:	Retorna uma tabela bem itens com workflow incompleto
-- ==========================================================================
CREATE PROCEDURE [dbo].[NEW_BemItemWorkflow_SelecionaBemItem_WorkFlow_Aberto]
	@bem_id int,
	@bit_id varchar(MAX),
	@wrk_ids VARCHAR(max)
AS
BEGIN

	DECLARE @tabWRK_ID TABLE (wrk_id INTEGER)
	INSERT INTO @tabWRK_ID (wrk_id)
		(SELECT valor FROM dbo.FN_StringToArrayInt32(@wrk_ids, ';'))
		
	DECLARE @tabBIT_ID TABLE (bit_id INTEGER)
	INSERT INTO @tabBIT_ID (bit_id)
		(SELECT valor FROM dbo.FN_StringToArrayInt32(@bit_id, ';'))	
	
	SELECT
		biw.bem_id
		, biw.bit_id  
		, biw.biw_id
		, bws_id
		, biw.wrk_id
		 
	FROM 
		BemItemWorkflow  AS biw WITH(NOLOCK)
	LEFT JOIN  dbo.BemItemWfStatus AS bws WITH(NOLOCK)
		ON biw.bem_id = bws.bem_id
		AND biw.bit_id = bws.bit_id 
		AND biw.biw_id = bws.biw_id
	WHERE
		biw.bem_id = @bem_id 		
		AND EXISTS (SELECT bit_id FROM @tabBIT_ID AS tabBIT
					WHERE 
						tabBIT.bit_id = biw.bit_id
						OR tabBIT.bit_id = bws.bit_id)
		AND EXISTS (SELECT wrk_id FROM @tabWRK_ID AS tab
					WHERE 
						tab.wrk_id = biw.wrk_id
						OR tab.wrk_id = bws.wrk_id)
		AND 
		(biw.biw_situacao = 1 OR bws.bws_situacao = 1) -- somente WF abertos
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWorkflow_SelecionaWorkFlows_Abertos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemItemWorkflow_SelecionaWorkFlows_Abertos] 
	@bem_id int,
	@bit_id int,
	@wrk_ids VARCHAR(max)
AS
BEGIN

	DECLARE @tabWRK_ID TABLE (wrk_id INTEGER)
	INSERT INTO @tabWRK_ID (wrk_id)
		(SELECT valor FROM dbo.FN_StringToArrayInt32(@wrk_ids, ';'))
	
	SELECT
		biw.bem_id
		, biw.bit_id  
		, biw.biw_id
		, bws_id
		, biw.wrk_id
		 
	FROM 
		BemItemWorkflow  AS biw WITH(NOLOCK)
	LEFT JOIN  dbo.BemItemWfStatus AS bws WITH(NOLOCK)
		ON biw.bem_id = bws.bem_id AND biw.bit_id = bws.bit_id AND biw.biw_id = bws.biw_id
	WHERE
		biw.bem_id = @bem_id 
		AND biw.bit_id = @bit_id
		AND EXISTS (SELECT wrk_id FROM @tabWRK_ID AS tab
					WHERE 
						tab.wrk_id = biw.wrk_id
						OR tab.wrk_id = bws.wrk_id)
		AND
		-- Comentado na Task #3051 
		--(biw.biw_situacao = 1 OR bws.bws_situacao = 1) -- somente WF abertos
		(bws.bws_situacao = 1) -- somente WF abertos
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWorkflow_SelectBy_BemId]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Fabio A  
-- Create date: 03/09/2010  
-- Description: Stored procedure que retorna o item pelo @bem_id e pelo @bit_id  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_BemItemWorkflow_SelectBy_BemId]  
 @bem_id int,  
 @bit_id int,  
 @wrk_id int  
--WITH RECOMPILE  
AS  
BEGIN  
 select   
  [bem_id]  
      ,[bit_id]  
      ,[biw_id]  
      ,[wrk_id]  
      ,[biw_situacao]  
      ,[biw_dataCriacao]  
      ,[biw_dataAlteracao]   
 from   
  BemItemWorkflow as biw with(nolock)   
 where   
  biw.bem_id = @bem_id   
   and biw.bit_id = @bit_id  
   and biw.biw_situacao=1  
   and biw.wrk_id=@wrk_id   
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemItemWorkflow_SelectBy_WorkID]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Figueiredo
-- Create date: 03/09/2010
-- Description:	Stored procedure que verifica se já existe um workflow de determinado processo
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemItemWorkflow_SelectBy_WorkID]
	@bem_id int,
	@bit_id int,
	@wrk_id int
AS
BEGIN
	SELECT
		bem_id
		, bit_id  
		, biw_id
		, wrk_id
	FROM 
		BemItemWorkflow WITH(NOLOCK)
	WHERE
		bem_id = @bem_id 
		AND bit_id = @bit_id
		AND wrk_id = @wrk_id
		--AND biw_situacao = 1
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonailLegado_Update]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==========================================================================
-- Author:		Luana Piva
-- Create date: 10/07/2014
-- Description:	Update no campo Log
-- ===========================================================================

CREATE PROCEDURE [dbo].[NEW_BemPatrimonailLegado_Update]
	
	 @bpl_id INT
	, @bpl_log VARCHAR(MAX)

AS
BEGIN
	UPDATE BemPatrimonialLegado 
	SET 
	
	    bpl_log = @bpl_log 

	WHERE 
		bpl_id = @bpl_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_MontaRelatorioBensCadastradosRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================
-- Author:		Pedro Gimenez
-- Create date: 28/11/2011
-- Description:	monta relatório de bens do legado cadatrados
--				no GEMAT
-- =========================================================
create PROCEDURE [dbo].[NEW_BemPatrimonial_MontaRelatorioBensCadastradosRS]
	@uniges_id int,
	@uniguarda_id int,
	@grp_id int,
	@data_importacao date,
	@data_entrada date
AS
BEGIN
	SELECT 
		  bem.bpl_id,
		  uniGes.uni_id,
		  --bi.bit_registroPat,
		  bem.bpl_material,
		  dbo.FN_GetUniNome(uniGes.uni_id) as uniGestora,		  
		  dbo.FN_GetUniNome(uniGua.uni_id) as uniGuarda,
		  uniGes.uni_codigoUGE + REPLICATE('X',6 - LEN(uniGes.uni_codigoUGE)) as ugeCodigo,	
		  grp.grp_nome,	
		  bem.bpl_valorUnitario	  		  
		
	FROM dbo.BemPatrimonialLegado AS bem WITH(NoLock)
		 INNER JOIN dbo.Unidade AS uniGua with(nolock)
			ON uniGua.uni_id = bem.bpl_unidade
		 INNER JOIN dbo.Unidade AS uniGes with(nolock)
			ON (uniGes.uni_id = (SELECT TOP 1 uni_idgestora
								FROM [dbo].[FN_GetUnidadesSuperiores] (uniGua.uni_id)																			
								)			
			   ) OR uniGes.uni_id = uniGua.uni_id
		 INNER JOIN GrupoBens AS grp with(nolock)
			ON grp.grp_id = (
								SELECT  grp_id TOP1
								FROM GrupoBens grp1
								WHERE UPPER(dbo.FN_RemoverAcentuacao(grp1.grp_nome)) = UPPER(dbo.FN_RemoverAcentuacao(bem.bpl_grupoBem))
							)	 	   
	     
	WHERE
		((@uniges_id = 0) OR (uniGes.uni_id = @uniges_id))
		AND ((@uniguarda_id = 0) OR (uniGua.uni_id = @uniguarda_id))
		AND ((@grp_id = 0) OR(grp.grp_id = @grp_id) OR (grp.grp_idPai = @grp_id))		
		AND (@data_importacao IS NULL OR CONVERT(DATE, bem.bpl_dataImportacao,103) = @data_importacao) 
		AND (@data_entrada IS NULL OR CONVERT(DATE, bem.bpl_dataTransferencia,103)  = @data_entrada)		
		AND uniGes.uni_situacao <> 3		
		AND bem.bpl_situacao = 3 -- 3 = Cadastrado no GEMAT
	ORDER BY uniGestora				 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_MontaRelatorioBensCadastradosSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================
-- Author:		Pedro Gimenez
-- Create date: 28/11/2011
-- Description:	monta relatório de bens do legado cadatrados
--				no GEMAT
-- =========================================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_MontaRelatorioBensCadastradosSP]
	@uniges_id int,
	@uniguarda_id int,
	@grp_id int,
	@data_importacao date,
	@data_entrada date
AS
BEGIN
	SELECT 
		  bem.bpl_id,
		  uniGes.uni_id,
		  --bi.bit_registroPat,
		  bem.bpl_material,
		  dbo.FN_GetUniNome(uniGes.uni_id) as uniGestora,		  
		  dbo.FN_GetUniNome(uniGua.uni_id) as uniGuarda,
		  uniGes.uni_codigoUGE + REPLICATE('X',6 - LEN(uniGes.uni_codigoUGE)) as ugeCodigo,	
		  grp.grp_nome,	
		  bem.bpl_valorUnitario	  		  
		
	FROM dbo.BemPatrimonialLegado AS bem WITH(NoLock)
		 INNER JOIN dbo.Unidade AS uniGua with(nolock)
			ON uniGua.uni_id = bem.bpl_unidade
		 INNER JOIN dbo.Unidade AS uniGes with(nolock)
			ON (uniGes.uni_id = (SELECT TOP 1 uni_idgestora
								FROM [dbo].[FN_GetUnidadesSuperiores] (uniGua.uni_id)																			
								)			
			   ) OR uniGes.uni_id = uniGua.uni_id
		 INNER JOIN GrupoBens AS grp with(nolock)
			ON grp.grp_id = (
								SELECT  grp_id TOP1
								FROM GrupoBens grp1
								WHERE UPPER(dbo.FN_RemoverAcentuacao(grp1.grp_nome)) = UPPER(dbo.FN_RemoverAcentuacao(bem.bpl_grupoBem))
							)	 	   
	     
	WHERE
		((@uniges_id = 0) OR (uniGes.uni_id = @uniges_id))
		AND ((@uniguarda_id = 0) OR (uniGua.uni_id = @uniguarda_id))
		AND ((@grp_id = 0) OR(grp.grp_id = @grp_id) OR (grp.grp_idPai = @grp_id))		
		AND (@data_importacao IS NULL OR CONVERT(DATE, bem.bpl_dataImportacao,103) = @data_importacao) 
		AND (@data_entrada IS NULL OR CONVERT(DATE, bem.bpl_dataTransferencia,103)  = @data_entrada)		
		AND uniGes.uni_situacao <> 3		
		AND bem.bpl_situacao = 3 -- 3 = Cadastrado no GEMAT
	ORDER BY uniGestora				 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_MontaRelatorioBensFurtadosRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =========================================================
-- Author:		Pedro Gimenez
-- Create date: 30/04/2012
-- Description:	monta relatório de bens do legado importados
--              mas não cadastrados no GEMAT
-- =========================================================
create PROCEDURE [dbo].[NEW_BemPatrimonial_MontaRelatorioBensFurtadosRS]
	@uniges_id INT,
	@uniguarda_id INT,
	@data_inicial DATE,
	@data_final DATE,
	@grp_id INT,
	@tde_id INT,
	@mov_nl BIGINT,
	@descricao VARCHAR(100)
AS
BEGIN

		SELECT 
			dbo.FN_GetUniNome(BI.bit_uniGuarda)  AS uniGuarda,		  
			dbo.FN_GetUniNome(BI.bit_uniGestora) AS uniGestora,				  			
			BP.bem_descricao,			
			MB.mov_valor as bit_valorLiquido, --BI.bit_valorLiquido,
			DE.dep_nome,
			GB.grp_nome,
			BP.bem_dataEntrada,
			(CASE when MB.mov_nl IS NULL THEN  NULL ELSE MB.mov_dataAlteracao END) AS mov_dataAlteracao ,
			MB.mov_nl
		FROM 
			BemItem AS BI WITH(NoLock)
			INNER JOIN BemPatrimonial BP with(NoLock)
				ON BP.bem_id= BI.bem_id
			INNER JOIN GrupoBens AS GB with(NoLock)
				ON GB.grp_id = BP.grp_id
			INNER JOIN MovimentacaoBem AS MB WITH(NoLock)
				ON (MB.bem_id = BI.bem_id
				AND MB.bit_id= BI.bit_id)
				AND MB.mov_situacao not in (3,4)
			INNER JOIN TipoMovimentacao AS TM WITH(NoLock)
				ON TM.tpm_id = MB.tpm_id 
			LEFT JOIN Dependencia AS DE WITH(NoLock)
				ON BI.dep_id = DE.dep_id
				AND DE.loc_id IN (SELECT loc_id from Localidade where uni_id = BI.bit_uniGuarda)
		WHERE
			(@uniguarda_id = 0         OR BI.bit_uniGuarda = @uniguarda_id) 
			AND (@uniges_id = 0        OR BI.bit_uniGestora = @uniges_id)
			AND ((@descricao IS NULL)  OR (UPPER(BP.bem_descricao) LIKE '%' + UPPER(@descricao) + '%'))			
			AND (@grp_id  = 0          OR GB.grp_id = @grp_id) 
			AND (@data_inicial IS NULL OR CONVERT(DATE, MB.mov_data,103) >= @data_inicial) 
			AND (@data_final IS NULL   OR CONVERT(DATE, MB.mov_data,103) <= @data_final)	
			AND (@tde_id  = 0          OR DE.tde_id = @tde_id)				
			AND (@mov_nl  = 0          OR MB.mov_nl = @mov_nl)
			AND (TM.tpm_descricao = 'BAIXA POR FURTO NO ESTOQUE' OR TM.tpm_descricao = 'BAIXA POR FURTO NO IMOBILIZADO')
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_MontaRelatorioBensFurtadosSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =========================================================
-- Author:		Pedro Gimenez
-- Create date: 30/04/2012
-- Description:	monta relatório de bens do legado importados
--              mas não cadastrados no GEMAT
-- =========================================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_MontaRelatorioBensFurtadosSP]
	@uniges_id INT,
	@uniguarda_id INT,
	@data_inicial DATE,
	@data_final DATE,
	@grp_id INT,
	@tde_id INT,
	@mov_nl BIGINT,
	@descricao VARCHAR(100)
AS
BEGIN

		SELECT 
			dbo.FN_GetUniNome(BI.bit_uniGuarda)  AS uniGuarda,		  
			dbo.FN_GetUniNome(BI.bit_uniGestora) AS uniGestora,				  			
			BP.bem_descricao,			
			MB.mov_valor as bit_valorLiquido, --BI.bit_valorLiquido,
			DE.dep_nome,
			GB.grp_nome,
			BP.bem_dataEntrada,
			(CASE when MB.mov_nl IS NULL THEN  NULL ELSE MB.mov_dataAlteracao END) AS mov_dataAlteracao ,
			MB.mov_nl
		FROM 
			BemItem AS BI WITH(NoLock)
			INNER JOIN BemPatrimonial BP with(NoLock)
				ON BP.bem_id= BI.bem_id
			INNER JOIN GrupoBens AS GB with(NoLock)
				ON GB.grp_id = BP.grp_id
			INNER JOIN MovimentacaoBem AS MB WITH(NoLock)
				ON (MB.bem_id = BI.bem_id
				AND MB.bit_id= BI.bit_id)
				AND MB.mov_situacao not in (3,4)
			INNER JOIN TipoMovimentacao AS TM WITH(NoLock)
				ON TM.tpm_id = MB.tpm_id 
			LEFT JOIN Dependencia AS DE WITH(NoLock)
				ON BI.dep_id = DE.dep_id
				AND DE.loc_id IN (SELECT loc_id from Localidade where uni_id = BI.bit_uniGuarda)
		WHERE
			(@uniguarda_id = 0         OR BI.bit_uniGuarda = @uniguarda_id) 
			AND (@uniges_id = 0        OR BI.bit_uniGestora = @uniges_id)
			AND ((@descricao IS NULL)  OR (UPPER(BP.bem_descricao) LIKE '%' + UPPER(@descricao) + '%' 
													COLLATE Latin1_General_CI_AI)) --ignora acentuacao				
			AND (@grp_id  = 0          OR GB.grp_id = @grp_id) 
			AND (@data_inicial IS NULL OR CONVERT(DATE, MB.mov_data,103) >= @data_inicial) 
			AND (@data_final IS NULL   OR CONVERT(DATE, MB.mov_data,103) <= @data_final)	
			AND (@tde_id  = 0          OR DE.tde_id = @tde_id)				
			AND (@mov_nl  = 0          OR MB.mov_nl = @mov_nl)
			AND (TM.tpm_descricao = 'BAIXA POR FURTO NO ESTOQUE' OR TM.tpm_descricao = 'BAIXA POR FURTO NO IMOBILIZADO')
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_MontaRelatorioBensImportadosRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================
-- Author:		Pedro Gimenez
-- Create date: 28/11/2011
-- Description:	monta relatório de bens do legado importados
--              mas não cadastrados no GEMAT
-- =========================================================
create PROCEDURE [dbo].[NEW_BemPatrimonial_MontaRelatorioBensImportadosRS]
	@uniges_id INT,
	@uniguarda_id INT,
	@data_importacao DATE
AS
BEGIN

	SELECT 
		  bem.bpl_id,
		  uniGes.uni_id,
		  --bi.bit_registroPat,
		  bem.bpl_material,
		  dbo.FN_GetUniNome(uniGes.uni_id) as uniGestora,		  
		  dbo.FN_GetUniNome(uniGua.uni_id) as uniGuarda,
		  uniGes.uni_codigoUGE + REPLICATE('X',6 - LEN(uniGes.uni_codigoUGE)) as ugeCodigo,	
		  grp.grp_nome,	
		  bem.bpl_dataImportacao,
		  bem.bpl_valorUnitario	  		  
		
	FROM dbo.BemPatrimonialLegado AS bem WITH(NoLock)
		 INNER JOIN dbo.Unidade AS uniGua with(nolock)
			ON uniGua.uni_id = bem.bpl_unidade
		 INNER JOIN dbo.Unidade AS uniGes with(nolock)
			ON uniGes.uni_id = (SELECT TOP 1 uni_idgestora
								FROM [dbo].[FN_GetUnidadesSuperiores] (uniGua.uni_id)																		
								)
		 INNER JOIN GrupoBens AS grp with(nolock)
			ON grp.grp_id = (
								SELECT  grp_id TOP1
								FROM GrupoBens grp1
								WHERE UPPER(dbo.FN_RemoverAcentuacao(grp1.grp_nome)) = UPPER(dbo.FN_RemoverAcentuacao(bem.bpl_grupoBem))
							)	 	   

	WHERE
		((@uniges_id = 0) OR (uniGes.uni_id = @uniges_id))
		AND ((@uniguarda_id = 0) OR (uniGua.uni_id = @uniguarda_id))
		AND (@data_importacao IS NULL OR CONVERT(DATE, bem.bpl_dataImportacao,103) = @data_importacao)
		AND uniGes.uni_situacao <> 3
		AND bem.bpl_situacao <> 3 -- 3 = Cadastrado no GEMAT
	ORDER BY uniGestora				 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_MontaRelatorioBensImportadosSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================
-- Author:		Pedro Gimenez
-- Create date: 28/11/2011
-- Description:	monta relatório de bens do legado importados
--              mas não cadastrados no GEMAT
-- =========================================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_MontaRelatorioBensImportadosSP]
	@uniges_id INT,
	@uniguarda_id INT,
	@data_importacao DATE
AS
BEGIN

	SELECT 
		  bem.bpl_id,
		  uniGes.uni_id,
		  --bi.bit_registroPat,
		  bem.bpl_material,
		  dbo.FN_GetUniNome(uniGes.uni_id) as uniGestora,		  
		  dbo.FN_GetUniNome(uniGua.uni_id) as uniGuarda,
		  uniGes.uni_codigoUGE + REPLICATE('X',6 - LEN(uniGes.uni_codigoUGE)) as ugeCodigo,	
		  grp.grp_nome,	
		  bem.bpl_dataImportacao,
		  bem.bpl_valorUnitario	  		  
		
	FROM dbo.BemPatrimonialLegado AS bem WITH(NoLock)
		 INNER JOIN dbo.Unidade AS uniGua with(nolock)
			ON uniGua.uni_id = bem.bpl_unidade
		 INNER JOIN dbo.Unidade AS uniGes with(nolock)
			ON uniGes.uni_id = (SELECT TOP 1 uni_idgestora
								FROM [dbo].[FN_GetUnidadesSuperiores] (uniGua.uni_id)																		
								)
		 INNER JOIN GrupoBens AS grp with(nolock)
			ON grp.grp_id = (
								SELECT  grp_id TOP1
								FROM GrupoBens grp1
								WHERE UPPER(dbo.FN_RemoverAcentuacao(grp1.grp_nome)) = UPPER(dbo.FN_RemoverAcentuacao(bem.bpl_grupoBem))
							)	 	   

	WHERE
		((@uniges_id = 0) OR (uniGes.uni_id = @uniges_id))
		AND ((@uniguarda_id = 0) OR (uniGua.uni_id = @uniguarda_id))
		AND (@data_importacao IS NULL OR CONVERT(DATE, bem.bpl_dataImportacao,103) = @data_importacao)
		AND uniGes.uni_situacao <> 3
		AND bem.bpl_situacao <> 3 -- 3 = Cadastrado no GEMAT
	ORDER BY uniGestora				 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_MontaRelatorioIdadeBensRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pedro Gimenez
-- Create date: 28/11/2011
-- Description:	monta relatório de idade de bens
-- =============================================
create PROCEDURE [dbo].[NEW_BemPatrimonial_MontaRelatorioIdadeBensRS]
	@uniges_id int,
	@uniguarda_id int,
	@data_inicial date,
	@data_final date,
	@grp_id int,
	@descricao varchar(100),
	@registropat varchar(20)
AS
BEGIN

	WITH

	tbUnidades AS (
	
		SELECT uni_id, uad_id
		FROM
			dbo.FN_GetUnidadeEFilhas(@uniges_id)		
		WHERE 
			uni_situacao <> 3
	)
	
	SELECT 
		  bem.bem_id,
		  bi.bit_id,
		  bi.bit_uniGestora,
		  bem.bem_descricao,
		  dbo.FN_GetUniNome(bi.bit_uniGestora) as uniGestora,		  
		  dbo.FN_GetUniNome(bi.bit_uniGuarda) as uniGuarda,
		  uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo,		
		  grp.grp_nome,		  
		  bi.bit_registroPat,
		  bem.bem_dataEntrada,
		  bi.bit_valorOrigem,
		  FLOOR(DATEDIFF(MONTH,bem.bem_dataEntrada,GETDATE())/12) AS AnoIdade,	  	  
		  DATEDIFF(MONTH,bem.bem_dataEntrada,GETDATE()) AS MesIdade			
		  		
	FROM BemPatrimonial AS bem WITH(NoLock)
	     INNER JOIN BemItem AS bi with(nolock)
			ON bem.bem_id = bi.bem_id
		INNER JOIN tbUnidades AS unGua	
			ON unGua.uni_id = bi.bit_uniGuarda
		INNER JOIN dbo.VW_UnidadeAdministrativa AS uadGua WITH(NoLock)
			ON unGua.uad_id = uadGua.uad_id	
		INNER JOIN GrupoBens AS grp with(nolock)
			ON bem.grp_id = grp.grp_id				     
	WHERE
		((@uniges_id = 0) OR (bi.bit_uniGestora = @uniges_id))
		AND ((@uniguarda_id = 0) OR (bi.bit_uniGuarda = @uniguarda_id))
		AND ((@registropat IS NULL) OR (bi.bit_registroPat = @registropat))
		AND (@data_inicial IS NULL OR CONVERT(DATE, bem.bem_dataEntrada,103) >= @data_inicial) 
		AND (@data_final IS NULL OR CONVERT(DATE, bem.bem_dataEntrada,103) <= @data_final)
		AND ((@grp_id <= 0) OR (grp.grp_id = @grp_id))
		AND ((@descricao IS NULL) OR (UPPER(bem.bem_descricao) LIKE '%' + UPPER(@descricao) + '%'))
		--AND bem.bem_legado = 1 --bem do legado
	ORDER BY uniGestora		 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_MontaRelatorioIdadeBensSp]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pedro Gimenez
-- Create date: 28/11/2011
-- Description:	monta relatório de idade de bens
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_MontaRelatorioIdadeBensSp]
	@uniges_id int,
	@uniguarda_id int,
	@data_inicial date,
	@data_final date,
	@grp_id int,
	@descricao varchar(100),
	@registropat varchar(20)
AS
BEGIN

	WITH

	tbUnidades AS (
	
		SELECT uni_id, uad_id
		FROM
			dbo.FN_GetUnidadeEFilhas(@uniges_id)		
		WHERE 
			uni_situacao <> 3
	)
	
	SELECT 
		  bem.bem_id,
		  bi.bit_id,
		  bi.bit_uniGestora,
		  bem.bem_descricao,
		  dbo.FN_GetUniNome(bi.bit_uniGestora) as uniGestora,		  
		  dbo.FN_GetUniNome(bi.bit_uniGuarda) as uniGuarda,
		  uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo,		
		  grp.grp_nome,		  
		  bi.bit_registroPat,
		  bem.bem_dataEntrada,
		  bi.bit_valorOrigem,
		  FLOOR(DATEDIFF(MONTH,bem.bem_dataEntrada,GETDATE())/12) AS AnoIdade,	  	  
		  DATEDIFF(MONTH,bem.bem_dataEntrada,GETDATE()) AS MesIdade			
		  		
	FROM BemPatrimonial AS bem WITH(NoLock)
	     INNER JOIN BemItem AS bi with(nolock)
			ON bem.bem_id = bi.bem_id
		INNER JOIN tbUnidades AS unGua	
			ON unGua.uni_id = bi.bit_uniGuarda
		INNER JOIN dbo.VW_UnidadeAdministrativa AS uadGua WITH(NoLock)
			ON unGua.uad_id = uadGua.uad_id	
		INNER JOIN GrupoBens AS grp with(nolock)
			ON bem.grp_id = grp.grp_id				     
	WHERE
		((@uniges_id = 0) OR (bi.bit_uniGestora = @uniges_id))
		AND ((@uniguarda_id = 0) OR (bi.bit_uniGuarda = @uniguarda_id))
		AND ((@registropat IS NULL) OR (bi.bit_registroPat = @registropat))
		AND (@data_inicial IS NULL OR CONVERT(DATE, bem.bem_dataEntrada,103) >= @data_inicial) 
		AND (@data_final IS NULL OR CONVERT(DATE, bem.bem_dataEntrada,103) <= @data_final)
		AND ((@grp_id <= 0) OR (grp.grp_id = @grp_id))
		AND ((@descricao IS NULL) OR (UPPER(bem.bem_descricao) LIKE '%' + UPPER(@descricao) + '%'
												COLLATE Latin1_General_CI_AI)) --ignora acentuacao
		--AND bem.bem_legado = 1 --bem do legado
	ORDER BY uniGestora		 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_Select_Cancelado]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[NEW_BemPatrimonial_Select_Cancelado]

 @valor as varchar(50)
,@valor2 as varchar(50) = null
,@funcao as varchar(20)

as

if (@funcao = 'bem_id')
	begin
		select 
			count(1)
		from 
			BemItem		bi with(nolock) 
		where	
			bi.bem_id	=  CONVERT(bigint, @valor)
		and	bi.bit_id	=  CONVERT(bigint, @valor2)
		and	bi.bit_status	= 5
	
	end
else
	begin
		select 
			count(1)
		from 
			BemItem		bi with(nolock) 
		where	
			bi.bit_registroPat	= @valor
		and	bi.bit_status		= 5
	end	


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_SelectBy_All]
	@uni_id INT,
	@bem_id BIGINT,
	@bem_descricao VARCHAR(1000),
	@bem_dataEntrada DATE = null,
	@bem_dataCriacao VARCHAR(10),
	@bit_uniGestora INT,
	@bit_uniGuarda INT,
	@bit_registroPat VARCHAR(20),
	@grp_id INT,
	@aps_apolice VARCHAR(50),
	@ent_razaoSocial VARCHAR(200),
	@bit_registroPatAnterior VARCHAR(200),
	@bit_nroSerie VARCHAR(30),
	@bit_marca VARCHAR(30),
	@bit_modelo VARCHAR(30),
	@bit_tipo VARCHAR(30),
	@bit_placa VARCHAR(10),
	@bit_chassi VARCHAR(50),
	@bit_anoFabricacao VARCHAR(4)
	
	,@bem_dataCriacaoFim VARCHAR(10) = null
	,@bid_tipoDoc int = null
	,@bid_numeroDoc VARCHAR(50)= null
	,@bit_status int= null


WITH RECOMPILE
AS
BEGIN

--Acertando as datas, a aplicação esta mandando a data como string

if(@bem_dataCriacao is not null)
begin
	set @bem_dataCriacao = convert(date,CONVERT(date, @bem_dataCriacao, 103))
end

if(@bem_dataCriacaoFim is not null)
begin
	set @bem_dataCriacaoFim = convert(date,CONVERT(date, @bem_dataCriacaoFim, 103))
end


if(@bit_registroPat is null)

	begin

		SELECT
			BEM.bem_id
			, bem_descricao
			, CASE bem_tipo
				WHEN 1 THEN 'Individual'
				WHEN 2 THEN 'Lote'
			  END AS bem_tipo
			, CONVERT(VARCHAR,bem_dataCriacao,103) AS bem_dataCriacao
			, grp_nome
			, bem_origem
		FROM
			BemPatrimonial AS BEM WITH (NOLOCK)
		INNER JOIN GrupoBens AS GRP WITH (NOLOCK)
			ON BEM.grp_id = GRP.grp_id
		INNER JOIN BemItem AS BET WITH (NOLOCK)
			ON BEM.bem_id = BET.bem_id
		LEFT JOIN ApoliceSeguro AS APS WITH (NOLOCK)
			ON BET.aps_id = APS.aps_id
		LEFT JOIN Seguradora AS SEG WITH (NOLOCK)
			ON APS.seg_id = SEG.seg_id
		LEFT JOIN VW_SeguradoraEntidade as ENT WITH (NOLOCK)
			ON SEG.ent_id = ENT.ent_id
		left join BemItemDocumento as doc WITH (NOLOCK)
			on  BET.bem_id = doc.bem_id
			and BET.bit_id = doc.bit_id
		WHERE
			((@bem_id IS NULL) OR (BEM.bem_id = @bem_id))
			AND ((@bem_descricao IS NULL) OR (bem_descricao LIKE '%' + @bem_descricao + '%' COLLATE  LATIN1_GENERAL_CI_AI))
			AND ((@bem_dataEntrada IS NULL) OR (bem_dataEntrada = @bem_dataEntrada))

			AND ((@bem_dataCriacao		IS NULL) OR (bem_dataCriacao >= @bem_dataCriacao ))
			AND ((@bem_dataCriacaofim	IS NULL) OR (bem_dataCriacao <= @bem_dataCriacaofim ))

			AND ((@bit_uniGestora IS NULL) OR (bit_uniGestora = @bit_uniGestora))
			AND ((@bit_uniGuarda IS NULL) OR (bit_uniGuarda = @bit_uniGuarda))
			AND ((@bit_registroPat IS NULL) OR (bit_registroPat = @bit_registroPat))
			AND ((@grp_id IS NULL) OR (GRP.grp_id = @grp_id))
			AND ((@aps_apolice IS NULL) OR (aps_apolice LIKE '%' + @aps_apolice + '%'))
			AND ((@ent_razaoSocial IS NULL) OR (ent_razaoSocial LIKE '%' + @ent_razaoSocial + '%'))
			AND ((@bit_registroPatAnterior IS NULL) OR (bit_registroPatAnterior LIKE '%' + @bit_registroPatAnterior + '%'))
			AND (@bit_nroSerie IS NULL OR BET.bit_nroSerie = @bit_nroSerie)
			AND (@bit_marca IS NULL OR BET.bit_marca = @bit_marca)
			AND (@bit_modelo IS NULL OR BET.bit_modelo = @bit_modelo)
			AND (@bit_tipo IS NULL OR BET.bit_tipo = @bit_tipo)
			AND (@bit_placa IS NULL OR BET.bit_placa = @bit_placa)
			AND (@bit_chassi IS NULL OR BET.bit_chassi = @bit_chassi)
			AND (@bit_anoFabricacao IS NULL OR BET.bit_anoFabricacao = @bit_anoFabricacao)
			
			AND (@bid_tipoDoc IS NULL OR doc.bid_tipoDoc = @bid_tipoDoc)
			AND (@bid_numeroDoc IS NULL OR doc.bid_numeroDoc = @bid_numeroDoc)
			AND (@bit_status IS NULL OR BET.bit_status = @bit_status)
			AND (BET.bit_status <> 5)
			
		GROUP BY 
			BEM.bem_id, bem_descricao, bem_tipo, bem_dataCriacao, grp_nome, bem_origem
		ORDER BY 
			BEM.bem_id DESC
		SELECT @@ROWCOUNT	
	end
else --if(@bit_registroPat is null)
	begin
		SELECT
			BEM.bem_id
			, bem_descricao
			, CASE bem_tipo
				WHEN 1 THEN 'Individual'
				WHEN 2 THEN 'Lote'
			  END AS bem_tipo
			, CONVERT(VARCHAR,bem_dataCriacao,103) AS bem_dataCriacao
			, grp_nome
			, bem_origem
		FROM
				BemPatrimonial AS BEM WITH (NOLOCK)
			INNER JOIN GrupoBens AS GRP WITH (NOLOCK)
				ON BEM.grp_id = GRP.grp_id
			INNER JOIN BemItem AS BET WITH (NOLOCK)
				ON BEM.bem_id = BET.bem_id
			LEFT JOIN ApoliceSeguro AS APS WITH (NOLOCK)
				ON BET.aps_id = APS.aps_id
			LEFT JOIN Seguradora AS SEG WITH (NOLOCK)
				ON APS.seg_id = SEG.seg_id
			LEFT JOIN VW_SeguradoraEntidade as ENT WITH (NOLOCK)
				ON SEG.ent_id = ENT.ent_id
			left join BemItemDocumento as doc WITH (NOLOCK)
				on  BET.bem_id = doc.bem_id
				and BET.bit_id = doc.bit_id
		WHERE
			((@bem_id IS NULL) OR (BEM.bem_id = @bem_id))
			AND ((@bem_descricao IS NULL) OR (bem_descricao LIKE '%' + @bem_descricao + '%'))
			AND ((@bem_dataEntrada IS NULL) OR (bem_dataEntrada = @bem_dataEntrada))
			
			AND ((@bem_dataCriacao		IS NULL) OR (bem_dataCriacao >= @bem_dataCriacao ))
			AND ((@bem_dataCriacaofim	IS NULL) OR (bem_dataCriacao <= @bem_dataCriacaofim ))
					
			AND ((@bit_uniGestora IS NULL) OR (bit_uniGestora = @bit_uniGestora))
			AND ((@bit_uniGuarda IS NULL) OR (bit_uniGuarda = @bit_uniGuarda))
			AND ((@bit_registroPat IS NULL) OR (bit_registroPat = @bit_registroPat))
			AND ((@grp_id IS NULL) OR (GRP.grp_id = @grp_id))
			AND ((@aps_apolice IS NULL) OR (aps_apolice LIKE '%' + @aps_apolice + '%'))
			AND ((@ent_razaoSocial IS NULL) OR (ent_razaoSocial LIKE '%' + @ent_razaoSocial + '%'))
			AND ((@bit_registroPatAnterior IS NULL) OR (bit_registroPatAnterior LIKE '%' + @bit_registroPatAnterior + '%'))
			AND (@bit_nroSerie IS NULL OR BET.bit_nroSerie = @bit_nroSerie)
			AND (@bit_marca IS NULL OR BET.bit_marca = @bit_marca)
			AND (@bit_modelo IS NULL OR BET.bit_modelo = @bit_modelo)
			AND (@bit_tipo IS NULL OR BET.bit_tipo = @bit_tipo)
			AND (@bit_placa IS NULL OR BET.bit_placa = @bit_placa)
			AND (@bit_chassi IS NULL OR BET.bit_chassi = @bit_chassi)
			AND (@bit_anoFabricacao IS NULL OR BET.bit_anoFabricacao = @bit_anoFabricacao)
			AND (@bid_tipoDoc IS NULL OR doc.bid_tipoDoc = @bid_tipoDoc)
			AND (@bid_numeroDoc IS NULL OR doc.bid_numeroDoc = @bid_numeroDoc)
			-- Ver se vai retirar filtro de status
			AND (@bit_status IS NULL OR BET.bit_status = @bit_status)
		GROUP BY 
			BEM.bem_id, bem_descricao, bem_tipo, bem_dataCriacao, grp_nome, bem_origem
		ORDER BY 
			BEM.bem_id DESC

	SELECT @@ROWCOUNT	
	
	end
end	
	
	





GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_SelectBy_ContratoGrupo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [dbo].[NEW_BemPatrimonial_SelectBy_ContratoGrupo]
	@opcao INT,
	@uni_id INT,
	@bem_id BIGINT,
	@bem_descricao VARCHAR(100),
	@bem_processo VARCHAR(50),
	@bem_ne VARCHAR(11),
	@grp_id INT,
	@grp_cadmat VARCHAR(40),
	@bit_gpb VARCHAR(20),
	@bem_doctoCompra VARCHAR(20)
AS
BEGIN
	-- Sem incorporação e sem registro patrimonial
	IF @opcao = 0
	BEGIN
		WITH cteDocumento AS
		(
			SELECT 
				bem_id ,
				bit_id ,
				bid_id ,
				bid_tipoDoc ,
				bid_numeroDoc
			FROM dbo.BemItemDocumento AS bid WITH (NOLOCK)
			WHERE	
				bid_tipoDoc = 1 -- Processo
				OR bid_tipoDoc = 3 -- Documento de compra
		)
		, cteDados AS (
			SELECT DISTINCT 
				BP1.bem_id
				, BP1.bem_descricao
				, BP1.grp_id
				, GB1.grp_descricao
				, BP1.bem_cadmat 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 1 
						AND (@bem_processo IS NULL OR doc.bid_numeroDoc = @bem_processo)) AS bem_processo 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 3 
						AND (@bem_doctoCompra IS NULL OR doc.bid_numeroDoc = @bem_doctoCompra)) AS bem_doctoCompra
			FROM 
				BemPatrimonial BP1 WITH(NoLock)
			INNER JOIN
				GrupoBens GB1 WITH(NoLock)
				ON GB1.grp_id = BP1.grp_id
			INNER JOIN
				BemItem BI1 WITH(NoLock)
				ON BI1.bem_id = BP1.bem_id
				AND (BI1.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
				AND (BI1.bit_uniGuarda = @uni_id OR @uni_id IS NULL)
				AND (BI1.bit_registroPat = '' OR BI1.bit_registroPat IS NULL)
			WHERE
				BI1.bit_situacao = 1
				AND BI1.bit_status <> 3 and BI1.bit_status <> 5
				AND (BP1.bem_id = @bem_id OR @bem_id IS NULL)
				AND (BP1.bem_descricao LIKE '%' + @bem_descricao + '%' OR @bem_descricao IS NULL)
				--AND (BP1.bem_descricao NOT LIKE '%INATIVO%')
				AND (BP1.grp_id = @grp_id OR @grp_id IS NULL)
				AND (BP1.bem_ne = @bem_ne OR @bem_ne IS NULL)	
				AND (BP1.bem_cadmat = @grp_cadmat OR @grp_cadmat IS NULL)
				AND NOT EXISTS (SELECT 
									mv.mov_data 
								FROM 
									MovimentacaoBem mv
								INNER JOIN TipoMovimentacao TP 
									ON mv.tpm_id = TP.tpm_id
									AND TP.tpm_operacao = 1							
								WHERE mv.bem_id = BP1.bem_id 
									AND MV.bit_id = BI1.bit_id 
									AND mv.mov_situacao <> 3)
		)
		SELECT bem_id ,
				bem_descricao ,
				grp_id ,
				grp_descricao ,
				bem_cadmat ,
				bem_processo ,
				bem_doctoCompra
		FROM cteDados
		WHERE
			(@bem_processo IS NULL OR bem_processo = @bem_processo)
			AND (@bem_doctoCompra IS NULL OR bem_doctoCompra = @bem_doctoCompra)
		ORDER BY
			bem_descricao

		SELECT @@ROWCOUNT
	END

	-- Sem incorporação e sem registro patrimonial, mas com recebimento
	IF @opcao = 5
	BEGIN
		WITH cteDocumento AS
		(
			SELECT 
				bem_id ,
				bit_id ,
				bid_id ,
				bid_tipoDoc ,
				bid_numeroDoc
			FROM dbo.BemItemDocumento AS bid WITH (NOLOCK)
			WHERE	
				bid_tipoDoc = 1 -- Processo
				OR bid_tipoDoc = 3 -- Documento de compra
		)
		, cteDados AS (
			SELECT DISTINCT 
				BP1.bem_id
				, BP1.bem_descricao
				, BP1.grp_id
				, GB1.grp_descricao
				, BP1.bem_cadmat 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 1 
						AND (@bem_processo IS NULL OR doc.bid_numeroDoc = @bem_processo)) AS bem_processo 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 3 
						AND (@bem_doctoCompra IS NULL OR doc.bid_numeroDoc = @bem_doctoCompra)) AS bem_doctoCompra
			FROM 
				BemPatrimonial BP1 WITH(NoLock)
			INNER JOIN
				GrupoBens GB1 WITH(NoLock)
				ON GB1.grp_id = BP1.grp_id
			INNER JOIN
				BemItem BI1 WITH(NoLock)
				ON BI1.bem_id = BP1.bem_id
				AND (BI1.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
				AND (BI1.bit_uniGuarda = @uni_id OR @uni_id IS NULL)
				AND (BI1.bit_registroPat = '' OR BI1.bit_registroPat IS NULL)
			WHERE
					BI1.bit_situacao = 1
				AND BI1.bit_status <> 3 and BI1.bit_status <> 5
				AND (BP1.bem_id = @bem_id OR @bem_id IS NULL)
				AND (BP1.bem_descricao LIKE '%' + @bem_descricao + '%' OR @bem_descricao IS NULL)
				--AND (BP1.bem_descricao NOT LIKE '%INATIVO%')
				AND (BP1.grp_id = @grp_id OR @grp_id IS NULL)
				AND (BP1.bem_ne = @bem_ne OR @bem_ne IS NULL)	
				AND (BP1.bem_cadmat = @grp_cadmat OR @grp_cadmat IS NULL)
				AND NOT EXISTS (SELECT 
									mv.mov_data 
								FROM 
									MovimentacaoBem mv
								INNER JOIN TipoMovimentacao TP 
									ON mv.tpm_id = TP.tpm_id
									AND TP.tpm_operacao = 1						
								WHERE mv.bem_id = BP1.bem_id 
									AND MV.bit_id = BI1.bit_id 
									AND mv.mov_situacao <> 3)
				AND (SELECT COUNT(MOV.mov_data) FROM MovimentacaoBem AS MOV 
						WHERE MOV.bem_id = BP1.bem_id AND
						MOV.tpm_id = (SELECT par_valor FROM SYS_Parametros WHERE par_chave = 'MOVIMENTO_RECEBIMENTO')
						GROUP BY MOV.bem_id, MOV.tpm_id ) > 0							
		)
		SELECT bem_id ,
				bem_descricao ,
				grp_id ,
				grp_descricao ,
				bem_cadmat ,
				bem_processo ,
				bem_doctoCompra
		FROM cteDados
		WHERE
			(@bem_processo IS NULL OR bem_processo = @bem_processo)
			AND (@bem_doctoCompra IS NULL OR bem_doctoCompra = @bem_doctoCompra)
		ORDER BY
			bem_descricao

		SELECT @@ROWCOUNT
	END

	-- Sem incorporação, com registro patrimonial, legado e não legado - Material Permanente
	IF @opcao = 1
	BEGIN
		WITH cteDocumento AS
		(
			SELECT 
				bem_id ,
				bit_id ,
				bid_id ,
				bid_tipoDoc ,
				bid_numeroDoc 

			FROM dbo.BemItemDocumento AS bid WITH (NOLOCK)
			WHERE	
				bid_tipoDoc = 1 -- Processo
				OR bid_tipoDoc = 3 -- Documento de compra
		)
		, cteDados AS (
			SELECT DISTINCT 
				BP1.bem_id
				, BP1.bem_descricao
				, BP1.grp_id
				, GB1.grp_descricao
				, BP1.bem_cadmat 
				, BI1.bit_uniGuarda
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 1 
						AND (@bem_processo IS NULL OR doc.bid_numeroDoc = @bem_processo)) AS bem_processo 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 3 
						AND (@bem_doctoCompra IS NULL OR doc.bid_numeroDoc = @bem_doctoCompra)) AS bem_doctoCompra
		FROM 
			BemPatrimonial BP1 WITH(NoLock)
		INNER JOIN
			GrupoBens GB1 WITH(NoLock)
			ON GB1.grp_id = BP1.grp_id
		INNER JOIN
			BemItem BI1 WITH(NoLock)
			ON BI1.bem_id = BP1.bem_id
			AND (BI1.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (BI1.bit_uniGuarda = @uni_id OR @uni_id IS NULL)
			AND (BI1.bit_registroPat <> '' AND BI1.bit_registroPat IS NOT NULL)
		WHERE
			1 = 1
			AND BI1.bit_status <> 3 and BI1.bit_status <> 5
			AND (BP1.bem_id = @bem_id OR @bem_id IS NULL)
			AND (BP1.bem_descricao LIKE '%' + @bem_descricao + '%' OR @bem_descricao IS NULL)
			AND (BP1.grp_id = @grp_id OR @grp_id IS NULL)
			AND (BP1.bem_ne = @bem_ne OR @bem_ne IS NULL)
			--AND BP1.bem_legado = 1
			and BI1.bit_dataIncorporacao is null --alterado dia 05/05/2015
			--and BP1.for_id = 2616 -- gemat legado alterado dia 05/05/2015
			AND (BP1.bem_cadmat = @grp_cadmat OR @grp_cadmat IS NULL)
			AND 
			NOT EXISTS (SELECT 
								mv.mov_data 
							FROM 
								MovimentacaoBem mv
							INNER JOIN TipoMovimentacao TP 
								ON mv.tpm_id = TP.tpm_id
								AND TP.tpm_operacao = 12								
							WHERE mv.bem_id = BP1.bem_id 
								AND MV.bit_id = BI1.bit_id 								
								AND mv.mov_situacao <> 3
								)
			)
		SELECT bem_id ,
				bem_descricao ,
				grp_id ,
				grp_descricao ,
				bem_cadmat ,
				bem_processo ,
				bem_doctoCompra,
				bit_uniGuarda
		FROM cteDados
		WHERE
			1 = 1
			AND (@bem_processo IS NULL OR bem_processo = @bem_processo) AND (@bem_doctoCompra IS NULL OR bem_doctoCompra = @bem_doctoCompra)
		ORDER BY
			bem_descricao

		SELECT @@ROWCOUNT
	END

	-- Sem incorporação, com registro patrimonial, legado e não legado - Doação
	IF @opcao = 7
	BEGIN
		WITH cteDocumento AS
		(
			SELECT 
				bem_id ,
				bit_id ,
				bid_id ,
				bid_tipoDoc ,
				bid_numeroDoc 

			FROM dbo.BemItemDocumento AS bid WITH (NOLOCK)
			WHERE	
				bid_tipoDoc = 1 -- Processo
				OR bid_tipoDoc = 3 -- Documento de compra
		)
		, cteDados AS (
			SELECT DISTINCT 
				BP1.bem_id
				, BP1.bem_descricao
				, BP1.grp_id
				, GB1.grp_descricao
				, BP1.bem_cadmat 
				, BI1.bit_uniGuarda
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 1 
						AND (@bem_processo IS NULL OR doc.bid_numeroDoc = @bem_processo)) AS bem_processo 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 3 
						AND (@bem_doctoCompra IS NULL OR doc.bid_numeroDoc = @bem_doctoCompra)) AS bem_doctoCompra
		FROM 
			BemPatrimonial BP1 WITH(NoLock)
		INNER JOIN
			GrupoBens GB1 WITH(NoLock)
			ON GB1.grp_id = BP1.grp_id
		INNER JOIN
			BemItem BI1 WITH(NoLock)
			ON BI1.bem_id = BP1.bem_id
			AND (BI1.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (BI1.bit_uniGuarda = @uni_id OR @uni_id IS NULL)
			AND (BI1.bit_registroPat <> '' AND BI1.bit_registroPat IS NOT NULL)
		WHERE
			1 = 1
			AND BI1.bit_status <> 3 and BI1.bit_status <> 5
			AND (BP1.bem_id = @bem_id OR @bem_id IS NULL)
			AND (BP1.bem_descricao LIKE '%' + @bem_descricao + '%' OR @bem_descricao IS NULL)
			AND (BP1.grp_id = @grp_id OR @grp_id IS NULL)
			AND (BP1.bem_ne = @bem_ne OR @bem_ne IS NULL)
			--AND BP1.bem_legado = 1
			and BI1.bit_dataIncorporacao is null --alterado dia 05/05/2015
			--and BP1.for_id = 2616 -- gemat legado alterado dia 05/05/2015
			AND (BP1.bem_cadmat = @grp_cadmat OR @grp_cadmat IS NULL)
			AND 
			NOT EXISTS (SELECT 
								mv.mov_data 
							FROM 
								MovimentacaoBem mv
							INNER JOIN TipoMovimentacao TP 
								ON mv.tpm_id = TP.tpm_id
								AND TP.tpm_operacao = 12								
							WHERE mv.bem_id = BP1.bem_id 
								AND MV.bit_id = BI1.bit_id 								
								AND mv.mov_situacao <> 3
								)
			)
		SELECT bem_id ,
				bem_descricao ,
				grp_id ,
				grp_descricao ,
				bem_cadmat ,
				bem_processo ,
				bem_doctoCompra,
				bit_uniGuarda
		FROM cteDados
		WHERE
			1 = 1
			AND (@bem_processo IS NULL OR bem_processo = @bem_processo) AND (@bem_doctoCompra IS NULL OR bem_doctoCompra = @bem_doctoCompra)
		ORDER BY
			bem_descricao

		SELECT @@ROWCOUNT
	END

	-- Sem incorporação, com registro patrimonial e legado - Legado
	IF @opcao = 12
	BEGIN
		WITH cteDocumento AS
		(
			SELECT 
				bem_id ,
				bit_id ,
				bid_id ,
				bid_tipoDoc ,
				bid_numeroDoc 

			FROM dbo.BemItemDocumento AS bid WITH (NOLOCK)
			WHERE	
				bid_tipoDoc = 1 -- Processo
				OR bid_tipoDoc = 3 -- Documento de compra
		)
		, cteDados AS (
			SELECT DISTINCT 
				BP1.bem_id
				, BP1.bem_descricao
				, BP1.grp_id
				, GB1.grp_descricao
				, BP1.bem_cadmat 
				, BI1.bit_uniGuarda
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 1 
						AND (@bem_processo IS NULL OR doc.bid_numeroDoc = @bem_processo)) AS bem_processo 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 3 
						AND (@bem_doctoCompra IS NULL OR doc.bid_numeroDoc = @bem_doctoCompra)) AS bem_doctoCompra
		FROM 
			BemPatrimonial BP1 WITH(NoLock)
		INNER JOIN
			GrupoBens GB1 WITH(NoLock)
			ON GB1.grp_id = BP1.grp_id
		INNER JOIN
			BemItem BI1 WITH(NoLock)
			ON BI1.bem_id = BP1.bem_id
			AND (BI1.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (BI1.bit_uniGuarda = @uni_id OR @uni_id IS NULL)
			AND (BI1.bit_registroPat <> '' AND BI1.bit_registroPat IS NOT NULL)
		WHERE
			1 = 1
			AND BI1.bit_status <> 3 and BI1.bit_status <> 5
			AND (BP1.bem_id = @bem_id OR @bem_id IS NULL)
			AND (BP1.bem_descricao LIKE '%' + @bem_descricao + '%' OR @bem_descricao IS NULL)
			AND (BP1.grp_id = @grp_id OR @grp_id IS NULL)
			AND (BP1.bem_ne = @bem_ne OR @bem_ne IS NULL)
			--AND BP1.bem_legado = 1
			and BI1.bit_dataIncorporacao is null --alterado dia 05/05/2015
			--and BP1.for_id = 2616 -- gemat legado alterado dia 05/05/2015
			AND (BP1.bem_cadmat = @grp_cadmat OR @grp_cadmat IS NULL)
			AND 
			NOT EXISTS (SELECT 
								mv.mov_data 
							FROM 
								MovimentacaoBem mv
							INNER JOIN TipoMovimentacao TP 
								ON mv.tpm_id = TP.tpm_id
								AND TP.tpm_operacao = 12								
							WHERE mv.bem_id = BP1.bem_id 
								AND MV.bit_id = BI1.bit_id 								
								AND mv.mov_situacao <> 3
								)
			)
		SELECT bem_id ,
				bem_descricao ,
				grp_id ,
				grp_descricao ,
				bem_cadmat ,
				bem_processo ,
				bem_doctoCompra,
				bit_uniGuarda
		FROM cteDados
		WHERE
			1 = 1
			AND (@bem_processo IS NULL OR bem_processo = @bem_processo) AND (@bem_doctoCompra IS NULL OR bem_doctoCompra = @bem_doctoCompra)
		ORDER BY
			bem_descricao

		SELECT @@ROWCOUNT
	END

	-- Incorporados
	IF @opcao = 2
	BEGIN
		WITH cteDocumento AS
		(
			SELECT 
				bem_id ,
				bit_id ,
				bid_id ,
				bid_tipoDoc ,
				bid_numeroDoc
			FROM dbo.BemItemDocumento AS bid WITH (NOLOCK)
			WHERE	
				bid_tipoDoc = 1 -- Processo
				OR bid_tipoDoc = 3 -- Documento de compra
		)
		, cteDados AS (
			SELECT DISTINCT 
				BP1.bem_id
				, BP1.bem_descricao
				, BP1.grp_id
				, GB1.grp_descricao
				, BP1.bem_cadmat 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 1 
						AND (@bem_processo IS NULL OR doc.bid_numeroDoc = @bem_processo)) AS bem_processo 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 3 
						AND (@bem_doctoCompra IS NULL OR doc.bid_numeroDoc = @bem_doctoCompra)) AS bem_doctoCompra
		FROM 
			BemPatrimonial BP1 WITH(NoLock)
		INNER JOIN
			GrupoBens GB1 WITH(NoLock)
			ON GB1.grp_id = BP1.grp_id
		INNER JOIN
			BemItem BI1 WITH(NoLock)
			ON BI1.bem_id = BP1.bem_id
			AND (BI1.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (BI1.bit_uniGuarda = @uni_id OR @uni_id IS NULL)
		WHERE
			    BI1.bit_situacao = 1
			AND BI1.bit_status <> 3 and BI1.bit_status <> 5
			AND (BP1.bem_id = @bem_id OR @bem_id IS NULL)
			AND (BP1.bem_descricao LIKE '%' + @bem_descricao + '%' OR @bem_descricao IS NULL)
			--AND (BP1.bem_descricao NOT LIKE '%INATIVO%')
			AND (BP1.grp_id = @grp_id OR @grp_id IS NULL)
			AND (BP1.bem_ne = @bem_ne OR @bem_ne IS NULL)	
			AND (BP1.bem_cadmat = @grp_cadmat OR @grp_cadmat IS NULL)
			AND  EXISTS (SELECT --alterado dia 05/05/2015
							mv.mov_data 
						FROM 
							MovimentacaoBem mv
						INNER JOIN TipoMovimentacao TP 
							ON mv.tpm_id = TP.tpm_id
							AND TP.tpm_operacao IN(1,12)	
						WHERE mv.bem_id = BP1.bem_id 
							AND MV.bit_id = BI1.bit_id 
							AND mv.mov_situacao <> 3)
			)
		SELECT bem_id ,
				bem_descricao ,
				grp_id ,
				grp_descricao ,
				bem_cadmat ,
				bem_processo ,
				bem_doctoCompra
		FROM cteDados
		WHERE
			(@bem_processo IS NULL OR bem_processo = @bem_processo)
			AND (@bem_doctoCompra IS NULL OR bem_doctoCompra = @bem_doctoCompra)
		ORDER BY
			bem_descricao

		SELECT @@ROWCOUNT
	END

	-- Todos
	IF @opcao = 3 OR @opcao = 4
	BEGIN
		WITH cteDocumento AS
		(
			SELECT 
				bem_id ,
				bit_id ,
				bid_id ,
				bid_tipoDoc ,
				bid_numeroDoc
			FROM dbo.BemItemDocumento AS bid WITH (NOLOCK)
			WHERE	
				bid_tipoDoc = 1 -- Processo
				OR bid_tipoDoc = 3 -- Documento de compra
		)
		, cteDados AS (
			SELECT DISTINCT 
				BP1.bem_id
				, BP1.bem_descricao
				, BP1.grp_id
				, GB1.grp_descricao
				, BP1.bem_cadmat 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 1 
						AND (@bem_processo IS NULL OR doc.bid_numeroDoc = @bem_processo)) AS bem_processo 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 3 
						AND (@bem_doctoCompra IS NULL OR doc.bid_numeroDoc = @bem_doctoCompra)) AS bem_doctoCompra
		FROM 
			BemPatrimonial BP1 WITH(NoLock)
		INNER JOIN
			GrupoBens GB1 WITH(NoLock)
			ON GB1.grp_id = BP1.grp_id
		INNER JOIN
			BemItem BI1 WITH(NoLock)
			ON BI1.bem_id = BP1.bem_id
			AND (BI1.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (BI1.bit_uniGuarda IN (SELECT uni_id FROM [FN_GetUnidadeEFilhas](@uni_id)))
		WHERE
				BI1.bit_situacao = 1
			AND BI1.bit_status <> 3 and BI1.bit_status <> 5
			AND (BP1.bem_id = @bem_id OR @bem_id IS NULL)
			AND (BP1.bem_descricao LIKE '%' + @bem_descricao + '%' OR @bem_descricao IS NULL)
			--AND (BP1.bem_descricao NOT LIKE '%INATIVO%')
			AND (BP1.grp_id = @grp_id OR @grp_id IS NULL)
			AND (BP1.bem_ne = @bem_ne OR @bem_ne IS NULL)	
			AND (BP1.bem_cadmat = @grp_cadmat OR @grp_cadmat IS NULL)
			)
		SELECT bem_id ,
				bem_descricao ,
				grp_id ,
				grp_descricao ,
				bem_cadmat ,
				bem_processo ,
				bem_doctoCompra
		FROM cteDados
		WHERE
			(@bem_processo IS NULL OR bem_processo = @bem_processo)
			AND (@bem_doctoCompra IS NULL OR bem_doctoCompra = @bem_doctoCompra)
		ORDER BY
			bem_descricao

		SELECT @@ROWCOUNT
	END

	-- Bens cedidos e não baixados
	IF @opcao = 6
	BEGIN
		WITH cteDocumento AS
		(
			SELECT 
				bem_id ,
				bit_id ,
				bid_id ,
				bid_tipoDoc ,
				bid_numeroDoc
			FROM dbo.BemItemDocumento AS bid WITH (NOLOCK)
			WHERE	
				bid_tipoDoc = 1 -- Processo
				OR bid_tipoDoc = 3 -- Documento de compra
		)
		, cteDados AS (
			SELECT DISTINCT 
				BP1.bem_id
				, BP1.bem_descricao
				, BP1.grp_id
				, GB1.grp_descricao
				, BP1.bem_cadmat 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 1 
						AND (@bem_processo IS NULL OR doc.bid_numeroDoc = @bem_processo)) AS bem_processo 
				, (SELECT TOP 1 bid_numeroDoc FROM cteDocumento AS doc 
					WHERE 
						doc.bem_id = BP1.bem_id
						AND doc.bit_id = BI1.bit_id 
						AND doc.bid_tipoDoc = 3 
						AND (@bem_doctoCompra IS NULL OR doc.bid_numeroDoc = @bem_doctoCompra)) AS bem_doctoCompra
		FROM 
			BemPatrimonial BP1 WITH(NoLock)
		INNER JOIN
			GrupoBens GB1 WITH(NoLock)
			ON GB1.grp_id = BP1.grp_id
		INNER JOIN
			BemItem BI1 WITH(NoLock)
			ON BI1.bem_id = BP1.bem_id
			AND (BI1.bit_GPB = @bit_gpb OR @bit_gpb IS NULL)
			AND (BI1.bit_uniGuarda IN (SELECT uni_id FROM [FN_GetUnidadeEFilhas](@uni_id)))
		INNER JOIN
			MovimentacaoBem AS mb WITH(NoLock)
				ON mb.bem_id = BI1.bem_id AND mb.bit_id = BI1.bit_id
				AND mb.mov_situacao <> 3
		INNER JOIN
			TipoMovimentacao tm
				ON tm.tpm_id = mb.tpm_id 
				AND tm.tpm_operacao = 7 -- Se tem movimento de cessão	
		WHERE
				BI1.bit_situacao = 1
			AND BI1.bit_status <> 3 and BI1.bit_status <> 5
			AND (BP1.bem_id = @bem_id OR @bem_id IS NULL)
			AND (BP1.bem_descricao LIKE '%' + @bem_descricao + '%' OR @bem_descricao IS NULL)
			--AND (BP1.bem_descricao NOT LIKE '%INATIVO%')
			AND (BP1.grp_id = @grp_id OR @grp_id IS NULL)
			AND (BP1.bem_ne = @bem_ne OR @bem_ne IS NULL)	
			AND (BP1.bem_cadmat = @grp_cadmat OR @grp_cadmat IS NULL)
			)
		SELECT bem_id ,
				bem_descricao ,
				grp_id ,
				grp_descricao ,
				bem_cadmat ,
				bem_processo ,
				bem_doctoCompra
		FROM cteDados
		WHERE
			(@bem_processo IS NULL OR bem_processo = @bem_processo)
			AND (@bem_doctoCompra IS NULL OR bem_doctoCompra = @bem_doctoCompra)
		ORDER BY
			bem_descricao

		SELECT @@ROWCOUNT
	END
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_SelectBy_DocCompraDescricao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ====================================================================
-- Author:		Pedro Gimenez
-- Create date: 23/11/2010
-- Description:	Busca Bens por documento de compra e descrição
-- =====================================================================

CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_SelectBy_DocCompraDescricao]
	@bem_descricao VARCHAR(100),
	@bid_numeroDoc VARCHAR(20)
AS
BEGIN
	select distinct 
		BP1.bem_id
		, BP1.bem_processo 		
	from 
		BemPatrimonial BP1 WITH(NoLock)
		INNER JOIN BemItemDocumento AS BID WITH (NOLOCK)
			ON BP1.bem_id = BID.bem_id
	WHERE
		BP1.bem_descricao = @bem_descricao AND
		BID.bid_numeroDoc = @bid_numeroDoc
	ORDER BY 
		BP1.bem_id 		
	select @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_SelectBy_ProcessoDescricao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ====================================================================
-- Author:		JORGE FREITAS
-- Create date: 18/10/2010
-- Description:	Busca Bens por processo e descricao do bem
-- =====================================================================

CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_SelectBy_ProcessoDescricao]
	@bem_descricao VARCHAR(100),
	@bem_processo VARCHAR(50)
AS
BEGIN
	select distinct 
		BP1.bem_id
		, BP1.bem_processo 
		
	from 
		BemPatrimonial BP1 WITH(NoLock)
	
	WHERE
		(BP1.bem_descricao = @bem_descricao or @bem_descricao is null )
		and (BP1.bem_processo = @bem_processo or @bem_processo  is null)

	ORDER BY 
		BP1.bem_id 
		
	select @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_SelectEtiquetasEmLote]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_SelectEtiquetasEmLote] 
 
	@uniGuarda_id int		-- Unidade de guarda do Bem
   ,@ano int
AS
BEGIN
	
		/* Impresso: 
			1 - Nao pode ter wf de recebimento pendente
			2 - Se GUARDA é gestora -->  nao precisa de solicitacao
			3 - Se GUARDA não é Gestora --> precisa de solicitacao   
			4 - Não ter um wf de impressão com passo maior que solicitação.
			*/
			
		
		SELECT  
	      bem.bem_id,
	      bi.bit_id,
	      CASE WHEN bws.biw_id IS NULL 
			THEN 0
			ELSE bws.biw_id
			END AS biw_id,
	      CASE WHEN bws.bws_id IS NULL 
			THEN 0
			ELSE bws.bws_id
			END AS bws_id,
	      dbo.FN_GetUniNome(bi.bit_uniGuarda) as uad_nomeGuarda,	 
		  bi.bit_uniGuarda,     
	      bi.bit_uniGestora,
		  dbo.FN_GetUniNome(bi.bit_uniGestora) as uad_nomeGestora,
	      bem.bem_descricao,
	      grp.grp_nome,
	      loc.loc_id,
	      loc.loc_nome,
	      bem.bem_dataEntrada,
	      bem.bem_dataCriacao,
	      bi.bit_registroPat
		  --bit_dataCriacao		    	            
	FROM
		BemPatrimonial as bem with(nolock)
		INNER JOIN BemItem as bi with(nolock)
			ON Bem.bem_id = bi.bem_id
		INNER JOIN GrupoBens as grp with(nolock)
			ON grp.grp_id = bem.grp_id
		INNER JOIN Localidade as loc with(nolock)
			ON loc.loc_id = bi.loc_id
		left JOIN BemItemWfStatus as bws with(nolock)
			ON bi.bit_id = bws.bit_id and bi.bem_id = bws.bem_id
			AND bws.wrk_id = 1
			AND bws.stp_id <= 2 -- somente os passos de solicitacao
			AND bws.bws_situacao = 1

	WHERE
		bi.bit_status <> 3
		AND (bi.bit_uniGuarda = @uniGuarda_id or bi.bit_uniGestora = @uniGuarda_id)
		--AND (bi.bit_uniGuarda IN(SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id)))
		-- 1 - Registro patrimonial deve ser nulo.
		AND bi.bit_registroPat IS NULL 
		and
			(@ano is null or
			@ano = DATEPART (YEAR ,bem.bem_dataCriacao) )
		
		-- 1 - Nao pode ter wf de recebimento pendente
		AND	NOT EXISTS
			(
				SELECT 
					bem_id
					, bit_id
				FROM 
					BemItemWfStatus	WITH(NoLock)				
				WHERE 
					bi.bem_id = BemItemWfStatus.bem_id 
					AND bi.bit_id = BemItemWfStatus.bit_id 
					AND (wrk_id = 3 OR wrk_id = 4)  -- wf de recebimento
					AND bws_situacao = 1 -- pendente
			) 
		
			
	END 
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_SelectEtiquetasImpressaoReimpressao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_SelectEtiquetasImpressaoReimpressao]   
  @wrk_id int    -- 1-impressão, 2-reimpressao  
 ,@uniGuarda_id int  -- Unidade de guarda do Bem  
 ,@uni_id int    -- Unidade do usuario logado  
 ,@biw_id nvarchar(max) = null  
 ,@bws_id nvarchar(max) = null  
  
AS  
BEGIN  
   
 /* @wrk_id:  
  1 - IMPRESSAO  
  2 - REIMPRESSOA   
  */  
 IF @wrk_id = 1 -- IMPRESSAO   
 BEGIN  
  /* Impresso:   
   1 - Nao pode ter wf de recebimento pendente  
   2 - Se GUARDA é gestora -->  nao precisa de solicitacao  
   3 - Se GUARDA não é Gestora --> precisa de solicitacao     
   4 - Não ter um wf de impressão com passo maior que solicitação.  
   */  
     
  if @biw_id is not null  
  begin  
   SELECT    
     bem.bem_id,  
     bi.bit_id,  
     CASE WHEN bws.biw_id IS NULL   
    THEN 0  
    ELSE bws.biw_id  
    END AS biw_id,  
     CASE WHEN bws.bws_id IS NULL   
    THEN 0  
    ELSE bws.bws_id  
    END AS bws_id,  
     dbo.FN_GetUniNome(bi.bit_uniGuarda) as uad_nome,         
     bi.bit_uniGestora,  
     bem.bem_descricao,  
     grp.grp_nome,  
     loc.loc_id,  
     loc.loc_nome,  
     bem.bem_dataEntrada,  
     bem.bem_dataCriacao,  
     bi.bit_registroPat  
                      
  FROM  
   BemPatrimonial as bem with(nolock)  
   INNER JOIN BemItem as bi with(nolock)  
    ON Bem.bem_id = bi.bem_id  
   INNER JOIN GrupoBens as grp with(nolock)  
    ON grp.grp_id = bem.grp_id  
   INNER JOIN Localidade as loc with(nolock)  
    ON loc.loc_id = bi.loc_id  
	-- mudei de left para inner - alteração henrique dia 10/07/2017
   INNER JOIN BemItemWfStatus as bws with(nolock)  
    ON bi.bit_id = bws.bit_id and bi.bem_id = bws.bem_id  
    AND bws.wrk_id = @wrk_id  
    AND bws.stp_id <= 2 -- somente os passos de solicitacao  
    AND bws.bws_situacao <> 2  
   inner join (SELECT * FROM dbo.fnSplit(@biw_id,',')) as biws  
    on (bws.biw_id = biws.item)  
   inner join (SELECT * FROM dbo.fnSplit(@bws_id,',')) as bwss  
    on (bws.bws_id = bwss.item)  
  
  WHERE  
   bi.bit_status <> 3  
   AND (@uniGuarda_id IS NULL OR bi.bit_uniGuarda = @uniGuarda_id)  
   AND (bi.bit_uniGuarda IN(SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id)))  
   -- 1 - Registro patrimonial deve ser nulo.  
   AND bi.bit_registroPat IS NULL   
   -- 1 - Nao pode ter wf de recebimento pendente  
   AND NOT EXISTS  
    (  
     SELECT   
      bem_id  
      , bit_id  
     FROM   
      BemItemWfStatus WITH(NoLock)      
     WHERE   
      bi.bem_id = BemItemWfStatus.bem_id   
      AND bi.bit_id = BemItemWfStatus.bit_id   
      AND (wrk_id = 3 OR wrk_id = 4)  -- wf de recebimento  
      AND bws_situacao = 1 -- pendente  
    )   
   --(Desconsiderado, vide comentario da alteração do dia 07/11/2013)  
   --AND (  
   -- -- 2 - Se GUARDA é gestora -->  nao precisa de solicitacao  
   -- bi.bit_uniGuarda = @uni_id    
   -- OR   
   -- -- 3 - Se GUARDA não é Gestora --> precisa de solicitacao  
   -- (  
   --  bi.bit_uniGuarda <> @uni_id   
   --  AND bws.biw_id IS NOT NULL --> quando acha registro de solicitacao  
   -- )  
   --)  
   -- 4 - Não ter um wf de impressão com passo maior que solicitação.  
   AND NOT EXISTS  
    (  
     SELECT   
      bem_id  
      , bit_id  
     FROM   
      BemItemWfStatus WITH(NoLock)      
     WHERE   
      bi.bem_id = BemItemWfStatus.bem_id   
      AND bi.bit_id = BemItemWfStatus.bit_id   
      AND (wrk_id = 1 OR wrk_id = 2)  -- wf de impressao e reimpressao  
      AND stp_id > 2 -- maior que solicitacao (ou seja, ja foi impresso, pode ou nao ter etiquetado)  
      AND bws_situacao <> 3 -- nao é excluido  
    )   
  end  
    
  else  
    
  begin  
   SELECT    
     bem.bem_id,  
     bi.bit_id,  
     CASE WHEN bws.biw_id IS NULL   
    THEN 0  
    ELSE bws.biw_id  
    END AS biw_id,  
     CASE WHEN bws.bws_id IS NULL   
    THEN 0  
    ELSE bws.bws_id  
    END AS bws_id,  
     dbo.FN_GetUniNome(bi.bit_uniGuarda) as uad_nome,         
     bi.bit_uniGestora,  
     bem.bem_descricao,  
     grp.grp_nome,  
     loc.loc_id,  
     loc.loc_nome,  
     bem.bem_dataEntrada,  
     bem.bem_dataCriacao,  
     bi.bit_registroPat  
               
  FROM  
   BemPatrimonial as bem with(nolock)  
   INNER JOIN BemItem as bi with(nolock)  
    ON Bem.bem_id = bi.bem_id  
   INNER JOIN GrupoBens as grp with(nolock)  
    ON grp.grp_id = bem.grp_id  
   INNER JOIN Localidade as loc with(nolock)  
    ON loc.loc_id = bi.loc_id  
	-- mudei de left para inner - alteração henrique dia 10/07/2017
   INNER JOIN BemItemWfStatus as bws with(nolock)  
    ON bi.bit_id = bws.bit_id and bi.bem_id = bws.bem_id  
    AND bws.wrk_id = @wrk_id  
    AND bws.stp_id <= 2 -- somente os passos de solicitacao  
    AND bws.bws_situacao <> 2  
  WHERE  
   bi.bit_status <> 3  
   AND (@uniGuarda_id IS NULL OR bi.bit_uniGuarda = @uniGuarda_id)  
   AND (bi.bit_uniGuarda IN(SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id)))  
   -- 1 - Registro patrimonial deve ser nulo.  
   AND bi.bit_registroPat IS NULL   
   -- 1 - Nao pode ter wf de recebimento pendente  
   AND NOT EXISTS  
    (  
     SELECT   
      bem_id  
      , bit_id  
     FROM   
      BemItemWfStatus WITH(NoLock)      
     WHERE   
      bi.bem_id = BemItemWfStatus.bem_id   
      AND bi.bit_id = BemItemWfStatus.bit_id   
      AND (wrk_id = 3 OR wrk_id = 4)  -- wf de recebimento  
      AND bws_situacao = 1 -- pendente  
    )   
   --(Desconsiderado, vide comentario da alteração do dia 07/11/2013)  
   --AND (  
   -- -- 2 - Se GUARDA é gestora -->  nao precisa de solicitacao  
   -- bi.bit_uniGuarda = @uni_id    
   -- OR   
   -- -- 3 - Se GUARDA não é Gestora --> precisa de solicitacao  
   -- (  
   --  bi.bit_uniGuarda <> @uni_id   
   --  AND bws.biw_id IS NOT NULL --> quando acha registro de solicitacao  
   -- )  
   --)  
   -- 4 - Não ter um wf de impressão com passo maior que solicitação.  
   AND NOT EXISTS  
    (  
     SELECT   
      bem_id  
      , bit_id  
     FROM   
      BemItemWfStatus WITH(NoLock)      
     WHERE   
      bi.bem_id = BemItemWfStatus.bem_id   
      AND bi.bit_id = BemItemWfStatus.bit_id   
      AND (wrk_id = 1 OR wrk_id = 2)  -- wf de impressao e reimpressao  
      AND stp_id > 2 -- maior que solicitacao (ou seja, ja foi impresso, pode ou nao ter etiquetado)  
      AND bws_situacao <> 3 -- nao é excluido  
    )   
   end  
  
 END   
  
 ELSE -- REIMPRESSAO  
   
 BEGIN  
  /*  REIMPRESSAO  
   1 - Registro patrimonial não pode ser nulo.  
   2 - Se GUARDA é gestora -->  nao precisa de solicitacao  
   3 - Se GUARDA não é Gestora --> precisa de solicitacao  
  */  
   
  SELECT    
       bem.bem_id,  
       bi.bit_id,  
       CASE WHEN bws.biw_id IS NULL   
   THEN 0  
   ELSE bws.biw_id  
   END AS biw_id,  
       CASE WHEN bws.bws_id IS NULL   
   THEN 0  
   ELSE bws.bws_id  
   END AS bws_id,  
       dbo.FN_GetUniNome(bi.bit_uniGuarda) as uad_nome,         
       bi.bit_uniGestora,  
       bem.bem_descricao,  
       grp.grp_nome,  
       loc.loc_id,  
       loc.loc_nome,  
       bem.bem_dataEntrada,  
       bem.bem_dataCriacao,  
       bi.bit_registroPat  
                      
 FROM  
  BemPatrimonial as bem with(nolock)  
  INNER JOIN BemItem as bi with(nolock)  
   ON Bem.bem_id = bi.bem_id  
  INNER JOIN GrupoBens as grp with(nolock)  
   ON grp.grp_id = bem.grp_id  
  INNER JOIN Localidade as loc with(nolock)  
   ON loc.loc_id = bi.loc_id  
  INNER JOIN BemItemWfStatus as bws with(nolock)  
   ON bi.bit_id = bws.bit_id and bi.bem_id = bws.bem_id  
   AND bws.wrk_id = @wrk_id  -- nesse caso: 2 - reimpressao   
   AND bws.stp_id <= 2 -- somente os passos de solicitacao  
   AND bws.bws_situacao <> 2  
 WHERE  
  bi.bit_status <> 3  
  AND (@uniGuarda_id IS NULL OR bi.bit_uniGuarda = @uniGuarda_id)  
  AND (bi.bit_uniGuarda IN(SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id)))  
  -- 1 - Registro patrimonial não pode ser nulo.  
  AND bi.bit_registroPat IS NOT NULL   
  --(Desconsiderado, vide comentario da alteração do dia 07/11/2013)  
  --AND (  
  -- -- 2 - Se GUARDA é gestora -->  nao precisa de solicitacao  
  -- bi.bit_uniGuarda = @uni_id    
  -- OR   
  -- -- 3 - Se GUARDA não é Gestora --> precisa de solicitacao  
  -- (  
  --  bi.bit_uniGuarda <> @uni_id   
  --  AND bws.biw_id IS NOT NULL --> quando acha registro de solicitacao  
  -- )  
  --)  
 END  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_SelectSolicitacaoEtiquetaImpressao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_SelectSolicitacaoEtiquetaImpressao]    
--declare
 @uni_id int ,    
 @descricao varchar(100),    
 @grp_id int,    
 @loc_id INT ,    
 @dep_id int = null,    
 @bit_gpb varchar(20),    
 @bem_processo varchar(50),     
 @bem_doctocompra varchar(50),    
 @cfg_naoGerarMovimentRecebEstoque BIT    
AS    
BEGIN    
 SELECT      
       BP.bem_id,    
       BI.bit_id,    
       BI.bit_uniGestora,    
       BI.bit_uniGuarda,    
       dbo.FN_GetUniNome(BI.bit_uniGuarda) as uad_nome,    
       BP.bem_descricao,    
       BI.bit_uniGuarda AS uni_id,    
       GRP.grp_nome,    
       LOC.loc_nome,    
       BI.bit_GPB    
           
 FROM    
  BemPatrimonial as BP with(nolock)    
  INNER JOIN BemItem as BI with(nolock)    
   ON BP.bem_id = bi.bem_id     
  INNER JOIN GrupoBens as GRP with(nolock)    
   ON GRP.grp_id = BP.grp_id    
  INNER JOIN Localidade as LOC with(nolock)    
   ON LOC.loc_id = BI.loc_id    
      
      
 WHERE     
  BI.bit_status  not in (3,5)
  AND BI.bit_uniGuarda = @uni_id     
  AND BI.loc_id = @loc_id    
  AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))    
  AND ((@descricao IS NULL) OR (BP.bem_descricao LIKE '%' + @descricao + '%' ))    
  AND ((@grp_id IS NULL) OR (BP.grp_id = @grp_id))    
  AND ((@bit_gpb IS NULL) OR (BI.bit_GPB = @bit_gpb))    
  and bi.bit_registroPat is null    
  AND EXISTS (    
      
  SELECT     
   DOC.bid_numeroDoc,    
   DOC.bid_tipoDoc,    
   DOC.bem_id    
  FROM     
   BemItemDocumento AS DOC WITH (NOLOCK)    
       
   WHERE     
   (    
   ((DOC.bid_numeroDoc = @bem_doctocompra AND DOC.bid_tipoDoc = 3 AND BP.bem_id = DOC.bem_id))    
    OR     
    ((DOC.bid_numeroDoc = @bem_processo AND DOC.bid_tipoDoc = 1 AND BP.bem_id = DOC.bem_id))    
    or (@bem_doctocompra IS NULL and @bem_processo IS NULL)    
    )    
        
      
  )    
    
  -- Task #9817    
       
  AND NOT EXISTS    
  (    
   SELECT     
    wfl.bem_id    
    , wfl.bit_id     
   FROM     
    BemItemWfStatus AS WFL with(nolock)    
   WHERE     
    BI.bem_id = WFL.bem_id     
    AND BI.bit_id = WFL.bit_id    
    AND WFL.wrk_id = 3    
    AND bws_situacao = 1    
      
  )    
  -- alteraçao henrique dia 10/07/2017, uma vez solicitado não aparece mais na lista  
   AND NOT EXISTS    
  (    
   SELECT     
    wfl.bem_id    
    , wfl.bit_id     
   FROM     
    BemItemWfStatus AS WFL with(nolock)    
   WHERE     
    BI.bem_id = WFL.bem_id     
    AND BI.bit_id = WFL.bit_id    
    AND WFL.wrk_id = 1    
 AND WFL.stp_id = 1    
    AND bws_situacao = 1    
      
  )    
       
  AND     
    (    
     @cfg_naoGerarMovimentRecebEstoque = 1    
     OR     
     ( SELECT     
       COUNT(MOV.mov_data)     
      FROM MovimentacaoBem AS MOV WITH(NOLOCK)    
      WHERE     
       MOV.bem_id = BP.bem_id  AND     
       MOV.bit_id =  BI.bit_id AND     
       MOV.tpm_id = (SELECT par_valor FROM SYS_Parametros WITH (NOLOCK) WHERE par_chave = 'MOVIMENTO_RECEBIMENTO')    
      GROUP BY MOV.bem_id, MOV.bit_id, MOV.tpm_id ) > 0    
          
     OR    
     (BP.bem_legado = 1 )         
              
    )     
          
 ORDER BY     
  bi.bit_registroPat    
    
END 

--select * from bemitem where bem_id = 1054668 and bit_id = 2748651
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_SelectSolicitacaoEtiquetaReimpressao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_SelectSolicitacaoEtiquetaReimpressao]

	@uni_id int,
	@descricao varchar(100),
	@grp_id int,
	@loc_id int,
	@dep_id int = null,
	@bit_gpb varchar(20),
	@bem_processo varchar(50), 
	@bem_doctocompra varchar(50)
AS
BEGIN
	SELECT  
	      bem.bem_id,
	      bi.bit_id,
	      bi.bit_uniGestora,
	      bi.bit_uniGuarda,
	      dbo.FN_GetUniNome(uni.uni_id) as uad_nome,
	      bem.bem_descricao + ' - '+ bit_registroPat as bem_descricao ,
	      uni.uni_id,
	      grp.grp_nome,
	      loc.loc_nome,
	      BI.bit_GPB
	      
	FROM
		BemPatrimonial as bem with(nolock)
		INNER JOIN BemItem as bi with(nolock)
			ON Bem.bem_id = bi.bem_id 
		INNER JOIN GrupoBens as grp with(nolock)
			ON grp.grp_id = bem.grp_id
		INNER JOIN Localidade as loc with(nolock)
			ON loc.loc_id = bi.loc_id
		INNER JOIN Unidade as uni with(nolock)
			ON uni.uni_id = bi.bit_uniGuarda
	WHERE 
	
		EXISTS
		(
			SELECT 
				wfl.bem_id
				, wfl.bit_id 
			FROM 
				BemItemWorkflow wfl with(nolock)
			WHERE 
				bi.bem_id = wfl.bem_id 
				AND bi.bit_id = wfl.bit_id
				AND (((wfl.wrk_id = 1 AND wfl.biw_situacao = 2) 
				AND NOT EXISTS (
						SELECT 
							wfl1.bem_id
							, wfl1.bit_id 
						FROM 
							BemItemWorkflow wfl1 with(nolock) 
						WHERE 
							wfl1.wrk_id = 2 
							AND wfl1.bem_id = wfl.bem_id 
							AND wfl1.bit_id = wfl.bit_id
						)
					)
				
				OR ((wfl.wrk_id = 2 AND wfl.biw_situacao = 2)
				AND NOT EXISTS (
						SELECT 
							wfl2.bem_id
							, wfl2.bit_id 
						FROM 
							BemItemWorkflow wfl2 with(nolock) 
						WHERE 
							wfl2.wrk_id = 2
							AND wfl2.biw_situacao = 1 
							AND wfl2.bem_id = wfl.bem_id 
							AND wfl2.bit_id = wfl.bit_id
						)
				)
			)
		)
		
		AND EXISTS (
		
		SELECT 
		
			DOC.bid_numeroDoc,
			DOC.bid_tipoDoc,
			DOC.bem_id
		FROM 
			BemItemDocumento AS DOC WITH (NOLOCK)
			WHERE 
			(
			((DOC.bid_numeroDoc = @bem_doctocompra AND DOC.bid_tipoDoc = 3 AND BEM.bem_id = DOC.bem_id))
			 OR 
			 ((DOC.bid_numeroDoc = @bem_processo AND DOC.bid_tipoDoc = 1 AND BEM.bem_id = DOC.bem_id))
			 or (@bem_doctocompra IS NULL and @bem_processo IS NULL)
			 )
			 
		
		)
		
		AND uni.uni_situacao <> 3
		AND ((@uni_id IS NULL) OR (uni.uni_id = @uni_id ))
		AND ((@descricao IS NULL) OR (bem.bem_descricao LIKE '%' + @descricao + '%' ))
		AND ((@grp_id IS NULL) OR (grp.grp_id = @grp_id))
		AND ((@loc_id IS NULL) OR (loc.loc_id = @loc_id))
		AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))
		AND ((@bit_gpb IS NULL) OR (BI.bit_GPB = @bit_gpb))
		
	ORDER BY
		bi.bit_registroPat
		,bem.bem_descricao
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonial_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonial_UPDATE]
	@bem_id BIGINT
	, @grp_id INT
	, @for_id INT
	,@bem_tipo INT
	, @bem_legado BIT
	, @bem_cadmat VARCHAR (40)
	, @bem_descricao VARCHAR (1000)
	, @bem_ne CHAR (11)
	, @bem_processo VARCHAR (50)
	, @bem_contrProcessual VARCHAR (50)
	, @bem_doctoCompra VARCHAR (20)
	, @bem_dataEntrada DATETIME
	, @bem_valorOrigem MONEY
	, @bem_qtdeInicial INT
	, @bem_origem TINYINT
	, @bem_observacao VARCHAR(MAX)
	, @bem_dataAlteracao DATETIME
	, @bem_natureza int
AS
BEGIN
	UPDATE BemPatrimonial 
	SET 
		grp_id = @grp_id 
		, for_id = @for_id 
		, bem_tipo = @bem_tipo
		, bem_legado = @bem_legado
		, bem_cadmat = @bem_cadmat 
		, bem_descricao = @bem_descricao 
		, bem_ne = @bem_ne 
		, bem_processo = @bem_processo 
		, bem_contrProcessual = @bem_contrProcessual 
		, bem_doctoCompra = @bem_doctoCompra 
		, bem_dataEntrada = @bem_dataEntrada 
		, bem_valorOrigem = @bem_valorOrigem 
		, bem_qtdeInicial = @bem_qtdeInicial
		, bem_origem = @bem_origem 
		, bem_observacao = @bem_observacao 
		, bem_dataAlteracao = @bem_dataAlteracao 
		, bem_natureza = @bem_natureza 
	WHERE 
		bem_id = @bem_id 

		
	RETURN ISNULL(@@ROWCOUNT,-1)
	
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialCadastro_ContaRelatorio]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialCadastro_ContaRelatorio]
	@uniges_id int,
	@uniguarda_id int,
	@grp_id int,
	@data_inicial date,
	@data_final date,
	@reg_pat varchar(20),
	@dep_situacao int, -- Situação da dependencia para o bem: 1 = nao existente 2 = existente 0 = todas
	@status_bem int, -- Status do bem: 1 = Utilizado  2 = Disponível  0 = todos 
	@status_conservacao int,
	@loc_id int,
	@dep_id int,
	@status_bem_list varchar(20) =  null

AS
BEGIN

With Fornec AS
(
	SELECT
		FON.for_id,
		pes_nome AS for_nome
	FROM
		Fornecedor AS FON WITH(NOLOCK)
	INNER JOIN FornecedorPF AS PF WITH(NOLOCK)
		ON FON.for_id = PF.for_id
	INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)
		ON PF.pes_id = PES.pes_id
		
	WHERE
		for_situacao <> 3
		
	UNION ALL
	
	-- Fornecedor PJ
	SELECT
		FON.for_id,
		ent_razaoSocial AS for_nome
	FROM
		Fornecedor AS FON WITH(NOLOCK)
	INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)
		ON FON.for_id = PJ.for_id
	INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)
		ON PJ.ent_id = ENT.ent_id
		
	WHERE
		for_situacao <> 3

)
	SELECT 
		 bi.bem_id
		 ,bi.bit_id  
		
	FROM BemPatrimonial AS bem WITH(NoLock)
	     INNER JOIN BemItem AS bi with(nolock)
			ON bem.bem_id = bi.bem_id
		 INNER JOIN VW_UnidadeGestora AS uniGes with(nolock)
			ON uniGes.uni_id = bi.bit_uniGestora
		INNER JOIN VW_UnidadeAdministrativa as uniGuarda with(noLock)
			ON uniGuarda.uni_id = bi.bit_uniGuarda
		INNER JOIN Fornec 
			ON Fornec.for_id = bem.for_id
		 INNER JOIN GrupoBens AS grp with(nolock)
			ON bem.grp_id = grp.grp_id	 
		 INNER JOIN Localidade AS loc with(nolock)
			ON bi.loc_id = loc.loc_id
		 LEFT JOIN Dependencia as dep with(nolock)
			ON dep.loc_id = loc.loc_id
			and bi.dep_id = dep.dep_id
		 LEFT JOIN ApoliceSeguro AS aps with(nolock)
			ON bi.aps_id = aps.aps_id
		 LEFT JOIN Seguradora AS seg with(nolock)
			ON seg.seg_id = aps.seg_id
		 LEFT JOIN VW_SeguradoraEntidade AS ent with(nolock)
			ON seg.ent_id = ent.ent_id		 
		 LEFT JOIN StatusConservacao AS stc with(nolock)
			ON bi.stc_id = stc.stc_id
		 LEFT JOIN FatorDepreciacao AS fat with(nolock)
			ON bi.fat_id = fat.fat_id
		inner join (SELECT * FROM dbo.fnSplit(@status_bem_list, ',') ) as statusList
			on statusList.item = bi.bit_status
	WHERE
		((@uniges_id IS NULL) OR (bi.bit_uniGestora = @uniges_id))
		AND ((@uniguarda_id IS NULL) OR (bi.bit_uniGuarda = @uniguarda_id))
		AND ((@loc_id IS NULL) OR (bi.loc_id = @loc_id))
		AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))
		AND ((@grp_id IS NULL) OR(grp.grp_id = @grp_id) OR (grp.grp_idPai = @grp_id))		
		AND (@data_inicial IS NULL OR bem.bem_dataEntrada >= @data_inicial) 
		AND (@data_final IS NULL OR bem.bem_dataEntrada  <= @data_final)
		AND	((@reg_pat IS NULL) OR (bi.bit_registroPat = @reg_pat))
		AND (@status_conservacao IS NULL OR bi.stc_id = @status_conservacao)
		AND ((bi.dep_id IS NULL AND  @dep_situacao = 1) 
		       OR (bi.dep_id is not NULL and @dep_situacao = 2) 
		       OR (@dep_situacao IS NULL))	
		--AND ((@status_bem IS NULL)OR( bi.bit_status = @status_bem))
		AND uniGes.uge_situacao <> 3
	ORDER BY bi.bit_uniGestora				 
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialCadastro_MontaRelatorioMaiorBalancete]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialCadastro_MontaRelatorioMaiorBalancete]    
 -- declare  
 @uniges_id int  = null,    
 @data_inicial date = null,    
 @data_final date = null,    
 @grp_id int  = null,    
 @uniguarda_id int = null,    
 @reg_pat varchar(20) = null,    
 @dep_situacao int = null,     
 @status_bem int  = null,     
 @status_conservacao int = null,    
 @loc_id int  = null,    
 @dep_id int  = null,    
 @blnDataIncorporacao int = null    
AS    
    
BEGIN    
    
 ;With Fornec AS    
 (    
 SELECT    
  FON.for_id,    
  pes_nome AS for_nome    
  ,reg= 1    
 FROM    
  Fornecedor  AS FON WITH(NOLOCK)    
 INNER JOIN FornecedorPF  AS PF WITH(NOLOCK)    
  ON FON.for_id = PF.for_id    
 INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)    
  ON PF.pes_id = PES.pes_id    
      
 WHERE    
  for_situacao <> 3    
      
 UNION ALL    
     
 -- Fornecedor PJ    
 SELECT    
  FON.for_id,    
  ent_razaoSocial AS for_nome    
  ,reg= 1    
 FROM    
  Fornecedor   AS FON WITH(NOLOCK)    
 INNER JOIN FornecedorPJ   AS PJ WITH(NOLOCK)    
  ON FON.for_id = PJ.for_id    
 INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)    
  ON PJ.ent_id = ENT.ent_id    
      
 WHERE    
  for_situacao <> 3    
    
 )    
    
 select distinct    
    
  uniGestora      
  ,pco.cco_codigoDebito     
  ,gb.grp_nome      
  ,bit_valorOrigem     
  ,bem_qtdeInicial     
     
 from (    
    
 select     
    
  uniGestora      
  ,cco_codigoDebito     
  ,grp_nome      
  ,bit_valorOrigem = sum(convert(decimal(11,2) ,bit_valorOrigem)) --sum(bit_valorOrigem) --sum(convert(decimal(9,2) ,bit_valorOrigem))    
  ,bem_qtdeInicial = count(bem_qtdeInicial)     
 from    
    
 (    
  SELECT     
    uniGestora  = uniGes.uni_nome     
   ,cco_codigoDebito = pco.cco_codigoDebito    
   ,grp_nome  = (SELECT grp_nome FROM  GrupoBens  with(nolock) where  grp_id = @grp_id)    
   ,bit_valorOrigem = bi.bit_valorLiquido    
   ,bem_qtdeInicial = 1    
      
  FROM     
   BemPatrimonial AS bem WITH(NoLock)    
   INNER JOIN BemItem AS bi with(nolock)    
    ON bem.bem_id = bi.bem_id    
   INNER JOIN VW_UnidadeGestora AS uniGes with(nolock)    
    ON uniGes.uni_id = bi.bit_uniGestora    
   INNER JOIN VW_UnidadeAdministrativa as uniGuarda with(noLock)    
    ON uniGuarda.uni_id = bi.bit_uniGuarda    
   INNER JOIN Fornec     
    ON Fornec.for_id = bem.for_id    
   INNER JOIN GrupoBens AS grp with(nolock)    
    ON bem.grp_id = grp.grp_id       
   INNER JOIN Localidade AS loc with(nolock)    
    ON bi.loc_id = loc.loc_id    
   LEFT JOIN Dependencia as dep with(nolock)    
    ON dep.loc_id = loc.loc_id    
    and bi.dep_id = dep.dep_id    
   LEFT JOIN ApoliceSeguro AS aps with(nolock)    
    ON bi.aps_id = aps.aps_id    
   LEFT JOIN Seguradora AS seg with(nolock)    
    ON seg.seg_id = aps.seg_id    
   LEFT JOIN VW_SeguradoraEntidade AS ent with(nolock)    
    ON seg.ent_id = ent.ent_id       
   LEFT JOIN StatusConservacao AS stc with(nolock)    
    ON bi.stc_id = stc.stc_id    
   LEFT JOIN FatorDepreciacao AS fat with(nolock)    
    ON bi.fat_id = fat.fat_id     
   LEFT JOIN ParametroContabil AS pco with(nolock)    
    ON pco.grp_id = (select grp_id from [dbo].[FN_GetGrupoBensSuperioresPai] (bem.grp_id))     
    and tpm_id = 23 and pco_situacao = 1    
    
  WHERE    
    
   ((@uniges_id IS NULL) OR (bi.bit_uniGestora = @uniges_id))    
   AND ((@uniguarda_id IS NULL) OR (bi.bit_uniGuarda = @uniguarda_id))    
   AND ((@loc_id IS NULL) OR (bi.loc_id = @loc_id))    
   AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))    
   AND (@data_inicial IS NULL OR convert(date,bem.bem_dataCriacao) >= @data_inicial)     
   AND (@data_final IS NULL OR convert(date,bem.bem_dataCriacao)  <= @data_final)       
   AND ((@reg_pat IS NULL) OR (bi.bit_registroPat = @reg_pat))    
   AND (@status_conservacao IS NULL OR bi.stc_id = @status_conservacao)    
   AND ((bi.dep_id IS NULL AND  @dep_situacao = 1)     
    OR (bi.dep_id is not NULL and @dep_situacao = 2)     
    OR (@dep_situacao IS NULL))     
   AND (bi.bit_status not in (3,5))    
   AND uniGes.uni_situacao <> 3    
   AND ((@grp_id IS NULL) OR bem.grp_id in (select grp_id from FN_GetGrupoHierarquia (@grp_id)))     
    
   and bi.bit_registropat is not null    
    
   and exists (    
    
     select     
      *     
     from     
      MovimentacaoBem mb with(nolock)     
     where      
      
      bi.bem_id  = mb.bem_id    
      and bi.bit_id  = mb.bit_id    
      and mb.mov_nl  is not null    
      and mov_situacao in (1,4)     
   )    
    
  )result    
    
  group by    
   uniGestora      
   ,cco_codigoDebito     
   ,grp_nome    
      
  )as result2    
      
  inner join ParametroContabil    pco with(nolock)    
  on pco.cco_codigodebito = result2.cco_codigodebito    
      
  inner join GrupoBens     gb with(nolock)    
  on pco.grp_id = gb.grp_id    
      
  ORDER BY     
   uniGestora    
    
end    
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialCadastro_MontaRelatorioRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Riehl Figueiredo
-- Create date: 28/09/2010
-- Description:	Stored Procedure que retorna a informação de cadastro de bens de um grupo 

-- Author:		Nicholas Assis
-- Create date: 12/02/2014
-- Description:	Correção nos parametros @status_bem, @dep_situacao e @grp_id da cláusula where

-- Author:		Gabriel Malinosqui
-- Alter date: 08/04/2014
-- Description:	Foi decidido que não tera se aplicará mais a mascara no campo ugeCodigo, era assim: 
-- uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo,

-- =============================================


CREATE PROCEDURE [dbo].[NEW_BemPatrimonialCadastro_MontaRelatorioRS]
	@uniges_id int,
	@uniguarda_id int,
	@grp_id int,
	@data_inicial date,
	@data_final date,
	@reg_pat varchar(20),
	@dep_situacao int, -- Situação da dependencia para o bem: 1 = nao existente 2 = existente 0 = todas
	@status_bem int, -- Status do bem: 1 = Utilizado  2 = Disponível  0 = todos 
	@status_conservacao int,
	@loc_id int,
	@dep_id int
AS
BEGIN
	SELECT 
		  bem.bem_id,
		  bi.bit_id,
		  uniGes.uni_id,
		  bi.bit_registroPat,
		  bem.bem_descricao,
		  dbo.FN_GetUniNome(bi.bit_uniGestora) as uniGestora,		  
		  dbo.FN_GetUniNome(bi.bit_uniGuarda) as uniGuarda,
		  uni_codigoUGE as ugeCodigo,		
		  grp.grp_nome,		  
		  bi.bit_referencia,
		  bem.bem_dataEntrada,
		  bi.bit_valorOrigem,
		  loc.loc_nome,
		  dep.dep_nome,
		  dbo.FN_GetFornecedorNome(bem.for_id) as FornecedorNome, 
		  ent.ent_razaoSocial,
		  aps.aps_apolice,
		  bi.bit_dataDepInicio,
		  bi.bit_vidaUtil,
		  fat.fat_nome,
		  bi.bit_cotas,
		  --bem.bem_doctoCompra,
		  --bem.bem_ne,
		  --bem.bem_processo, 
		  bi.bit_dataBaixa,
		  bi.bit_doctoBaixa,
		  stc.stc_decricao,		  
		  CASE WHEN bi.bit_status = 1
			THEN 'Utilizado'
			ELSE 'Disponível' 
		  END as biStatus,
		  bem.bem_cadmat,
		  bem.bem_origem,
		  bi.loc_id,
		  bi.dep_id,	  	
		  bem.bem_dataCriacao	  
		
	FROM BemPatrimonial AS bem WITH(NoLock)
	     INNER JOIN BemItem AS bi with(nolock)
			ON bem.bem_id = bi.bem_id
		 INNER JOIN dbo.Unidade AS uniGes with(nolock)
			ON uniGes.uni_id = bi.bit_uniGestora
		 INNER JOIN GrupoBens AS grp with(nolock)
			ON bem.grp_id = grp.grp_id	 
		 LEFT JOIN Localidade AS loc with(nolock)
			ON bi.loc_id = loc.loc_id
		 LEFT JOIN Dependencia as dep with(nolock)
			ON dep.loc_id = loc.loc_id
			and bi.dep_id = dep.dep_id
		 LEFT JOIN ApoliceSeguro AS aps with(nolock)
			ON bi.aps_id = aps.aps_id
		 LEFT JOIN Seguradora AS seg with(nolock)
			ON seg.seg_id = aps.seg_id
		 LEFT JOIN VW_SeguradoraEntidade AS ent with(nolock)
			ON seg.ent_id = ent.ent_id		 
		 LEFT JOIN StatusConservacao AS stc with(nolock)
			ON bi.stc_id = stc.stc_id
		 LEFT JOIN FatorDepreciacao AS fat with(nolock)
			ON bi.fat_id = fat.fat_id 
	WHERE
		((@uniges_id = 0) OR (bi.bit_uniGestora = @uniges_id))
		AND ((@uniguarda_id = 0) OR (bi.bit_uniGuarda = @uniguarda_id))
		AND ((@loc_id is null) OR (bi.loc_id = @loc_id))
		AND ((@dep_id is null) OR (bi.dep_id = @dep_id))
		AND ((@grp_id IS NULL) OR(grp.grp_id = @grp_id) OR (grp.grp_idPai = @grp_id))		
		AND (@data_inicial IS NULL OR bem.bem_dataEntrada >= @data_inicial) 
		AND (@data_final IS NULL OR bem.bem_dataEntrada  <= @data_final)
		AND	((@reg_pat is null) OR (bi.bit_registroPat = @reg_pat))
		AND (@status_conservacao IS NULL OR bi.stc_id = @status_conservacao)
		AND ((bi.dep_id IS NULL AND  @dep_situacao = 1) 
		       OR (bi.dep_id is not NULL and @dep_situacao = 2) 
		       OR (@dep_situacao IS NULL))	
		AND ((@status_bem IS NULL)OR( bi.bit_status = @status_bem))
		AND uniGes.uni_situacao <> 3
	ORDER BY uniGestora				 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialCadastro_MontaRelatorioSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialCadastro_MontaRelatorioSP]
	@uniges_id int,
	@uniguarda_id int,
	@grp_id int,
	@data_inicial date,
	@data_final date,
	@reg_pat varchar(20),
	@dep_situacao int, -- Situação da dependencia para o bem: 1 = nao existente 2 = existente 0 = todas
	@status_bem int =null, --[Deprecated]
	@status_conservacao int,
	@loc_id int,
	@dep_id int,
	@blnDataIncorporacao int = - 1,
	@status_bem_list varchar(20) --=  null -- (Sera pasado uma lista 1,2,3,4,5 por ex...)
AS

BEGIN

if @blnDataIncorporacao = 0
begin

	With Fornec AS
	(
		SELECT
			FON.for_id,
			pes_nome AS for_nome
		FROM
			Fornecedor AS FON WITH(NOLOCK)
		INNER JOIN FornecedorPF AS PF WITH(NOLOCK)
			ON FON.for_id = PF.for_id
		INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)
			ON PF.pes_id = PES.pes_id
		
		WHERE
			for_situacao <> 3
		
		UNION ALL
	
		-- Fornecedor PJ
		SELECT
			FON.for_id,
			ent_razaoSocial AS for_nome
		FROM
			Fornecedor AS FON WITH(NOLOCK)
		INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)
			ON FON.for_id = PJ.for_id
		INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)
			ON PJ.ent_id = ENT.ent_id
		
		WHERE
			for_situacao <> 3

	)


		SELECT 
			  bem.bem_id,
			  bi.bit_id,
			  uniGes.uni_id,
			  bi.bit_registroPat,
			  bem.bem_descricao,
			  uniGes.uni_nome as uniGestora, 	  
			  uniGuarda.uad_nome as uniGuarda,
			  uniGes.uni_codigoUGE as ugeCodigo,		
			  grp.grp_nome,	
			  (select grp_nome from [dbo].[FN_GetGrupoBensSuperioresPai] (bem.grp_id)) as grp_nome_pai, --grp_Pai.grp_nome as grp_nome_pai,	  
			  bi.bit_referencia,
			  bem.bem_dataEntrada,
			  bi.bit_valorOrigem, 
			  bi.bit_valorLiquido, 
			  bi.bit_dataIncorporacao,
			  loc.loc_nome,
			  dep.dep_nome,
			  Fornec.for_nome as FornecedorNome,
			  ent.ent_razaoSocial,
			  aps.aps_apolice,
			  bi.bit_dataDepInicio,
			  bi.bit_vidaUtil,
			  fat.fat_nome,
			  bi.bit_cotas,
			  bi.bit_dataBaixa,
			  bi.bit_doctoBaixa,
			  stc.stc_decricao,	
			  biStatus =	case bi.bit_status
						when 1 then 'Utilizado'
						when 2 then 'Disponível'
						when 3 then 'Inativo'
						when 4 then 'Remessa'
						when 5 then 'Cancelado'
					else
						'Sem status definido'
					end
			  
			  ,bem.bem_cadmat,
			  bem.bem_origem,
			  bi.loc_id,
			  bi.dep_id,	  	
			  bem.bem_dataCriacao,
			  pco.cco_codigoDebito,
			  bit_obsCancelamento   = mc.moc_nome 
		
		FROM BemPatrimonial AS bem WITH(NoLock)
		     INNER JOIN BemItem AS bi with(nolock)
				ON bem.bem_id = bi.bem_id
			 INNER JOIN VW_UnidadeGestora AS uniGes with(nolock)
				ON uniGes.uni_id = bi.bit_uniGestora
			INNER JOIN VW_UnidadeAdministrativa as uniGuarda with(noLock)
				ON uniGuarda.uni_id = bi.bit_uniGuarda
			INNER JOIN Fornec 
				ON Fornec.for_id = bem.for_id
			 INNER JOIN GrupoBens AS grp with(nolock)
				ON bem.grp_id = grp.grp_id		 
			 INNER JOIN Localidade AS loc with(nolock)
				ON bi.loc_id = loc.loc_id
			 LEFT JOIN Dependencia as dep with(nolock)
				ON dep.loc_id = loc.loc_id
				and bi.dep_id = dep.dep_id
			 LEFT JOIN ApoliceSeguro AS aps with(nolock)
				ON bi.aps_id = aps.aps_id
			 LEFT JOIN Seguradora AS seg with(nolock)
				ON seg.seg_id = aps.seg_id
			 LEFT JOIN VW_SeguradoraEntidade AS ent with(nolock)
				ON seg.ent_id = ent.ent_id		 
			 LEFT JOIN StatusConservacao AS stc with(nolock)
				ON bi.stc_id = stc.stc_id
			 LEFT JOIN FatorDepreciacao AS fat with(nolock)
				ON bi.fat_id = fat.fat_id 
			 LEFT JOIN ParametroContabil AS pco with(nolock)
				ON pco.grp_id = (select grp_id from [dbo].[FN_GetGrupoBensSuperioresPai] (bem.grp_id)) 
				and tpm_id = 23 and pco_situacao = 1
			inner join (SELECT * FROM dbo.fnSplit(@status_bem_list, ',') ) as statusList
				on statusList.item = bi.bit_status
			left join MotivoCancelamento mc with(nolock)
				on mc.moc_id = bi.moc_id 
		WHERE
			((@uniges_id IS NULL) OR (bi.bit_uniGestora = @uniges_id))
			AND ((@uniguarda_id IS NULL) OR (bi.bit_uniGuarda = @uniguarda_id))
			AND ((@loc_id IS NULL) OR (bi.loc_id = @loc_id))
			AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))
			AND (@data_inicial IS NULL OR bem.bem_dataCriacao >= @data_inicial) 
			AND (@data_final IS NULL OR bem.bem_dataCriacao  <= @data_final)
			AND	((@reg_pat IS NULL) OR (bi.bit_registroPat = @reg_pat))
			AND (@status_conservacao IS NULL OR bi.stc_id = @status_conservacao)
			AND ((bi.dep_id IS NULL AND  @dep_situacao = 1) 
			       OR (bi.dep_id is not NULL and @dep_situacao = 2) 
			       OR (@dep_situacao IS NULL))	
			AND uniGes.uni_situacao <> 3
			AND ((@grp_id IS NULL) OR bem.grp_id in (select grp_id from FN_GetGrupoHierarquia (@grp_id)))	
			and bi.bit_dataIncorporacao is null
		ORDER BY uniGestora
	end

else if (@blnDataIncorporacao = 1)
	
	begin

	With Fornec AS
	(
		SELECT
			FON.for_id,
			pes_nome AS for_nome
		FROM
			Fornecedor AS FON WITH(NOLOCK)
		INNER JOIN FornecedorPF AS PF WITH(NOLOCK)
			ON FON.for_id = PF.for_id
		INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)
			ON PF.pes_id = PES.pes_id
		
		WHERE
			for_situacao <> 3
		
		UNION ALL
	
		-- Fornecedor PJ
		SELECT
			FON.for_id,
			ent_razaoSocial AS for_nome
		FROM
			Fornecedor AS FON WITH(NOLOCK)
		INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)
			ON FON.for_id = PJ.for_id
		INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)
			ON PJ.ent_id = ENT.ent_id
		
		WHERE
			for_situacao <> 3

	)


		SELECT 
			  bem.bem_id,
			  bi.bit_id,
			  uniGes.uni_id,
			  bi.bit_registroPat,
			  bem.bem_descricao,
			  uniGes.uni_nome as uniGestora, 	  
			  uniGuarda.uad_nome as uniGuarda,
			  uniGes.uni_codigoUGE as ugeCodigo,		
			  grp.grp_nome,	
			  (select grp_nome from [dbo].[FN_GetGrupoBensSuperioresPai] (bem.grp_id)) as grp_nome_pai, --grp_Pai.grp_nome as grp_nome_pai,	  
			  bi.bit_referencia,
			  bem.bem_dataEntrada,
			  bi.bit_valorOrigem, 
			  bi.bit_valorLiquido, 
			  bi.bit_dataIncorporacao,
			  loc.loc_nome,
			  dep.dep_nome,
			  Fornec.for_nome as FornecedorNome,
			  ent.ent_razaoSocial,
			  aps.aps_apolice,
			  bi.bit_dataDepInicio,
			  bi.bit_vidaUtil,
			  fat.fat_nome,
			  bi.bit_cotas,
			  bi.bit_dataBaixa,
			  bi.bit_doctoBaixa,
			  stc.stc_decricao,		  
			  biStatus =	case bi.bit_status
						when 1 then 'Utilizado'
						when 2 then 'Disponível'
						when 3 then 'Inativo'
						when 4 then 'Remessa'
						when 5 then 'Cancelado'
					else
						'Sem status definido'
					end
			  
			  ,bem.bem_cadmat,
			  bem.bem_origem,
			  bi.loc_id,
			  bi.dep_id,	  	
			  bem.bem_dataCriacao,
			  pco.cco_codigoDebito,
			  bit_obsCancelamento   = mc.moc_nome 		   
		
		FROM BemPatrimonial AS bem WITH(NoLock)
		     INNER JOIN BemItem AS bi with(nolock)
				ON bem.bem_id = bi.bem_id
			 INNER JOIN VW_UnidadeGestora AS uniGes with(nolock)
				ON uniGes.uni_id = bi.bit_uniGestora
			INNER JOIN VW_UnidadeAdministrativa as uniGuarda with(noLock)
				ON uniGuarda.uni_id = bi.bit_uniGuarda
			INNER JOIN Fornec 
				ON Fornec.for_id = bem.for_id
			 INNER JOIN GrupoBens AS grp with(nolock)
				ON bem.grp_id = grp.grp_id		 
			 INNER JOIN Localidade AS loc with(nolock)
				ON bi.loc_id = loc.loc_id
			 LEFT JOIN Dependencia as dep with(nolock)
				ON dep.loc_id = loc.loc_id
				and bi.dep_id = dep.dep_id
			 LEFT JOIN ApoliceSeguro AS aps with(nolock)
				ON bi.aps_id = aps.aps_id
			 LEFT JOIN Seguradora AS seg with(nolock)
				ON seg.seg_id = aps.seg_id
			 LEFT JOIN VW_SeguradoraEntidade AS ent with(nolock)
				ON seg.ent_id = ent.ent_id		 
			 LEFT JOIN StatusConservacao AS stc with(nolock)
				ON bi.stc_id = stc.stc_id
			 LEFT JOIN FatorDepreciacao AS fat with(nolock)
				ON bi.fat_id = fat.fat_id 
			 LEFT JOIN ParametroContabil AS pco with(nolock)
				ON pco.grp_id = (select grp_id from [dbo].[FN_GetGrupoBensSuperioresPai] (bem.grp_id)) 
				and tpm_id = 23 and pco_situacao = 1
			inner join (SELECT * FROM dbo.fnSplit(@status_bem_list, ',') ) as statusList
				on statusList.item = bi.bit_status

			left join MotivoCancelamento mc with(nolock)
				on mc.moc_id = bi.moc_id 
		WHERE
			((@uniges_id IS NULL) OR (bi.bit_uniGestora = @uniges_id))
			AND ((@uniguarda_id IS NULL) OR (bi.bit_uniGuarda = @uniguarda_id))
			AND ((@loc_id IS NULL) OR (bi.loc_id = @loc_id))
			AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))
			AND (@data_inicial IS NULL OR bem.bem_dataCriacao >= @data_inicial) 
			AND (@data_final IS NULL OR bem.bem_dataCriacao  <= @data_final)
			AND	((@reg_pat IS NULL) OR (bi.bit_registroPat = @reg_pat))
			AND (@status_conservacao IS NULL OR bi.stc_id = @status_conservacao)
			AND ((bi.dep_id IS NULL AND  @dep_situacao = 1) 
			       OR (bi.dep_id is not NULL and @dep_situacao = 2) 
			       OR (@dep_situacao IS NULL))	
			AND uniGes.uni_situacao <> 3
			AND ((@grp_id IS NULL) OR bem.grp_id in (select grp_id from FN_GetGrupoHierarquia (@grp_id)))
			and bi.bit_dataIncorporacao is not null	
		ORDER BY uniGestora
	end

else -- if (@blnDataIncorporacao = 0) // else if (@blnDataIncorporacao = 1)

	begin
		
		if @grp_id is null 
		
		begin
		--print 'aqui';
		
			With Fornec AS
			(
				SELECT
					FON.for_id,
					pes_nome AS for_nome
				FROM
					Fornecedor AS FON WITH(NOLOCK)
				INNER JOIN FornecedorPF AS PF WITH(NOLOCK)
					ON FON.for_id = PF.for_id
				INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)
					ON PF.pes_id = PES.pes_id
		
				WHERE
					for_situacao <> 3
		
				UNION ALL
	
				-- Fornecedor PJ
				SELECT
					FON.for_id,
					ent_razaoSocial AS for_nome
				FROM
					Fornecedor AS FON WITH(NOLOCK)
				INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)
					ON FON.for_id = PJ.for_id
				INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)
					ON PJ.ent_id = ENT.ent_id
		
				WHERE
					for_situacao <> 3

			)


				SELECT 
					  bem.bem_id,
					  bi.bit_id,
					  uniGes.uni_id,
					  bi.bit_registroPat,
					  bem.bem_descricao,
					  uniGes.uni_nome as uniGestora, 	  
					  uniGuarda.uad_nome as uniGuarda,
					  uniGes.uni_codigoUGE as ugeCodigo,		
					  grp.grp_nome,	
					  (select grp_nome from [dbo].[FN_GetGrupoBensSuperioresPai] (bem.grp_id)) as grp_nome_pai, --grp_Pai.grp_nome as grp_nome_pai,	  
					  bi.bit_referencia,
					  bem.bem_dataEntrada,
					  bi.bit_valorOrigem, 
					  bi.bit_valorLiquido, 
					  bi.bit_dataIncorporacao,
					  loc.loc_nome,
					  dep.dep_nome,
					  Fornec.for_nome as FornecedorNome,
					  ent.ent_razaoSocial,
					  aps.aps_apolice,
					  bi.bit_dataDepInicio,
					  bi.bit_vidaUtil,
					  fat.fat_nome,
					  bi.bit_cotas,
					  bi.bit_dataBaixa,
					  bi.bit_doctoBaixa,
					  stc.stc_decricao,		  
					  biStatus =	case bi.bit_status
								when 1 then 'Utilizado'
								when 2 then 'Disponível'
								when 3 then 'Inativo'
								when 4 then 'Remessa'
								when 5 then 'Cancelado'
							else
								'Sem status definido'
							end
			  
					  ,bem.bem_cadmat,
					  bem.bem_origem,
					  bi.loc_id,
					  bi.dep_id,	  	
					  bem.bem_dataCriacao,
					  pco.cco_codigoDebito,
				          bit_obsCancelamento   = mc.moc_nome 		   
		
				FROM BemPatrimonial AS bem WITH(NoLock)
				     INNER JOIN BemItem AS bi with(nolock)
						ON bem.bem_id = bi.bem_id
					 INNER JOIN VW_UnidadeGestora AS uniGes with(nolock)
						ON uniGes.uni_id = bi.bit_uniGestora
					INNER JOIN VW_UnidadeAdministrativa as uniGuarda with(noLock)
						ON uniGuarda.uni_id = bi.bit_uniGuarda
					INNER JOIN Fornec 
						ON Fornec.for_id = bem.for_id
					 INNER JOIN GrupoBens AS grp with(nolock)
						ON bem.grp_id = grp.grp_id		 
					 INNER JOIN Localidade AS loc with(nolock)
						ON bi.loc_id = loc.loc_id
					 LEFT JOIN Dependencia as dep with(nolock)
						ON dep.loc_id = loc.loc_id
						and bi.dep_id = dep.dep_id
					 LEFT JOIN ApoliceSeguro AS aps with(nolock)
						ON bi.aps_id = aps.aps_id
					 LEFT JOIN Seguradora AS seg with(nolock)
						ON seg.seg_id = aps.seg_id
					 LEFT JOIN VW_SeguradoraEntidade AS ent with(nolock)
						ON seg.ent_id = ent.ent_id		 
					 LEFT JOIN StatusConservacao AS stc with(nolock)
						ON bi.stc_id = stc.stc_id
					 LEFT JOIN FatorDepreciacao AS fat with(nolock)
						ON bi.fat_id = fat.fat_id 
					 LEFT JOIN ParametroContabil AS pco with(nolock)
						ON pco.grp_id = (select grp_id from [dbo].[FN_GetGrupoBensSuperioresPai] (bem.grp_id)) 
						and tpm_id = 23 and pco_situacao = 1
					
					inner join (SELECT * FROM dbo.fnSplit(@status_bem_list, ',') ) as statusList
						on statusList.item = bi.bit_status

					left join MotivoCancelamento mc with(nolock)
						on mc.moc_id = bi.moc_id 
				WHERE
					((@uniges_id IS NULL) OR (bi.bit_uniGestora = @uniges_id))
					AND ((@uniguarda_id IS NULL) OR (bi.bit_uniGuarda = @uniguarda_id))
					AND ((@loc_id IS NULL) OR (bi.loc_id = @loc_id))
					AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))
					AND ((@grp_id IS NULL) OR(grp.grp_id = @grp_id) OR (grp.grp_idPai = @grp_id))		
					AND (@data_inicial IS NULL OR bem.bem_dataCriacao >= @data_inicial) 
					AND (@data_final IS NULL OR bem.bem_dataCriacao  <= @data_final)
					AND	((@reg_pat IS NULL) OR (bi.bit_registroPat = @reg_pat))
					AND (@status_conservacao IS NULL OR bi.stc_id = @status_conservacao)
					AND ((bi.dep_id IS NULL AND  @dep_situacao = 1) 
					       OR (bi.dep_id is not NULL and @dep_situacao = 2) 
					       OR (@dep_situacao IS NULL))	
					AND uniGes.uni_situacao <> 3
				ORDER BY uniGestora

		end
	
	else 
	-- if (@blnDataIncorporacao = 0) // else if (@blnDataIncorporacao = 1)
	-- if @grp_id is not null 
	
		begin
			With Fornec AS
			(
				SELECT
					FON.for_id,
					pes_nome AS for_nome
				FROM
					Fornecedor AS FON WITH(NOLOCK)
				INNER JOIN FornecedorPF AS PF WITH(NOLOCK)
					ON FON.for_id = PF.for_id
				INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)
					ON PF.pes_id = PES.pes_id
		
				WHERE
					for_situacao <> 3
		
				UNION ALL
	
				-- Fornecedor PJ
				SELECT
					FON.for_id,
					ent_razaoSocial AS for_nome
				FROM
					Fornecedor AS FON WITH(NOLOCK)
				INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)
					ON FON.for_id = PJ.for_id
				INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)
					ON PJ.ent_id = ENT.ent_id
		
				WHERE
					for_situacao <> 3

			)


				SELECT 
					  bem.bem_id,
					  bi.bit_id,
					  uniGes.uni_id,
					  bi.bit_registroPat,
					  bem.bem_descricao,
					  uniGes.uni_nome as uniGestora, 	  
					  uniGuarda.uad_nome as uniGuarda,
					  uniGes.uni_codigoUGE as ugeCodigo,		
					  grp.grp_nome,	
					  (select grp_nome from [dbo].[FN_GetGrupoBensSuperioresPai] (bem.grp_id)) as grp_nome_pai, --grp_Pai.grp_nome as grp_nome_pai,	  
					  bi.bit_referencia,
					  bem.bem_dataEntrada,
					  bi.bit_valorOrigem, 
					  bi.bit_valorLiquido, 
					  bi.bit_dataIncorporacao,
					  loc.loc_nome,
					  dep.dep_nome,
					  Fornec.for_nome as FornecedorNome,
					  ent.ent_razaoSocial,
					  aps.aps_apolice,
					  bi.bit_dataDepInicio,
					  bi.bit_vidaUtil,
					  fat.fat_nome,
					  bi.bit_cotas,
					  bi.bit_dataBaixa,
					  bi.bit_doctoBaixa,
					  stc.stc_decricao,		  
					  biStatus =	case bi.bit_status
								when 1 then 'Utilizado'
								when 2 then 'Disponível'
								when 3 then 'Inativo'
								when 4 then 'Remessa'
								when 5 then 'Cancelado'
							else
								'Sem status definido'
							end
			  
					  ,bem.bem_cadmat,
					  bem.bem_origem,
					  bi.loc_id,
					  bi.dep_id,	  	
					  bem.bem_dataCriacao,
					  pco.cco_codigoDebito,
					  bit_obsCancelamento   = mc.moc_nome 		   
		
				FROM BemPatrimonial AS bem WITH(NoLock)
				     INNER JOIN BemItem AS bi with(nolock)
						ON bem.bem_id = bi.bem_id
					 INNER JOIN VW_UnidadeGestora AS uniGes with(nolock)
						ON uniGes.uni_id = bi.bit_uniGestora
					INNER JOIN VW_UnidadeAdministrativa as uniGuarda with(noLock)
						ON uniGuarda.uni_id = bi.bit_uniGuarda
					INNER JOIN Fornec 
						ON Fornec.for_id = bem.for_id
					 INNER JOIN GrupoBens AS grp with(nolock)
						ON bem.grp_id = grp.grp_id		 
					 INNER JOIN Localidade AS loc with(nolock)
						ON bi.loc_id = loc.loc_id
					 LEFT JOIN Dependencia as dep with(nolock)
						ON dep.loc_id = loc.loc_id
						and bi.dep_id = dep.dep_id
					 LEFT JOIN ApoliceSeguro AS aps with(nolock)
						ON bi.aps_id = aps.aps_id
					 LEFT JOIN Seguradora AS seg with(nolock)
						ON seg.seg_id = aps.seg_id
					 LEFT JOIN VW_SeguradoraEntidade AS ent with(nolock)
						ON seg.ent_id = ent.ent_id		 
					 LEFT JOIN StatusConservacao AS stc with(nolock)
						ON bi.stc_id = stc.stc_id
					 LEFT JOIN FatorDepreciacao AS fat with(nolock)
						ON bi.fat_id = fat.fat_id 
					 LEFT JOIN ParametroContabil AS pco with(nolock)
						on pco.grp_id = (select grp_id from [dbo].[FN_GetGrupoBensSuperioresPai] (bem.grp_id)) 
						and tpm_id = 23 and pco_situacao = 1
					
					inner join (SELECT * FROM dbo.fnSplit(@status_bem_list, ',') ) as statusList
						on statusList.item = bi.bit_status

					left join MotivoCancelamento mc with(nolock)
						on mc.moc_id = bi.moc_id 
				WHERE
					((@uniges_id IS NULL) OR (bi.bit_uniGestora = @uniges_id))
					AND ((@uniguarda_id IS NULL) OR (bi.bit_uniGuarda = @uniguarda_id))
					AND ((@loc_id IS NULL) OR (bi.loc_id = @loc_id))
					AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))
					AND (@data_inicial IS NULL OR bem.bem_dataCriacao >= @data_inicial) 
					AND (@data_final IS NULL OR bem.bem_dataCriacao  <= @data_final)
					AND	((@reg_pat IS NULL) OR (bi.bit_registroPat = @reg_pat))
					AND (@status_conservacao IS NULL OR bi.stc_id = @status_conservacao)
					AND ((bi.dep_id IS NULL AND  @dep_situacao = 1) 
					       OR (bi.dep_id is not NULL and @dep_situacao = 2) 
					       OR (@dep_situacao IS NULL))	
					AND uniGes.uni_situacao <> 3
					AND ((@grp_id IS NULL) OR bem.grp_id in (select grp_id from FN_GetGrupoHierarquia (@grp_id)))
				ORDER BY uniGestora
		end

		
	end

end		



GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialCadastro_MontaRelatorioSumSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--declare --  
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialCadastro_MontaRelatorioSumSP]    
    
 @uniges_id int = null ,    
 @uniguarda_id int =null,    
 @grp_id int = null,    
 @data_inicial date,    
 @data_final date,    
 @reg_pat varchar(20)=null,    
 @dep_situacao int=null, -- Situação da dependencia para o bem: 1 = nao existente 2 = existente 0 = todas    
 @status_bem int=null, -- Status do bem: 1 = Utilizado  2 = Disponível  0 = todos     
 @status_conservacao int=null,    
 @loc_id int=null,    
 @dep_id int=null,    
 @blnDataIncorporacao int = null,    
 @status_bem_list varchar(20) = null -- (Sera pasado uma lista 1,2,3,4,5 por ex...)    
AS    
    
BEGIN    
    
declare     
 @head  varchar(max)    
,@bodyJoin varchar(max)    
,@bodyWhere varchar(max)    
,@sql  nvarchar(max);    
    
    
if(@status_bem_list is null)    
begin    
 set @status_bem_list = '1,2,3,4,5'    
end    
     
    
set @head =     
    
'    
    
 ;With Fornec AS    
 (    
  SELECT    
   FON.for_id,    
   pes_nome AS for_nome    
   ,reg= 1    
  FROM    
   Fornecedor AS FON WITH(NOLOCK)    
  INNER JOIN FornecedorPF AS PF WITH(NOLOCK)    
   ON FON.for_id = PF.for_id    
  INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)    
   ON PF.pes_id = PES.pes_id    
      
  WHERE    
   for_situacao <> 3    
      
  UNION ALL    
     
  -- Fornecedor PJ    
  SELECT    
   FON.for_id,    
   ent_razaoSocial AS for_nome    
   ,reg= 1    
  FROM    
   Fornecedor AS FON WITH(NOLOCK)    
  INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)    
   ON FON.for_id = PJ.for_id    
  INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)    
   ON PJ.ent_id = ENT.ent_id    
      
  WHERE    
   for_situacao <> 3    
    
 )    
    
 select distinct    
    
   uniGestora      
  ,pco.cco_codigoDebito     
  ,gb.grp_nome      
  ,bit_valorOrigem     
  ,bem_qtdeInicial     
     
 from (    
    
  select     
    
    uniGestora      
   ,cco_codigoDebito     
   --,grp_nome  = (SELECT grp_nome FROM  GrupoBens  with(nolock) where  grp_id = @grp_id)    
   ,grp_nome      
   ,bit_valorOrigem = sum(convert(money ,bit_valorOrigem))  
   ,bem_qtdeInicial = count(bem_qtdeInicial)     
  from    
    
  (    
   SELECT     
     uniGestora  = uniGes.uni_nome     
    ,cco_codigoDebito = pco.cco_codigoDebito    
    ,grp_nome  = (SELECT grp_nome FROM  GrupoBens  with(nolock) where  grp_id = @grp_id)    
    ,bit_valorOrigem = bi.bit_valorLiquido    
    ,bem_qtdeInicial = 1    
'    
    
set @bodyJoin =    
'    
      
 FROM BemPatrimonial AS bem WITH(NoLock)    
  INNER JOIN BemItem AS bi with(nolock)    
   ON bem.bem_id = bi.bem_id    
   INNER JOIN VW_UnidadeGestora AS uniGes with(nolock)    
   ON uniGes.uni_id = bi.bit_uniGestora    
  INNER JOIN VW_UnidadeAdministrativa as uniGuarda with(noLock)    
   ON uniGuarda.uni_id = bi.bit_uniGuarda    
  INNER JOIN Fornec     
   ON Fornec.for_id = bem.for_id    
   INNER JOIN GrupoBens AS grp with(nolock)    
   ON bem.grp_id = grp.grp_id       
   INNER JOIN Localidade AS loc with(nolock)    
   ON bi.loc_id = loc.loc_id    
   LEFT JOIN Dependencia as dep with(nolock)    
   ON dep.loc_id = loc.loc_id    
   and bi.dep_id = dep.dep_id    
   LEFT JOIN ApoliceSeguro AS aps with(nolock)    
   ON bi.aps_id = aps.aps_id    
   LEFT JOIN Seguradora AS seg with(nolock)    
   ON seg.seg_id = aps.seg_id    
   LEFT JOIN VW_SeguradoraEntidade AS ent with(nolock)    
   ON seg.ent_id = ent.ent_id       
   LEFT JOIN StatusConservacao AS stc with(nolock)    
   ON bi.stc_id = stc.stc_id    
   LEFT JOIN FatorDepreciacao AS fat with(nolock)    
   ON bi.fat_id = fat.fat_id     
   LEFT JOIN ParametroContabil AS pco with(nolock)    
   ON pco.grp_id = (select grp_id from [dbo].[FN_GetGrupoBensSuperioresPai] (bem.grp_id))     
   and tpm_id = 23 and pco_situacao = 1    
       
   inner join (SELECT * FROM dbo.fnSplit(@status_bem_list, '','') ) as statusList    
   on statusList.item = bi.bit_status    
'    
    
if @blnDataIncorporacao = 0    
begin    
    
 set @bodyWhere =     
 '    
    
  WHERE    
    
    
   ((@uniges_id IS NULL) OR (bi.bit_uniGestora = @uniges_id))    
   AND ((@uniguarda_id IS NULL) OR (bi.bit_uniGuarda = @uniguarda_id))    
   AND ((@loc_id IS NULL) OR (bi.loc_id = @loc_id))    
   AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))    
   AND (@data_inicial IS NULL OR convert(date,bem.bem_dataCriacao) >= @data_inicial)     
   AND (@data_final IS NULL OR convert(date,bem.bem_dataCriacao)  <= @data_final)    
   AND ((@reg_pat IS NULL) OR (bi.bit_registroPat = @reg_pat))    
   AND (@status_conservacao IS NULL OR bi.stc_id = @status_conservacao)    
   AND ((bi.dep_id IS NULL AND  @dep_situacao = 1)     
    OR (bi.dep_id is not NULL and @dep_situacao = 2)     
    OR (@dep_situacao IS NULL))     
   AND (@status_bem IS NULL OR bi.bit_status = @status_bem)    
   AND uniGes.uni_situacao <> 3    
   AND ((@grp_id IS NULL) OR bem.grp_id in (select grp_id from FN_GetGrupoHierarquia (@grp_id)))     
   and bi.bit_dataIncorporacao is null    
  )result    
    
  group by    
    uniGestora      
   ,cco_codigoDebito     
   ,grp_nome    
      
  )as result2    
  inner join ParametroContabil    pco with(nolock)    
  on pco.cco_codigodebito = result2.cco_codigodebito    
  inner join GrupoBens     gb with(nolock)    
  on pco.grp_id = gb.grp_id    
      
  ORDER BY     
   uniGestora    
    
    
    
 '    
end    
    
else if @blnDataIncorporacao = 1    
    
begin    
    
 set @bodyWhere =     
 '    
    
  WHERE    
    
    
   ((@uniges_id IS NULL) OR (bi.bit_uniGestora = @uniges_id))    
   AND ((@uniguarda_id IS NULL) OR (bi.bit_uniGuarda = @uniguarda_id))    
   AND ((@loc_id IS NULL) OR (bi.loc_id = @loc_id))    
   AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))    
   AND (@data_inicial IS NULL OR convert(date,bem.bem_dataCriacao) >= @data_inicial)     
   AND (@data_final IS NULL OR convert(date,bem.bem_dataCriacao)  <= @data_final)    
   AND ((@reg_pat IS NULL) OR (bi.bit_registroPat = @reg_pat))    
   AND (@status_conservacao IS NULL OR bi.stc_id = @status_conservacao)    
   AND ((bi.dep_id IS NULL AND  @dep_situacao = 1)     
    OR (bi.dep_id is not NULL and @dep_situacao = 2)     
    OR (@dep_situacao IS NULL))     
   AND (@status_bem IS NULL OR bi.bit_status = @status_bem)    
   AND uniGes.uni_situacao <> 3    
   AND ((@grp_id IS NULL) OR bem.grp_id in (select grp_id from FN_GetGrupoHierarquia (@grp_id)))    
   and bi.bit_dataIncorporacao is not null     
  )result    
    
  group by    
    uniGestora      
   ,cco_codigoDebito     
   ,grp_nome    
      
  )as result2    
  inner join ParametroContabil    pco with(nolock)    
  on pco.cco_codigodebito = result2.cco_codigodebito    
  inner join GrupoBens     gb with(nolock)    
  on pco.grp_id = gb.grp_id    
      
  ORDER BY     
   uniGestora    
 '    
    
end     
    
else     
    
begin    
 set @bodyWhere =     
 '    
    
  WHERE    
    
    
   ((@uniges_id IS NULL) OR (bi.bit_uniGestora = @uniges_id))    
   AND ((@uniguarda_id IS NULL) OR (bi.bit_uniGuarda = @uniguarda_id))    
   AND ((@loc_id IS NULL) OR (bi.loc_id = @loc_id))    
   AND ((@dep_id IS NULL) OR (bi.dep_id = @dep_id))    
   AND (@data_inicial IS NULL OR convert(date,bem.bem_dataCriacao) >= @data_inicial)     
   AND (@data_final IS NULL OR convert(date,bem.bem_dataCriacao)  <= @data_final)    
   AND ((@reg_pat IS NULL) OR (bi.bit_registroPat = @reg_pat))    
   AND (@status_conservacao IS NULL OR bi.stc_id = @status_conservacao)    
   AND ((bi.dep_id IS NULL AND  @dep_situacao = 1)     
    OR (bi.dep_id is not NULL and @dep_situacao = 2)     
    OR (@dep_situacao IS NULL))     
   AND (@status_bem IS NULL OR bi.bit_status = @status_bem)    
   AND uniGes.uni_situacao <> 3    
   AND ((@grp_id IS NULL) OR bem.grp_id in (select grp_id from FN_GetGrupoHierarquia (@grp_id)))     
  )result    
    
  group by    
    uniGestora      
   ,cco_codigoDebito     
   ,grp_nome    
      
  )as result2    
  inner join ParametroContabil    pco with(nolock)    
  on pco.cco_codigodebito = result2.cco_codigodebito    
  inner join GrupoBens     gb with(nolock)    
  on pco.grp_id = gb.grp_id    
      
  ORDER BY     
   uniGestora    
    
 '    
end    
    
    
set @sql = (@head + @bodyJoin + @bodyWhere)    
    
print @sql    
    
exec sp_executesql     
 @sql    
 ,    
 N'    
     
 @uniges_id int ,    
 @uniguarda_id int = null,    
 @grp_id int = 1,    
 @data_inicial date,    
 @data_final date,    
 @reg_pat varchar(20)= null,    
 @dep_situacao int= null,    
 @status_bem int= null,    
 @status_conservacao int= null,    
 @loc_id int= null,    
 @dep_id int= null,    
 @status_bem_list varchar(20)=null     
     
 '    
 ,@uniges_id,    
  @uniguarda_id,    
  @grp_id,    
  @data_inicial,    
  @data_final,    
  @reg_pat,    
  @dep_situacao,     
  @status_bem,    
  @status_conservacao,    
  @loc_id,    
  @dep_id,    
  @status_bem_list     
    
end    
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialCadastro_REL_CC]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext NEW_BemPatrimonialCadastro_MontaRelatorioSP


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================
-- Author:		Lukas Riehl Figueiredo
-- Create date: 28/09/2010
-- Description:	Stored Procedure que retorna a informação de cadastro de bens de um grupo 

-- Author:		Gabriel Malinosqui
-- Alter date: 08/04/2014
-- Description:	Foi decidido que não tera se aplicará mais a mascara no campo ugeCodigo, era assim: 
-- uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo,

-- =============================================
--exec NEW_BemPatrimonialCadastro_REL_CC 5663
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialCadastro_REL_CC]
(	@uniges_id int
)
AS
BEGIN

With Fornec AS
(
	SELECT
		FON.for_id,
		pes_nome AS for_nome
	FROM
		Fornecedor AS FON WITH(NOLOCK)
	INNER JOIN FornecedorPF AS PF WITH(NOLOCK)
		ON FON.for_id = PF.for_id
	INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)
		ON PF.pes_id = PES.pes_id
		
	WHERE
		for_situacao <> 3
		
	UNION ALL
	
	-- Fornecedor PJ
	SELECT
		FON.for_id,
		ent_razaoSocial AS for_nome
	FROM
		Fornecedor AS FON WITH(NOLOCK)
	INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)
		ON FON.for_id = PJ.for_id
	INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)
		ON PJ.ent_id = ENT.ent_id		
	WHERE
		for_situacao <> 3

)
	SELECT 
		  bem.bem_id,
		  bi.bit_id,
		  uniGes.uni_id,
		  bi.bit_registroPat,
		  bem.bem_descricao,
		  uniGes.uni_nome as uniGestora, 	  
		  uniGuarda.uad_nome as uniGuarda,
		  uniGes.uni_codigoUGE as ugeCodigo,		
		  grp.grp_nome,	
		  grp.grp_id,
		   grp.grp_idPai ,
		  bi.bit_referencia,
		  bem.bem_dataEntrada,
		  bi.bit_valorOrigem,
		  loc.loc_nome,
		  dep.dep_nome,
		  --dbo.FN_GetFornecedorNome(bem.for_id) as FornecedorNome, 
		  Fornec.for_nome as FornecedorNome,
		  ent.ent_razaoSocial,
		  aps.aps_apolice,
		  bi.bit_dataDepInicio,
		  bi.bit_vidaUtil,
		  fat.fat_nome,
		  bi.bit_cotas,
		  bi.bit_dataBaixa,
		  bi.bit_doctoBaixa,
		  stc.stc_decricao,		  
		  CASE WHEN bi.bit_status = 1
			THEN 'Utilizado'
			ELSE 'Disponível' 
		  END as biStatus,
		  bem.bem_cadmat,
		  bem.bem_origem,
		  bi.loc_id,
		  bi.dep_id,	  	
		  bem.bem_dataCriacao
		  --cd.cco_codigo  as cco_codigoDebito,
		  --cd.cco_nome as NomeDebito,
		  --cc.cco_codigo as cco_codigoCredito,
		  --cc.cco_nome as NomeCredito
		 --pc.cco_codigoDebito,
		 --pc.cco_codigoCredito
		    
		
	FROM  BemPatrimonial AS bem WITH(NoLock)
	     inner JOIN BemItem AS bi with(nolock)
			ON bem.bem_id = bi.bem_id
		 INNER JOIN VW_UnidadeGestora AS uniGes with(nolock)
			ON uniGes.uni_id = bi.bit_uniGestora
		INNER JOIN VW_UnidadeAdministrativa as uniGuarda with(noLock)
			ON uniGuarda.uni_id = bi.bit_uniGuarda
		INNER JOIN Fornec 
			ON Fornec.for_id = bem.for_id
		 
		 left JOIN GrupoBens AS grp with(nolock)
			ON bem.grp_id = grp.grp_id	
		 INNER JOIN Localidade AS loc with(nolock)
			ON bi.loc_id = loc.loc_id
		 LEFT JOIN Dependencia as dep with(nolock)
			ON dep.loc_id = loc.loc_id
			and bi.dep_id = dep.dep_id
		 LEFT JOIN ApoliceSeguro AS aps with(nolock)
			ON bi.aps_id = aps.aps_id
		 LEFT JOIN Seguradora AS seg with(nolock)
			ON seg.seg_id = aps.seg_id
		 LEFT JOIN VW_SeguradoraEntidade AS ent with(nolock)
			ON seg.ent_id = ent.ent_id		 
		 LEFT JOIN StatusConservacao AS stc with(nolock)
			ON bi.stc_id = stc.stc_id
		 LEFT JOIN FatorDepreciacao AS fat with(nolock)
			ON bi.fat_id = fat.fat_id 
		 --left Join ParametroContabil pc with(nolock)
			--on grp.grp_id = pc.grp_id or grp.grp_idPai = pc.grp_id
		 --right Join ContasContabeis cc with(nolock)
		 --   on cc.cco_codigo = pc.cco_codigoCredito
		 --right Join ContasContabeis cd with(nolock)
		 --   on cd.cco_codigo = pc.cco_codigoDebito  
	WHERE
		bi.bit_uniGestora =  @uniges_id
		AND uniGes.uni_situacao <> 3
	ORDER BY uniGestora				 
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialEmpenho_MontaRelatorioRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Riehl Figueiredo
-- Create date: 22/11/2010
-- Description:	Stored procedure que retorna os bens filtrados por numero da nota de empenho e/ou data de entrada e/ou unidade gestora
-- =============================================
create PROCEDURE [dbo].[NEW_BemPatrimonialEmpenho_MontaRelatorioRS]
    @uni_id int,
    @uni_visao int,
	@data_inicial date,
	@data_final date,
	@numero_empenho char(11)
AS
BEGIN

	--Bens Incorporados--
	
	select
		bem.bem_id,
		bi.bit_id,
		bid.bid_numeroDoc AS bem_ne,
		'Incorporado' as estado_bem,
		bi.bit_status,
		bem.bem_descricao,
		bi.bit_registroPat,
		bem.bem_dataEntrada,
		dbo.FN_GetUniNome(bi.bit_uniGestora) as uniGestora,		  
		dbo.FN_GetUniNome(bi.bit_uniGuarda) as uniGuarda,
		uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo
	
	from BemPatrimonial as bem	
		inner join BemItem as bi with(nolock)
				on bem.bem_id = bi.bem_id
		INNER JOIN BemItemDocumento AS bid WITH (NoLock)
				ON bid.bem_id = bi.bem_id
				AND bid.bit_id = bi.bit_id
				AND bid.bid_tipoDoc = 4
		left join dbo.Unidade AS uniGes with(nolock)
				on uniGes.uni_id = bi.bit_uniGestora
				
	where
		bi.bit_dataIncorporacao is not null
		and((@uni_id = 0) OR (bi.bit_uniGestora = @uni_id))
		and((@numero_empenho is null) OR (bid.bid_numeroDoc = @numero_empenho))	
		and (@data_inicial IS NULL OR bem.bem_dataEntrada >= @data_inicial) 
		and (@data_final IS NULL OR bem.bem_dataEntrada  <= @data_final)
		AND(@uni_visao IS NULL 
			OR bi.bit_uniGuarda IN (SELECT uni_id FROM FN_GetUnidadeEFilhas(@uni_visao)))
	
	
	--Bens recebidos--	
	
	union
		 select
			bem.bem_id,
			bi.bit_id,
			bid.bid_numeroDoc AS bem_ne,
			'Recebido' as estado_bem,
			bi.bit_status,
			bem.bem_descricao,
			bi.bit_registroPat,
			bem.bem_dataEntrada,
			dbo.FN_GetUniNome(bi.bit_uniGestora) as uniGestora,		  
			dbo.FN_GetUniNome(bi.bit_uniGuarda) as uniGuarda,
			uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo
			
		 from BemPatrimonial as bem

			inner join BemItem as bi with(nolock)
					on bem.bem_id = bi.bem_id	
			INNER JOIN BemItemDocumento AS bid WITH (NoLock)
				ON bid.bem_id = bi.bem_id
				AND bid.bit_id = bi.bit_id
				AND bid.bid_tipoDoc = 4		
			inner join BemItemWfStatus as bws with(nolock)
					on bi.bit_id = bws.bit_id
					and bi.bem_id = bws.bem_id					
			left join dbo.Unidade AS uniGes with(nolock)
					on uniGes.uni_id = bi.bit_uniGestora
		where
			  (bi.bit_dataIncorporacao is null)
			  AND((bws.wrk_id = 3) and (bws.stp_id = 10) and (bws.bws_situacao = 2))
			  AND((@uni_id = 0) or (bi.bit_uniGestora = @uni_id))
			  AND((@numero_empenho is null) OR (bid.bid_numeroDoc = @numero_empenho))	
			  AND (@data_inicial IS NULL OR bem.bem_dataEntrada >= @data_inicial) 
			  AND (@data_final IS NULL OR bem.bem_dataEntrada  <= @data_final)	
			  AND(@uni_visao IS NULL 
				OR bi.bit_uniGuarda IN (SELECT uni_id FROM FN_GetUnidadeEFilhas(@uni_visao)))
		
	--Bens aguardando recebimento--		  
	
    union 
		select
			bem.bem_id,
			bi.bit_id,
			bid.bid_numeroDoc AS bem_ne,
			'Aguardando recebimento' as estado_bem,
			bi.bit_status,
			bem.bem_descricao,
			bi.bit_registroPat,
			bem.bem_dataEntrada,
			dbo.FN_GetUniNome(bi.bit_uniGestora) as uniGestora,		  
			dbo.FN_GetUniNome(bi.bit_uniGuarda) as uniGuarda,
		    uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo
			
		 from BemPatrimonial as bem
			inner join BemItem as BI with(nolock)
					on bem.bem_id = bi.bem_id
			INNER JOIN BemItemDocumento AS bid WITH (NoLock)
				ON bid.bem_id = bi.bem_id
				AND bid.bit_id = bi.bit_id
				AND bid.bid_tipoDoc = 4	
		    inner join BemItemWfStatus as bws with(nolock)
					on bi.bit_id = bws.bit_id
					and bi.bem_id = bws.bem_id	
					and bws.bit_id = BI.bit_id  
					and bws.wrk_id = 3 
					and bws.stp_id = 9 
					and bws.bws_situacao = 1
		    left join dbo.Unidade AS uniGes with(nolock)
					on uniGes.uni_id = bi.bit_uniGestora		

		where
			 bi.bit_dataIncorporacao is null
			 AND NOT EXISTS 
			 (	select 				    
					bit_id					
				  from 
					BemItemWfStatus				  
				  where
					BemItemWfStatus.bem_id  = BI.bem_id				   
				    and  BemItemWfStatus.bit_id = BI.bit_id
				    and wrk_id = 3
				    and stp_id = 10
				    and bws_situacao = 2				    
			 )			 
			 AND((@uni_id = 0) or (bi.bit_uniGestora = @uni_id))
			 AND((@numero_empenho is null) OR (bid.bid_numeroDoc = @numero_empenho))	
			 AND (@data_inicial IS NULL OR bem.bem_dataEntrada >= @data_inicial) 
			 AND (@data_final IS NULL OR bem.bem_dataEntrada  <= @data_final)
			 AND(@uni_visao IS NULL 
				OR bi.bit_uniGuarda IN (SELECT uni_id FROM FN_GetUnidadeEFilhas(@uni_visao)))
    order by 
		bid.bid_numeroDoc 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialEmpenho_MontaRelatorioSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Riehl Figueiredo
-- Create date: 22/11/2010
-- Description:	Stored procedure que retorna os bens filtrados por numero da nota de empenho e/ou data de entrada e/ou unidade gestora
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialEmpenho_MontaRelatorioSP]
    @uni_id int,
    @uni_visao int,
	@data_inicial date,
	@data_final date,
	@numero_empenho char(11)
AS
BEGIN

	--Bens Incorporados--
	
	select
		bem.bem_id,
		bi.bit_id,
		bid.bid_numeroDoc AS bem_ne,
		'Incorporado' as estado_bem,
		bi.bit_status,
		bem.bem_descricao,
		bi.bit_registroPat,
		bem.bem_dataEntrada,
		dbo.FN_GetUniNome(bi.bit_uniGestora) as uniGestora,		  
		dbo.FN_GetUniNome(bi.bit_uniGuarda) as uniGuarda,
		uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo
	
	from BemPatrimonial as bem	
		inner join BemItem as bi with(nolock)
				on bem.bem_id = bi.bem_id
		INNER JOIN BemItemDocumento AS bid WITH (NoLock)
				ON bid.bem_id = bi.bem_id
				AND bid.bit_id = bi.bit_id
				AND bid.bid_tipoDoc = 4
		left join dbo.Unidade AS uniGes with(nolock)
				on uniGes.uni_id = bi.bit_uniGestora
				
	where
		bi.bit_dataIncorporacao is not null
		and((@uni_id = 0) OR (bi.bit_uniGestora = @uni_id))
		and((@numero_empenho is null) OR (bid.bid_numeroDoc = @numero_empenho))	
		and (@data_inicial IS NULL OR bem.bem_dataEntrada >= @data_inicial) 
		and (@data_final IS NULL OR bem.bem_dataEntrada  <= @data_final)
		AND(@uni_visao IS NULL 
			OR bi.bit_uniGuarda IN (SELECT uni_id FROM FN_GetUnidadeEFilhas(@uni_visao)))
	
	
	--Bens recebidos--	
	
	union
		 select
			bem.bem_id,
			bi.bit_id,
			bid.bid_numeroDoc AS bem_ne,
			'Recebido' as estado_bem,
			bi.bit_status,
			bem.bem_descricao,
			bi.bit_registroPat,
			bem.bem_dataEntrada,
			dbo.FN_GetUniNome(bi.bit_uniGestora) as uniGestora,		  
			dbo.FN_GetUniNome(bi.bit_uniGuarda) as uniGuarda,
			uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo
			
		 from BemPatrimonial as bem

			inner join BemItem as bi with(nolock)
					on bem.bem_id = bi.bem_id	
			INNER JOIN BemItemDocumento AS bid WITH (NoLock)
				ON bid.bem_id = bi.bem_id
				AND bid.bit_id = bi.bit_id
				AND bid.bid_tipoDoc = 4		
			inner join BemItemWfStatus as bws with(nolock)
					on bi.bit_id = bws.bit_id
					and bi.bem_id = bws.bem_id					
			left join dbo.Unidade AS uniGes with(nolock)
					on uniGes.uni_id = bi.bit_uniGestora
		where
			  (bi.bit_dataIncorporacao is null)
			  AND((bws.wrk_id = 3) and (bws.stp_id = 10) and (bws.bws_situacao = 2))
			  AND((@uni_id = 0) or (bi.bit_uniGestora = @uni_id))
			  AND((@numero_empenho is null) OR (bid.bid_numeroDoc = @numero_empenho))	
			  AND (@data_inicial IS NULL OR bem.bem_dataEntrada >= @data_inicial) 
			  AND (@data_final IS NULL OR bem.bem_dataEntrada  <= @data_final)	
			  AND(@uni_visao IS NULL 
				OR bi.bit_uniGuarda IN (SELECT uni_id FROM FN_GetUnidadeEFilhas(@uni_visao)))
		
	--Bens aguardando recebimento--		  
	
    union 
		select
			bem.bem_id,
			bi.bit_id,
			bid.bid_numeroDoc AS bem_ne,
			'Aguardando recebimento' as estado_bem,
			bi.bit_status,
			bem.bem_descricao,
			bi.bit_registroPat,
			bem.bem_dataEntrada,
			dbo.FN_GetUniNome(bi.bit_uniGestora) as uniGestora,		  
			dbo.FN_GetUniNome(bi.bit_uniGuarda) as uniGuarda,
		    uni_codigoUGE + REPLICATE('X',6 - LEN(uni_codigoUGE)) as ugeCodigo
			
		 from BemPatrimonial as bem
			inner join BemItem as BI with(nolock)
					on bem.bem_id = bi.bem_id
			INNER JOIN BemItemDocumento AS bid WITH (NoLock)
				ON bid.bem_id = bi.bem_id
				AND bid.bit_id = bi.bit_id
				AND bid.bid_tipoDoc = 4	
		    inner join BemItemWfStatus as bws with(nolock)
					on bi.bit_id = bws.bit_id
					and bi.bem_id = bws.bem_id	
					and bws.bit_id = BI.bit_id  
					and bws.wrk_id = 3 
					and bws.stp_id = 9 
					and bws.bws_situacao = 1
		    left join dbo.Unidade AS uniGes with(nolock)
					on uniGes.uni_id = bi.bit_uniGestora		

		where
			 bi.bit_dataIncorporacao is null
			 AND NOT EXISTS 
			 (	select 				    
					bit_id					
				  from 
					BemItemWfStatus				  
				  where
					BemItemWfStatus.bem_id  = BI.bem_id				   
				    and  BemItemWfStatus.bit_id = BI.bit_id
				    and wrk_id = 3
				    and stp_id = 10
				    and bws_situacao = 2				    
			 )			 
			 AND((@uni_id = 0) or (bi.bit_uniGestora = @uni_id))
			 AND((@numero_empenho is null) OR (bid.bid_numeroDoc = @numero_empenho))	
			 AND (@data_inicial IS NULL OR bem.bem_dataEntrada >= @data_inicial) 
			 AND (@data_final IS NULL OR bem.bem_dataEntrada  <= @data_final)
			 AND(@uni_visao IS NULL 
				OR bi.bit_uniGuarda IN (SELECT uni_id FROM FN_GetUnidadeEFilhas(@uni_visao)))
    order by 
		bid.bid_numeroDoc 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Debora Cavaglieri
-- Create date: 23/07/2012
-- Description:	Exclui informações de Bens importados 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_DELETE]
	@bem_id bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DELETE FROM BensPatrimonialImportacao WHERE bem_id = @bem_id

    RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_DELETE_Importado]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jorge Freitas	
-- Create date: 03/02/2011
-- Description:	Exclui informações de Bens importados com situacao 4 (exclusao)
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_DELETE_Importado]
	@bem_id bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DELETE FROM MovimentacaoBem where bem_id = @bem_id
	DELETE FROM BemItemComposto where bem_id = @bem_id
	DELETE FROM BemItemArquivo where bem_id = @bem_id
	DELETE FROM BemItemWfStatus where bem_id = @bem_id
	DELETE FROM BemItemWorkflow where bem_id = @bem_id
	DELETE FROM BemItem where bem_id = @bem_id
	DELETE FROM BemArquivo where bem_id = @bem_id
	DELETE FROM BensPatrimonialImportacao WHERE bem_id = @bem_id
	DELETE FROM BemPatrimonial where bem_id = @bem_id

    RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_GetEntity]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_GetEntity]
	@bpi_cadmat varchar(40)
	, @bpi_origem tinyint 
	, @bpi_ne char(11)
	, @bpi_uge varchar(60)
	, @bpi_ue VARCHAR(60)
	, @bpi_processo VARCHAR(50)
	, @bpi_documento VARCHAR(20)
	, @bpi_id bigint = null

WITH RECOMPILE
AS
BEGIN

	SELECT 
		bpi_cadmat
      ,bpi_origem
      ,bpi_processo
      ,bpi_item
      ,bpi_qtde
      ,bpi_valorUnitario
      ,bpi_valorTotal
      ,bpi_ne
      ,bpi_nePorcent
      ,bpi_documento
      ,bpi_evento
      ,bpi_naturazaDesp
      ,bpi_dataEntrega
      ,bpi_uo
      ,bpi_uge
      ,bpi_ue
      ,bpi_cnpjCpfFornecedor
      ,bpi_fornecedor
      ,bpi_codFornecedor
      ,bpi_insEstFornecedor
      ,bpi_endFornecedor
      ,bpi_bairroFornecedor
      ,bpi_numFornecedor
      ,bpi_compFornecedor
      ,bpi_cepFornecedor
      ,bpi_codCidadeFornecedor
      ,bpi_cidadeFornecedor
      ,bpi_ufFornecedor
      ,bpi_contatoFornecedor
      ,bpi_fone1Fornecedor
      ,bpi_fone2Fornecedor
      ,bpi_emailFornecedor
      ,bpi_situacao
      ,bpi_dataImportacao
      ,bpi_observacao
      ,bem_id
      ,bpi_id
    FROM 
		BensPatrimonialImportacao WITH(NoLock)
	WHERE	
		(bpi_cadmat = @bpi_cadmat OR @bpi_cadmat IS NULL)
		AND bpi_origem = @bpi_origem
		AND bpi_uge = @bpi_uge
		AND (bpi_ue = @bpi_ue OR @bpi_ue IS NULL)
		AND (bpi_ne = @bpi_ne OR @bpi_ne IS NULL)
		AND (bpi_processo = @bpi_processo OR @bpi_processo IS NULL)
		AND (bpi_documento = @bpi_documento OR @bpi_documento IS NULL)
		AND (bpi_id = @bpi_id OR @bpi_id IS NULL)
		
		
	SELECT @@ROWCOUNT
END



GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_GetEntity_bpi_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Debora Cavaglieri  
-- Create date: 10/08/2012   
-- Description: Busca o bem patrimonial importacao pelo bpi_id  
-- =============================================  
  
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_GetEntity_bpi_id]  
 @bpi_id bigint  
  
--WITH RECOMPILE  
AS  
BEGIN  
  
 SELECT   
  bpi_cadmat  
      ,bpi_origem  
      ,bpi_processo  
      ,bpi_item  
      ,bpi_qtde  
      ,bpi_valorUnitario  
      ,bpi_valorTotal  
      ,bpi_ne  
      ,bpi_nePorcent  
      ,bpi_documento  
      ,bpi_evento  
      ,bpi_naturazaDesp  
      ,bpi_dataEntrega  
      ,bpi_uo  
      ,bpi_uge  
      ,bpi_ue  
      ,bpi_cnpjCpfFornecedor  
      ,bpi_fornecedor  
      ,bpi_codFornecedor  
      ,bpi_insEstFornecedor  
      ,bpi_endFornecedor  
      ,bpi_bairroFornecedor  
      ,bpi_numFornecedor  
      ,bpi_compFornecedor  
      ,bpi_cepFornecedor  
      ,bpi_codCidadeFornecedor  
      ,bpi_cidadeFornecedor  
      ,bpi_ufFornecedor  
      ,bpi_contatoFornecedor  
      ,bpi_fone1Fornecedor  
      ,bpi_fone2Fornecedor  
      ,bpi_emailFornecedor  
      ,bpi_situacao  
      ,bpi_dataImportacao  
      ,bpi_observacao  
      ,bem_id  
      ,bpi_id  
    FROM   
  BensPatrimonialImportacao WITH (NOLock)  
 WHERE   
  bpi_id = @bpi_id  
   
    
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_MaxNE_byUGE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Ivan Roberto Pimentel  
-- Create date: 31/01/2011 17:37:00  
-- Description: Pega o valor máximo da Nota de Empenho da unidade gestora  
-- =============================================  
  
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_MaxNE_byUGE]  
 @bpi_uge INT  
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT  
  MAX(bpi_ne)  
 FROM  
  BensPatrimonialImportacao WITH(NoLock)  
 WHERE   
  bpi_uge = @bpi_uge   
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_PendenteRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================  
-- Author:  Debora Cavaglieri  
-- Create date: 31/03/2011  
-- Description: Retorna importações para unidade ou que a unidade originou  
--              que ainda não foram realizadas  
-- ==================================================================  
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_PendenteRS]  
 @bpi_situacao tinyint  
 , @uni_iddestino AS INTEGER  
 , @uni_origem AS varchar(40)  
--WITH RECOMPILE  
AS  
BEGIN  
   
 SELECT   
  BPI.bpi_documento  
  , BPI.bpi_ne  
  , BPI.bpi_qtde  
  , BPI.bpi_item  
  , UA2.[uad_nome] AS uad_nomedestino  
  , ua2.[uni_id] AS uni_iddestino  
        
    FROM   
  BensPatrimonialImportacao as  BPI WITH (NoLock)  
 INNER JOIN dbo.VW_UnidadeAdministrativa AS UA2 WITH (NoLock)   
 ON  
  (  
   (BPI.bpi_origem = 2 AND UA2.uni_codigoUGE = BPI.bpi_ue )  
   OR (BPI.bpi_origem = 3 AND UA2.uad_codigo = BPI.bpi_ue )  
  )  
  AND  
  (@uni_iddestino IS NULL OR ua2.uni_id IN (Select uni_id from  dbo.FN_GetUnidadesHierarquiaImediata(@uni_iddestino) WHERE uni_id = @uni_iddestino OR uni_codigoUGE IS NULL))  
 WHERE   
  ((@bpi_situacao is null and  bpi_situacao <> 3) or bpi_situacao = @bpi_situacao )  
  AND (bpi_qtde <> 0)  
  
UNION   
  
 SELECT   
  BPI.bpi_documento  
  , BPI.bpi_ne  
  , BPI.bpi_qtde  
  , BPI.bpi_item  
  , UA2.[uad_nome] AS uad_nomedestino  
  , ua2.[uni_id] AS uni_iddestino  
        
    FROM   
  BensPatrimonialImportacao as  BPI WITH (NoLock)  
 INNER JOIN dbo.VW_UnidadeAdministrativa AS UA2 With (noLock)  
 ON  
  (  
   (BPI.bpi_origem = 2 AND UA2.uni_codigoUGE  = BPI.bpi_ue )  
   OR (BPI.bpi_origem = 3 AND UA2.uad_codigo  = BPI.bpi_ue )  
  )  
  
 WHERE   
  ((@bpi_situacao is null and  bpi_situacao <> 3) or bpi_situacao = @bpi_situacao )  
  and (bpi_qtde <> 0)  
  AND (NOT @uni_origem IS NULL AND bpi_uo = @uni_origem)  
       
 ORDER BY   
  uad_nomedestino  
  ,bpi_documento  
   
SELECT @@ROWCOUNT  
  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_PendenteSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_PendenteSP]
@bpi_situacao tinyint
, @uni_iddestino AS INTEGER
, @uni_origem AS varchar(40)

WITH RECOMPILE

AS

BEGIN
 
	SELECT 
		BPI.bpi_documento
		, BPI.bpi_ne
		, BPI.bpi_qtde
		, BPI.bpi_item
		, UA2.[uad_nome] AS uad_nomedestino
		, ua2.[uni_id]	AS uni_iddestino
		, BPI.bpi_item
		, BPI.bpi_valorTotal
		, uge = (select uad_nome from FN_GetUnidadeGestoraImediata( ua2.[uni_id]))
      
	FROM 
		BensPatrimonialImportacao		as  BPI WITH (NoLock)
		INNER JOIN dbo.VW_UnidadeAdministrativa AS UA2 WITH (NoLock) 
		ON
			(
				(BPI.bpi_origem = 2 AND UA2.uni_codigoUGE = BPI.bpi_ue )
				OR (BPI.bpi_origem = 3 AND UA2.uad_codigo = BPI.bpi_ue )
			)
			AND
			(@uni_iddestino IS NULL OR ua2.uni_id IN (Select uni_id from  dbo.FN_GetUnidadesHierarquiaImediata(@uni_iddestino) WHERE uni_id = @uni_iddestino OR uni_codigoUGE IS NULL))
		WHERE 
			1 = 1
			and bpi_situacao = 1
			AND (bpi_qtde <> 0)
			and  BPI.bpi_ne like '%NE%'
			and  BPI.bpi_dataImportacao is null
			
			and not exists
			(

				select top 1 
					* 
				from 
					BensPatrimonialImportacao WITH (NoLock)	
				where
					1 = 1
					and bpi_item = BPI.bpi_item
					and bpi_processo = BPI.bpi_processo
					and bpi_documento = BPI.bpi_documento
					and bpi_ne = BPI.bpi_ne
					and bpi_situacao = 3
			)

UNION 

	SELECT 
		BPI.bpi_documento
		, BPI.bpi_ne
		, BPI.bpi_qtde
		, BPI.bpi_item
		, UA2.[uad_nome] AS uad_nomedestino
		, ua2.[uni_id]	AS uni_iddestino
		, BPI.bpi_item
		, BPI.bpi_valorTotal
		, uge = (select uad_nome from FN_GetUnidadeGestoraImediata( ua2.[uni_id]))
      
	FROM 
		BensPatrimonialImportacao		as  BPI WITH (NoLock)
		INNER JOIN dbo.VW_UnidadeAdministrativa AS UA2 With (noLock)
		ON
		(
			(BPI.bpi_origem = 2 AND UA2.uni_codigoUGE  = BPI.bpi_ue )
			OR (BPI.bpi_origem = 3 AND UA2.uad_codigo  = BPI.bpi_ue )
		)

	WHERE
		1 = 1
		and bpi_situacao = 1
		AND (bpi_qtde <> 0)
		and  BPI.bpi_ne like '%NE%'
		and  BPI.bpi_dataImportacao is null
		AND (NOT @uni_origem IS NULL AND bpi_uo = @uni_origem)
		
		and not exists(

			select top 1 
				* 
			from 
				BensPatrimonialImportacao WITH (NoLock)	
			where
				1 = 1
				and bpi_item = BPI.bpi_item
				and bpi_processo = BPI.bpi_processo
				and bpi_documento = BPI.bpi_documento
				and bpi_ne = BPI.bpi_ne
				and bpi_situacao = 3
		)
					
	ORDER BY 
		uad_nomedestino
		,bpi_documento
	
SELECT @@ROWCOUNT

END


GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_SelectBy_Bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Debora Cavaglieri
-- Create date: 23/07/2012
-- Description:	Retorna os registros importados  
--				Filtrado por bem_id  
-- ==================================================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_SelectBy_Bem_id]
	@bem_id bigint

AS
BEGIN

	SELECT 
		bpi_cadmat
      ,bpi_origem
      ,bpi_processo
      ,bpi_item
      ,bpi_qtde
      ,bpi_valorUnitario
      ,bpi_valorTotal
      ,bpi_ne
      ,bpi_nePorcent
      ,bpi_documento
      ,bpi_evento
      ,bpi_naturazaDesp
      ,bpi_dataEntrega
      ,bpi_uo
      ,bpi_uge
      ,bpi_ue
      ,bpi_cnpjCpfFornecedor
      ,bpi_fornecedor
      ,bpi_codFornecedor
      ,bpi_insEstFornecedor
      ,bpi_endFornecedor
      ,bpi_bairroFornecedor
      ,bpi_numFornecedor
      ,bpi_compFornecedor
      ,bpi_cepFornecedor
      ,bpi_codCidadeFornecedor
      ,bpi_cidadeFornecedor
      ,bpi_ufFornecedor
      ,bpi_contatoFornecedor
      ,bpi_fone1Fornecedor
      ,bpi_fone2Fornecedor
      ,bpi_emailFornecedor
      ,bpi_situacao
      ,bpi_dataImportacao
      ,bpi_observacao
      ,bem_id
      
    FROM 
		BensPatrimonialImportacao as  BPI WITH (NoLock)
    
	WHERE 
		(@bem_id is null or bem_id = @bem_id)
	and (bpi_qtde <> 0)

	ORDER BY 
		bpi_item
	
select @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_SelectByAll]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================  
-- Author:  Jorge Freitas  
-- Create date: 04/11/2010  
-- Description: Retorna os registros importados    
--    Filtrado por bem_id (qdo ja foi salvo no BemPatrimonial)   
--    ou qdo Bem_id is null, ou seja ainda nao salvo.  
-- ==================================================================  
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_SelectByAll]  
 @bpi_situacao tinyint  
 , @bpi_dataImportacao datetime  
 , @bem_id bigint  
 , @bpi_cadmat varchar(40)  
 , @bpi_item varchar(250)  
 , @bpi_processo varchar(50)  
 , @bpi_ne char(11)  
 , @uni_id AS INTEGER  
 , @uni_iddestino AS INTEGER  
--WITH RECOMPILE  
AS  
BEGIN  
  
 SELECT   
  bpi_cadmat  
      ,bpi_origem  
      ,bpi_processo  
      ,bpi_item  
      ,bpi_qtde  
      ,bpi_valorUnitario  
      ,bpi_valorTotal  
      ,bpi_ne  
      ,bpi_nePorcent  
      ,bpi_documento  
      ,bpi_evento  
      ,bpi_naturazaDesp  
      ,bpi_dataEntrega  
      ,bpi_uo  
      ,bpi_uge  
      ,bpi_ue  
      ,bpi_cnpjCpfFornecedor  
      ,bpi_fornecedor  
      ,bpi_codFornecedor  
      ,bpi_insEstFornecedor  
      ,bpi_endFornecedor  
      ,bpi_bairroFornecedor  
      ,bpi_numFornecedor  
      ,bpi_compFornecedor  
      ,bpi_cepFornecedor  
      ,bpi_codCidadeFornecedor  
      ,bpi_cidadeFornecedor  
      ,bpi_ufFornecedor  
      ,bpi_contatoFornecedor  
      ,bpi_fone1Fornecedor  
      ,bpi_fone2Fornecedor  
      ,bpi_emailFornecedor  
      ,bpi_situacao  
      ,bpi_dataImportacao  
      ,bpi_observacao  
      ,bem_id  
      ,bpi_id  
      ,UA.uad_nome  
      , UA.uni_id  
      , UA2.uad_nome AS uad_nomedestino  
      , ua2.uni_id AS uni_iddestino  
        
    FROM   
  BensPatrimonialImportacao as  BPI WITH (NoLock)  
    INNER JOIN   
  dbo.VW_UnidadeAdministrativa AS UA WITH (NoLock)  
  ON  
  (  
   (BPI.bpi_origem = 2 AND UA.uni_codigoUGE = BPI.bpi_uge )  
   OR (BPI.bpi_origem = 3 AND UA.uad_codigo = BPI.bpi_uge )  
  )  
  AND (@uni_id IS NULL OR ua.uni_id = @uni_id)  
    
 INNER JOIN dbo.VW_UnidadeAdministrativa AS UA2 WITH (NoLock)  
 ON  
  (  
   (BPI.bpi_origem = 2 AND UA2.uni_codigoUGE = BPI.bpi_ue )  
   OR (BPI.bpi_origem = 3 AND UA2.uad_codigo = BPI.bpi_ue )  
  )  
  AND  
  (@uni_iddestino IS NULL OR ua2.uni_id  = @uni_iddestino)  
 WHERE   
  ((@bpi_situacao is null and  bpi_situacao <> 3) or bpi_situacao = @bpi_situacao )  
  and (@bpi_dataImportacao is null or bpi_dataImportacao = @bpi_dataImportacao)  
  and (@bem_id is null or bem_id = @bem_id)  
  and (@bpi_cadmat is null or bpi_cadmat = @bpi_cadmat)  
  and (@bpi_item is null or bpi_item like '%' + @bpi_item  + '%')  
  and (@bpi_processo is null or bpi_processo = @bpi_processo)  
  and (@bpi_ne is null or bpi_ne = @bpi_ne)  
 and (bpi_qtde <> 0)  
  
 ORDER BY   
  bpi_item  
   
select @@ROWCOUNT  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_SelectEmpenhos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Jorge Freitas
-- Create date: 04/11/2010
-- Description:	Retorna os registros importados  
--				Filtrado por bem_id (qdo ja foi salvo no BemPatrimonial) 
--				ou qdo Bem_id is null, ou seja ainda nao salvo.
-- ==================================================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_SelectEmpenhos]
	@bpi_cadmat varchar(40)
	, @bpi_origem tinyint
AS
BEGIN

	SELECT 
		   [bpi_cadmat]
		  ,[bpi_origem]
		  ,[bpi_processo]
		  ,[bpi_item]
		  ,[bpi_qtde]
		  ,[bpi_valorUnitario]
		  ,[bpi_valorTotal]
		  ,[bpi_ne]
		  ,[bpi_nePorcent]
		  ,[bpi_documento]
		  ,[bpi_evento]
		  ,[bpi_naturazaDesp]
		  ,[bpi_dataEntrega]
		  ,[bpi_uo]
		  ,[bpi_uge]
		  ,[bpi_ue]
		  ,[bpi_cnpjCpfFornecedor]
		  ,[bpi_fornecedor]
		  ,[bpi_codFornecedor]
		  ,[bpi_insEstFornecedor]
		  ,[bpi_endFornecedor]
		  ,[bpi_bairroFornecedor]
		  ,[bpi_numFornecedor]
		  ,[bpi_compFornecedor]
		  ,[bpi_cepFornecedor]
		  ,[bpi_codCidadeFornecedor]
		  ,[bpi_cidadeFornecedor]
		  ,[bpi_ufFornecedor]
		  ,[bpi_contatoFornecedor]
		  ,[bpi_fone1Fornecedor]
		  ,[bpi_fone2Fornecedor]
		  ,[bpi_emailFornecedor]
		  ,[bpi_situacao]
		  ,[bpi_dataImportacao]
		  ,[bpi_observacao]
		  ,[bem_id]
		FROM 
			BensPatrimonialImportacao as  BPI
	WHERE 
		(@bpi_cadmat is null or bpi_cadmat = @bpi_cadmat)
		and (@bpi_origem is null or bpi_origem = @bpi_origem )
		and (bpi_qtde = 0)
	
	select @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_SelectMaisNovo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_SelectMaisNovo]  
--declare
 @bpi_situacao tinyint = 0  
 , @bpi_dataImportacao datetime =null 
 , @bpi_item varchar(250) =null 
 , @bpi_processo varchar(50)  = null
 , @bpi_ne char(11)  = '2017NE00002'
 , @uni_id AS INTEGER  = 51
  
AS  
BEGIN  
   
 if(@bpi_situacao = 3) -- Importados  
   
 begin  
  WITH UltimaImportacao AS   
  (  
   SELECT   
      bpi_cadmat  
      ,bpi_origem  
      ,bpi_processo  
      ,bpi_item  
      ,bpi_qtde  
      ,bpi_valorUnitario  
      ,bpi_valorTotal  
      ,bpi_ne  
      ,bpi_nePorcent  
      ,bpi_documento  
      ,bpi_evento  
      ,bpi_naturazaDesp  
      ,bpi_dataEntrega  
      ,bpi_uo  
      ,bpi_uge  
      ,bpi_ue  
      ,bpi_cnpjCpfFornecedor  
      ,bpi_fornecedor  
      ,bpi_codFornecedor  
      ,bpi_insEstFornecedor  
      ,bpi_endFornecedor  
      ,bpi_bairroFornecedor  
      ,bpi_numFornecedor  
      ,bpi_compFornecedor  
      ,bpi_cepFornecedor  
      ,bpi_codCidadeFornecedor  
      ,bpi_cidadeFornecedor  
      ,bpi_ufFornecedor  
      ,bpi_contatoFornecedor  
      ,bpi_fone1Fornecedor  
      ,bpi_fone2Fornecedor  
      ,bpi_emailFornecedor  
      ,bpi_situacao  
      ,bpi_dataImportacao  
      ,bpi_observacao  
      ,bem_id  
      ,bpi_id  
      ,UA.uad_nome  
      , UA.uni_id  
      , UA2.uad_nome AS uad_nomedestino  
      , ua2.uni_id AS uni_iddestino  
      ,ROW_NUMBER() OVER(PARTITION BY bpi_cadmat, bpi_origem, bpi_ne, bpi_uge , bpi_ue, bpi_processo, bpi_documento ORDER BY bpi_id DESC) as linha   
   FROM   
    BensPatrimonialImportacao as  BPI WITH (NoLock)  
   INNER JOIN VW_UnidadeAdministrativa  AS UA WITH(NOLOCK)  
    ON     
     (( BPI.bpi_origem = 2 AND convert(int,BPI.bpi_uge) = convert(int,UA.uni_codigoUGE )  )
      OR (BPI.bpi_origem = 3 AND convert(int,BPI.bpi_uge) =  convert(int,UA.uad_codigo)  )
     )  
      
     AND (@uni_id IS NULL OR ua.uni_id = @uni_id)  
      
   INNER JOIN dbo.VW_UnidadeAdministrativa AS UA2 WITH (NoLock)  
    ON  
     (( BPI.bpi_origem = 2 AND UA2.uni_codigoUGE = BPI.bpi_ue )  
      OR (BPI.bpi_origem = 3 AND UA2.uad_codigo = BPI.bpi_ue )  
     )  
   WHERE   
    1 = 1  
    and (bpi_situacao = @bpi_situacao)  
    and (bpi_dataImportacao is not null or bpi_dataImportacao = @bpi_dataImportacao)  
    and (@bpi_item is null or bpi_item like '%' + @bpi_item  + '%')  
    and (@bpi_processo is null or bpi_processo = @bpi_processo)  
    and (@bpi_ne is null or bpi_ne = @bpi_ne)  
    and (bpi_qtde <> 0)  
  )  
   
   SELECT   
    bpi_cadmat  
     ,bpi_origem  
     ,bpi_processo  
     ,bpi_item  
     ,bpi_qtde  
     ,bpi_valorUnitario  
     ,bpi_valorTotal  
     ,bpi_ne  
     ,bpi_nePorcent  
     ,bpi_documento  
     ,bpi_evento  
     ,bpi_naturazaDesp  
     ,bpi_dataEntrega  
     ,bpi_uo  
     ,bpi_uge  
     ,bpi_ue  
     ,bpi_cnpjCpfFornecedor  
     ,bpi_fornecedor  
     ,bpi_codFornecedor  
     ,bpi_insEstFornecedor  
     ,bpi_endFornecedor  
     ,bpi_bairroFornecedor  
     ,bpi_numFornecedor  
     ,bpi_compFornecedor  
     ,bpi_cepFornecedor  
     ,bpi_codCidadeFornecedor  
     ,bpi_cidadeFornecedor  
     ,bpi_ufFornecedor  
     ,bpi_contatoFornecedor  
     ,bpi_fone1Fornecedor  
     ,bpi_fone2Fornecedor  
     ,bpi_emailFornecedor  
     ,bpi_situacao  
     ,bpi_dataImportacao  
     ,bpi_observacao  
     ,bem_id  
     ,bpi_id  
     ,uad_nome  
     , uni_id  
     , uad_nomedestino  
     , uni_iddestino  
     ,linha  
    FROM   
    UltimaImportacao  
   Where   
    linha = 1  
   order by  
    uad_nomedestino  
    ,bpi_documento  
 end  
else -- Nao importados  
 begin  
 WITH UltimaImportacao AS   
 (  
  SELECT   ua2.uni_id uuu,
     bpi_cadmat  
     ,bpi_origem  
     ,bpi_processo  
     ,bpi_item  
     ,bpi_qtde  
     ,bpi_valorUnitario  
     ,bpi_valorTotal  
     ,bpi_ne  
     ,bpi_nePorcent  
     ,bpi_documento  
     ,bpi_evento  
     ,bpi_naturazaDesp  
     ,bpi_dataEntrega  
     ,bpi_uo  
     ,bpi_uge  
     ,bpi_ue  
     ,bpi_cnpjCpfFornecedor  
     ,bpi_fornecedor  
     ,bpi_codFornecedor  
     ,bpi_insEstFornecedor  
     ,bpi_endFornecedor  
     ,bpi_bairroFornecedor  
     ,bpi_numFornecedor  
     ,bpi_compFornecedor  
     ,bpi_cepFornecedor  
     ,bpi_codCidadeFornecedor  
     ,bpi_cidadeFornecedor  
     ,bpi_ufFornecedor  
     ,bpi_contatoFornecedor  
     ,bpi_fone1Fornecedor  
     ,bpi_fone2Fornecedor  
     ,bpi_emailFornecedor  
     ,bpi_situacao  
     ,bpi_dataImportacao  
     ,bpi_observacao  
     ,bem_id  
     ,bpi_id  
     ,UA.uad_nome  
     , UA.uni_id  
     , UA2.uad_nome AS uad_nomedestino  
     , ua2.uni_id AS uni_iddestino  
     ,ROW_NUMBER() OVER(PARTITION BY bpi_cadmat, bpi_origem, bpi_ne, bpi_uge , bpi_ue, bpi_processo, bpi_documento ORDER BY bpi_id DESC) as linha   
  FROM   
   BensPatrimonialImportacao as  BPI WITH (NoLock)  
  INNER JOIN VW_UnidadeAdministrativa  AS UA WITH(NOLOCK)  
   ON     
    (( BPI.bpi_origem = 2 AND  convert(int,BPI.bpi_uge) = convert(int,UA.uni_codigoUGE)   )  
     OR (BPI.bpi_origem = 3 AND  convert(int,BPI.bpi_uge)  = convert(int,UA.uad_codigo)   )  
    ) 
  AND (@uni_id IS NULL OR ua.uni_id = @uni_id)  
  INNER JOIN dbo.VW_UnidadeAdministrativa AS UA2 WITH (NoLock)  
   ON  
    (( BPI.bpi_origem = 2 AND UA2.uni_codigoUGE = BPI.bpi_ue )  
     OR (BPI.bpi_origem = 3 AND UA2.uad_codigo = BPI.bpi_ue )  
    )  
	
  WHERE   
   1 = 1  
   and (bpi_dataImportacao is null)  
   and (bpi_situacao  = 1)  
   and (@bpi_item  is null or bpi_item like '%' + @bpi_item  + '%')  
   and (@bpi_processo is null or bpi_processo = @bpi_processo)  
   --and (bpi_ne  like '%NE%' or bpi_ne = @bpi_ne)  
   and (bpi_ne = @bpi_ne or @bpi_ne is null)  
   and (bpi_qtde  <> 0)  
   and (bpi_ne like '%NE%')  
  
   --Casos que ja existam registros importados e nao importados  
   and not exists(  
  
    select top 1   
     *   
    from   
     BensPatrimonialImportacao WITH (NoLock)   
    where  
     bpi_item = BPI.bpi_item  
    and bpi_processo = BPI.bpi_processo  
    and bpi_documento = BPI.bpi_documento  
    and bpi_ne = BPI.bpi_ne  
    and bpi_situacao = 3  
   )  
 )  
   
  SELECT   uuu,
   bpi_cadmat  
    ,bpi_origem  
    ,bpi_processo  
    ,bpi_item  
    ,bpi_qtde  
    ,bpi_valorUnitario  
    ,bpi_valorTotal  
    ,bpi_ne  
    ,bpi_nePorcent  
    ,bpi_documento  
    ,bpi_evento  
    ,bpi_naturazaDesp  
    ,bpi_dataEntrega  
    ,bpi_uo  
    ,bpi_uge  
    ,bpi_ue  
    ,bpi_cnpjCpfFornecedor  
    ,bpi_fornecedor  
    ,bpi_codFornecedor  
    ,bpi_insEstFornecedor  
    ,bpi_endFornecedor  
    ,bpi_bairroFornecedor  
    ,bpi_numFornecedor  
    ,bpi_compFornecedor  
    ,bpi_cepFornecedor  
    ,bpi_codCidadeFornecedor  
    ,bpi_cidadeFornecedor  
    ,bpi_ufFornecedor  
    ,bpi_contatoFornecedor  
    ,bpi_fone1Fornecedor  
    ,bpi_fone2Fornecedor  
    ,bpi_emailFornecedor  
    ,bpi_situacao  
    ,bpi_dataImportacao  
    ,bpi_observacao  
    ,bem_id  
    ,bpi_id  
    ,uad_nome  
    , uni_id  
    , uad_nomedestino  
    , uni_iddestino  
    ,linha  
   FROM   
   UltimaImportacao  
  Where   
   linha = 1  
  order by  
   uad_nomedestino  
   ,bpi_documento  
 end    
end  
  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_SelectNE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Debora Cavaglieri  
-- Create date: 18/03/2013  
-- Description: Busca as NE da uma unidade gestora  
-- =============================================  
  
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_SelectNE]  
 @uni_id INT  
--WITH RECOMPILE  
AS  
BEGIN  
  
WITH UniGestora AS  
(  
 SELECT   
  uad_codigo  
  ,uni_codigoUGE   
 FROM   
  VW_UnidadeAdministrativa with (nolock)  
 WHERE   
  uni_id = @uni_id  
)  
  
  
 SELECT   
  bpi_ne  
 FROM   
  BensPatrimonialImportacao AS BPI  with(nolock)
  INNER JOIN   
  UniGestora AS UA   
  ON UA.uni_codigoUGE = BPI.bpi_uge   
 WHERE   
  BPI.bpi_origem = 2  
  
UNION  
  
 SELECT   
  bpi_ne   
 FROM   
  BensPatrimonialImportacao AS BPI  with (nolock)
  INNER JOIN   
  UniGestora AS UA   
  ON UA.uad_codigo = BPI.bpi_uge   
 WHERE   
  BPI.bpi_origem = 3  
  
  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialImportacao_UPDATE_Importado]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jorge Freitas	
-- Create date: 12/11/2010
-- Description:	Atualiza os dados do BemPAtrimonialImportacao depois de importado
--Debora Cavaglieri -> alteração para filtrar por bpi_id
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialImportacao_UPDATE_Importado]
	 @bpi_dataImportacao date 
	, @bpi_situacao tinyint 
	, @bem_id bigint
	, @bpi_id bigint


AS

BEGIN
	UPDATE BensPatrimonialImportacao
	SET
		bpi_dataImportacao = @bpi_dataImportacao , 
		bpi_situacao = @bpi_situacao ,
		bem_id = @bem_id
	WHERE
		bpi_id= @bpi_id

	
						
	RETurn @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialLegado_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pedro Gimenez
-- Create date: 17/11/2011 - 09:10
-- Description:	Seleciona bens do legado importados
--              filtrando por unidade
-- Alteração
-- Data 27/12/2013
-- Autor: Christian Freitas
-- Descrição: Adicionado a coluna 'bpl_dataCriacaoDoc5' para carregar os bens importados pelo legado. (Bug 4298)

-- Alteração
-- Data 01/04/2014
-- Autor: Luana Piva
-- Descrição: Ordenar campos no select de acordo com a Grid

-- Alteração
-- Data 26/05/2014
-- Autor: Wellington Santana
-- Descrição: colocado ORDER BY BPL.bpl_registroPatrimonial

-- Alteração
-- Data: 11/07/2014
-- Autor: Wellington Santana
-- Descrição: adicionado bpl_log para retorno da procedure, e adicionado inner join para trazer somente as unidades que existem no coreSSO
-- =============================================

CREATE PROCEDURE [dbo].[NEW_BemPatrimonialLegado_SelectBy_All]
	@bpl_unidade INT,
	@bpl_registroPatrimonial VARCHAR(50)
AS
BEGIN

SELECT [bpl_registroPatrimonial],
		[bpl_cadmat], 
		[bpl_material],
		[bpl_grupoBem],
		[bpl_numeroDoc1],       
       CONVERT(VARCHAR(12),bpl_dataCriacaoDoc1,103) AS bpl_dataCriacaoDoc1,  
		[bpl_numeroDoc2],
       CONVERT(VARCHAR(12),bpl_dataCriacaoDoc2,103) AS bpl_dataCriacaoDoc2,
       [bpl_numeroDoc3],
       CONVERT(VARCHAR(12),bpl_dataCriacaoDoc3,103) AS bpl_dataCriacaoDoc3,
       [bpl_numeroDoc4],
       CONVERT(VARCHAR(12),bpl_dataCriacaoDoc4,103) AS bpl_dataCriacaoDoc4,
       [bpl_numeroDoc6],
       CONVERT(VARCHAR(12),bpl_dataCriacaoDoc6,103) AS bpl_dataCriacaoDoc6,        	   
	   [bpl_cnpjFornecedor],
       [bpl_razaoSocialFornecedor],       
       [bpl_valorUnitario],              
       [bpl_valorTotal],             
       [bpl_statusConservacao],       
       [bpl_statusUtilizacao],             
       [bpl_dependencia], 
       [bpl_codEspecie],
       [bpl_observacao],               
       -- Campos não carregados na planilha:       
       [bpl_numeroDoc5],
       CONVERT(VARCHAR(12),bpl_dataCriacaoDoc5,103) AS bpl_dataCriacaoDoc5,                       
       [bpl_id], 
       [bpl_tipo], --adicionado para salvar em lote
	   [bpl_quantidade], --adicionado para salvar em lote      
       [bpl_unidade],       
       [bpl_dataImportacao],            
       [bpl_situacao],       
       [bpl_situacaoPatrimonial],        
       [bpl_tipoBem],       
       [bpl_serieDocumentoCompra],              
       [bpl_codProgFinanc],       
       [bpl_matriculaPessoa],                
       [bpl_nroSerie],       
       [bpl_marca],              
	   [bpl_modelo],
	   bpl_nro_placa_veic--campo utilizado no RS
      ,bpl_nro_chassi_veic--campo utilizado no RS
      ,bpl_tipo_veic--campo utilizado no RS
      ,bpl_marca_veic--campo utilizado no RS
      ,bpl_modelo_veic--campo utilizado no RS
      ,bpl_potencia_veic--campo utilizado no RS
      ,bpl_potencia_unidade--campo utilizado no RS
      ,bpl_cilindro_veic--campo utilizado no RS
      ,bpl_ano_fabr_veic--campo utilizado no RS
      ,bpl_quilometragem_veic--campo utilizado no RS
      ,bpl_codFornecedor --campo utilizado no RS
	  ,bpl_log
	   
	FROM 
		BemPatrimonialLegado as  BPL WITH(NOLOCK)
		INNER JOIN dbo.Unidade as U WITH(NOLOCK)
			ON BPL.bpl_unidade = U.uni_id
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO as UA WITH(NOLOCK)
			ON UA.uad_id = U.uad_id
				AND UA.ent_id = U.ent_id
	WHERE
		(@bpl_unidade = 0 OR BPL.bpl_unidade = @bpl_unidade) AND
		(@bpl_registroPatrimonial IS NULL OR BPL.bpl_registroPatrimonial = @bpl_registroPatrimonial) AND
		(BPL.bpl_situacao =1 or BPL.bpl_situacao = 2)
	ORDER BY 
	BPL.bpl_registroPatrimonial
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialLegado_SelectBy_bpl_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Wellington Santana
-- Create date: 07/07/2014
-- Description:	select bpl_log por bpl_id
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialLegado_SelectBy_bpl_id]
	@bpl_id int
AS
BEGIN

	SELECT 
		 bpl_log
	FROM 
		BemPatrimonialLegado as  BPL
	WHERE
		BPL.bpl_id = @bpl_id AND
		BPL.bpl_situacao <> 3
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialLegado_SelectBy_RegistroPat_Importado]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pedro Gimenez
-- Create date: 02/12/2011 - 10:30
-- Description:	Verifica se o número de registro
--              patrimonial informado já foi
--              cadastrado no GEMAT
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialLegado_SelectBy_RegistroPat_Importado]
	@bpl_registroPatrimonial VARCHAR(100)
AS
BEGIN

SELECT BPL.bpl_registroPatrimonial, bpl_dataTransferencia
	FROM 
		BemPatrimonialLegado as  BPL
	WHERE
		BPL.bpl_registroPatrimonial = @bpl_registroPatrimonial AND
		BPL.bpl_situacao = 3
END

GO
/****** Object:  StoredProcedure [dbo].[New_BemPatrimonialLegado_SelectByUnidadeNullORInexistente]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Wellington Santana
-- Create date: 14/07/2014
-- Description:	traz bens do legado, que bpl_unidade esteja nula, unidade foi exclúida ou não existe na tabela UnidadeAdministrativa.
-- =============================================
CREATE PROCEDURE [dbo].[New_BemPatrimonialLegado_SelectByUnidadeNullORInexistente]
	@bpl_unidade INT
	
as
BEGIN

	SELECT [bpl_registroPatrimonial],
			[bpl_cadmat], 
			[bpl_material],
			[bpl_grupoBem],
			[bpl_numeroDoc1],       
		   CONVERT(VARCHAR(12),bpl_dataCriacaoDoc1,103) AS bpl_dataCriacaoDoc1,  
			[bpl_numeroDoc2],
		   CONVERT(VARCHAR(12),bpl_dataCriacaoDoc2,103) AS bpl_dataCriacaoDoc2,
		   [bpl_numeroDoc3],
		   CONVERT(VARCHAR(12),bpl_dataCriacaoDoc3,103) AS bpl_dataCriacaoDoc3,
		   [bpl_numeroDoc4],
		   CONVERT(VARCHAR(12),bpl_dataCriacaoDoc4,103) AS bpl_dataCriacaoDoc4,
		   [bpl_numeroDoc6],
		   CONVERT(VARCHAR(12),bpl_dataCriacaoDoc6,103) AS bpl_dataCriacaoDoc6,        	   
		   [bpl_cnpjFornecedor],
		   [bpl_razaoSocialFornecedor],       
		   [bpl_valorUnitario],              
		   [bpl_valorTotal],             
		   [bpl_statusConservacao],       
		   [bpl_statusUtilizacao],             
		   [bpl_dependencia], 
		   [bpl_codEspecie],
		   [bpl_observacao],               
		   -- Campos não carregados na planilha:       
		   [bpl_numeroDoc5],
		   CONVERT(VARCHAR(12),bpl_dataCriacaoDoc5,103) AS bpl_dataCriacaoDoc5,                       
		   [bpl_id], 
		   [bpl_tipo], --adicionado para salvar em lote
		   [bpl_quantidade], --adicionado para salvar em lote      
		   [bpl_unidade],       
		   [bpl_dataImportacao],            
		   [bpl_situacao],       
		   [bpl_situacaoPatrimonial],        
		   [bpl_tipoBem],       
		   [bpl_serieDocumentoCompra],              
		   [bpl_codProgFinanc],       
		   [bpl_matriculaPessoa],                
		   [bpl_nroSerie],       
		   [bpl_marca],              
		   [bpl_modelo],
		   bpl_nro_placa_veic--campo utilizado no RS
		  ,bpl_nro_chassi_veic--campo utilizado no RS
		  ,bpl_tipo_veic--campo utilizado no RS
		  ,bpl_marca_veic--campo utilizado no RS
		  ,bpl_modelo_veic--campo utilizado no RS
		  ,bpl_potencia_veic--campo utilizado no RS
		  ,bpl_potencia_unidade--campo utilizado no RS
		  ,bpl_cilindro_veic--campo utilizado no RS
		  ,bpl_ano_fabr_veic--campo utilizado no RS
		  ,bpl_quilometragem_veic--campo utilizado no RS
		  ,bpl_codFornecedor --campo utilizado no RS
		  ,bpl_log
		FROM 
			BemPatrimonialLegado as  BPL WITH(NOLOCK)

		WHERE
			((BPL.bpl_unidade = @bpl_unidade) OR (BPL.bpl_unidade IS NULL AND @bpl_unidade IS NULL)) 
			AND (BPL.bpl_situacao =1 or BPL.bpl_situacao = 2)
			
			AND EXISTS (
				SELECT 
					UA.uad_id
				   ,UA.ent_id
	   			FROM 
	   				dbo.Synonym_SYS_UnidadeAdministrativa_SSO as UA
	   				INNER JOIN dbo.Unidade as U WITH(NOLOCK)
						ON U.uad_id = UA.uad_id
		   				AND U.ent_id = UA.ent_id
			   			
	   			WHERE UA.uad_id = U.uad_id AND
	   				  UA.ent_id = U.ent_id
	   				  AND UA.uad_situacao = 3
		   			  
		   )
		   OR NOT EXISTS (
				SELECT 
					UA.uad_id
				   ,UA.ent_id
	   			FROM 
	   				dbo.Synonym_SYS_UnidadeAdministrativa_SSO as UA
		   			INNER JOIN dbo.Unidade as U WITH(NOLOCK)
						ON U.uad_id = UA.uad_id
		   				AND U.ent_id = UA.ent_id
			   			
	   			WHERE UA.uad_id = U.uad_id AND
	   				  UA.ent_id = U.ent_id
		   )
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialLegado_SelectCountUnidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pedro Gimenez
-- Create date: 16/11/2011 - 15:40
-- Description:	Seleciona a quantidade de bens importados
--              de determinada unidade
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialLegado_SelectCountUnidade]
	@bpl_unidade INT
AS
BEGIN

SELECT COUNT(*) AS qtdePorUnidade
	FROM 
		BemPatrimonialLegado as  BPL
	WHERE
		BPL.bpl_unidade = @bpl_unidade AND
		BPL.bpl_situacao in (1,2)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialTermo_MontaRelatorioRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Autor:		Lukas Riehl Figueiredo
-- Data de criação: 20/09/2010
-- Descrição:	Stored Procedure que retorna todos os bens patrimoniais de uma localidade
-- =============================================
create PROCEDURE [dbo].[NEW_BemPatrimonialTermo_MontaRelatorioRS] 
	@uni_id int,
	@loc_id int,
	@tuad_dir_id uniqueidentifier,
	@tuad_coord_id uniqueidentifier,
	@dep_id int
AS
BEGIN
	SELECT 
		  bem.bem_id
		  ,bi.bit_id
		  ,bi.bit_registroPat
		  ,bem.bem_descricao		  
		  ,bi.bit_valorLiquido
		  ,dep.dep_id
		  ,dep.dep_nome
		  ,dep.dep_responsavel
		  ,loc.loc_id
		  ,loc.loc_descricao		 
		   
		  ,(select uad_dir.uni_nomegestora
			from dbo.FN_GetUnidadesSuperiores(@uni_id) as uad_dir
			where tua_id = @tuad_dir_id) as nomeDiretoria
			
		  ,(select uad_coord.uni_nomegestora
			from  dbo.FN_GetUnidadesSuperiores(@uni_id) as uad_coord
		    where uad_coord.tua_id = @tuad_coord_id) as nomeCoordenadoria
			
		/*,CASE WHEN Uni.uad_id is NULL 
			THEN ent.ent_razaoSocial
			ELSE uad_nome 
		END as uniNome*/
		, uad_Nome AS uniNome
		,CASE WHEN uni.uni_codigoUGE is NULL
			THEN REPLICATE('X',6)
			ELSE uni.uni_codigoUGE + REPLICATE('X',6 - LEN(uni.uni_codigoUGE))
		END as codigoUGE
		
		,CASE WHEN uad.uad_codigo is NULL
			THEN REPLICATE('X',6)
			ELSE uad.uad_codigo + REPLICATE('X',6 - LEN(uad_codigo))
		END as codigoCIE
		
	FROM BemPatrimonial as bem WITH(NoLock)
			inner join BemItem as bi WITH(NOLOCK)
				on bem.bem_id = bi.bem_id
			inner join Unidade as uni WITH(NOLOCK)
				on bi.bit_uniGuarda = uni.uni_id
			inner join Localidade as loc WITH(NOLOCK)
				on bi.loc_id = loc.loc_id
			left join VW_UnidadeAdministrativa uad WITH(NOLOCK)
				on uad.uad_id = uni.uad_id 			
			left join Dependencia as dep WITH(NOLOCK)
				on dep.loc_id = loc.loc_id
				and dep.dep_id =  bi.dep_id 
	      
	WHERE 
		uni.uni_situacao <> 3
		AND bit_uniGuarda = @uni_id 
		AND(
		    @loc_id = 0 
		    OR loc.loc_id = @loc_id
		   )
		And (@dep_id is null or @dep_id=dep.dep_id)
	order by loc_id,dep_id asc
				 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BemPatrimonialTermo_MontaRelatorioSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_BemPatrimonialTermo_MontaRelatorioSP] 
	@uni_id int,
	@loc_id int,
	@tuad_dir_id uniqueidentifier,
	@tuad_coord_id uniqueidentifier,
	@dep_id int

AS
BEGIN
Declare @nomeDiretoria varchar(200),
		@nomeCoordenadoria varchar(200)

SELECT TOP 1 @nomeDiretoria = uad_dir.uni_nomegestora FROM FN_GetUnidadesSuperiores(@uni_id) AS uad_dir WHERE tua_id = @tuad_dir_id
SELECT TOP 1 @nomeCoordenadoria = uad_coord.uni_nomegestora FROM FN_GetUnidadesSuperiores(@uni_id) AS uad_coord WHERE uad_coord.tua_id = @tuad_coord_id

	SELECT 
		  bem.bem_id
		  ,bi.bit_id
		  ,bi.bit_registroPat
		  ,bem.bem_descricao		  
		  ,bi.bit_valorLiquido
		  ,dep.dep_id
		  ,dep.dep_nome
		  ,dep.dep_responsavel
		  ,loc.loc_id
		  ,loc.loc_descricao 
		  ,@nomeDiretoria as nomeDiretoria
		  ,@nomeCoordenadoria as nomeCoordenadoria
		, uad_Nome AS uniNome
		,CASE WHEN uad.uni_codigoUGE is NULL
			THEN REPLICATE('X',6)
			ELSE uad.uni_codigoUGE + REPLICATE('X',6 - LEN(uad.uni_codigoUGE))
		END as codigoUGE
		
		,CASE WHEN uad.uad_codigo is NULL
			THEN REPLICATE('X',6)
			ELSE uad.uad_codigo + REPLICATE('X',6 - LEN(uad_codigo))
		END as codigoCIE
		
	FROM 
		BemPatrimonial as bem WITH(NoLock)
	INNER JOIN BemItem as bi WITH(NOLOCK)
		ON bem.bem_id = bi.bem_id
	inner join Unidade as uni WITH(NOLOCK)
		on bi.bit_uniGuarda = uni.uni_id
	INNER JOIN Localidade as loc WITH(NOLOCK)
		ON bi.loc_id = loc.loc_id
	INNER JOIN VW_UnidadeAdministrativa uad WITH(NOLOCK)
		ON uad.uni_id = bi.bit_uniGuarda		
	LEFT JOIN Dependencia as dep WITH(NOLOCK)
		ON dep.loc_id = loc.loc_id
		AND dep.dep_id =  bi.dep_id 
	      
	WHERE 
		uni.uni_situacao <> 3
		AND bit_uniGuarda = @uni_id 
		and (bi.loc_id = @loc_id or @loc_id = 0)
		--AND (@loc_id = 0 OR loc.loc_id = @loc_id)
		and (bi.dep_id = @dep_id or @dep_id is null)
		--And (@dep_id is null or @dep_id=dep.dep_id)
		and bi.bit_situacao = 1
		and bi.bit_status not in (3,5)
	ORDER BY 
		loc_id
		,dep_id asc
				 
END



GO
/****** Object:  StoredProcedure [dbo].[NEW_Bens_SelectBy_status_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		Hethini Ribeiro
-- Create date: 25/07/2013 14:31
-- Description: Retorna todos os Status de conservação que não estão bloqueados
-- ===================================================================================
Create PROCEDURE [dbo].[NEW_Bens_SelectBy_status_id]
	
AS
BEGIN
		
	SELECT
		stc_id  
		, stc_nome 
		, stc_decricao 
		, stc_situacao 
		, stc_dataCriacao 
		, stc_dataAlteracao 

	FROM
		StatusConservacao

	WHERE
		stc_situacao <> 3 AND stc_situacao <> 2
		
	ORDER BY stc_id 
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BensPatrimonialImportacao_Delete]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		JORGE FREITAS	
-- Create date: 09/02/2011
-- Description:	Deleta o registro de bens pat importacao 
	--          qdo ele ainda nao foi importado para benspat e bemItem
-- =============================================
CREATE PROCEDURE [dbo].[NEW_BensPatrimonialImportacao_Delete]
	@bpi_cadmat varchar(40)
	, @bpi_origem tinyint 
	, @bpi_ne char(11)
	, @bpi_uge varchar(60)
	, @bpi_ue VARCHAR(60)
	, @bpi_processo VARCHAR(50)
	, @bpi_documento VARCHAR(20)

AS
BEGIN
	DELETE
    
    FROM BensPatrimonialImportacao
	WHERE	
		bpi_cadmat = @bpi_cadmat
		AND bpi_origem = @bpi_origem
		AND bpi_uge = @bpi_uge
		AND (bpi_ue = @bpi_ue OR @bpi_ue IS NULL)
		AND (bpi_ne = @bpi_ne OR @bpi_ne IS NULL)
		AND (bem_id IS NULL OR bem_id = 0 )
		AND (bpi_processo = @bpi_processo OR @bpi_processo IS NULL)
		AND (bpi_documento = @bpi_documento OR @bpi_documento IS NULL)
	select @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_BensPatrimonialImportacao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Debora Cavaglieri	
-- Create date: 30/08/2011
-- Description:	Atualiza o registro encontrado 
	--          pelo metodo GetEntity 
-- =============================================

CREATE PROCEDURE [dbo].[NEW_BensPatrimonialImportacao_UPDATE]
	@bpi_cadmat VARCHAR (40)
	, @bpi_origem TINYINT
	, @bpi_processo VARCHAR (50)
	, @bpi_item VARCHAR (250)
	, @bpi_qtde INT
	, @bpi_valorUnitario MONEY
	, @bpi_valorTotal MONEY
	, @bpi_ne CHAR (11)
	, @bpi_nePorcent DECIMAL (5,2)
	, @bpi_documento VARCHAR (20)
	, @bpi_evento VARCHAR (20)
	, @bpi_naturazaDesp VARCHAR (20)
	, @bpi_dataEntrega DATETIME
	, @bpi_uo VARCHAR (60)
	, @bpi_uge VARCHAR (60)
	, @bpi_ue VARCHAR (60)
	, @bpi_cnpjCpfFornecedor VARCHAR (14)
	, @bpi_fornecedor VARCHAR (100)
	, @bpi_codFornecedor VARCHAR (20)
	, @bpi_insEstFornecedor VARCHAR (20)
	, @bpi_endFornecedor VARCHAR (200)
	, @bpi_bairroFornecedor VARCHAR (100)
	, @bpi_numFornecedor VARCHAR (10)
	, @bpi_compFornecedor VARCHAR (100)
	, @bpi_cepFornecedor CHAR (8)
	, @bpi_codCidadeFornecedor VARCHAR (5)
	, @bpi_cidadeFornecedor VARCHAR (200)
	, @bpi_ufFornecedor CHAR (2)
	, @bpi_contatoFornecedor VARCHAR (100)
	, @bpi_fone1Fornecedor VARCHAR (20)
	, @bpi_fone2Fornecedor VARCHAR (20)
	, @bpi_emailFornecedor VARCHAR (200)
	, @bpi_situacao TINYINT
	, @bpi_dataImportacao DATETIME
	, @bpi_observacao TEXT
	, @bem_id BIGINT

AS
BEGIN
	UPDATE BensPatrimonialImportacao 
	SET 
		bpi_cadmat = @bpi_cadmat 
		, bpi_origem = @bpi_origem 
		, bpi_processo = @bpi_processo 
		, bpi_item = @bpi_item 
		, bpi_qtde = @bpi_qtde 
		, bpi_valorUnitario = @bpi_valorUnitario 
		, bpi_valorTotal = @bpi_valorTotal 
		, bpi_ne = @bpi_ne 
		, bpi_nePorcent = @bpi_nePorcent 
		, bpi_documento = @bpi_documento 
		, bpi_evento = @bpi_evento 
		, bpi_naturazaDesp = @bpi_naturazaDesp 
		, bpi_dataEntrega = @bpi_dataEntrega 
		, bpi_uo = @bpi_uo 
		, bpi_uge = @bpi_uge 
		, bpi_ue = @bpi_ue 
		, bpi_cnpjCpfFornecedor = @bpi_cnpjCpfFornecedor 
		, bpi_fornecedor = @bpi_fornecedor 
		, bpi_codFornecedor = @bpi_codFornecedor 
		, bpi_insEstFornecedor = @bpi_insEstFornecedor 
		, bpi_endFornecedor = @bpi_endFornecedor 
		, bpi_bairroFornecedor = @bpi_bairroFornecedor 
		, bpi_numFornecedor = @bpi_numFornecedor 
		, bpi_compFornecedor = @bpi_compFornecedor 
		, bpi_cepFornecedor = @bpi_cepFornecedor 
		, bpi_codCidadeFornecedor = @bpi_codCidadeFornecedor 
		, bpi_cidadeFornecedor = @bpi_cidadeFornecedor 
		, bpi_ufFornecedor = @bpi_ufFornecedor 
		, bpi_contatoFornecedor = @bpi_contatoFornecedor 
		, bpi_fone1Fornecedor = @bpi_fone1Fornecedor 
		, bpi_fone2Fornecedor = @bpi_fone2Fornecedor 
		, bpi_emailFornecedor = @bpi_emailFornecedor 
		, bpi_situacao = @bpi_situacao 
		, bpi_dataImportacao = @bpi_dataImportacao 
		, bpi_observacao = @bpi_observacao 
		, bem_id = @bem_id 
	WHERE	
		(bpi_cadmat = @bpi_cadmat OR @bpi_cadmat IS NULL)
		AND bpi_origem = @bpi_origem
		AND bpi_uge = @bpi_uge
		AND (bpi_ue = @bpi_ue OR @bpi_ue IS NULL)
		AND (bpi_ne = @bpi_ne OR @bpi_ne IS NULL)
		AND (bpi_processo = @bpi_processo OR @bpi_processo IS NULL)
		AND (bpi_documento = @bpi_documento OR @bpi_documento IS NULL)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Cod_Especie_GrupoBens_Select_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================
-- Author:		Wellington Santana
-- Create date: 17/03/2014
-- Description:	Selecio grupo bens listando os grupos de acordo com o que estiver cadastrado na tabela "Cod_Especie_GrupoBens", 
--seguindo o seguinte layout: "Código espécie" - "Nome do grupo de bem vinculado"
-- Alteração
-- Author: Luana Piva
-- Date: 08/04/2014
-- Description: Trocar ordem "código + nome grupo"
-- =========================================================
CREATE PROCEDURE [dbo].[NEW_Cod_Especie_GrupoBens_Select_All]

as
BEGIN
		SELECT 
			 ceg.ceg_codigo_especie
			,grp.grp_id
			,grp_nome + ' - ' +  ceg.ceg_codigo_especie As CodEspAndGrupNome
		FROM 
			GrupoBens grp WITH(NOLOCK)
			inner join Cod_Especie_GrupoBens ceg with(nolock)
			on ceg.grp_id = grp.grp_id 
			
		WHERE
			 grp_situacao = 1
			 AND ceg.ceg_situacao = 1
		ORDER BY 
			grp_nome ASC
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ContasContabeis_Bloqueia_ParametrosBY_situacaoPCO]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Luana Piva
-- Create date: 29/10/2013
-- Description:	<Verifica se o parâmetro possui alguma das contas bloqueadas, caso exista, ele não poderá ser alterado>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ContasContabeis_Bloqueia_ParametrosBY_situacaoPCO]

@cco_codigoCredito varchar(20),
@cco_codigoDebito varchar (20)

AS
BEGIN

	SELECT 
	cco_codigo
	
	FROM ContasContabeis as CCO WITH(NOLOCK)
	INNER JOIN ParametroContabil as PCO WITH(NOLOCK)
	ON
		CCO.cco_codigo = @cco_codigoCredito OR
		CCO.cco_codigo = @cco_codigoDebito
	
	WHERE	
	 CCO.cco_situacao = 2 AND --se a conta for bloqueada o parametro não poderá ser alterado
	 PCO.pco_situacao = 2 -- no caso de o parâmetro ter sido bloqueado através da tela de cadastro de parâmetro contábil, a situação será 2
	 	
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ContasContabeis_SELECT_contaSuperior_Bloqueada]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Luana Piva
-- Create date: 13/11/2013
-- Description:	<Busca conta contábil superior bloqueada>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ContasContabeis_SELECT_contaSuperior_Bloqueada]
	@cco_codigoSup varchar(20) 
AS
BEGIN	
	SELECT
		cco_codigo			
		
	FROM
		ContasContabeis WITH(NOLOCK)
	WHERE
		cco_situacao = 2
		AND cco_codigo = @cco_codigoSup
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ContasContabeis_SELECTBY_all]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jorge Freitas
-- Create date: 13/08/2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ContasContabeis_SELECTBY_all]
	@cco_codigo varchar
	,@cco_nome varchar
	,@cco_situacao int
AS
BEGIN
	SELECT
		cco_codigo
		,cco_nome
		,cco_nomeAbr
		,cco_descricao
		,cco_codigoSup
		,cco_tipoConta
		,cco_situacao
		,cco_dataCriacao
		,cco_dataAlteracao
	FROM
		ContasContabeis WITH(NOLOCK)
	WHERE 
		cco_situacao = ISNULL(cco_situacao, @cco_situacao) and  cco_situacao <> 3
    and
		cco_codigo = ISNULL(cco_codigo, @cco_codigo)
	and
		cco_nome like '%'+ ISNULL(cco_nome, @cco_nome) +'%'
	ORDER BY
		cco_codigo

	SELECT @@ROWCOUNT
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_ContasContabeis_SELECTBY_contaSuperior]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jorge Freitas
-- Create date: 19/08/2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ContasContabeis_SELECTBY_contaSuperior]
	@cco_codigoSup varchar(20) 
AS
BEGIN
	if (rtrim(@cco_codigoSup) <> '')
	begin
		SELECT
			cco_codigo
			,cco_nome
			,cco_codigoSup
			
		FROM
			ContasContabeis WITH(NOLOCK)
		WHERE
			cco_situacao <> 3 
			and rtrim(cco_codigoSup) = rtrim(@cco_codigoSup) 
		ORDER BY cco_codigo 		
	end
	else
	begin
		SELECT
			cco_codigo
			,cco_nome
			,cco_codigoSup
			
		FROM
			ContasContabeis WITH(NOLOCK)
		WHERE
			cco_situacao <> 3 
			and cco_codigoSup is null
		ORDER BY cco_codigo 
	end
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ContasContabeis_SELECTBY_nome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jorge Freitas
-- Create date: 13/08/2010
-- Description:	Usada para testar se existe Conta Contábil
--				já cadastrada com o nome (teste para impedir duplicidade)
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ContasContabeis_SELECTBY_nome]
	@cco_codigonovo VARCHAR (20),
	@cco_nome VARCHAR (100)
AS
BEGIN
SELECT
		cco_codigo
		,cco_nome
		,cco_nomeAbr
		,cco_descricao
		,cco_codigoSup
		,cco_tipoConta
		,cco_situacao
		,cco_dataCriacao
		,cco_dataAlteracao

	FROM
		ContasContabeis WITH(NOLOCK)
	WHERE 
		cco_situacao <> 3 and 
		upper(cco_nome) = upper(@cco_nome) and
		(@cco_codigonovo is null or @cco_codigonovo = '' or cco_codigo <> @cco_codigonovo )
	ORDER BY cco_nome		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ContasContabeis_SELECTby_parametros]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<João Victor>
-- Create date: <05/10/2010>
-- Description:	<Seleciona contas contabeis que não são do tipo titulo>
-- =============================================

CREATE PROCEDURE [dbo].[NEW_ContasContabeis_SELECTby_parametros]
	
AS
BEGIN
	SELECT
		CCO.cco_codigo
		,CCO.cco_nome
		,CCO.cco_codigo + ' - ' + CCO.cco_nome AS codnome
	FROM
		ContasContabeis CCO WITH(NoLock)
	WHERE
		CCO.cco_situacao = 1
		--não seleciona contas do tipo TITULO
		AND cco_tipoConta <> 1
	select @@ROWCOUNT
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_ContasContabeis_valida_filhas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Luana Piva
-- Create date: 19/03/2014
-- Description:	<Busca conta vinculada(filha)>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ContasContabeis_valida_filhas]
	@cco_codigo varchar(20)
AS
BEGIN
	SELECT
		cco_codigo
	FROM
		ContasContabeis WITH(NOLOCK)
	WHERE
		cco_codigoSup = @cco_codigo
		AND cco_situacao <> 3
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_ContasContabeis_valida_superior]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Luana Piva
-- Create date: 19/03/2014
-- Description:	<valida se conta superior é titulo>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ContasContabeis_valida_superior]
	@cco_codigoSup varchar(20) 
AS
BEGIN	
	SELECT
		cco_tipoConta	
	FROM
		ContasContabeis WITH(NOLOCK)
	WHERE
		cco_codigo = @cco_codigoSup		
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ContiguracaoEtiqueta_Get]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		Christian Freitas
-- Create date: 20/12/2013
-- Description:	Retorna lista de Configurações da etiqueta com a situacao enviada
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_ContiguracaoEtiqueta_Get]
	@pae_status int
AS
BEGIN

	SELECT 
		pe.pae_id,
		pe.pae_chave
	FROM 
		SYS_ParametrosEtiqueta pe
	WHERE
		pe.pae_status = @pae_status

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_CORE_END_Cidade_SelectBy_cid_nome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Nicholas de Assis
-- Create date: 22/11/2013
-- Description:	retorna a cidade de acordo com o nome passado no parametro
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_CORE_END_Cidade_SelectBy_cid_nome]		
	@cid_nome VARCHAR(200)
AS
BEGIN
	SELECT
		cid_id
	FROM
		CORE_END_Cidade WITH (NOLOCK)
	WHERE						
		cid_situacao <> 3
		AND (cid_nome = @cid_nome)									  	
	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_CORE_END_Cidade_SelectBy_PesquisaIncremental]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ========================================================================
-- Author:		Nicholas de Assis
-- Create date: 21/11/2013
-- Description:	utilizado na busca incremental de cidades
--				retorna as cidades que não foram excluídas logicamente
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_CORE_END_Cidade_SelectBy_PesquisaIncremental]		
	@cid_nome VARCHAR(200)
AS
BEGIN
	SELECT TOP 30 
		cid_id				
		, cid_nome
		, CASE WHEN CORE_END_Cidade.unf_id IS NULL THEN cid_nome + ' - ' + pai_nome
			   ELSE cid_nome + '/' + unf_sigla + ' - ' + pai_nome END AS cid_unf_pai_nome
		, CORE_END_Cidade.unf_id
	FROM
		CORE_END_Cidade WITH (NOLOCK)
	LEFT JOIN CORE_END_UnidadeFederativa WITH (NOLOCK) 
		ON  CORE_END_Cidade.unf_id = CORE_END_UnidadeFederativa.unf_id
			AND unf_situacao <> 3	
	INNER JOIN CORE_END_Pais WITH (NOLOCK) 
		ON CORE_END_Cidade.pai_id = CORE_END_Pais.pai_id
	WHERE						
		cid_situacao <> 3
    	AND pai_situacao <> 3
		AND (@cid_nome is null or cid_nome LIKE '%' + @cid_nome + '%')									
	ORDER BY
		cid_nome	  
	
	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_CORE_END_Endereco_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ========================================================================
-- Author:		Nicholas de Asis
-- Create date: 21/11/2013
-- Description:	utilizado na busca de endereços, retorna os endereços
--              que não foram excluídos logicamente,
--				filtrados por:
--					end_id, cid_id, unf_id, pai_id, cep, logradouro, bairro,
--					cidade, estado, sigla do estado, pais e situação
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_CORE_END_Endereco_SelectBy_All]	
	@end_id uniqueidentifier
	,@cid_id uniqueidentifier
	,@unf_id uniqueidentifier
	,@pai_id uniqueidentifier
	,@end_cep VARCHAR(8)
	,@end_logradouro VARCHAR(200)
	,@end_bairro VARCHAR(100)
	,@cid_nome VARCHAR(200)
	,@unf_nome VARCHAR(100)
	,@unf_sigla VARCHAR(2)
	,@pai_nome VARCHAR(100)
	,@end_situacao TINYINT	
AS
BEGIN
	SELECT 
	    end_id		
		,CORE_END_Endereco.cid_id		
		,CORE_END_Cidade.unf_id
		,CORE_END_Cidade.pai_id
		,end_cep
		,end_logradouro
		,end_distrito
		,end_zona
		,end_bairro
		,cid_nome
		,unf_nome				    		
		,unf_sigla		
		,pai_nome	
		, end_dataCriacao AS data
		,cid_nome + ' - ' + unf_sigla AS cidadeuf
		, CASE end_situacao 
			WHEN 1 THEN 'Não'
			WHEN 2 THEN 'Sim'			
		  END AS unf_situacao
	FROM
		CORE_END_Endereco WITH (NOLOCK)
	INNER JOIN
		CORE_END_Cidade WITH (NOLOCK) on CORE_END_endereco.cid_id = CORE_END_Cidade.cid_id
	LEFT JOIN
		CORE_END_UnidadeFederativa WITH (NOLOCK) on CORE_END_Cidade.unf_id = CORE_END_UnidadeFederativa.unf_id	and unf_situacao <> 3	
	INNER JOIN
		CORE_END_Pais WITH (NOLOCK) on CORE_END_Cidade.pai_id = CORE_END_Pais.pai_id
	WHERE
		end_situacao <> 3
		AND cid_situacao <> 3
		AND pai_situacao <> 3
		AND (@end_id is null or end_id = @end_id)				
		AND (@cid_id is null or CORE_END_Endereco.cid_id = @cid_id)						
		AND (@unf_id is null or CORE_END_Cidade.unf_id = @unf_id)		
		AND (@pai_id is null or CORE_END_Cidade.pai_id = @pai_id)
		AND (@end_cep is null or end_cep = @end_cep)				
		AND (@end_logradouro is null or end_logradouro LIKE  '%' + @end_logradouro + '%')							
		AND (@end_bairro is null or end_bairro LIKE '%' + @end_bairro + '%')																				
		AND (@cid_nome is null or cid_nome LIKE '%' + @cid_nome + '%')
		AND (@unf_nome is null or unf_nome LIKE '%' + @unf_nome + '%')					
		AND (@unf_sigla is null or unf_sigla = @unf_sigla)						
		AND (@pai_nome is null or pai_nome LIKE '%' + @pai_nome + '%')		
		AND (@end_situacao is null or end_situacao = @end_situacao)	
		AND (@end_cep not like '%000')			
	ORDER BY
		pai_nome, unf_nome, cid_nome, end_logradouro
		
	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_CORE_SYS_UnidadeAdministrativaEndereco_SelectBy_ent_id_uad_it_top_one]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Nicholas de Assis
-- Create date: 19/11/2013
-- Description:	utilizado para verificar o codigo do primeiro registro
--              cadastrado para a entidade e unidade administrativa
--				filtrados por:
--					entidade, unidade administrativa
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_CORE_SYS_UnidadeAdministrativaEndereco_SelectBy_ent_id_uad_it_top_one]	
	@ent_id uniqueidentifier
	,@uad_id uniqueidentifier
AS
BEGIN
	SELECT 	
		TOP 1 uae_id
	FROM
		CORE_SYS_UnidadeAdministrativaEndereco WITH (NOLOCK)		
	WHERE
		ent_id = @ent_id
		AND uad_id = @uad_id
		
	SELECT @@ROWCOUNT			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Dependencia_PorUnidadeAgrupadaPorLocalidadeRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		Fabio A
-- Create date: 16/08/2010 09:45
-- Description:	
-- ===========================================================================
create PROCEDURE [dbo].[NEW_Dependencia_PorUnidadeAgrupadaPorLocalidadeRS]
	@uni_id INT
AS
BEGIN

	SELECT 
		l.loc_nome nomeLoc,
		d.dep_nome nomeDep,
		l.loc_id loc_id,
		d.dep_id
	from
		Localidade l inner join Dependencia d
			on l.loc_id=d.loc_id
	where
		l.uni_id=@uni_id
	

	
SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Dependencia_PorUnidadeAgrupadaPorLocalidadeSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		Fabio A
-- Create date: 16/08/2010 09:45
-- Description:	
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_Dependencia_PorUnidadeAgrupadaPorLocalidadeSP]
	@uni_id INT
AS
BEGIN

	SELECT 
		l.loc_nome nomeLoc,
		d.dep_nome nomeDep,
		l.loc_id loc_id,
		d.dep_id
	from
		Localidade l inner join Dependencia d
			on l.loc_id=d.loc_id
	where
		l.uni_id=@uni_id
	

	
SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Dependencia_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		(Aline Dornelas => alteração)
-- Create date: 
-- Description:	
-- ===========================================================================
-- Author:		Wellington Santana	
-- Create date: 28/01/2014
-- Description:	filtrada dependencia somente ativa. (dep_situacao = 1)
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_Dependencia_SelectBy_All]	
	@loc_id INT
	, @dep_id INT
	, @tde_id INT
	, @dep_nome VARCHAR(100)
	, @dep_responsavel VARCHAR(200)	
	, @dep_situacao TINYINT	
AS
BEGIN

	SELECT 
		loc_id
		, dep_id
		, dep_nome
		, dep_responsavel
		, dep_situacao	
		, CASE dep_situacao
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
			WHEN 4 THEN 'Padrao do sistema'
		END AS situacao		
		, DEP.tde_id
		, tde_nome 
		,CONVERT(varchar(30),loc_id) + '.' + Convert(varchar(30),dep_id) as dep_loc_id
	FROM
		Dependencia AS DEP WITH(NOLOCK)
		INNER JOIN TipoDependencia AS TDE WITH(NOLOCK) 
		ON DEP.tde_id  = TDE.tde_id 
	WHERE
		dep_situacao <> 3
		AND ((@dep_id IS NULL) OR (dep_id = @dep_id))					
		AND ((@loc_id IS NULL) OR (loc_id = @loc_id))
		AND ((@tde_id IS NULL) OR (DEP.tde_id = @tde_id))
		AND (((@dep_situacao IS NULL) OR (dep_situacao = @dep_situacao))OR
			((@dep_situacao IS NULL) OR (dep_situacao = 1)))		
		AND ((@dep_nome IS NULL) OR (dep_nome LIKE '%' + @dep_nome + '%'))
		AND ((@dep_responsavel is NULL) OR (dep_responsavel LIKE '%' + @dep_responsavel + '%'))		
	ORDER BY
		dep_nome 
		
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Dependencia_SelectBy_Uni_Id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:Luana Piva
-- Create date: 15/08/2013
-- Description:	Seleciona as dependências vinculadas à unidade de acordo com os parâmetros.
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_Dependencia_SelectBy_Uni_Id]	
	@loc_id INT
	, @dep_id INT
	, @tde_id INT
	, @dep_nome VARCHAR(100)
	, @dep_responsavel VARCHAR(200)	
	, @dep_situacao TINYINT	
	, @uni_id INT 
AS
BEGIN

	SELECT 
		DEP.loc_id
		, dep_id
		, dep_nome
		, dep_responsavel
		, dep_situacao	
		, CASE dep_situacao
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
			WHEN 4 THEN 'Padrao do sistema'
		END AS situacao		
		, DEP.tde_id
		, tde_nome  	
		,CONVERT(varchar(30), loc.loc_id) + '.' + Convert(varchar(30),dep_id) as dep_loc_id	
	FROM
		Dependencia AS DEP WITH(NOLOCK)
		INNER JOIN TipoDependencia AS TDE WITH(NOLOCK) 		
		ON DEP.tde_id  = TDE.tde_id 
		INNER JOIN Localidade AS loc WITH(NOLOCK)
		ON loc.loc_id = DEP.loc_id
		
		
	WHERE
		
		   ((@dep_id IS NULL) OR (dep_id = @dep_id))					
		AND ((@loc_id IS NULL) OR (DEP.loc_id = @loc_id))
		AND ((@tde_id IS NULL) OR (DEP.tde_id = @tde_id))
		AND (((@dep_situacao IS NULL) OR (dep_situacao = @dep_situacao))OR
			((@dep_situacao IS NULL) OR (dep_situacao = 1)))	
		AND ((@dep_nome IS NULL) OR (dep_nome LIKE '%' + @dep_nome + '%'))
		AND ((@dep_responsavel is NULL) OR (dep_responsavel LIKE '%' + @dep_responsavel + '%'))
		AND @uni_id = loc.uni_id
				
	ORDER BY
		dep_nome 
		
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Dependencia_SelectBy_UnidadeRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:	Pedro Gimenez
-- Create date: 21/12/2011 14:20
-- Description:	relatório de dependências por unidade
-- ===========================================================================
create PROCEDURE [dbo].[NEW_Dependencia_SelectBy_UnidadeRS]	
	@uniges_id int,
	@uniguarda_id int,
	@loc_id int,
	@tde_id int,
	@dependencia varchar(100),
	@responsavel varchar(100)
AS
BEGIN

	WITH

	tbUnidades AS (
	
		SELECT uni_id, uad_id
		FROM
			dbo.FN_GetUnidadeEFilhas(@uniges_id)		

	)

	SELECT 
		LOC.loc_id
		, LOC.loc_nome
		, DEP.dep_id
		, DEP.dep_nome
		, DEP.dep_responsavel
		, DEP.dep_situacao	
		, CASE dep_situacao
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
			WHEN 4 THEN 'Padrao do sistema'
		END AS situacao		
		, DEP.tde_id
		, TDE.tde_nome
		, uadGua.uad_nome  
		, uadGua.uad_id		
	FROM
		Dependencia AS DEP WITH(NOLOCK)
		INNER JOIN TipoDependencia AS TDE WITH(NOLOCK) 
			ON DEP.tde_id  = TDE.tde_id 
		INNER JOIN Localidade as LOC WITH(NOLOCK)
			ON DEP.loc_id = LOC.loc_id
		INNER JOIN tbUnidades AS unGua	
			ON unGua.uni_id = LOC.uni_id		
		INNER JOIN dbo.VW_UnidadeAdministrativa AS uadGua WITH(NoLock)
			ON unGua.uad_id = uadGua.uad_id													
	WHERE
		DEP.dep_situacao <> 3 
		AND ((@uniguarda_id  = 0) OR (unGua.uni_id = @uniguarda_id))
		AND ((@loc_id        = 0)     OR (loc.loc_id = @loc_id))
		AND ((@tde_id        IS NULL) OR (TDE.tde_id = @tde_id))
		AND ((@dependencia   IS NULL) OR (UPPER(DEP.dep_nome)        LIKE '%' + UPPER(@dependencia) + '%'))
		AND ((@responsavel   IS NULL) OR (UPPER(DEP.dep_responsavel) LIKE '%' + UPPER(@responsavel) + '%'))
		
	ORDER BY
		uadGua.uad_nome, LOC.loc_nome, DEP.dep_nome 
		
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Dependencia_SelectBy_UnidadeSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:	Pedro Gimenez
-- Create date: 21/12/2011 14:20
-- Description:	relatório de dependências por unidade
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_Dependencia_SelectBy_UnidadeSP]	
	@uniges_id int,
	@uniguarda_id int,
	@loc_id int,
	@tde_id int,
	@dependencia varchar(100),
	@responsavel varchar(100)
AS
BEGIN

	WITH

	tbUnidades AS (
	
		SELECT uni_id, uad_id
		FROM
			dbo.FN_GetUnidadeEFilhas(@uniges_id)		

	)

	SELECT 
		LOC.loc_id
		, LOC.loc_nome
		, DEP.dep_id
		, DEP.dep_nome
		, DEP.dep_responsavel
		, DEP.dep_situacao	
		, CASE dep_situacao
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
			WHEN 4 THEN 'Padrao do sistema'
		END AS situacao		
		, DEP.tde_id
		, TDE.tde_nome
		, uadGua.uad_nome  
		, uadGua.uad_id		
	FROM
		Dependencia AS DEP WITH(NOLOCK)
		INNER JOIN TipoDependencia AS TDE WITH(NOLOCK) 
			ON DEP.tde_id  = TDE.tde_id 
		INNER JOIN Localidade as LOC WITH(NOLOCK)
			ON DEP.loc_id = LOC.loc_id
		INNER JOIN tbUnidades AS unGua	
			ON unGua.uni_id = LOC.uni_id		
		INNER JOIN dbo.VW_UnidadeAdministrativa AS uadGua WITH(NoLock)
			ON unGua.uad_id = uadGua.uad_id													
	WHERE
		DEP.dep_situacao <> 3 
		AND ((@uniguarda_id  = 0) OR (unGua.uni_id = @uniguarda_id))
		AND ((@loc_id        = 0)     OR (loc.loc_id = @loc_id))
		AND ((@tde_id        IS NULL) OR (TDE.tde_id = @tde_id))
		AND ((@dependencia   IS NULL) OR (UPPER(DEP.dep_nome)        LIKE '%' + UPPER(@dependencia) + '%'
														COLLATE Latin1_General_CI_AI)) --ignora acentuacao
		AND ((@responsavel   IS NULL) OR (UPPER(DEP.dep_responsavel) LIKE '%' + UPPER(@responsavel) + '%'
														COLLATE Latin1_General_CI_AI)) --ignora acentuacao
		
	ORDER BY
		uadGua.uad_nome, LOC.loc_nome, DEP.dep_nome 
		
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_END_Endereco_SelectBy_Id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ========================================================================
-- Author:		Luana Piva
-- Create date: 26/12/2013
-- Description:	utilizado na busca de endereços, retorna o endereço
--              ativo de acordo com end_id
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_END_Endereco_SelectBy_Id]	
	@end_id uniqueidentifier
		
AS
BEGIN
	SELECT 
	    ende.end_id		
		,ende.cid_id		
		,Synonym_END_Cidade_SSO.unf_id
		,Synonym_END_Cidade_SSO.pai_id
		,ende.end_cep
		,ende.end_logradouro
		,ende.end_distrito
		,ende.end_zona
		,ende.end_bairro
		,cid_nome
		,unf_nome				    		
		,unf_sigla		
		,pai_nome	
		, ende.end_dataCriacao AS data
		,cid_nome + ' - ' + unf_sigla AS cidadeuf
		, CASE ende.end_situacao 
			WHEN 1 THEN 'Não'
			WHEN 2 THEN 'Sim'			
		  END AS unf_situacao
	FROM
		Synonym_END_Endereco_SSO as ende WITH (NOLOCK)
	INNER JOIN
		Synonym_END_Cidade_SSO WITH (NOLOCK) on ende.cid_id = Synonym_END_Cidade_SSO.cid_id
	LEFT JOIN
		Synonym_END_UnidadeFederativa_SSO WITH (NOLOCK) on Synonym_END_Cidade_SSO.unf_id = Synonym_END_UnidadeFederativa_SSO.unf_id	and unf_situacao <> 3	
	INNER JOIN
		Synonym_END_Pais_SSO WITH (NOLOCK) on Synonym_END_Cidade_SSO.pai_id = Synonym_END_Pais_SSO.pai_id
	WHERE
		end_situacao <> 3
		AND cid_situacao <> 3
		AND pai_situacao <> 3
		AND (ende.end_id = @end_id)				
						
	ORDER BY
		ende.end_id
		
	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_EntregaBens_FDE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[NEW_EntregaBens_FDE]
	@bpi_processo varchar(50),
	@bpi_origem tinyint,
	@bpi_cadmat varchar(40),
	@bpi_item varchar(250),
	@bpi_qtde int,
	@bpi_valorUnitario money,
	@bpi_valorTotal money,
	@bpi_ne char(11),
	@bpi_documento varchar(20),
	@bpi_dataEntrega date NULL,
	@bpi_naturazaDesp varchar(20),
	@bpi_UO varchar(60),
	@bpi_UGE varchar(60),
	@bpi_UE varchar(60),
	@bpi_cnpjCpfFornecedor varchar(14),
	@bpi_fornecedor varchar(100),
	@bpi_codFornecedor varchar(20),
	@bpi_insEstFornecedor varchar(20),
	@bpi_endFornecedor varchar(200),
	@bpi_bairroFornecedor varchar(100),
	@bpi_numFornecedor varchar(10),
	@bpi_compFornecedor varchar(100),
	@bpi_cepFornecedor char(8),
	@bpi_codCidadeFornecedor varchar(5),
	@bpi_cidadeFornecedor varchar(200),
	@bpi_ufFornecedor char(2),
	@bpi_contatoFornecedor varchar(100),
	@bpi_fone1Fornecedor varchar(20),
	@bpi_fone2Fornecedor varchar(20),
	@bpi_emailFornecedor varchar(200),
	@bpi_situacao tinyint,
	@bpi_cod_fde bigint 
AS
BEGIN
	/*
	SELECT bpi_cod_fde
	FROM [ConPat].[dbo].[BensPatrimonialImportacao] with (nolock)
	WHERE
	*/
	--bpi_processo = @bpi_processo AND bpi_origem = @bpi_origem AND bpi_cadmat = @bpi_cadmat
	--AND bpi_item = @bpi_item AND bpi_qtde = @bpi_qtde AND bpi_valorUnitario = @bpi_valorUnitario
	--AND bpi_valorTotal = @bpi_valorTotal AND bpi_ne = @bpi_ne AND bpi_documento = @bpi_documento
	--AND bpi_dataEntrega = @bpi_dataEntrega AND bpi_naturazaDesp = @bpi_naturazaDesp AND bpi_UO = @bpi_UO
	--AND bpi_UGE = @bpi_UGE AND bpi_UE = @bpi_UE AND bpi_cnpjCpfFornecedor = @bpi_cnpjCpfFornecedor
	--AND bpi_fornecedor = @bpi_fornecedor AND bpi_codFornecedor = @bpi_codFornecedor AND bpi_insEstFornecedor = @bpi_insEstFornecedor
	--AND bpi_endFornecedor = @bpi_endFornecedor AND bpi_bairroFornecedor = @bpi_bairroFornecedor AND bpi_numFornecedor = @bpi_numFornecedor
	--AND bpi_compFornecedor = @bpi_compFornecedor AND bpi_cepFornecedor = @bpi_cepFornecedor AND bpi_codCidadeFornecedor = @bpi_codCidadeFornecedor
	--AND bpi_cidadeFornecedor = @bpi_cidadeFornecedor AND bpi_ufFornecedor = @bpi_ufFornecedor AND bpi_contatoFornecedor = @bpi_contatoFornecedor
	--AND bpi_fone1Fornecedor = @bpi_fone1Fornecedor AND bpi_fone2Fornecedor = @bpi_fone2Fornecedor AND bpi_emailFornecedor = @bpi_emailFornecedor
	--AND bpi_situacao = @bpi_situacao AND 
	--bpi_cod_fde = @bpi_cod_fde
	/*
	bpi_Ue				= @bpi_Ue			-- UGE
	AND bpi_ne			= @bpi_ne			-- NE
	AND bpi_documento	= @bpi_documento	-- GPB
	 
	


	IF ((select @@rowcount) = 0)*/


	if not exists (select bpi_cod_fde from BensPatrimonialImportacao with (nolock) where bpi_cod_fde = @bpi_cod_fde )

		BEGIN
			INSERT [ConPat].[dbo].[BensPatrimonialImportacao]
			(bpi_processo, bpi_origem, bpi_cadmat, bpi_item, bpi_qtde, bpi_valorUnitario, bpi_valorTotal, bpi_ne
			, bpi_documento, bpi_dataEntrega, bpi_naturazaDesp, bpi_UO, bpi_UGE, bpi_UE, bpi_cnpjCpfFornecedor, bpi_fornecedor
			, bpi_codFornecedor, bpi_insEstFornecedor, bpi_endFornecedor, bpi_bairroFornecedor, bpi_numFornecedor
			, bpi_compFornecedor, bpi_cepFornecedor, bpi_codCidadeFornecedor, bpi_cidadeFornecedor, bpi_ufFornecedor
			, bpi_contatoFornecedor, bpi_fone1Fornecedor, bpi_fone2Fornecedor, bpi_emailFornecedor, bpi_situacao,data_importacaofde,bpi_cod_fde)
		
			VALUES(@bpi_processo, @bpi_origem, @bpi_cadmat, @bpi_item, @bpi_qtde, @bpi_valorUnitario, @bpi_valorTotal, @bpi_ne
			, @bpi_documento, @bpi_dataEntrega, @bpi_naturazaDesp, @bpi_UO, @bpi_UGE, @bpi_UE, @bpi_cnpjCpfFornecedor, @bpi_fornecedor
			, @bpi_codFornecedor, @bpi_insEstFornecedor, @bpi_endFornecedor, @bpi_bairroFornecedor, @bpi_numFornecedor
			, @bpi_compFornecedor, @bpi_cepFornecedor, @bpi_codCidadeFornecedor, @bpi_cidadeFornecedor, @bpi_ufFornecedor
			, @bpi_contatoFornecedor, @bpi_fone1Fornecedor, @bpi_fone2Fornecedor, @bpi_emailFornecedor, @bpi_situacao,getdate(),@bpi_cod_fde)

			RETURN ISNULL(@@ROWCOUNT, -1)
		END
	ELSE
		BEGIN
			RETURN 1
		END
	
	END


GO
/****** Object:  StoredProcedure [dbo].[NEW_Etiqueta_Pendente_byUni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[NEW_Etiqueta_Pendente_byUni_id]
 @uni_id INT

AS
BEGIN 

	IF ( EXISTS(SELECT uni_id FROM UnidadeGestora WHERE uni_id = @UNI_ID AND uge_situacao = 1) )
	BEGIN
	
		WITH BemItemUnidade AS
		(
		
			SELECT 
				b.bem_id,
				b.bit_id,
				bit_registroPat,
				bit_uniGestora,
				bit_uniGuarda,
				biw_id ,
				bws_id ,
				wrk_id ,
				stp_id ,
				bws_observacao ,
				bws_situacao ,
				bws_dataCriacao ,
				bws_dataAlteracao
			FROM
				BemItem as b WITH(NoLock)
			INNER JOIN 
				dbo.BemItemWfStatus  AS bws with(nolock)
				ON b.bit_id = bws.bit_id 
				AND b.bem_id = bws.bem_id
			WHERE
				(bit_uniGuarda = @uni_id OR bit_uniGestora = @uni_id)
				AND	bws.bws_situacao = 1
				AND (bws.wrk_id = 1 OR bws.wrk_id = 2 )
				and bit_status not in (3,5)

		)
	
			select distinct * from (
			SELECT 
				biw_id ,
				bws_id ,
				b.wrk_id ,
				b.stp_id ,
				bws_observacao ,
				bws_situacao ,
				bws_dataCriacao ,
				bws_dataAlteracao,
				bp.bem_descricao,
				b.bit_registroPat,
				b.bit_uniGestora,
				b.bit_uniGuarda,        
				dbo.FN_GetUniNome(b.bit_uniGuarda) AS origem,
				dbo.FN_GetUniNome(b.bit_uniGestora) AS destino,
				pwf.wrk_nome,
				sp.stp_nome        
			 from
				BemItemUnidade AS b with(nolock)
			INNER JOIN 
				dbo.BemPatrimonial AS bp with(nolock)
				ON b.bem_id = bp.bem_id
			INNER JOIN 
				dbo.PatrimonioWfStatus AS pws with(nolock)
				ON pws.stp_id = b.stp_id 
				and pws.wrk_id = b.wrk_id
				AND pws.wfs_uniGestora = 0		
				
			INNER JOIN 
				dbo.PatrimonioWorkflow AS pwf with(nolock)
				ON b.wrk_id = pwf.wrk_id
			INNER JOIN 
				dbo.StatusPatrimonio AS sp with(nolock)
				ON sp.stp_id = b.stp_id
			where
				b.stp_id < 7 
			
			--Task #2195
			union all
			
			SELECT
						BWF.biw_id ,
						bws_id ,
						pwf.wrk_id ,
						BWS.stp_id ,
						bws_observacao ,
						bws_situacao ,
						bws_dataCriacao ,
						bws_dataAlteracao,
						bem_descricao,
						BI.bit_registroPat,
						BI.bit_uniGestora,
						BI.bit_uniGuarda,        
						dbo.FN_GetUniNome(BI.bit_uniGuarda) AS origem,
						dbo.FN_GetUniNome(BI.bit_uniGestora) AS destino,
						pwf.wrk_nome,
						SPAT.stp_nome   
			FROM
				BemItem BI WITH(NOLOCK)
			
					INNER JOIN BemItemWorkflow BWF WITH(NOLOCK)
						ON ((BWF.bem_id = BI.bem_id) 
						AND (BWF.bit_id = BI.bit_id))
					INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)
						ON ((BWS.bem_id = BWF.bem_id) 
						AND (BWS.bit_id = BWF.bit_id) 
						AND (BWS.biw_id = BWF.biw_id)
						AND (BWS.wrk_id = BWF.wrk_id)
						)
				
					INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)
						ON ((BWS.wrk_id = PWS.wrk_id) 
						AND (BWS.stp_id = PWS.stp_id) )
					INNER JOIN PatrimonioWorkflow PWF WITH(NOLOCK)
						ON (BWS.wrk_id = PWF.wrk_id)
				
				
					LEFT JOIN dbo.MovimentacaoBem AS MB WITH(NOLOCK)
							ON BWF.bem_id = MB.bem_id 
							AND BWF.bit_id = MB.bit_id 
							AND (
									(BWF.wrk_id = 3 AND MB.mov_situacao = 5) 
									OR( BWF.wrk_id = 4 
										AND MB.mov_situacao = 1 
										AND BI.bit_status = 4 
										AND MB.tpm_id IN (SELECT tpm_id FROM dbo.TipoMovimentacao WITH(NOLOCK)
															WHERE tpm_operacao = 8)
										)
								 )
					INNER JOIN 
						dbo.StatusPatrimonio AS SPAT with(nolock)
						ON SPAT.stp_id = BWS.stp_id
					INNER JOIN 
						dbo.BemPatrimonial AS bp with(nolock)
						ON BWF.bem_id = bp.bem_id
			
			WHERE
				BI.bit_uniGestora = @UNI_ID
				AND BWF.biw_situacao = 1
				AND BWS.bws_situacao = 1
				AND PWS.wfs_situacao = 1
				AND PWF.wrk_situacao = 1
				AND BI.bit_situacao = 1
				AND ((PWS.wfs_uniGestora = 1) 
					OR (BI.bit_uniGuarda = BI.bit_uniGestora AND PWS.wfs_uniGuarda = 1))
				and (pwf.wrk_id = 1 or pwf.wrk_id = 2)
				and bit_status not in (3,5)
		) as result
				
		END	
	ELSE
		BEGIN
	
		WITH BemItemUnidade AS
		(
			SELECT 
				b.bem_id,
				b.bit_id,
				bit_registroPat,
				bit_uniGestora,
				bit_uniGuarda,
				biw_id ,
				bws_id ,
				wrk_id ,
				stp_id ,
				bws_observacao ,
				bws_situacao ,
				bws_dataCriacao ,
				bws_dataAlteracao
			FROM
				BemItem as b WITH (NoLock)
			INNER JOIN 
				BemItemWfStatus  AS bws with(nolock)
				ON b.bit_id = bws.bit_id 
				AND b.bem_id = bws.bem_id
			WHERE
				(bit_uniGuarda = @uni_id 
				OR bit_uniGestora = @uni_id)			
				AND bws.bws_situacao = 1
				AND (bws.wrk_id = 1 OR bws.wrk_id = 2)	
				and bit_status not in (3,5)

		)

			SELECT 
				biw_id ,
				bws_id ,
				b.wrk_id ,
				b.stp_id ,
				bws_observacao ,
				bws_situacao ,
				bws_dataCriacao ,
				bws_dataAlteracao,
				bp.bem_descricao,
				b.bit_registroPat,
				b.bit_uniGestora,
				b.bit_uniGuarda,        
				dbo.FN_GetUniNome(b.bit_uniGuarda) AS origem,
				dbo.FN_GetUniNome(b.bit_uniGestora) AS destino,
				pwf.wrk_nome,
				sp.stp_nome        
	     
			 FROM
				BemItemUnidade AS b  with(nolock)

			INNER JOIN 
				dbo.BemPatrimonial AS bp with(nolock)
				ON b.bem_id = bp.bem_id
			INNER JOIN 
				dbo.PatrimonioWfStatus AS pws with(nolock)
				ON pws.stp_id = b.stp_id 
				AND pws.wrk_id = b.wrk_id
				AND pws.wfs_uniGuarda = 0		
			INNER JOIN 
				dbo.PatrimonioWorkflow AS pwf with(nolock)
				ON b.wrk_id = pwf.wrk_id
			INNER JOIN 
				dbo.StatusPatrimonio AS sp with(nolock)
				ON sp.stp_id = b.stp_id
		where
			sp.stp_id < 7					

		ORDER BY 
			b.bem_id
			, b.bit_id
		END

END




GO
/****** Object:  StoredProcedure [dbo].[NEW_Etiqueta_Pendente_byUni_idRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Rossetti
-- Create date: 26/11/2010
-- Description:	retorna solicititações de etiquetas feitas pela unididade
-- =============================================

create PROCEDURE [dbo].[NEW_Etiqueta_Pendente_byUni_idRS]
 @uni_id INT

AS
BEGIN

	IF ( EXISTS(SELECT uni_id FROM UnidadeGestora WHERE uni_id = @UNI_ID AND uge_situacao = 1) )
	BEGIN

	WITH BemItemUnidade AS
	(
		SELECT 
			b.bem_id,
			b.bit_id,
			bit_registroPat,
			bit_uniGestora,
			bit_uniGuarda,
			biw_id ,
			bws_id ,
			wrk_id ,
			stp_id ,
			bws_observacao ,
			bws_situacao ,
			bws_dataCriacao ,
			bws_dataAlteracao
		FROM
			BemItem as b WITH(NoLock)
		INNER JOIN 
			dbo.BemItemWfStatus  AS bws with(nolock)
			ON b.bit_id = bws.bit_id 
			AND b.bem_id = bws.bem_id
		WHERE
			(bit_uniGuarda = @uni_id 
			OR bit_uniGestora = @uni_id)
			AND	bws.bws_situacao = 1
			AND (bws.wrk_id = 1 OR bws.wrk_id = 2)
	)
	
		SELECT 
			biw_id ,
			bws_id ,
			b.wrk_id ,
			b.stp_id ,
			bws_observacao ,
			bws_situacao ,
			bws_dataCriacao ,
			bws_dataAlteracao,
			bp.bem_descricao,
			b.bit_registroPat,
			b.bit_uniGestora,
			b.bit_uniGuarda,        
			dbo.FN_GetUniNome(b.bit_uniGuarda) AS origem,
			dbo.FN_GetUniNome(b.bit_uniGestora) AS destino,
			pwf.wrk_nome,
			sp.stp_nome        
		 from
			BemItemUnidade AS b with(nolock)
		INNER JOIN 
			dbo.BemPatrimonial AS bp with(nolock)
			ON b.bem_id = bp.bem_id
		INNER JOIN 
			dbo.PatrimonioWfStatus AS pws with(nolock)
			ON pws.stp_id = b.stp_id 
			AND pws.wrk_id = b.wrk_id
			AND pws.wfs_uniGestora = 0		
		INNER JOIN 
			dbo.PatrimonioWorkflow AS pwf with(nolock)
			ON b.wrk_id = pwf.wrk_id
		INNER JOIN 
			dbo.StatusPatrimonio AS sp with(nolock)
			ON sp.stp_id = b.stp_id

			
	END	
	ELSE
	BEGIN
	
	WITH BemItemUnidade AS
	(
		SELECT 
			b.bem_id,
			b.bit_id,
			bit_registroPat,
			bit_uniGestora,
			bit_uniGuarda,
			biw_id ,
			bws_id ,
			wrk_id ,
			stp_id ,
			bws_observacao ,
			bws_situacao ,
			bws_dataCriacao ,
			bws_dataAlteracao
		FROM
			BemItem as b WITH (NoLock)
		INNER JOIN 
			BemItemWfStatus  AS bws with(nolock)
			ON b.bit_id = bws.bit_id 
			AND b.bem_id = bws.bem_id
		WHERE
			(bit_uniGuarda = @uni_id 
			OR bit_uniGestora = @uni_id)			
			AND bws.bws_situacao = 1
			AND (bws.wrk_id = 1 OR bws.wrk_id = 2)	
	)

		SELECT 
			biw_id ,
			bws_id ,
			b.wrk_id ,
			b.stp_id ,
			bws_observacao ,
			bws_situacao ,
			bws_dataCriacao ,
			bws_dataAlteracao,
			bp.bem_descricao,
			b.bit_registroPat,
			b.bit_uniGestora,
			b.bit_uniGuarda,        
			dbo.FN_GetUniNome(b.bit_uniGuarda) AS origem,
			dbo.FN_GetUniNome(b.bit_uniGestora) AS destino,
			pwf.wrk_nome,
			sp.stp_nome        
	     
		 FROM
			BemItemUnidade AS b  with(nolock)

		INNER JOIN 
			dbo.BemPatrimonial AS bp with(nolock)
			ON b.bem_id = bp.bem_id
		INNER JOIN 
			dbo.PatrimonioWfStatus AS pws with(nolock)
			ON pws.stp_id = b.stp_id 
			AND pws.wrk_id = b.wrk_id
			AND pws.wfs_uniGuarda = 0		
		INNER JOIN 
			dbo.PatrimonioWorkflow AS pwf with(nolock)
			ON b.wrk_id = pwf.wrk_id
		INNER JOIN 
			dbo.StatusPatrimonio AS sp with(nolock)
			ON sp.stp_id = b.stp_id			

	ORDER BY 
		b.bem_id
		, b.bit_id
	END

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Etiqueta_Pendente_byUni_idSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[NEW_Etiqueta_Pendente_byUni_idSP] 
 @uni_id INT

AS
BEGIN

	IF ( EXISTS(SELECT uni_id FROM UnidadeGestora WHERE uni_id = @UNI_ID AND uge_situacao = 1) )
	BEGIN

	WITH BemItemUnidade AS
	(
		SELECT 
			b.bem_id,
			b.bit_id,
			bit_registroPat,
			bit_uniGestora,
			bit_uniGuarda,
			biw_id ,
			bws_id ,
			wrk_id ,
			stp_id ,
			bws_observacao ,
			bws_situacao ,
			bws_dataCriacao ,
			bws_dataAlteracao
		FROM
			BemItem as b WITH(NoLock)
		INNER JOIN 
			dbo.BemItemWfStatus  AS bws with(nolock)
			ON b.bit_id = bws.bit_id 
			AND b.bem_id = bws.bem_id
		WHERE
			(bit_uniGuarda = @uni_id 
			OR bit_uniGestora = @uni_id)
			AND	bws.bws_situacao = 1
			AND (bws.wrk_id = 1 OR bws.wrk_id = 2)
			and bit_status not in (3,5)
	)
	
		SELECT 
			biw_id ,
			bws_id ,
			b.wrk_id ,
			b.stp_id ,
			bws_observacao ,
			bws_situacao ,
			bws_dataCriacao ,
			bws_dataAlteracao,
			bp.bem_descricao,
			b.bit_registroPat,
			b.bit_uniGestora,
			b.bit_uniGuarda,        
			dbo.FN_GetUniNome(b.bit_uniGuarda) AS origem,
			dbo.FN_GetUniNome(b.bit_uniGestora) AS destino,
			pwf.wrk_nome,
			sp.stp_nome        
		 from
			BemItemUnidade AS b with(nolock)
		INNER JOIN 
			dbo.BemPatrimonial AS bp with(nolock)
			ON b.bem_id = bp.bem_id
		INNER JOIN 
			dbo.PatrimonioWfStatus AS pws with(nolock)
			ON pws.stp_id = b.stp_id 
			AND pws.wrk_id = b.wrk_id
			AND pws.wfs_uniGestora = 0		
		INNER JOIN 
			dbo.PatrimonioWorkflow AS pwf with(nolock)
			ON b.wrk_id = pwf.wrk_id
		INNER JOIN 
			dbo.StatusPatrimonio AS sp with(nolock)
			ON sp.stp_id = b.stp_id
		where
			sp.stp_id < 7
	
	--Task #2195
	union all

		SELECT
					BWF.biw_id ,
					bws_id ,
					pwf.wrk_id ,
					BWS.stp_id ,
					bws_observacao ,
					bws_situacao ,
					bws_dataCriacao ,
					bws_dataAlteracao,
					bem_descricao,
					BI.bit_registroPat,
					BI.bit_uniGestora,
					BI.bit_uniGuarda,        
					dbo.FN_GetUniNome(BI.bit_uniGuarda) AS origem,
					dbo.FN_GetUniNome(BI.bit_uniGestora) AS destino,
					pwf.wrk_nome,
					SPAT.stp_nome   
		FROM
			BemItem BI WITH(NOLOCK)
			
				INNER JOIN BemItemWorkflow BWF WITH(NOLOCK)
					ON ((BWF.bem_id = BI.bem_id) 
					AND (BWF.bit_id = BI.bit_id))
				INNER JOIN BemItemWfStatus BWS WITH(NOLOCK)
					ON ((BWS.bem_id = BWF.bem_id) 
					AND (BWS.bit_id = BWF.bit_id) 
					AND (BWS.biw_id = BWF.biw_id)
					AND (BWS.wrk_id = BWF.wrk_id)
					)
				
				INNER JOIN PatrimonioWfStatus PWS WITH(NOLOCK)
					ON ((BWS.wrk_id = PWS.wrk_id) 
					AND (BWS.stp_id = PWS.stp_id) )
				INNER JOIN PatrimonioWorkflow PWF WITH(NOLOCK)
					ON (BWS.wrk_id = PWF.wrk_id)
				
				
				LEFT JOIN dbo.MovimentacaoBem AS MB WITH(NOLOCK)
						ON BWF.bem_id = MB.bem_id 
						AND BWF.bit_id = MB.bit_id 
						AND (
								(BWF.wrk_id = 3 AND MB.mov_situacao = 5) 
								OR( BWF.wrk_id = 4 
									AND MB.mov_situacao = 1 
									AND BI.bit_status = 4 
									AND MB.tpm_id IN (SELECT tpm_id FROM dbo.TipoMovimentacao WITH(NOLOCK)
														WHERE tpm_operacao = 8)
									)
								)
				INNER JOIN 
					dbo.StatusPatrimonio AS SPAT with(nolock)
					ON SPAT.stp_id = BWS.stp_id
				INNER JOIN 
					dbo.BemPatrimonial AS bp with(nolock)
					ON BWF.bem_id = bp.bem_id
			
		WHERE
			BI.bit_uniGestora = @UNI_ID
			AND BWF.biw_situacao = 1
			AND BWS.bws_situacao = 1
			AND PWS.wfs_situacao = 1
			AND PWF.wrk_situacao = 1
			AND BI.bit_situacao = 1
			AND ((PWS.wfs_uniGestora = 1) 
				OR (BI.bit_uniGuarda = BI.bit_uniGestora AND PWS.wfs_uniGuarda = 1))
			and bit_status not in (3,5)
			
	END	
	ELSE
	BEGIN
	
	WITH BemItemUnidade AS
	(
		SELECT 
			b.bem_id,
			b.bit_id,
			bit_registroPat,
			bit_uniGestora,
			bit_uniGuarda,
			biw_id ,
			bws_id ,
			wrk_id ,
			stp_id ,
			bws_observacao ,
			bws_situacao ,
			bws_dataCriacao ,
			bws_dataAlteracao
		FROM
			BemItem as b WITH (NoLock)
		INNER JOIN 
			BemItemWfStatus  AS bws with(nolock)
			ON b.bit_id = bws.bit_id 
			AND b.bem_id = bws.bem_id
		WHERE
			(bit_uniGuarda = @uni_id 
			OR bit_uniGestora = @uni_id)			
			AND bws.bws_situacao = 1
			AND (bws.wrk_id = 1 OR bws.wrk_id = 2)	
			and bit_status not in (3,5)
	)

		SELECT 
			biw_id ,
			bws_id ,
			b.wrk_id ,
			b.stp_id ,
			bws_observacao ,
			bws_situacao ,
			bws_dataCriacao ,
			bws_dataAlteracao,
			bp.bem_descricao,
			b.bit_registroPat,
			b.bit_uniGestora,
			b.bit_uniGuarda,        
			dbo.FN_GetUniNome(b.bit_uniGuarda) AS origem,
			dbo.FN_GetUniNome(b.bit_uniGestora) AS destino,
			pwf.wrk_nome,
			sp.stp_nome        
	     
		 FROM
			BemItemUnidade AS b  with(nolock)

		INNER JOIN 
			dbo.BemPatrimonial AS bp with(nolock)
			ON b.bem_id = bp.bem_id
		INNER JOIN 
			dbo.PatrimonioWfStatus AS pws with(nolock)
			ON pws.stp_id = b.stp_id 
			AND pws.wrk_id = b.wrk_id
			AND pws.wfs_uniGuarda = 0		
		INNER JOIN 
			dbo.PatrimonioWorkflow AS pwf with(nolock)
			ON b.wrk_id = pwf.wrk_id
		INNER JOIN 
			dbo.StatusPatrimonio AS sp with(nolock)
			ON sp.stp_id = b.stp_id
		where
			sp.stp_id < 7						

	ORDER BY 
		b.bem_id
		, b.bit_id
	END

END


GO
/****** Object:  StoredProcedure [dbo].[NEW_Etiqueta_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_Etiqueta_SelectBy_All]  
 @uni_id int,  
 @etp_ano varchar(4)  
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT  
  etp_ano,  
  dbo.FN_GetUniNome(etp.uni_id) AS uad_nome,  
  etp.uni_id,  
  etp_numeroInicial,  
  etp_proximoNumero,  
  etp_dataCriacao,  
  etp_dataAlteracao,  
  uni.UNI_CODIGOUGE AS cod_uge  
 FROM   
  EtiquetaPatrimonial AS etp WITH(NoLock)  
 INNER JOIN   
  UnidadeGestora AS ung WITH(NoLock)  
   ON etp.uni_id = ung.uni_id  
 INNER JOIN   
  Unidade AS uni WITH(NoLock)  
   ON ung.uni_id = uni.uni_id  
 WHERE  
  (@uni_id IS NULL OR ung.uni_id IN (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id)))  
  AND etp_ano = @etp_ano  
 ORDER BY  
  etp_ano DESC  
  , uad_nome  
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_Etiqueta_SelectBy_Ano]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Etiqueta_SelectBy_Ano]
	@ano char(4),
	@uni_id int
AS
BEGIN
	Select 
		etp_ano
		,etp_numeroInicial
		,etp_proximoNumero
		,etp_dataAlteracao
		,etp_dataCriacao 
	from 
		EtiquetaPatrimonial WITH(NoLock)
	where 
		etp_ano = @ano 
		and uni_id = @uni_id
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Etiqueta_SelectProxNumEtiqueta]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ============================================= 
-- Author:  Lukas Figueiredo 
-- Create date: 24/08/2010 
-- Description: Retorna a proxima numeraçao de etiqueta para uma unidade e ano 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Etiqueta_SelectProxNumEtiqueta]   
  @uni_id int,  
  @ano char (4)   
AS 
BEGIN  
  select   
		etp.etp_proximoNumero 
   from EtiquetaPatrimonial as etp WITH(NoLock)  
   where    
	etp.uni_id = @uni_id   
	 and etp.etp_ano = @ano 
END 
GO
/****** Object:  StoredProcedure [dbo].[NEW_Etiqueta_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Etiqueta_UPDATE]
	@etp_ano CHAR(4),
	@uni_id INT,
	@etp_proximoNumero varchar(20),
	@etp_dataAlteracao DATETIME

AS
BEGIN
	UPDATE EtiquetaPatrimonial 
	SET 
		etp_proximoNumero = @etp_proximoNumero, 
		etp_dataAlteracao =  @etp_dataAlteracao

	WHERE 
		etp_ano = @etp_ano 
		and uni_id = @uni_id
		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_EtiquetaImpressao_byMac]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jorge Freitas
-- =============================================
CREATE PROCEDURE [dbo].[NEW_EtiquetaImpressao_byMac]
	@macTerminal varchar(50)
AS
BEGIN
	declare @bufferImp int
	
	select @bufferImp = cfe_bufferImpressora
	from SYS_ConfigEtiqueta as cet with(nolock)
	where cet.cfe_macTerminal = @macTerminal  
	
	SELECT TOP (@bufferImp)
		etp.eti_comando
		, etp.eti_id 
	FROM 
		EtiquetaImpressao AS etp with(nolock)
	INNER JOIN 
		SYS_ConfigEtiqueta as cet with(nolock)
			ON cet.cfe_macTerminal = @macTerminal
			AND cet.uni_id = etp.uni_id
	ORDER BY
		eti_id
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_EtiquetaImpressao_DeletebyIds]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jorge Freitas
-- =============================================
CREATE PROCEDURE [dbo].[NEW_EtiquetaImpressao_DeletebyIds]
	@idIni INT, 
	@idFim INT
AS
BEGIN
	DELETE 
		FROM EtiquetaImpressao 
	WHERE 
		(eti_id >= @idIni and eti_id <= @idFim)
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_EtiquetaLegado_SelectBy_Disponivel]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Luana Piva
-- Create date: 21/02/2014
-- Description:	validar se o numero de etiquetas a ser gerado é disponivel
-- =============================================
CREATE PROCEDURE [dbo].[NEW_EtiquetaLegado_SelectBy_Disponivel] 
	
	@ano varchar(4),
	@codigoUGE varchar(10),
	@etiquetaInicial int,
	@etiquetaFinal int
	
AS
BEGIN

;WITH etiquetas as (
		
		SELECT CONVERT(INT,(SUBSTRING(bit_registroPat, 10, 7)))as regPat
		FROM BemItem with(nolock)		
		WHERE
		bit_registroPat like @ano +'.' + @codigoUGE + '.%'	
		)


	SELECT regPat FROM etiquetas with(nolock)
	WHERE regPat BETWEEN @etiquetaInicial AND @etiquetaFinal
	

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ExecutarRoboSiafem_Insert]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[NEW_ExecutarRoboSiafem_Insert](
  	  @uni_id INT 
	, @per_mes varchar(2)
	, @per_ano varchar(4)
	, @status_exportacao INT
	, @user_siafem varchar(50)
	, @senha_siafem varchar(max)
	)
as 
declare @valid int, @ret varchar
begin

set	@valid = isnull((select 1 from dbo.ExecutarRoboSiafem  where 			
				uni_id = @uni_id
				and
				per_mes = @per_mes
				and
				per_ano = @per_ano),0)
			if @valid = 0
			begin
					insert into dbo.ExecutarRoboSiafem
						(uni_id ,per_mes ,per_ano,status_exportacao, user_siafem, senha_siafem,data_criacao)
					 values
					 (		
						 @uni_id,
						 @per_mes,
						 @per_ano,
						 @status_exportacao,
						 @user_siafem,
						 @senha_siafem,
						 GETDATE()		 
					 )
					SELECT @@ROWCOUNT
			end
			else
				begin
				 execute NEW_ExecutarRoboSiafem_Update_status @uni_id , @per_mes , @per_ano , @status_exportacao , @user_siafem , @senha_siafem
				end
end

GO
/****** Object:  StoredProcedure [dbo].[NEW_ExecutarRoboSiafem_SelectBy_status_exportacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[NEW_ExecutarRoboSiafem_SelectBy_status_exportacao](
 @status_exportacao INT,
 @nome_robo varchar (50)
	)
as 


declare 
	 @uni_id INT 
	,@per_mes char(2)
	,@per_ano char(4)
	,@user_siafem varchar(50)
	,@senha_siafem varchar(max)
	,@status int

begin
		
	select top 1 
		uni_id 
		,per_mes 
		,per_ano
		,status_exportacao
		,user_siafem
		,senha_siafem 
	into 
		#TempExecutarRoboSiafem
	from 
		dbo.ExecutarRoboSiafem		
	where 
		status_exportacao =  @status_exportacao
	order by 
		data_criacao
		,per_mes
		,per_ano

	
	update 
		dbo.ExecutarRoboSiafem 
	set  
		status_exportacao = 2 
		,data_alteracao = GETDATE()
		,NomeRobo= @nome_robo		 
	from  
		#TempExecutarRoboSiafem			as t
		inner join dbo.ExecutarRoboSiafem	as e
		on  t.uni_id		= e.uni_id
		and t.per_mes		= e.per_mes
		and t.per_ano		= e.per_ano
		and t.user_siafem	= e.user_siafem
		and t.senha_siafem	= e.senha_siafem
		
	where 
		t.uni_id		= e.uni_id
		and t.per_mes		= e.per_mes
		and t.per_ano		= e.per_ano
		and t.user_siafem	= e.user_siafem
		and t.senha_siafem	= e.senha_siafem	
							
	select * from #TempExecutarRoboSiafem	
end




GO
/****** Object:  StoredProcedure [dbo].[NEW_ExecutarRoboSiafem_Update_status]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[NEW_ExecutarRoboSiafem_Update_status](
  	  @uni_id INT 
	, @per_mes varchar(2)
	, @per_ano varchar(4)
	, @status_exportacao INT
	, @user_siafem varchar(50)
	, @senha_siafem varchar(max)
	)
as 
begin
		update  dbo.ExecutarRoboSiafem
		 set	status_exportacao = @status_exportacao
			,	data_alteracao = GETDATE()
			,	user_siafem = @user_siafem
			,	senha_siafem = @senha_siafem	
		where 			
				uni_id = @uni_id
				and
				per_mes = @per_mes
				and
				per_ano = @per_ano		
					 

		SELECT @@ROWCOUNT
end


GO
/****** Object:  StoredProcedure [dbo].[NEW_FatorDepeciacao_VerificaUtilizacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Christian Freitas
-- Create date: 23/09/2013
-- Description:	Verifica se o fator de depreciação já esta sendo utilizadp
-- =============================================
CREATE PROCEDURE [dbo].[NEW_FatorDepeciacao_VerificaUtilizacao]
	
	@fat_id int
AS
BEGIN
	
	SELECT TOP 1 fat.fat_id
	
	FROM FatorDepreciacao fat
	INNER JOIN BemItem bei
		ON bei.fat_id = fat.fat_id
	WHERE
		fat.fat_id = @fat_id
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_FatorDepreciacao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jorge Freitas
-- Create date: 11/08/2010
-- Description:	Incluir tinha um erro na inclusao de coeficiente
--				(decimal) não salvava os digitos decimais
-- =============================================
CREATE PROCEDURE [dbo].[NEW_FatorDepreciacao_INSERT]
	 @fat_nome VARCHAR (100)
	, @fat_coeficiente DECIMAL (3,2)
	, @fat_descricao VARCHAR (1000)
	, @fat_situacao TINYINT
	, @fat_dataCriacao DATETIME
	, @fat_dataAlteracao DATETIME
AS
BEGIN
	INSERT INTO 
		FatorDepreciacao
		( 
			fat_nome 
			, fat_coeficiente 
			, fat_descricao 
			, fat_situacao 
			, fat_dataCriacao 
			, fat_dataAlteracao  
		)
	VALUES
		( 
			@fat_nome 
			, @fat_coeficiente 
			, @fat_descricao 
			, @fat_situacao 
			, @fat_dataCriacao 
			, @fat_dataAlteracao  
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_FatorDepreciacao_Selectby_ALL]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================
-- Author:		Jorge Carlos R. de Freitas
-- Create date: 10/08/2010
-- Description:	Retorna registros com todos os campos
--				da tab FatorDepreciacao (para  exibir grid)
--				Se passar nome filtra registros com parte dele
-- ===========================================================
CREATE PROCEDURE [dbo].[NEW_FatorDepreciacao_Selectby_ALL]	
	@fat_nome VARCHAR(100)
AS
BEGIN
	SELECT 
		fat_id
		,fat_nome
		,fat_coeficiente
		,fat_descricao
		,
		case fat_situacao
			when 1 then 'Ativo'
			when 2 then 'Bloqueado'
			else 'Padrao do sistema'		
		end as fat_situacao		
		,fat_dataCriacao
		,fat_dataAlteracao

	FROM 
		FatorDepreciacao WITH(NOLOCK) 
	WHERE
		fat_situacao <> 3 and
		fat_nome like '%' + @fat_nome + '%'
	ORDER BY
		fat_nome 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_FatorDepreciacao_Selectby_Coeficiente]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_FatorDepreciacao_Selectby_Coeficiente]	
	-- Add the parameters for the stored procedure here
	@fat_coef decimal(3,2),
	@fat_id_novo int
AS
BEGIN
	SELECT 
		fat_id
		,fat_nome
		,fat_coeficiente
		,fat_descricao
		,fat_situacao
		,fat_dataCriacao
		,fat_dataAlteracao

	FROM 
		FatorDepreciacao WITH(NOLOCK) 
	WHERE		
		fat_coeficiente  = @fat_coef 
		AND (@fat_id_novo = 0 or fat_id  <> @fat_id_novo )
	ORDER BY
		fat_nome 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_FatorDepreciacao_Selectby_Nome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Jorge Carlos R Freitas>
-- Create date: <10/08/2010>
-- Description:	<Pesquisa se existe registro com nome (fat_nome) especifico>
-- =============================================

CREATE PROCEDURE [dbo].[NEW_FatorDepreciacao_Selectby_Nome]	
	-- Add the parameters for the stored procedure here
	@fat_nome VARCHAR(100),
	@fat_id_novo int
AS
BEGIN
	SELECT 
		fat_id
		,fat_nome
		,fat_coeficiente
		,fat_descricao
		,fat_situacao
		,fat_dataCriacao
		,fat_dataAlteracao

	FROM 
		FatorDepreciacao WITH(NOLOCK) 
	WHERE		
		UPPER(fat_nome) = UPPER(@fat_nome)		
		AND (@fat_id_novo = 0 or fat_id  <> @fat_id_novo )
	ORDER BY
		fat_nome 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_FatorDepreciacao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_FatorDepreciacao_UPDATE]
	-- Add the parameters for the stored procedure here
	@fat_id INT
	, @fat_nome VARCHAR (100)
	, @fat_coeficiente DECIMAL (3,2)
	, @fat_descricao VARCHAR (1000)
	, @fat_situacao TINYINT	
	, @fat_dataAlteracao DATETIME
AS
BEGIN
	UPDATE FatorDepreciacao 
	SET 
		fat_nome = @fat_nome 
		, fat_coeficiente = @fat_coeficiente 
		, fat_descricao = @fat_descricao 
		, fat_situacao = @fat_situacao 		
		, fat_dataAlteracao = @fat_dataAlteracao 

	WHERE 
		fat_id = @fat_id 
		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Fornecedor_Select]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Hethini Ribeiro	
-- Create date: 12/08/2010
-- Description:	Seleciona os fornecedores
--			tipo_fonec: 1 - pessoa física
--						2 - pessoa juridica
--						0 - todos
-- =============================================
create PROCEDURE [dbo].[NEW_Fornecedor_Select]
--declare
 @documento VARCHAR(50),
	@razao_social VARCHAR(200),
	@nome_fantasia VARCHAR(200),
	@tipo_fornec INT 

AS
BEGIN


	SELECT
		 CoreEnt.ent_id as for_cod
		, CoreEnt.ent_razaoSocial  as for_razao
		, CoreEnt.ent_nomeFantasia as for_nome
		, CoreEnt.ent_cnpj as for_documento
		, 2 as tipo
		, CoreEnt.ent_codigo as for_codigo
		, Fornec.for_id
		, Fornec.for_situacao
	FROM 
		dbo.VW_FornecedorEntidade as CoreEnt WITH(NoLock)
	INNER JOIN
		FornecedorPJ as PJ WITH(NoLock) 
		ON CoreEnt.ent_id = PJ.ent_id
	INNER JOIN 
		Fornecedor as Fornec WITH(NoLock) 
		ON Fornec.for_id = PJ.for_id   
	WHERE
		(@documento = '' OR CoreEnt.ent_cnpj like '%' + @documento + '%')
		AND (@razao_social  = '' OR CoreEnt.ent_razaoSocial like '%' + @razao_social + '%')
		AND (@nome_fantasia = '' OR CoreEnt.ent_nomeFantasia like '%' + @nome_fantasia + '%')
		AND Fornec.for_situacao <> 3 
		AND Fornec.for_situacao <> 2 
		AND (@tipo_fornec <> 1)
		
	UNION ALL
	
	SELECT
		CorePes.pes_id as for_cod
		, CorePes.pes_nome as for_razao
		, CorePes.pes_nome_abreviado as for_nome
		, PesDoc.psd_numero as for_documento 
		, 1 as tipo	
		, '0' as for_codigo
		, Fornec.for_id
		, Fornec.for_situacao
	FROM
		dbo.VW_FornecedorPessoa as CorePes WITH(NoLock)
	LEFT JOIN
		dbo.VW_FornecedorPessoaDocumento as PesDoc WITH(NoLock) 
		ON PesDoc.pes_id = CorePes.pes_id   
	INNER JOIN
		FornecedorPF as PF WITH(NoLock) 
		ON CorePes.pes_id = PF.pes_id  
	INNER JOIN 
		Fornecedor as Fornec WITH(NoLock) 
		ON Fornec.for_id = PF.for_id 
	WHERE
		(@documento = '' OR PesDoc.psd_numero like '%' + @documento + '%' )
		AND (@razao_social = '' OR CorePes.pes_nome like '%' + @razao_social + '%')
		AND (@nome_fantasia = '' OR CorePes.pes_nome_abreviado like '%' + @nome_fantasia + '%')
		AND Fornec.for_situacao <> 3 
		AND Fornec.for_situacao <> 2 
		AND (@tipo_fornec <> 2)
		  
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Fornecedor_SelectAll]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Debora cavaglieri	
-- Create date: 12/08/2010
-- Description:	Seleciona os fornecedores
--			tipo_fonec: 1 - pessoa física
--						2 - pessoa juridica
--						0 - todos
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Fornecedor_SelectAll]
--declare
 @documento VARCHAR(50),
	@razao_social VARCHAR(200),
	@nome_fantasia VARCHAR(200),
	@tipo_fornec INT 

AS
BEGIN


	SELECT
		 CoreEnt.ent_id as for_cod
		, CoreEnt.ent_razaoSocial  as for_razao
		, CoreEnt.ent_nomeFantasia as for_nome
		, CoreEnt.ent_cnpj as for_documento
		, 2 as tipo
		, CoreEnt.ent_codigo as for_codigo
		, Fornec.for_id
		, Fornec.for_situacao
	FROM 
		dbo.VW_FornecedorEntidade as CoreEnt WITH(NoLock)
	INNER JOIN
		FornecedorPJ as PJ WITH(NoLock) 
		ON CoreEnt.ent_id = PJ.ent_id
	INNER JOIN 
		Fornecedor as Fornec WITH(NoLock) 
		ON Fornec.for_id = PJ.for_id   
	WHERE
		(@documento = '' OR CoreEnt.ent_cnpj like '%' + @documento + '%')
		AND (@razao_social  = '' OR CoreEnt.ent_razaoSocial like '%' + @razao_social + '%')
		AND (@nome_fantasia = '' OR CoreEnt.ent_nomeFantasia like '%' + @nome_fantasia + '%')
		AND Fornec.for_situacao <> 3 
		AND (@tipo_fornec <> 1)
		
	UNION ALL
	
	SELECT
		CorePes.pes_id as for_cod
		, CorePes.pes_nome as for_razao
		, CorePes.pes_nome_abreviado as for_nome
		, PesDoc.psd_numero as for_documento 
		, 1 as tipo	
		, '0' as for_codigo
		, Fornec.for_id
		, Fornec.for_situacao
	FROM
		dbo.VW_FornecedorPessoa as CorePes WITH(NoLock)
	LEFT JOIN
		dbo.VW_FornecedorPessoaDocumento as PesDoc WITH(NoLock) 
		ON PesDoc.pes_id = CorePes.pes_id   
	INNER JOIN
		FornecedorPF as PF WITH(NoLock) 
		ON CorePes.pes_id = PF.pes_id  
	INNER JOIN 
		Fornecedor as Fornec WITH(NoLock) 
		ON Fornec.for_id = PF.for_id 
	WHERE
		(@documento = '' OR PesDoc.psd_numero like '%' + @documento + '%' )
		AND (@razao_social = '' OR CorePes.pes_nome like '%' + @razao_social + '%')
		AND (@nome_fantasia = '' OR CorePes.pes_nome_abreviado like '%' + @nome_fantasia + '%')
		AND Fornec.for_situacao <> 3 
		AND (@tipo_fornec <> 2)
		  
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Fornecedor_SelectBy_for_Codigo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================
-- Author:		Luana Piva
-- Create date: 01/04/2014
-- Description:	Busca fornecedor existente e ativo com código passado por parâmetro
-- ===================================================================
CREATE PROCEDURE [dbo].[NEW_Fornecedor_SelectBy_for_Codigo]
	@codFornecedor INT
AS
BEGIN

	-- Fornecedor PF
	SELECT
		pes_nome AS for_nome,
		FON.for_id
	FROM
		Fornecedor AS FON WITH(NOLOCK)
	INNER JOIN FornecedorPF AS PF WITH(NOLOCK)
		ON FON.for_id = PF.for_id
	INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)
		ON PF.pes_id = PES.pes_id
		
	WHERE
		for_situacao <> 3
		AND  FON.for_id = @codFornecedor
		
	UNION ALL
	
	-- Fornecedor PJ
	SELECT
		ent_razaoSocial AS for_nome,
		FON.for_id
	FROM
		Fornecedor AS FON WITH(NOLOCK)
	INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)
		ON FON.for_id = PJ.for_id
	INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)
		ON PJ.ent_id = ENT.ent_id
		
	WHERE
		for_situacao <> 3
		AND  FON.for_id = @codFornecedor	
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Fornecedor_SelectBy_for_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================
-- Author:		Aline Dornelas
-- Create date: 26/08/2010 09:33:00
-- Description:	Utilizado na busca da ent_razaoSocial (PJ) ou 
--				pes_nome (PF), filtrado por for_id
-- ===================================================================
CREATE PROCEDURE [dbo].[NEW_Fornecedor_SelectBy_for_id]
	@for_id INT
AS
BEGIN

	-- Fornecedor PF
	SELECT
		pes_nome AS for_nome
	FROM
		Fornecedor AS FON WITH(NOLOCK)
	INNER JOIN FornecedorPF AS PF WITH(NOLOCK)
		ON FON.for_id = PF.for_id
	INNER JOIN VW_FornecedorPessoa AS PES WITH(NOLOCK)
		ON PF.pes_id = PES.pes_id
		
	WHERE
		for_situacao <> 3
		AND  FON.for_id = @for_id
		
	UNION ALL
	
	-- Fornecedor PJ
	SELECT
		ent_razaoSocial AS for_nome
	FROM
		Fornecedor AS FON WITH(NOLOCK)
	INNER JOIN FornecedorPJ AS PJ WITH(NOLOCK)
		ON FON.for_id = PJ.for_id
	INNER JOIN VW_FornecedorEntidade AS ENT WITH(NOLOCK)
		ON PJ.ent_id = ENT.ent_id
		
	WHERE
		for_situacao <> 3
		AND  FON.for_id = @for_id
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GetSelect_Configuracao_GeraAutomatico]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		LUANA PIVA	
-- Create date: 31/01/2014 
-- Description: Retorna campos pertinentes à geração automática de registro patrimonial na importação de bens do legado
-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_GetSelect_Configuracao_GeraAutomatico]
	
	@cfg_id int
AS
BEGIN
	
	SELECT TOP 1
	   [cfg_gerarRegPatrimonialBemAutomatico]
      ,[cfg_regPatriomonialAutomaticoAno]
      ,[cfg_regPatriomonialAutomaticoUnidade]
      ,[cfg_regPatriomonialAutomaticoUGE]
      
	FROM 
		dbo.SYS_Configuracao with (noLock)
	
	WHERE
		@cfg_id is null or @cfg_id = cfg_id
		
	order by cfg_id desc 

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GetSelect_Entidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Christian Freitas
-- Create date: 05/09/2013
-- Description:	Seleciona apenas uma entidade segundo o id passado
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GetSelect_Entidade]
	
	@ent_id uniqueidentifier
	
AS
BEGIN
	
	SELECT
		ent.ent_razaoSocial as nome,
		ent.ent_id as id
	FROM
		dbo.Synonym_SYS_Entidade_SSO ent
	WHERE
		ent.ent_id = @ent_id
	
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GetSelect_GrupoBens_SelectBy_Id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================
-- Author:		Luana piva
-- Create date: 10/02/2014
-- Description:	retorna registro de acordo com ID
-- =========================================================
CREATE PROCEDURE [dbo].[NEW_GetSelect_GrupoBens_SelectBy_Id]
@ceg_cod_especie varchar(50)
	
AS
BEGIN
	SELECT 
		
		ceg.ceg_codigo_especie
		,ceg.ceg_situacao
		,ceg.grp_id
		,ceg_dataAlteracao
		,ceg.ceg_dataCriacao		

	FROM 
		Cod_Especie_GrupoBens ceg WITH(NOLOCK)		
		
	WHERE
		ceg.ceg_codigo_especie = @ceg_cod_especie
		AND ceg.ceg_situacao = 1
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_Agrupa_Movimentos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Luana Piva  
-- Create date: 03/07/2014  
-- Description: Retorna um dataTable contendo agrupamentos de ano/origem/destino contendo GPB para impressão ou reimpressão  
-- tipoSolicitacao: 8 - Impressao  
--                 9 - Reimpressão  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_GPB_Agrupa_Movimentos]  
 @ano varchar(4),  
 @uni_id int,  
 @uni_idRestricao int,  
 @grp_id int,  
 @bem_descricao varchar(max),  
 @tipoSolicitacao int,  
 @wrk_id int,  
 @tpm_operacao varchar(max),  
 @gpb varchar(max)  
    
--WITH RECOMPILE  
AS  
BEGIN  
  
 IF @tipoSolicitacao =8 --IMPRESSÃO  
 BEGIN  
 WITH MoviBem AS  
 (  
  SELECT  
   bem_id  
   ,bit_id  
   ,mov_unidadeOrigem  
   ,mov_unidadeDestino  
   ,ISNULL(MovimentacaoBem.mov_GPB,'Não possui guia')as mov_GPB  
   ,tpm_id  
   ,DATEPART (YEAR, mov_data) as ano  
  FROM   
   MovimentacaoBem WITH (NoLock)  
  WHERE  
   MovimentacaoBem.mov_situacao = 5  
   And (MovimentacaoBem.mov_unidadeDestino!=MovimentacaoBem.mov_unidadeOrigem)     
   AND  (Exists( select uni_id from dbo.FN_GetUnidadeEFilhas(@uni_idRestricao) where uni_id  = MovimentacaoBem.mov_unidadeOrigem))        
   AND mov_GPB is null  
   AND  MovimentacaoBem.uni_id != (select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))  
   AND ((DATEPART (YEAR, mov_data) = cast(@ano as int)) OR @ano is null)  
 )   
   
 , BemItemWorkStatus AS  
 (  
  Select   
   bem_id  
   ,bit_id  
  From   
   BemItemWfStatus WITH (NoLock)  
  Where  
    BemItemWfStatus.bws_situacao=1  
   AND BemItemWfStatus.wrk_id=@wrk_id  
   AND BemItemWfStatus.stp_id = @tipoSolicitacao  
 )  
   
  SELECT   
   MoviBem.mov_unidadeOrigem as origem,  
   MoviBem.mov_unidadeDestino as destino,   
   MoviBem.mov_GPB,  
   MoviBem.ano,  
   dbo.FN_GetUniNome(MoviBem.mov_unidadeOrigem) as NomeOrigem,  
   dbo.FN_GetUniNome(MoviBem.mov_unidadeDestino) as NomeDestino  
  FROM   
   MoviBem WITH(NoLock)  
   inner join TipoMovimentacao as TipMov WITH(NoLock)  
    on TipMov.tpm_id = MoviBem.tpm_id   
   inner join BemPatrimonial WITH(NoLock)  
    on MoviBem.bem_id = BemPatrimonial.bem_id      
      
  WHERE  
   (@uni_id is null or (@uni_id=MoviBem.mov_unidadeOrigem))     
   AND (@bem_descricao is null or (bem_descricao like '%'+@bem_descricao+'%'))     
   AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))  
    
  GROUP BY  
   MoviBem.mov_unidadeOrigem  
   ,MoviBem.mov_unidadeDestino     
   ,mov_GPB  
   ,MoviBem.ano     
     
   ORDER BY   
   origem  
   , destino asc,  
   MoviBem.ano  
   
 end  
 ELSE -- REIMPRESSÃO   
 BEGIN  
 WITH MoviBem AS  
 (  
  SELECT  
   bem_id  
   ,bit_id  
   ,mov_unidadeOrigem  
   ,mov_unidadeDestino  
   ,ISNULL(MovimentacaoBem.mov_GPB,'Não possui guia')as mov_GPB  
   ,tpm_id  
   ,DATEPART (YEAR, mov_data) as ano  
  FROM   
   MovimentacaoBem  with (nolock)
  WHERE  
    MovimentacaoBem.mov_situacao not in (3,4)  
   AND ( EXISTS( select top 1 uni_id from  dbo.FN_GetUnidadeEFilhas(@uni_idRestricao) where uni_id  = MovimentacaoBem.mov_unidadeOrigem or MovimentacaoBem.mov_unidadeDestino = @uni_idRestricao))    
   AND (MovimentacaoBem.mov_GPB= @gpb)      
   AND  MovimentacaoBem.uni_id != (select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))  
   AND ((DATEPART (YEAR, mov_data) = cast(@ano as int)) OR @ano is null)  
     
  )     
   
  SELECT   
   MoviBem.mov_unidadeOrigem as origem,  
   MoviBem.mov_unidadeDestino as destino,   
   MoviBem.mov_GPB,  
   MoviBem.ano,  
   dbo.FN_GetUniNome(MoviBem.mov_unidadeOrigem) as NomeOrigem,  
   dbo.FN_GetUniNome(MoviBem.mov_unidadeDestino) as NomeDestino  
     
  FROM   
   MoviBem WITH(NoLock)     
   inner join BemPatrimonial WITH(NoLock)  
    on MoviBem.bem_id = BemPatrimonial.bem_id    
   inner join TipoMovimentacao as TipMov WITH(NoLock)  
    on TipMov.tpm_id = MoviBem.tpm_id   
  WHERE  
   (@uni_id is null or (@uni_id=MoviBem.mov_unidadeOrigem or @uni_id=MoviBem.mov_unidadeDestino))    
   AND (@bem_descricao is null or (bem_descricao like '%'+ @bem_descricao +'%'))  
   AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))  
     
  GROUP BY      
   MoviBem.mov_unidadeOrigem  
   ,MoviBem.mov_unidadeDestino  
   ,MoviBem.mov_GPB  
   ,MoviBem.ano   
     
  ORDER BY   
   origem  
   , destino asc  
   ,MoviBem.ano  
    
 end  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_AtualizaTabelaMovimento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Monta os componentes de origem, destino endereço da Guia de Passagem de bens
-- =============================================
CREATE  procedure [dbo].[NEW_GPB_AtualizaTabelaMovimento]
@bem_id_Origem int,
@bit_id_Origem int,
@numGpb varchar(max),
@tpm_operacao varchar(max)
AS
BEGIN
	declare @uni_destino int;
	select @uni_destino= mov_unidadeDestino 
						from 
							MovimentacaoBem WITH(NoLock)
						where 
							MovimentacaoBem.mov_situacao=5
							AND bem_id=@bem_id_Origem
							AND bit_id=@bit_id_Origem
							--AND mov_GPB IS NULL
							AND tpm_id IN (select tpm_id
											from TipoMovimentacao WITH(NoLock)
											where TipoMovimentacao.tpm_operacao 
											IN (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,','))
			   )
	
	update 
		MovimentacaoBem
	set 
		mov_GPB=@numGpb
	where 
		bem_id=@bem_id_Origem
		and MovimentacaoBem.mov_situacao=5
		and bit_id=@bit_id_Origem
		and mov_GPB is null
		and tpm_id in (select tpm_id
					   from TipoMovimentacao  WITH(NoLock)
					   where TipoMovimentacao.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,','))
			   )
	
	UPDATE BemItem
		SET
			 bit_uniGestora =(select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(@uni_destino))
			, bit_uniGuarda = @uni_destino
			, loc_id = (SELECT TOP 1 loc_id FROM Localidade WITH (NoLock) WHERE uni_id = @uni_destino AND loc_situacao = 4)
			,dep_id=NUll
		WHERE 
			bem_id = @bem_id_Origem
			AND bit_id = @bit_id_Origem

		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_BemItemPorGPBFluxoAbertoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna o proximo numero da GPB
--				somente é atualizado no processo de impressão pois a cada select ele atualiza
--				o campo proximo numero
-- =============================================
create procedure [dbo].[NEW_GPB_BemItemPorGPBFluxoAbertoRS]
@uni_id int
AS
BEGIN
	select 
		mov.mov_GPB GPB,
		bem_descricao Descricao,
		dbo.FN_GetUniNome(mov.mov_unidadeDestino) UnidadeDestino,
		COUNT (BemItem.bit_id)numItens,
		case
		when mov.mov_situacao=1 then 'Recebido'
		when mov.mov_situacao=5 then 'Não Recebido' 
		end situacao
	from 
		MovimentacaoBem mov
	inner join BemItem 
		on mov.bit_id=BemItem.bit_id 
		and mov.bem_id = BemItem.bem_id 
		--and BemItem.bit_GPB= mov.mov_GPB
	inner join BemPatrimonial bp 
		on bp.bem_id=mov.bem_id
	where mov.mov_unidadeOrigem = @uni_id
		  and (mov.mov_situacao=5 or mov.mov_situacao=1)
	group by mov_GPB,bem_descricao,mov.mov_unidadeDestino, mov.mov_situacao
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_BemItemPorGPBFluxoAbertoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna o proximo numero da GPB
--				somente é atualizado no processo de impressão pois a cada select ele atualiza
--				o campo proximo numero
-- Author: Luana Piva
-- Data: 13/03/2014
-- Alteração: Filtrar movimentações de transferência de acordo com os tipos de operação.
-- =============================================
CREATE procedure [dbo].[NEW_GPB_BemItemPorGPBFluxoAbertoSP]
@uni_id int
AS
BEGIN
	select 
		mov.mov_GPB GPB,
		bem_descricao Descricao,
		dbo.FN_GetUniNome(mov.mov_unidadeDestino) UnidadeDestino,
		COUNT (BemItem.bit_id)numItens,
		case
		when mov.mov_situacao=1 then 'Recebido'
		when mov.mov_situacao=5 then 'Não Recebido' 
		end situacao
	from 
		MovimentacaoBem mov
	inner join BemItem 
		on mov.bit_id=BemItem.bit_id 
		and mov.bem_id = BemItem.bem_id 
		--and BemItem.bit_GPB= mov.mov_GPB
	inner join BemPatrimonial bp 
		on bp.bem_id=mov.bem_id
	inner join TipoMovimentacao tpm
		on mov.tpm_id = tpm.tpm_id
		AND((tpm.tpm_operacao = 2)
		OR (tpm.tpm_operacao = 6)) --movimentos de transferencia
		
	where mov.mov_unidadeOrigem = @uni_id
		  and (mov.mov_situacao=5 or mov.mov_situacao=1)
	group by mov_GPB,bem_descricao,mov.mov_unidadeDestino, mov.mov_situacao
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_MontaRelatorioImpressaoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna o proximo numero da GPB
--				somente é atualizado no processo de impressão pois a cada select ele atualiza
--				o campo proximo numero
-- Alteração: Luana Piva
-- Data: 10/04/2014
-- Descrição: Corrigir função FN_RegistroPat_ParaGPB_Impressao para buscar GPB pela tabela de movimentação

-- Alteração: Wellington Santana
-- Data: 30/05/2014
-- Descrição: Alterado os parametros que eram passado na procedure FN_RegistroPat_ParaGPB_Impressao
-- =============================================
CREATE procedure [dbo].[NEW_GPB_MontaRelatorioImpressaoRS]

	@bem_id varchar(max) ,
	@bit_id varchar(max) ,
	@numGpbDestino varchar(max),
	@tpm_operacaoDestino varchar(max) ,
	@origem varchar(max) ,
	@destino varchar(max) ,
	@bem_destino varchar(max),
	@bit_destino varchar(max)

AS
BEGIN
		
	-- ********************************************
	-- Inicia procedure buscando dados
	-- ********************************************	

	DECLARE @tipo_telefone UNIQUEIDENTIFIER
	SELECT TOP 1 @tipo_telefone = tmc_id FROM dbo.Synonym_SYS_TipoMeioContato_TMP WHERE tmc_nome = 'TELEFONE'
			
	SELECT 
		BemPatrimonial.bem_id,
		BemPatrimonial.bem_descricao,
		BemItem.bit_valorOrigem,
		GrupoBens.grp_descricao,
		SUM(BemItem.bit_valorOrigem) as valorTotal,
		COUNT(*) numRegistros,
		MovimentacaoBem.mov_unidadeDestino,
		MovimentacaoBem.mov_unidadeOrigem,
		tabelaDestino.enderecoRelGpbGrb + ' ' + ISNULL(telDestino.uac_contato, '') as EnderecoDestino,
		tabelaDestino.UnidadeDespesa as UnidadeDespesaDestino,
		tabelaDestino.Orgao as OrgaoDestino,
		uadDesti.uad_codigo AS ent_codigoDestino,
		tabelaDestino.UnidadeOrcamentaria as UnidadeOrcamentariaDestino,
		tabelaOrigem.enderecoRelGpbGrb + ' ' + ISNULL(telOrigem.uac_contato, '') as EnderecoOrigem,
		tabelaOrigem.UnidadeDespesa as UnidadeDespesaOrigem,
		tabelaOrigem.Orgao as OrgaoOrigem,
		uadOrig.uad_codigo AS ent_codigoOrigem,
		tabelaOrigem.UnidadeOrcamentaria as UnidadeOrcamentariaOrigem,
		BemItem.bit_GPB,
		MovimentacaoBem.mov_data,
		MovimentacaoBem.mov_observacao,
		(SELECT dbo.FN_RegistroPat_ParaGPB_Impressao(BemPatrimonial.bem_id,@bit_id,mov_unidadeOrigem)) AS registroPatrimonial
		--(SELECT dbo.FN_RegistroPat_ParaGPB(BemItem.bem_id , @numGpbDestino) ) AS registroPatrimonial
		
	From 
		BemPatrimonial WITH(NOLOCK)
	inner join BemItem WITH(NOLOCK)
		on BemPatrimonial.bem_id = BemItem.bem_id
	inner join GrupoBens WITH(NOLOCK)
		on GrupoBens.grp_id=BemPatrimonial.grp_id 
	inner join MovimentacaoBem WITH(NOLOCK)
		on MovimentacaoBem.bem_id = BemItem.bem_id 
		and MovimentacaoBem.bit_id= BemItem.bit_id 
		 
	inner join dbo.FN_GetDestinoGPB(@bem_id ,@bit_id,@numGpbDestino,@tpm_operacaoDestino,@origem,@destino,0) tabelaDestino
		on tabelaDestino.UnidadeDestino=MovimentacaoBem.mov_unidadeDestino
	inner join dbo.FN_GetOrigemGPB(@bem_id,@bit_id,@numGpbDestino,@tpm_operacaoDestino,@origem,@destino) as tabelaOrigem
		on  tabelaOrigem.UnidadeOrigem=MovimentacaoBem.mov_unidadeOrigem
	
	INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS uadOrig WITH(NOLOCK)
		ON uadOrig.uad_id = tabelaOrigem.uad_id
	
	INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS uadDesti WITH(NOLOCK)
		ON uadDesti.uad_id = tabelaDestino.uad_id
	
	LEFT JOIN dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS telOrigem WITH(NOLOCK)
			ON telOrigem.uad_id = tabelaOrigem.uad_id AND telOrigem.tmc_id = @tipo_telefone
	
	LEFT JOIN dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS telDestino WITH(NOLOCK)
			ON telDestino.uad_id = tabelaDestino.uad_id AND telDestino.tmc_id = @tipo_telefone
	
	where
		MovimentacaoBem.mov_situacao=5
		AND 
		EXISTS (
				SELECT valor FROM FN_StringToArrayInt64 (@bem_id,',') WHERE BemPatrimonial.bem_id = valor)
		AND
		EXISTS (
				SELECT valor FROM FN_StringToArrayInt32 (@bit_id,',') WHERE BemItem.bit_id = valor)
			
		
		
	group by 
		BemPatrimonial.bem_id 
		, MovimentacaoBem.mov_unidadeDestino
		, BemPatrimonial.bem_descricao
		, BemItem.bit_GPB
		, BemItem.bit_valorOrigem
		, GrupoBens.grp_descricao
		, BemPatrimonial.bem_valorOrigem
		, MovimentacaoBem.mov_unidadeOrigem
		, tabelaDestino.enderecoRelGpbGrb 
		, telDestino.uac_contato
		, tabelaDestino.UnidadeDespesa
		, tabelaDestino.Orgao 
		, uadDesti.uad_codigo
		, tabelaDestino.UnidadeOrcamentaria
		, tabelaOrigem.enderecoRelGpbGrb
		, telOrigem.uac_contato
		, tabelaOrigem.UnidadeDespesa 
		, tabelaOrigem.Orgao 
		, uadOrig.uad_codigo
		, tabelaOrigem.UnidadeOrcamentaria 	
		, MovimentacaoBem.mov_data
		, MovimentacaoBem.mov_observacao
		, BemItem.bem_id	
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_MontaRelatorioImpressaoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[NEW_GPB_MontaRelatorioImpressaoSP]
@bem_id varchar(max),
@bit_id varchar(max),
@numGpbDestino varchar(max),
@tpm_operacaoDestino varchar(max),
@origem varchar(max),
@destino varchar(max),
@bem_destino varchar(max),
@bit_destino varchar(max)

AS
BEGIN

;WITH 
BemSelecionado AS
(
	select 
		ROW_NUMBER() OVER(order by valor) as ID,
		(CONVERT(varchar(max),valor)) as bem_id
	from 
		dbo.FN_StringToArrayInt64(@bem_id, ',')
)


,BemItemSelecionado AS
(
	select 
		ROW_NUMBER() OVER(order by valor) as ID,
		(CONVERT(varchar(max),valor)) as bit_id
	from 
		dbo.FN_StringToArrayInt64(@bit_id, ',')
)
			
	SELECT 
		BemPatrimonial.bem_id,
		BemPatrimonial.bem_descricao,
		BemItem.bit_valorOrigem,
		GrupoBens.grp_descricao,
		COUNT(*)*BemItem.bit_valorOrigem as valorTotal,
		COUNT(*) numRegistros,
		MovimentacaoBem.mov_unidadeDestino,
		MovimentacaoBem.mov_unidadeOrigem,
		tabelaDestino.endereco as EnderecoDestino,
		tabelaDestino.UnidadeDespesa as UnidadeDespesaDestino,
		tabelaDestino.Orgao as OrgaoDestino,
		tabelaDestino.ent_codigo as ent_codigoDestino,
		tabelaDestino.UnidadeOrcamentaria as UnidadeOrcamentariaDestino,
		tabelaOrigem.endereco as EnderecoOrigem,
		tabelaOrigem.UnidadeDespesa as UnidadeDespesaOrigem,
		tabelaOrigem.Orgao as OrgaoOrigem,
		tabelaOrigem.ent_codigo as ent_codigoOrigem,
		tabelaOrigem.UnidadeOrcamentaria as UnidadeOrcamentariaOrigem,
		BemItem.bit_GPB,
		mov_data,
		BemItem.bit_registroPat
		--(select ent_codigo from dbo.FN_GetOrigemGPB(@bem_destino,@bit_destino,@numGpbDestino,@tpm_operacaoDestino,@destino,@origem))
	From 
		BemPatrimonial with(nolock)
	inner join BemItem with(nolock)
		on BemPatrimonial.bem_id = BemItem.bem_id
	inner join GrupoBens with(nolock)
		on GrupoBens.grp_id=BemPatrimonial.grp_id 
	inner join MovimentacaoBem with(nolock)
		on MovimentacaoBem.bem_id = BemItem.bem_id 
		and MovimentacaoBem.bit_id= BemItem.bit_id 
		
	inner join dbo.FN_GetDestinoGPB(@bem_id ,@bit_id,@numGpbDestino,@tpm_operacaoDestino,@origem,@destino,0) tabelaDestino
		on tabelaDestino.UnidadeDestino=MovimentacaoBem.mov_unidadeDestino
	inner join dbo.FN_GetOrigemGPB(@bem_id,@bit_id,@numGpbDestino,@tpm_operacaoDestino,@origem,@destino) as tabelaOrigem
		on  tabelaOrigem.UnidadeOrigem=MovimentacaoBem.mov_unidadeOrigem
	
	where
	MovimentacaoBem.mov_situacao=5
	AND	(CONVERT(varchar(max),BemPatrimonial.bem_id)+','+CONVERT(varchar(max),BemItem.bit_id)) IN (SELECT BemSelecionado.bem_id +','+BemItemSelecionado.bit_id from BemSelecionado inner join BemItemSelecionado on BemSelecionado.id=BemItemSelecionado.id)

	group by 
		BemPatrimonial.bem_id 
		, MovimentacaoBem.mov_unidadeDestino
		, BemPatrimonial.bem_descricao
		, BemItem.bit_GPB
		, BemItem.bit_valorOrigem
		, GrupoBens.grp_descricao
		, BemPatrimonial.bem_valorOrigem
		, MovimentacaoBem.mov_unidadeOrigem
		, tabelaDestino.endereco 
		, tabelaDestino.UnidadeDespesa
		, tabelaDestino.Orgao 
		, tabelaDestino.ent_codigo 
		, tabelaDestino.UnidadeOrcamentaria
		, tabelaOrigem.endereco 
		, tabelaOrigem.UnidadeDespesa 
		, tabelaOrigem.Orgao 
		, tabelaOrigem.ent_codigo 
		, tabelaOrigem.UnidadeOrcamentaria 		
		, mov_data
		, MovimentacaoBem.mov_GPB
		, BemItem.bit_registroPat
	
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_MontaRelatorioReImpressaoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Gera dados para RDL RP_ReimpressaoGPB 
-- Remimpressão de GPB

-- Alteração: Luana Piva
-- Data: 11/04/2014
-- Descrição: Alterar função para montar string com registros patrimoniais: FN_RegistroPat_ParaGPB_Reimpressao.
-- =============================================
CREATE procedure [dbo].[NEW_GPB_MontaRelatorioReImpressaoRS]
	@bem_id varchar(max),
	@bit_id varchar(max),
	@numGpbDestino varchar(max),
	@tpm_operacaoDestino varchar(max),
	@origem varchar(max),
	@destino varchar(max),
	@bem_destino varchar(max),
	@bit_destino varchar(max)

AS
BEGIN


	-- ********************************************
	-- Inicia procedure buscando dados
	-- ********************************************	
	DECLARE @tipo_telefone UNIQUEIDENTIFIER	
	SELECT TOP 1 @tipo_telefone = tmc_id FROM dbo.Synonym_SYS_TipoMeioContato_TMP WHERE tmc_nome = 'TELEFONE'

	SELECT
		BemPatrimonial.bem_id,
		BemPatrimonial.bem_descricao,
		BemItem.bit_valorOrigem,
		GrupoBens.grp_descricao,
		SUM(BemItem.bit_valorOrigem) as valorTotal,
		COUNT(*) as numRegistros,
		MovimentacaoBem.mov_unidadeDestino,
		MovimentacaoBem.mov_unidadeOrigem,
		tabelaDestino.enderecoRelGpbGrb + ' ' + ISNULL(telDestino.uac_contato, '') as EnderecoDestino,
		tabelaDestino.UnidadeDespesa as UnidadeDespesaDestino,
		tabelaDestino.Orgao as OrgaoDestino,
		uadDesti.uad_codigo AS ent_codigoDestino,
		tabelaDestino.UnidadeOrcamentaria as UnidadeOrcamentariaDestino,
		tabelaOrigem.enderecoRelGpbGrb + ' ' + ISNULL(telOrigem.uac_contato, '') as EnderecoOrigem,
		tabelaOrigem.UnidadeDespesa as UnidadeDespesaOrigem,
		tabelaOrigem.Orgao as OrgaoOrigem,
		uadOrig.uad_codigo AS ent_codigoOrigem,
		tabelaOrigem.UnidadeOrcamentaria as UnidadeOrcamentariaOrigem,
		BemItem.bit_GPB,
		MovimentacaoBem.mov_data,
		MovimentacaoBem.mov_observacao,
		(SELECT dbo.FN_RegistroPat_ParaGPB_Reimpressao(BemPatrimonial.bem_id,@numGpbDestino,@bit_id,@tpm_operacaoDestino,@origem,@destino)) AS registroPatrimonial
		--(SELECT dbo.FN_RegistroPat_ParaGPB(BemItem.bem_id , bit_GPB) ) AS registroPatrimonial
	From 
		BemPatrimonial WITH(NOLOCK)
	inner join BemItem WITH(NOLOCK)
		on BemPatrimonial.bem_id = BemItem.bem_id
	inner join GrupoBens WITH(NOLOCK)
		on GrupoBens.grp_id=BemPatrimonial.grp_id 
	inner join MovimentacaoBem WITH(NOLOCK)
		on MovimentacaoBem.bem_id = BemItem.bem_id 
		AND MovimentacaoBem.bit_id= BemItem.bit_id 
		AND MovimentacaoBem.mov_situacao not in (3,4)
	inner join dbo.FN_GetDestinoGPB(@bem_id ,@bit_id,@numGpbDestino,@tpm_operacaoDestino,@origem,@destino,1) as tabelaDestino
		on tabelaDestino.UnidadeDestino=MovimentacaoBem.mov_unidadeDestino
	INNER JOIN dbo.FN_GetOrigemGPB(@bem_id,@bit_id,@numGpbDestino,@tpm_operacaoDestino,@origem,@destino) as tabelaOrigem
		on  tabelaOrigem.UnidadeOrigem=MovimentacaoBem.mov_unidadeOrigem
	INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS uadOrig WITH(NOLOCK)
		ON uadOrig.uad_id = tabelaOrigem.uad_id

	INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS uadDesti WITH(NOLOCK)
		ON uadDesti.uad_id = tabelaDestino.uad_id

	LEFT JOIN dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS telOrigem WITH(NOLOCK)
			ON telOrigem.uad_id = tabelaOrigem.uad_id AND telOrigem.tmc_id = @tipo_telefone

	LEFT JOIN dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS telDestino WITH(NOLOCK)
			ON telDestino.uad_id = tabelaDestino.uad_id AND telDestino.tmc_id = @tipo_telefone

	where
		MovimentacaoBem.mov_GPB = @numGpbDestino
		--AND BemItem.bit_GPB = @numGpbDestino

	group by 
		BemPatrimonial.bem_id 
		, MovimentacaoBem.mov_unidadeDestino
		, BemPatrimonial.bem_descricao
		, BemItem.bit_valorOrigem
		, GrupoBens.grp_descricao
		, BemPatrimonial.bem_valorOrigem
		, MovimentacaoBem.mov_unidadeOrigem
		,tabelaDestino.enderecoRelGpbGrb 
		,telDestino.uac_contato
		,tabelaDestino.UnidadeDespesa
		,tabelaDestino.Orgao 
		,uadDesti.uad_codigo
		,tabelaDestino.UnidadeOrcamentaria
		,tabelaOrigem.enderecoRelGpbGrb
		,telOrigem.uac_contato
		,tabelaOrigem.UnidadeDespesa 
		,tabelaOrigem.Orgao 
		,uadOrig.uad_codigo
		,tabelaOrigem.UnidadeOrcamentaria 
		, BemItem.bit_GPB
		, MovimentacaoBem.mov_data
		, MovimentacaoBem.mov_observacao
		, BemItem.bem_id

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_MontaRelatorioReImpressaoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[NEW_GPB_MontaRelatorioReImpressaoSP]
	@bem_id varchar(max),
	@bit_id varchar(max),
	@numGpbDestino varchar(max),
	@tpm_operacaoDestino varchar(max),
	@origem varchar(max),
	@destino varchar(max),
	@bem_destino varchar(max),
	@bit_destino varchar(max)

AS
BEGIN

	SELECT
		BemPatrimonial.bem_id,
		BemPatrimonial.bem_descricao,
		BemItem.bit_valorOrigem,
		GrupoBens.grp_descricao,
		COUNT(*)* BemItem.bit_valorOrigem as valorTotal,
		COUNT(*) numRegistros,
		MovimentacaoBem.mov_unidadeDestino,
		MovimentacaoBem.mov_unidadeOrigem,
		tabelaDestino.endereco as EnderecoDestino,
		tabelaDestino.UnidadeDespesa as UnidadeDespesaDestino,
		tabelaDestino.Orgao as OrgaoDestino,
		tabelaDestino.ent_codigo as ent_codigoDestino,
		tabelaDestino.UnidadeOrcamentaria as UnidadeOrcamentariaDestino,
		tabelaOrigem.endereco as EnderecoOrigem,
		tabelaOrigem.UnidadeDespesa as UnidadeDespesaOrigem,
		tabelaOrigem.Orgao as OrgaoOrigem,
		tabelaOrigem.ent_codigo as ent_codigoOrigem,
		tabelaOrigem.UnidadeOrcamentaria as UnidadeOrcamentariaOrigem,
		MovimentacaoBem.mov_GPB,
		mov_data,
		BemItem.bit_registroPat
	From 
		BemPatrimonial with(nolock)
	inner join BemItem with(nolock)
		on BemPatrimonial.bem_id = BemItem.bem_id 
	inner join GrupoBens with(nolock)
		on GrupoBens.grp_id=BemPatrimonial.grp_id 
	inner join MovimentacaoBem with(nolock)
		on MovimentacaoBem.bem_id = BemItem.bem_id 
		AND MovimentacaoBem.bit_id= BemItem.bit_id 
		AND MovimentacaoBem.mov_situacao not in (3,4) 
	inner join dbo.FN_GetDestinoGPB(@bem_id ,@bit_id,@numGpbDestino,@tpm_operacaoDestino,@origem,@destino,1) as tabelaDestino
		on tabelaDestino.UnidadeDestino=MovimentacaoBem.mov_unidadeDestino
	inner join dbo.FN_GetOrigemGPB(@bem_id,@bit_id,@numGpbDestino,@tpm_operacaoDestino,@origem,@destino) as tabelaOrigem
		on  tabelaOrigem.UnidadeOrigem=MovimentacaoBem.mov_unidadeOrigem
	
	where
		MovimentacaoBem.mov_GPB = @numGpbDestino
		
	group by 
		BemPatrimonial.bem_id 
		, MovimentacaoBem.mov_unidadeDestino
		, BemPatrimonial.bem_descricao
		, BemItem.bit_valorOrigem
		, GrupoBens.grp_descricao
		, BemPatrimonial.bem_valorOrigem
		, MovimentacaoBem.mov_unidadeOrigem
		,tabelaDestino.endereco 
		,tabelaDestino.UnidadeDespesa
	
		,tabelaDestino.Orgao		
		,tabelaDestino.ent_codigo 
		,tabelaDestino.UnidadeOrcamentaria
		,tabelaOrigem.endereco 
		,tabelaOrigem.UnidadeDespesa 
		,tabelaOrigem.Orgao 
		,tabelaOrigem.ent_codigo 
		,tabelaOrigem.UnidadeOrcamentaria 
		, BemItem.bit_GPB
		,mov_data
		, MovimentacaoBem.mov_GPB
		,BemItem.bit_registroPat
		
END




GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_SelectAgrupados]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Luana Piva  
-- Create date: 03/07/2014  
-- Description: Retorna um dataTable contendo os bens que serão selecionados para   
-- montar a GPB  
-- tipoSolicitacao: 8 - Impressao  
--                 9 - Reimpressão      
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_GPB_SelectAgrupados]  
   
 @uni_idRestricao int,  
 @grp_id int,  
 @bem_descricao varchar(max),  
 @tipoSolicitacao int,  
 @wrk_id int,  
 @tpm_operacao varchar(max),  
 @gpb varchar(max),  
 @ano varchar(4),  
 @origem int,  
 @destino int  
    
--WITH RECOMPILE  
AS  
BEGIN  
  
 IF @tipoSolicitacao =8 --IMPRESSÃO  
 BEGIN  
 WITH MoviBem AS  
 (  
  SELECT  
   bem_id  
   ,bit_id  
   ,mov_unidadeOrigem  
   ,mov_unidadeDestino  
   ,ISNULL(MovimentacaoBem.mov_GPB,'Não possui guia')as mov_GPB  
   ,tpm_id  
  FROM   
   MovimentacaoBem WITH (NoLock)  
  WHERE  
   MovimentacaoBem.mov_situacao = 5  
   And (MovimentacaoBem.mov_unidadeDestino!=MovimentacaoBem.mov_unidadeOrigem)     
   AND  (Exists( select uni_id from dbo.FN_GetUnidadeEFilhas(@uni_idRestricao) where uni_id  = MovimentacaoBem.mov_unidadeOrigem))  
   AND MovimentacaoBem.mov_unidadeOrigem = @origem  
   AND MovimentacaoBem.mov_unidadeDestino = @destino  
   AND DATEPART(YEAR, mov_data) = CAST(@ano as INT)  
   AND  MovimentacaoBem.uni_id != (select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))     
 )   
   
 , BemItemWorkStatus AS  
 (  
  Select   
   bem_id  
   ,bit_id  
  From   
   BemItemWfStatus WITH (NoLock)  
  Where  
    BemItemWfStatus.bws_situacao=1  
   AND BemItemWfStatus.wrk_id=@wrk_id  
   AND BemItemWfStatus.stp_id = @tipoSolicitacao  
 )   
  SELECT   
   GrupoBens.grp_nome,  
   GrupoBens.grp_id,  
   BemPatrimonial.bem_descricao,  
   BemItem.bem_id,  
   dbo.FN_BuscarBitID(MoviBem.mov_unidadeDestino,@grp_id,@bem_descricao,@tipoSolicitacao,@wrk_id,@tpm_operacao,@gpb,BemItem.bem_id) as bit_id,  
   MoviBem.mov_unidadeOrigem as origem,  
   MoviBem.mov_unidadeDestino as destino,  
   COUNT(MoviBem.bit_id) as quantidade,  
   MoviBem.mov_GPB     
     
  FROM   
   MoviBem WITH(NoLock)  
   inner join TipoMovimentacao as TipMov WITH(NoLock)  
    on TipMov.tpm_id = MoviBem.tpm_id   
   inner join BemPatrimonial WITH(NoLock)  
    on MoviBem.bem_id = BemPatrimonial.bem_id   
   inner join GrupoBens with(nolock)  
    on GrupoBens.grp_id = BemPatrimonial.grp_id  
   inner join BemItem with(nolock)  
    on MoviBem.bem_id=BemItem.bem_id  
    and MoviBem.bit_id = BemItem.bit_id     
   inner join Unidade with(nolock)  
    on Unidade.uni_id = BemItem.bit_uniGestora   
   inner join BemItemWorkStatus WITH(NoLock)  
    on( BemItemWorkStatus.bem_id=MoviBem.bem_id   
    AND BemItemWorkStatus.bit_id=MoviBem.bit_id)  
      
  WHERE  
   (@origem is null or (@origem = MoviBem.mov_unidadeOrigem))  
   AND (@grp_id is null or (@grp_id=GrupoBens.grp_id))  
   AND (@bem_descricao is null or (bem_descricao like '%'+@bem_descricao+'%'))  
   AND (@gpb is null or @gpb='0' or BemItem.bit_GPB=@gpb)  
   AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))  
    
  GROUP BY   
   BemItem.bem_id  
   ,BemPatrimonial.bem_descricao  
   ,GrupoBens.grp_id  
   ,GrupoBens.grp_nome  
   ,MoviBem.mov_unidadeOrigem  
   ,MoviBem.mov_unidadeDestino   
   ,mov_GPB  
   ,uni_id  
  HAVING  
   uni_id != (select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(mov_unidadeDestino))  
  ORDER BY   
   origem  
     , destino  
   
 end  
 ELSE -- REIMPRESSÃO   
 BEGIN  
 WITH MoviBem AS  
 (  
  SELECT  
   bem_id  
   ,bit_id  
   ,mov_unidadeOrigem  
   ,mov_unidadeDestino  
   ,ISNULL(MovimentacaoBem.mov_GPB,'Não possui guia')as mov_GPB  
   ,tpm_id  
   ,uni_id  
  FROM   
   MovimentacaoBem  with (nolock)
  WHERE  
    MovimentacaoBem.mov_situacao not in (3,4)  
   AND ( EXISTS( select top 1 uni_id from  dbo.FN_GetUnidadeEFilhas(@uni_idRestricao) where uni_id  = MovimentacaoBem.mov_unidadeOrigem or MovimentacaoBem.mov_unidadeDestino = @uni_idRestricao))     
   AND (MovimentacaoBem.mov_GPB= @gpb)      
   AND  MovimentacaoBem.uni_id != (select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))  
   AND DATEPART(YEAR, mov_data) = CAST(@ano as INT)  
   AND MovimentacaoBem.mov_unidadeOrigem = @origem  
   AND MovimentacaoBem.mov_unidadeDestino = @destino     
  )     
   
  SELECT   
   GrupoBens.grp_nome,  
   GrupoBens.grp_id,  
   BemPatrimonial.bem_descricao,  
   BemItem.bem_id,  
   dbo.FN_BuscarBitID(MoviBem.mov_unidadeDestino,@grp_id,@bem_descricao,@tipoSolicitacao,@wrk_id,@tpm_operacao,@gpb,BemItem.bem_id) as bit_id,  
   MoviBem.mov_unidadeOrigem as origem,  
   MoviBem.mov_unidadeDestino as destino,  
   COUNT(MoviBem.bit_id) as quantidade,  
   MoviBem.mov_GPB     
     
  FROM   
   MoviBem WITH(NoLock)     
   inner join BemPatrimonial WITH(NoLock)  
    on MoviBem.bem_id = BemPatrimonial.bem_id  
   inner join BemItem with(nolock)  
    on MoviBem.bem_id=BemItem.bem_id  
    AND MoviBem.bit_id = BemItem.bit_id  
   inner join GrupoBens with(nolock)  
    on GrupoBens.grp_id = BemPatrimonial.grp_id  
   inner join Unidade with(nolock)  
    on Unidade.uni_id = BemItem.bit_uniGestora   
   inner join TipoMovimentacao as TipMov WITH(NoLock)  
    on TipMov.tpm_id = MoviBem.tpm_id   
  WHERE  
   --(@origem is null or (@origem=MoviBem.mov_unidadeOrigem))  
   --AND ((@destino is null)OR(@destino = MoviBem.mov_unidadeDestino))    
   (@grp_id is null or (@grp_id=GrupoBens.grp_id))  
   AND (@bem_descricao is null or (bem_descricao like '%'+ @bem_descricao +'%'))  
   AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))  
     
  GROUP BY   
   BemItem.bem_id  
   ,MoviBem.mov_unidadeOrigem  
   ,MoviBem.mov_unidadeDestino  
   ,BemPatrimonial.bem_descricao  
   ,GrupoBens.grp_id  
   ,GrupoBens.grp_nome  
   ,MoviBem.mov_GPB  
     
       
  ORDER BY   
   origem  
   , destino  
   ,MoviBem.mov_GPB  
    
 end  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GPB_SelectBy_All]
AS
BEGIN
	SELECT 
		gpb_ano
		,gpb_numeroInicial
		,gpb_proximoNumero
		,gpb_dataCriacao
		,gpb_dataAlteracao

	FROM 
		GPB WITH(NOLOCK)
	ORDER BY gpb_ano DESC	
		

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_SelectBy_Ano]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GPB_SelectBy_Ano] 
	-- Add the parameters for the stored procedure here
	@ano char(4)
AS
BEGIN
	
	SELECT 
		gpb_ano
		, gpb_numeroInicial
		, gpb_proximoNumero
		, gpb_dataAlteracao
		, gpb_dataCriacao 
	from 
		dbo.GPB
	WHERE 
		gpb_ano = @ano
	
	
	return @@rowcount
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_SelectMontaTabelaImpressaoGPB]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Fabio Akira Nazima  
-- Create date: 20/09/2010 as 08:55  
-- Description: Retorna um dataTable contendo os bens que serão selecionados para   
--montar a GPB  
-- tipoSolicitacao: 8 - Impressao  
--                 9 - Reimpressão  
  
-- Alteração: Luana Piva  
-- Data: 25/03/2014  
-- Descricao: Trazer somente as guias GPB  
  
-- Alteração: Nicholas de Assis  
-- Data: 09/04/2014  
-- Descricao: Retirado algumas cláusulas que estavam gerando bug no cliente (tag '[Correção 09/04/2014]')  
-- Não foi possível alinhar o motivo dessas clásulas terem sido colocadas na tela pelo histórico das atividades,  
-- mas pela regra de funcionamento das guias elas estão incorretas.  
  
-- Alteração: Luana Piva  
-- Data: 11/04/2014  
-- Descrição: Retirado algumas cláusulas que estavam gerando bug no cliente (tag '[Correção 09/04/2014]')  
-- Não foi possível alinhar o motivo dessas clásulas terem sido colocadas na tela pelo histórico das atividades,  
-- mas pela regra de funcionamento das guias elas estão incorretas.  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_GPB_SelectMontaTabelaImpressaoGPB]  
 @uni_id int,  
 @uni_idRestricao int,  
 @grp_id int,  
 @bem_descricao varchar(max),  
 @tipoSolicitacao int,  
 @wrk_id int,  
 @tpm_operacao varchar(max),  
 @gpb varchar(max)  
    
--WITH RECOMPILE  
AS  
BEGIN  
  
 IF @tipoSolicitacao =8 --IMPRESSÃO  
 BEGIN  
 WITH MoviBem AS  
 (  
  SELECT  
   bem_id  
   ,bit_id  
   ,mov_unidadeOrigem  
   ,mov_unidadeDestino  
   ,ISNULL(MovimentacaoBem.mov_GPB,'Não possui guia')as mov_GPB  
   ,tpm_id  
  FROM   
   MovimentacaoBem WITH (NoLock)  
  WHERE  
   MovimentacaoBem.mov_situacao = 5  
   And (MovimentacaoBem.mov_unidadeDestino!=MovimentacaoBem.mov_unidadeOrigem)     
   AND  (Exists( select uni_id from dbo.FN_GetUnidadeEFilhas(@uni_idRestricao) where uni_id  = MovimentacaoBem.mov_unidadeOrigem))  
   --[Correção 09/04/2014]  
   --AND  (not EXISTS( select uni_id from dbo.FN_GetUnidadeEFilhas(mov_unidadeOrigem) where uni_id  = MovimentacaoBem.mov_unidadeDestino)  
   --AND not EXISTS( select uni_id from dbo.FN_GetUnidadeEFilhas(mov_unidadeDestino) where uni_id  = MovimentacaoBem.mov_unidadeOrigem))        
 )   
   
 , BemItemWorkStatus AS  
 (  
  Select   
   bem_id  
   ,bit_id  
  From   
   BemItemWfStatus WITH (NoLock)  
  Where  
    BemItemWfStatus.bws_situacao=1  
   AND BemItemWfStatus.wrk_id=@wrk_id  
   AND BemItemWfStatus.stp_id = @tipoSolicitacao  
 )  
   
  SELECT   
   GrupoBens.grp_nome,  
   GrupoBens.grp_id,  
   BemPatrimonial.bem_descricao,  
   BemItem.bem_id,  
   dbo.FN_BuscarBitID(MoviBem.mov_unidadeDestino,@grp_id,@bem_descricao,@tipoSolicitacao,@wrk_id,@tpm_operacao,@gpb,BemItem.bem_id) as bit_id,  
   MoviBem.mov_unidadeOrigem as origem,  
   MoviBem.mov_unidadeDestino as destino,  
   COUNT(MoviBem.bit_id) as quantidade,  
   MoviBem.mov_GPB  
   ,uni_id  
  FROM   
   MoviBem WITH(NoLock)  
   inner join TipoMovimentacao as TipMov WITH(NoLock)  
    on TipMov.tpm_id = MoviBem.tpm_id   
   inner join BemPatrimonial WITH(NoLock)  
    on MoviBem.bem_id = BemPatrimonial.bem_id   
   inner join GrupoBens with(nolock)  
    on GrupoBens.grp_id = BemPatrimonial.grp_id  
   inner join BemItem with(nolock)  
    on MoviBem.bem_id=BemItem.bem_id  
    and MoviBem.bit_id = BemItem.bit_id     
   inner join Unidade with(nolock)  
    on Unidade.uni_id = BemItem.bit_uniGestora   
   inner join BemItemWorkStatus WITH(NoLock)  
    on( BemItemWorkStatus.bem_id=MoviBem.bem_id   
    AND BemItemWorkStatus.bit_id=MoviBem.bit_id)  
      
  WHERE  
   (@uni_id is null or (@uni_id=MoviBem.mov_unidadeOrigem))  
   AND (@grp_id is null or (@grp_id=GrupoBens.grp_id))  
   AND (@bem_descricao is null or (bem_descricao like '%'+@bem_descricao+'%'))  
   AND (@gpb is null or @gpb='0' or BemItem.bit_GPB=@gpb)  
   AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))  
    
  GROUP BY   
   BemItem.bem_id  
   ,BemPatrimonial.bem_descricao  
   ,GrupoBens.grp_id  
   ,GrupoBens.grp_nome  
   ,MoviBem.mov_unidadeOrigem  
   ,MoviBem.mov_unidadeDestino   
   ,mov_GPB  
   ,uni_id  
  HAVING  
   uni_id != (select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(mov_unidadeDestino))  
  ORDER BY   
   origem  
     , destino  
   
 end  
 ELSE -- REIMPRESSÃO   
 BEGIN  
 WITH MoviBem AS  
 (  
  SELECT  
   bem_id  
   ,bit_id  
   ,mov_unidadeOrigem  
   ,mov_unidadeDestino  
   ,ISNULL(MovimentacaoBem.mov_GPB,'Não possui guia')as mov_GPB  
   ,tpm_id  
  FROM   
   MovimentacaoBem  
  WHERE  
    MovimentacaoBem.mov_situacao not in (3,4)  
   AND ( EXISTS( select top 1 uni_id from  dbo.FN_GetUnidadeEFilhas(@uni_idRestricao) where uni_id  = MovimentacaoBem.mov_unidadeOrigem or MovimentacaoBem.mov_unidadeDestino = @uni_idRestricao))  
   --AND (MovimentacaoBem.mov_unidadeDestino!=MovimentacaoBem.mov_unidadeOrigem)  
   AND (MovimentacaoBem.mov_GPB= @gpb)   
     
   AND  MovimentacaoBem.uni_id != (select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))  
     
  )  
     
   
  SELECT   
   GrupoBens.grp_nome,  
   GrupoBens.grp_id,  
   BemPatrimonial.bem_descricao,  
   BemItem.bem_id,  
   dbo.FN_BuscarBitID(MoviBem.mov_unidadeDestino,@grp_id,@bem_descricao,@tipoSolicitacao,@wrk_id,@tpm_operacao,@gpb,BemItem.bem_id) as bit_id,  
   MoviBem.mov_unidadeOrigem as origem,  
   MoviBem.mov_unidadeDestino as destino,  
   COUNT(MoviBem.bit_id) as quantidade,  
   MoviBem.mov_GPB,  
   uni_id  
     
  FROM   
   MoviBem WITH(NoLock)     
   inner join BemPatrimonial WITH(NoLock)  
    on MoviBem.bem_id = BemPatrimonial.bem_id  
   inner join BemItem with(nolock)  
    on MoviBem.bem_id=BemItem.bem_id  
    AND MoviBem.bit_id = BemItem.bit_id  
   inner join GrupoBens with(nolock)  
    on GrupoBens.grp_id = BemPatrimonial.grp_id  
   inner join Unidade with(nolock)  
    on Unidade.uni_id = BemItem.bit_uniGestora   
   inner join TipoMovimentacao as TipMov WITH(NoLock)  
    on TipMov.tpm_id = MoviBem.tpm_id   
  WHERE  
   (@uni_id is null or (@uni_id=MoviBem.mov_unidadeOrigem or @uni_id=MoviBem.mov_unidadeDestino))  
   AND (@grp_id is null or (@grp_id=GrupoBens.grp_id))  
   AND (@bem_descricao is null or (bem_descricao like '%'+ @bem_descricao +'%'))  
   AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))  
     
  GROUP BY   
   BemItem.bem_id  
   ,MoviBem.mov_unidadeOrigem  
   ,MoviBem.mov_unidadeDestino  
   ,BemPatrimonial.bem_descricao  
   ,GrupoBens.grp_id  
   ,GrupoBens.grp_nome  
   ,MoviBem.mov_GPB  
   , uni_id  
       
  ORDER BY   
   origem  
   , destino  
   ,MoviBem.mov_GPB  
    
 end  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_GPB_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Aline Dornelas	
-- Create date: 11/08/2010 17:12
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GPB_UPDATE]
	@gpb_ano CHAR(4),
	@gpb_proximoNumero varchar(20),
	@gpb_dataAlteracao DATETIME

AS
BEGIN
	UPDATE GPB 
	SET 
		gpb_proximoNumero = @gpb_proximoNumero, 
		gpb_dataAlteracao =  @gpb_dataAlteracao

	WHERE 
		gpb_ano = @gpb_ano 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_Agrupa_Movimentos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Luana Piva
-- Create date: 01/07/2014
-- Description:	Retorna um dataTable contendo conjuntos de ano/origem/destino que possuam GRB para impressão ou reimpressão
-- tipoSolicitacao: 8 - Impressao
--	                9 - Reimpressão				
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GRB_Agrupa_Movimentos]
	@ano varchar(4),
	@uni_id int,
	@uni_idRestricao int,
	@grp_id int,	
	@tipoSolicitacao int,
	@wrk_id int,
	@tpm_operacao varchar(max),
	@grb varchar(max),
	@bem_descricao varchar(max)
AS
BEGIN

	IF @tipoSolicitacao =8 -- IMPRESSÃO
	BEGIN
	
	;WITH MoviBem AS
	(
		SELECT			
			mov_unidadeOrigem
			,mov_unidadeDestino
			,ISNULL(MovimentacaoBem.mov_GPB,'Não possui guia')as mov_GPB			
			--,uni_id
			,DATEPART (YEAR, mov_data) as ano
			,tpm_id
			,bem_id
			,bit_id
			
		FROM 
			MovimentacaoBem WITH (NoLock)
		WHERE
			MovimentacaoBem.mov_situacao = 5
			AND MovimentacaoBem.uni_id  =(select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))
			AND  (MovimentacaoBem.mov_unidadeOrigem in( select uni_id from  dbo.FN_GetUnidadeEFilhas(@uni_idRestricao)) or MovimentacaoBem.mov_unidadeDestino = @uni_idRestricao)	
			AND	((select uni_id from dbo.FN_GetUnidadeGestoraImediata(MovimentacaoBem.mov_unidadeDestino)) =
					(select uni_id from dbo.FN_GetUnidadeGestoraImediata(MovimentacaoBem.mov_unidadeOrigem)))
			AND mov_GPB is null
			AND ((DATEPART (YEAR, mov_data) = cast(@ano as int)) OR @ano is null)
	)	
	
	, BemItemWorkStatus AS
	(
		Select 
			bem_id
			,bit_id
		From 
			BemItemWfStatus WITH (NoLock)
		Where
			 BemItemWfStatus.bws_situacao=1
			AND BemItemWfStatus.wrk_id=@wrk_id
			AND BemItemWfStatus.stp_id = @tipoSolicitacao
	)	
		SELECT 			
			
			MoviBem.mov_unidadeOrigem as origem,
			MoviBem.mov_unidadeDestino as destino,	
			MoviBem.mov_GPB,
			MoviBem.ano,
			dbo.FN_GetUniNome(MoviBem.mov_unidadeOrigem) as NomeOrigem,
			dbo.FN_GetUniNome(MoviBem.mov_unidadeDestino) as NomeDestino

		FROM 		
			MoviBem WITH(NoLock)
			inner join TipoMovimentacao as TipMov WITH(NoLock)
				on TipMov.tpm_id = MoviBem.tpm_id 
			inner join BemItemWorkStatus WITH(NoLock)
				on BemItemWorkStatus.bem_id=MoviBem.bem_id 
				AND BemItemWorkStatus.bit_id=MoviBem.bit_id
			INNER JOIN BemPatrimonial as bem WITH(NOLOCK)
				on bem.bem_id = MoviBem.bem_id
			
			
		WHERE
			(@uni_id is null or (@uni_id=MoviBem.mov_unidadeOrigem))			
			AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))						
			--AND	((select uni_id from dbo.FN_GetUnidadeGestoraImediata(MoviBem.mov_unidadeDestino)) =
			--	(select uni_id from dbo.FN_GetUnidadeGestoraImediata(MoviBem.mov_unidadeOrigem)))
			AND (@bem_descricao is NULL or bem.bem_descricao like @bem_descricao)
		GROUP BY 
			
			 MoviBem.mov_unidadeOrigem
			,MoviBem.mov_unidadeDestino			
			,mov_GPB
			,MoviBem.ano
			
			
			ORDER BY 
			origem
			, destino asc,
			MoviBem.ano
	END
	
	ELSE -- REIMPRESSÃO
	BEGIN
	
	;WITH MoviBem AS
	(
		SELECT
			bem_id
			,bit_id
			,mov_unidadeOrigem
			,mov_unidadeDestino
			,mov_GPB
			,tpm_id			
			,DATEPART (YEAR, mov_data) as ano
		FROM 
			MovimentacaoBem WITH (NoLock)
		WHERE
			MovimentacaoBem.mov_situacao not in (3,4)
			AND MovimentacaoBem.uni_id in(select uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))			
			AND (MovimentacaoBem.mov_unidadeOrigem in( select uni_id from  dbo.FN_GetUnidadeEFilhas(@uni_idRestricao)) or MovimentacaoBem.mov_unidadeDestino = @uni_idRestricao)		
			And (mov_GPB = @grb)
			AND ((DATEPART (YEAR, mov_data) = cast(@ano as int)) OR @ano is null)		
	)
	
		SELECT 
			
			MoviBem.ano,
			MoviBem.mov_unidadeOrigem as origem,
			MoviBem.mov_unidadeDestino as destino,			
			MoviBem.mov_GPB,
			dbo.FN_GetUniNome(MoviBem.mov_unidadeOrigem) as NomeOrigem,
			dbo.FN_GetUniNome(MoviBem.mov_unidadeDestino) as NomeDestino
			
		FROM 
		
			MoviBem WITH(NoLock)
			inner join TipoMovimentacao as TipMov WITH(NoLock)
				on TipMov.tpm_id = MoviBem.tpm_id
			inner join BemPatrimonial as bem WITH(nolock)
				on bem.bem_id = MoviBem.bem_id												
			
		WHERE
			(@uni_id is null or (@uni_id=MoviBem.mov_unidadeOrigem or @uni_id=MoviBem.mov_unidadeDestino))		
			AND ((@grb IS NULL OR @grb = '0') OR MoviBem.mov_GPB = @grb)
			AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))							
			AND (@bem_descricao is NULL or bem.bem_descricao like @bem_descricao)

			
		GROUP BY 
			
			MoviBem.mov_unidadeOrigem
			,MoviBem.mov_unidadeDestino
			,MoviBem.mov_GPB
			,MoviBem.ano	
			
		ORDER BY 
			origem
			, destino asc
			,MoviBem.ano
	
	end
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_AtualizaTabelaMovimento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Monta os componentes de origem, destino endereço da Guia de Passagem de bens
-- =============================================
CREATE  procedure [dbo].[NEW_GRB_AtualizaTabelaMovimento]
@bem_id_Origem int,
@bit_id_Origem int,
@numGrb varchar(max),
@tpm_operacao varchar(max)
AS
BEGIN
	declare @uni_destino int;
	select @uni_destino= mov_unidadeDestino 
						from 
							MovimentacaoBem WITH(NoLock)
						where 
							MovimentacaoBem.mov_situacao=5
							AND bem_id=@bem_id_Origem
							and bit_id=@bit_id_Origem
							--and mov_GPB is null
							and tpm_id in (select tpm_id
											from TipoMovimentacao WITH(NoLock)
											where TipoMovimentacao.tpm_operacao 
											in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,','))
			   )
	
	update 
		MovimentacaoBem
	set 
		mov_GPB=@numGrb
	where 
		bem_id=@bem_id_Origem
		and MovimentacaoBem.mov_situacao=5
		and bit_id=@bit_id_Origem
		and mov_GPB is null
		and tpm_id in (select tpm_id
					   from TipoMovimentacao  WITH(NoLock)
					   where TipoMovimentacao.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,','))
			   )
	
	UPDATE BemItem
		SET
			bit_uniGestora =(select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(@uni_destino))
			,bit_uniGuarda=@uni_destino
			, loc_id = (SELECT TOP 1 loc_id FROM Localidade with(nolock) WHERE uni_id = @uni_destino AND loc_situacao = 4)
			,dep_id=NUll
		WHERE 
			bem_id = @bem_id_Origem
			AND bit_id = @bit_id_Origem
			--AND bit_GRB = @numGrb
		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_BemItemPorGPBFluxoAbertoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna o proximo numero da GPB
--				somente é atualizado no processo de impressão pois a cada select ele atualiza
--				o campo proximo numero
-- =============================================
create procedure [dbo].[NEW_GRB_BemItemPorGPBFluxoAbertoRS]
@uni_id int
AS
BEGIN
	select 
		mov.mov_GPB GPB,
		bem_descricao Descricao,
		dbo.FN_GetUniNome(mov.mov_unidadeDestino) UnidadeDestino,
		COUNT (BemItem.bit_id)numItens,
		case
		when mov.mov_situacao=1 then 'Recebido'
		when mov.mov_situacao=5 then 'Não Recebido' 
		end situacao
	from 
		MovimentacaoBem mov
	inner join 
		BemItem 
		on mov.bit_id=BemItem.bit_id 
		and mov.bem_id = BemItem.bem_id 
		--and BemItem.bit_GRB= mov.mov_GPB
	inner join 
		BemPatrimonial bp 
		on bp.bem_id=mov.bem_id
	where 
		mov.mov_unidadeOrigem = @uni_id
	  and (mov.mov_situacao=5 or mov.mov_situacao=1)
	group by 
		mov_GPB
		, bem_descricao
		, mov.mov_unidadeDestino
		, mov.mov_situacao
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_BemItemPorGPBFluxoAbertoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna o proximo numero da GPB
--				somente é atualizado no processo de impressão pois a cada select ele atualiza
--				o campo proximo numero
-- Author: Luana Piva
-- Data: 13/03/2014
-- Alteração: Filtrar movimentações de transferência de acordo com os tipos de operação.
-- =============================================
CREATE procedure [dbo].[NEW_GRB_BemItemPorGPBFluxoAbertoSP]
@uni_id int
AS
BEGIN
	select 
		mov.mov_GPB GPB,
		bem_descricao Descricao,
		dbo.FN_GetUniNome(mov.mov_unidadeDestino) UnidadeDestino,
		COUNT (BemItem.bit_id)numItens,
		case
		when mov.mov_situacao=1 then 'Recebido'
		when mov.mov_situacao=5 then 'Não Recebido' 
		end situacao
	from 
		MovimentacaoBem mov
	inner join 
		BemItem 
		on mov.bit_id=BemItem.bit_id 
		and mov.bem_id = BemItem.bem_id 
		--and BemItem.bit_GRB= mov.mov_GPB
	inner join 
		BemPatrimonial bp 
		on bp.bem_id=mov.bem_id
	inner join TipoMovimentacao tpm
		on mov.tpm_id = tpm.tpm_id
		AND((tpm.tpm_operacao = 2)
		OR (tpm.tpm_operacao = 6)) --movimentos de transferencia
	where 
		mov.mov_unidadeOrigem = @uni_id
	  and (mov.mov_situacao=5 or mov.mov_situacao=1)
	group by 
		mov_GPB
		, bem_descricao
		, mov.mov_unidadeDestino
		, mov.mov_situacao
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_MontaRelatorioImpressaoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna o proximo numero da GPB
--				somente é atualizado no processo de impressão pois a cada select ele atualiza
--				o campo proximo numero
-- Alteração: Luana Piva
-- Data: 10/04/2014
-- Description: Adicionar função para listar corretamente os registros patrimoniais.

-- Alteração: Wellington Santana
-- Data: 30/05/2014
-- Descrição: Alterado os parametros que eram passado na procedure FN_RegistroPat_ParaGRB_Impressao
-- =============================================
CREATE procedure [dbo].[NEW_GRB_MontaRelatorioImpressaoRS]
@bem_id varchar(max),
@bit_id varchar(max),
@numGrbDestino varchar(max),
@tpm_operacaoDestino varchar(max),
@origem varchar(max),
@destino varchar(max),
@bem_destino varchar(max),
@bit_destino varchar(max)
AS
BEGIN

	DECLARE @tipo_telefone UNIQUEIDENTIFIER
	
	SELECT TOP 1 @tipo_telefone = tmc_id FROM dbo.Synonym_SYS_TipoMeioContato_TMP WHERE tmc_nome = 'TELEFONE'

	IF (OBJECT_ID('tempdb..#tmp') > 0)                 
		DROP TABLE #tmp 
	
;WITH 
BemSelecionado AS
(
	select 
		ROW_NUMBER() OVER(order by valor) as ID,
		(CONVERT(varchar(max),valor)) as bem_id
	from 
		dbo.FN_StringToArrayInt64(@bem_id, ',')
)


,BemItemSelecionado AS
(
	select 
		ROW_NUMBER() OVER(order by valor) as ID,
		(CONVERT(varchar(max),valor)) as bit_id
	from 
		dbo.FN_StringToArrayInt64(@bit_id, ',')
)

	SELECT 
		BemPatrimonial.bem_id,
		BemPatrimonial.bem_descricao,
		BemItem.bit_valorOrigem,
		GrupoBens.grp_descricao,
		COUNT(*)*BemItem.bit_valorOrigem as valorTotal,
		COUNT(*) numRegistros,
		MovimentacaoBem.mov_unidadeDestino,
		MovimentacaoBem.mov_unidadeOrigem,
		tabelaDestino.enderecoRelGpbGrb + ' ' + ISNULL(telDestino.uac_contato, '') as EnderecoDestino,
		tabelaDestino.UnidadeDespesa as UnidadeDespesaDestino,
		tabelaDestino.Orgao as OrgaoDestino,
		--tabelaDestino.ent_codigo as ent_codigoDestino,
		uadDesti.uad_codigo AS ent_codigoDestino,
		tabelaDestino.UnidadeOrcamentaria as UnidadeOrcamentariaDestino,
		tabelaOrigem.enderecoRelGpbGrb + ' ' + ISNULL(telOrigem.uac_contato, '') as EnderecoOrigem,
		tabelaOrigem.UnidadeDespesa as UnidadeDespesaOrigem,
		tabelaOrigem.Orgao as OrgaoOrigem,
		--tabelaOrigem.ent_codigo as ent_codigoOrigem,
		uadOrig.uad_codigo AS ent_codigoOrigem,
		tabelaOrigem.UnidadeOrcamentaria as UnidadeOrcamentariaOrigem,
		BemItem.bit_GRB,
		MovimentacaoBem.mov_data,
		MovimentacaoBem.mov_observacao
		,BemItem.bit_registroPat
	
	INTO #tmp 
		
	FROM 
		BemPatrimonial WITH(NOLOCK)
	INNER JOIN BemItem WITH(NOLOCK)
		on BemPatrimonial.bem_id = BemItem.bem_id
	INNER JOIN GrupoBens WITH(NOLOCK)
		on GrupoBens.grp_id=BemPatrimonial.grp_id 
	INNER JOIN MovimentacaoBem WITH(NOLOCK)
		on MovimentacaoBem.bem_id = BemItem.bem_id 
		and MovimentacaoBem.bit_id= BemItem.bit_id 
		and MovimentacaoBem.mov_situacao=5
	INNER JOIN dbo.FN_GetDestinoGPB(@bem_id ,@bit_id,@numGrbDestino,@tpm_operacaoDestino,@origem,@destino,0) tabelaDestino
		on tabelaDestino.UnidadeDestino=MovimentacaoBem.mov_unidadeDestino
	INNER JOIN dbo.FN_GetOrigemGPB(@bem_id,@bit_id,@numGrbDestino,@tpm_operacaoDestino,@origem,@destino) as tabelaOrigem
		on  tabelaOrigem.UnidadeOrigem=MovimentacaoBem.mov_unidadeOrigem
		
	LEFT JOIN dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS telOrigem WITH(NOLOCK)
			ON telOrigem.uad_id = tabelaOrigem.uad_id AND telOrigem.tmc_id = @tipo_telefone
	
	LEFT JOIN dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS telDestino WITH(NOLOCK)
			ON telDestino.uad_id = tabelaDestino.uad_id AND telDestino.tmc_id = @tipo_telefone
			
	INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS uadOrig WITH(NOLOCK)
		ON uadOrig.uad_id = tabelaOrigem.uad_id
	
	INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS uadDesti WITH(NOLOCK)
		ON uadDesti.uad_id = tabelaDestino.uad_id
		
	WHERE
		(CONVERT(varchar(max),BemPatrimonial.bem_id)) IN (SELECT BemSelecionado.bem_id from BemSelecionado inner join BemItemSelecionado on BemSelecionado.id=BemItemSelecionado.id)

	group by 
		BemPatrimonial.bem_id 
		,MovimentacaoBem.mov_unidadeDestino
		, BemPatrimonial.bem_descricao
		, BemItem.bit_GRB
		, BemItem.bit_valorOrigem
		, GrupoBens.grp_descricao
		, BemPatrimonial.bem_valorOrigem
		, MovimentacaoBem.mov_unidadeOrigem
		, tabelaDestino.enderecoRelGpbGrb 
		, telDestino.uac_contato
		, tabelaDestino.UnidadeDespesa
		, tabelaDestino.Orgao 
		, uadDesti.uad_codigo
		, tabelaDestino.UnidadeOrcamentaria
		, tabelaOrigem.enderecoRelGpbGrb
		, telOrigem.uac_contato
		, tabelaOrigem.UnidadeDespesa 
		, tabelaOrigem.Orgao 
		, uadOrig.uad_codigo 
		, tabelaOrigem.UnidadeOrcamentaria 
		, MovimentacaoBem.mov_data
		, MovimentacaoBem.mov_observacao
		, BemItem.bit_registroPat
		
		
	SELECT 	
			bem_id,
			bem_descricao,
			bit_valorOrigem,
			grp_descricao,
			COUNT(numRegistros) * bit_valorOrigem as valorTotal,
			COUNT(numRegistros) as numRegistros,
			mov_unidadeDestino,
			mov_unidadeOrigem,
			EnderecoDestino,
			UnidadeDespesaDestino, 
			OrgaoDestino,
			ent_codigoDestino,
			UnidadeOrcamentariaDestino,
			EnderecoOrigem,--
			UnidadeDespesaOrigem,
			OrgaoOrigem,
			ent_codigoOrigem,
			UnidadeOrcamentariaOrigem,
			bit_GRB,
			mov_data,
			mov_observacao,
			(SELECT dbo.FN_RegistroPat_ParaGRB_Impressao(bem_id,@bit_id,mov_unidadeOrigem)) AS registroPatrimonial
			
			--, CASE COUNT(numRegistros) 
			--		WHEN 1 THEN (SELECT TOP 1 bit_registroPat FROM #tmp t2 WHERE t2.bem_id = t1.bem_id)
			--		--WHEN numRegistros > 1 THEN 
			--		ELSE
			--			(SELECT TOP 1 bit_registroPat FROM #tmp t2 WHERE t2.bem_id = t1.bem_id ORDER BY CONVERT(INT, SUBSTRING(bit_registroPat,(CHARINDEX('.', REVERSE(bit_registroPat))+2), LEN(bit_registroPat))) )
			--			+ ' à ' + 
			--			(SELECT TOP 1 bit_registroPat FROM #tmp t2 WHERE t2.bem_id = t1.bem_id ORDER BY CONVERT(INT, SUBSTRING(bit_registroPat,(CHARINDEX('.', REVERSE(bit_registroPat))+2), LEN(bit_registroPat))) DESC )
			--		 END AS registroPatrimonial
			
		FROM #tmp t1
		
		GROUP BY bem_id,
			bem_descricao,
			bit_valorOrigem,
			grp_descricao,
			valorTotal,
			numRegistros,
			mov_unidadeDestino,
			mov_unidadeOrigem,
			EnderecoDestino,
			UnidadeDespesaDestino,
			OrgaoDestino,
			ent_codigoDestino,
			UnidadeOrcamentariaDestino,
			EnderecoOrigem,
			UnidadeDespesaOrigem,
			OrgaoOrigem,
			ent_codigoOrigem,
			UnidadeOrcamentariaOrigem,
			bit_GRB,
			mov_data,
			mov_observacao
		
	 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_MontaRelatorioImpressaoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[NEW_GRB_MontaRelatorioImpressaoSP]
@bem_id varchar(max),
@bit_id varchar(max),
@numGrbDestino varchar(max),
@tpm_operacaoDestino varchar(max),
@origem varchar(max),
@destino varchar(max),
@bem_destino varchar(max) ,
@bit_destino varchar(max) 
AS
BEGIN
;WITH 
BemSelecionado AS
(
	select 
		ROW_NUMBER() OVER(order by valor) as ID,
		(CONVERT(varchar(max),valor)) as bem_id
	from 
		dbo.FN_StringToArrayInt64(@bem_id, ',')
)


,BemItemSelecionado AS
(
	select 
		ROW_NUMBER() OVER(order by valor) as ID,
		(CONVERT(varchar(max),valor)) as bit_id
	from 
		dbo.FN_StringToArrayInt64(@bit_id, ',')
)

	SELECT 
		BemPatrimonial.bem_id,
		BemPatrimonial.bem_descricao,
		BemItem.bit_valorOrigem,
		GrupoBens.grp_descricao,
		COUNT(*)*BemItem.bit_valorOrigem as valorTotal,
		COUNT(*) numRegistros,
		MovimentacaoBem.mov_unidadeDestino,
		MovimentacaoBem.mov_unidadeOrigem,
		tabelaDestino.endereco as EnderecoDestino,
		tabelaDestino.UnidadeDespesa as UnidadeDespesaDestino,
		tabelaDestino.Orgao as OrgaoDestino,
		tabelaDestino.ent_codigo as ent_codigoDestino,
		tabelaDestino.UnidadeOrcamentaria as UnidadeOrcamentariaDestino,
		tabelaOrigem.endereco as EnderecoOrigem,
		tabelaOrigem.UnidadeDespesa as UnidadeDespesaOrigem,
		tabelaOrigem.Orgao as OrgaoOrigem,
		tabelaOrigem.ent_codigo as ent_codigoOrigem,
		tabelaOrigem.UnidadeOrcamentaria as UnidadeOrcamentariaOrigem,
		BemItem.bit_GRB,
		mov_data,
		BemItem.bit_registroPat
		
	From 
		BemPatrimonial 
	inner join BemItem with(nolock)
		on BemPatrimonial.bem_id = BemItem.bem_id
	inner join GrupoBens with(nolock)
		on GrupoBens.grp_id=BemPatrimonial.grp_id 
	inner join MovimentacaoBem with(nolock)
		on MovimentacaoBem.bem_id = BemItem.bem_id 
		and MovimentacaoBem.bit_id= BemItem.bit_id 
		and MovimentacaoBem.mov_situacao=5
	inner join dbo.FN_GetDestinoGPB(@bem_id ,@bit_id,@numGrbDestino,@tpm_operacaoDestino,@origem,@destino,0) tabelaDestino
		on tabelaDestino.UnidadeDestino=MovimentacaoBem.mov_unidadeDestino
	inner join dbo.FN_GetOrigemGPB(@bem_id,@bit_id,@numGrbDestino,@tpm_operacaoDestino,@origem,@destino) as tabelaOrigem
		on  tabelaOrigem.UnidadeOrigem=MovimentacaoBem.mov_unidadeOrigem
	where
		(CONVERT(varchar(max),BemPatrimonial.bem_id)+','+CONVERT(varchar(max),BemItem.bit_id)) IN (SELECT BemSelecionado.bem_id +','+BemItemSelecionado.bit_id from BemSelecionado inner join BemItemSelecionado on BemSelecionado.id=BemItemSelecionado.id)

	group by 
		BemPatrimonial.bem_id 
		,MovimentacaoBem.mov_unidadeDestino
		, BemPatrimonial.bem_descricao
		, BemItem.bit_GRB
		, BemItem.bit_valorOrigem
		, GrupoBens.grp_descricao
		, BemPatrimonial.bem_valorOrigem
		, MovimentacaoBem.mov_unidadeOrigem
		, tabelaDestino.endereco 
		, tabelaDestino.UnidadeDespesa
		, tabelaDestino.Orgao 
		, tabelaDestino.ent_codigo 
		, tabelaDestino.UnidadeOrcamentaria
		, tabelaOrigem.endereco 
		, tabelaOrigem.UnidadeDespesa 
		, tabelaOrigem.Orgao 
		, tabelaOrigem.ent_codigo 
		, tabelaOrigem.UnidadeOrcamentaria 
		, mov_data
		,BemItem.bit_registroPat
	 
END



GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_MontaRelatorioReImpressaoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 21/09/2010 9:14h
-- Description:	Retorna o proximo numero da GPB
--				somente é atualizado no processo de impressão pois a cada select ele atualiza
--				o campo proximo numero
-- Alteração: Luana Piva
-- Data: 10/04/2014
-- Descrição: utilizar função FN_RegistroPat_ParaGRB_Reimpressao para trazer registros patrimoiais corretamente excluindo os não utilizados no intervalo.

-- =============================================
CREATE procedure [dbo].[NEW_GRB_MontaRelatorioReImpressaoRS]
@bem_id varchar(max),
@bit_id varchar(max),
@numGrbDestino varchar(max),
@tpm_operacao varchar(max),
@origem varchar(max),
@destino varchar(max)
AS
BEGIN

	DECLARE @tipo_telefone UNIQUEIDENTIFIER
	
	SELECT TOP 1 @tipo_telefone = tmc_id FROM dbo.Synonym_SYS_TipoMeioContato_TMP WHERE tmc_nome = 'TELEFONE'

	SELECT 
		BemPatrimonial.bem_id,
		BemPatrimonial.bem_descricao,
		BemItem.bit_valorOrigem,
		GrupoBens.grp_descricao,
		COUNT(*)*BemItem.bit_valorOrigem as valorTotal,
		COUNT(*) numRegistros,
		MovimentacaoBem.mov_unidadeDestino,
		MovimentacaoBem.mov_unidadeOrigem,
		tabelaDestino.enderecoRelGpbGrb + ' ' + ISNULL(telDestino.uac_contato, '') as EnderecoDestino,
		tabelaDestino.UnidadeDespesa as UnidadeDespesaDestino,
		tabelaDestino.Orgao as OrgaoDestino,
		--tabelaDestino.ent_codigo as ent_codigoDestino,
		uadDesti.uad_codigo AS ent_codigoDestino,
		tabelaDestino.UnidadeOrcamentaria as UnidadeOrcamentariaDestino,
		tabelaOrigem.enderecoRelGpbGrb + ' ' + ISNULL(telOrigem.uac_contato, '') as EnderecoOrigem,
		tabelaOrigem.UnidadeDespesa as UnidadeDespesaOrigem,
		tabelaOrigem.Orgao as OrgaoOrigem,
		--tabelaOrigem.ent_codigo as ent_codigoOrigem,
		uadOrig.uad_codigo AS ent_codigoOrigem,
		tabelaOrigem.UnidadeOrcamentaria as UnidadeOrcamentariaOrigem,
		BemItem.bit_GRB,
		MovimentacaoBem.mov_data,
		MovimentacaoBem.mov_observacao
		,BemItem.bit_registroPat
		
	INTO #tmp 
		
	From 
		BemPatrimonial WITH(NOLOCK)
	INNER JOIN BemItem WITH(NOLOCK)
		ON BemPatrimonial.bem_id = BemItem.bem_id
	INNER JOIN GrupoBens WITH(NOLOCK)
		ON GrupoBens.grp_id=BemPatrimonial.grp_id 
	INNER JOIN MovimentacaoBem
		ON MovimentacaoBem.bem_id = BemItem.bem_id 
		and MovimentacaoBem.bit_id= BemItem.bit_id 
		AND MovimentacaoBem.mov_situacao not in (3,4)
	INNER JOIN dbo.FN_GetDestinoGPB(@bem_id ,@bit_id,@numGrbDestino,@tpm_operacao,@origem,@destino,1) tabelaDestino
		ON tabelaDestino.UnidadeDestino=MovimentacaoBem.mov_unidadeDestino
	INNER JOIN dbo.FN_GetOrigemGPB(@bem_id,@bit_id,@numGrbDestino,@tpm_operacao,@origem,@destino) as tabelaOrigem
		ON  tabelaOrigem.UnidadeOrigem=MovimentacaoBem.mov_unidadeOrigem
		
	LEFT JOIN dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS telOrigem WITH(NOLOCK)
			ON telOrigem.uad_id = tabelaOrigem.uad_id AND telOrigem.tmc_id = @tipo_telefone
	
	LEFT JOIN dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS telDestino WITH(NOLOCK)
			ON telDestino.uad_id = tabelaDestino.uad_id AND telDestino.tmc_id = @tipo_telefone
	
	INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS uadOrig WITH(NOLOCK)
		ON uadOrig.uad_id = tabelaOrigem.uad_id
	
	INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS uadDesti WITH(NOLOCK)
		ON uadDesti.uad_id = tabelaDestino.uad_id
		
	WHERE
		MovimentacaoBem.mov_GPB=@numGrbDestino
		AND BemItem.bit_GRB IS NOT NULL
		
	GROUP BY 
		BemPatrimonial.bem_id 
		,MovimentacaoBem.mov_unidadeDestino
		, BemPatrimonial.bem_descricao
		, BemItem.bit_valorOrigem
		, GrupoBens.grp_descricao
		, BemPatrimonial.bem_valorOrigem
		, MovimentacaoBem.mov_unidadeOrigem
		, tabelaDestino.enderecoRelGpbGrb 
		, telDestino.uac_contato
		, tabelaDestino.UnidadeDespesa
		, tabelaDestino.Orgao 
		, uadDesti.uad_codigo 
		, tabelaDestino.UnidadeOrcamentaria
		, tabelaOrigem.enderecoRelGpbGrb
		, telOrigem.uac_contato
		, tabelaOrigem.UnidadeDespesa 
		, tabelaOrigem.Orgao 
		, uadOrig.uad_codigo 
		, tabelaOrigem.UnidadeOrcamentaria 
		, BemItem.bit_GRB
		, MovimentacaoBem.mov_data
		, MovimentacaoBem.mov_observacao
		, BemItem.bit_registroPat
		
		
	SELECT 
			bem_id,
			bem_descricao,
			bit_valorOrigem,
			grp_descricao,
			COUNT(numRegistros) * bit_valorOrigem as valorTotal,
			COUNT(numRegistros) as numRegistros,
			mov_unidadeDestino,
			mov_unidadeOrigem,
			EnderecoDestino,
			UnidadeDespesaDestino,
			OrgaoDestino,
			ent_codigoDestino,
			UnidadeOrcamentariaDestino,
			EnderecoOrigem,
			UnidadeDespesaOrigem,
			OrgaoOrigem,
			ent_codigoOrigem,
			UnidadeOrcamentariaOrigem,
			bit_GRB,
			mov_data,
			mov_observacao,
			(SELECT dbo.FN_RegistroPat_ParaGRB_Reimpressao(bem_id,@numGrbDestino,@bit_id,@tpm_operacao,@origem,@destino)) AS registroPatrimonial
			
			--, CASE COUNT(numRegistros) 
			--		WHEN 1 THEN (SELECT TOP 1 bit_registroPat FROM #tmp t2 WHERE t2.bem_id = t1.bem_id)
			--		--WHEN numRegistros > 1 THEN 
			--		ELSE
			--			(SELECT TOP 1 bit_registroPat FROM #tmp t2 WHERE t2.bem_id = t1.bem_id ORDER BY CONVERT(INT, SUBSTRING(bit_registroPat,(CHARINDEX('.', REVERSE(bit_registroPat))+2), LEN(bit_registroPat))) )
			--			+ ' à ' + 
			--			(SELECT TOP 1 bit_registroPat FROM #tmp t2 WHERE t2.bem_id = t1.bem_id ORDER BY CONVERT(INT, SUBSTRING(bit_registroPat,(CHARINDEX('.', REVERSE(bit_registroPat))+2), LEN(bit_registroPat))) DESC )
			--		 END AS registroPatrimonial
			
		FROM #tmp t1
		
		GROUP BY bem_id,
			bem_descricao,
			bit_valorOrigem,
			grp_descricao,
			valorTotal,
			numRegistros,
			mov_unidadeDestino,
			mov_unidadeOrigem,
			EnderecoDestino,
			UnidadeDespesaDestino,
			OrgaoDestino,
			ent_codigoDestino,
			UnidadeOrcamentariaDestino,
			EnderecoOrigem,
			UnidadeDespesaOrigem,
			OrgaoOrigem,
			ent_codigoOrigem,
			UnidadeOrcamentariaOrigem,
			bit_GRB,
			mov_data,
			mov_observacao
		
	 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_MontaRelatorioReImpressaoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[NEW_GRB_MontaRelatorioReImpressaoSP]
@bem_id varchar(max),
@bit_id varchar(max),
@numGrbDestino varchar(max),
@tpm_operacaoDestino varchar(max),
@origem varchar(max),
@destino varchar(max),
@bem_destino varchar(max),
@bit_destino varchar(max)
AS
BEGIN
	SELECT 
		BemPatrimonial.bem_id,
		BemPatrimonial.bem_descricao,
		BemItem.bit_valorOrigem,
		GrupoBens.grp_descricao,
		COUNT(*)*BemItem.bit_valorOrigem as valorTotal,
		COUNT(*) numRegistros,
		MovimentacaoBem.mov_unidadeDestino,
		MovimentacaoBem.mov_unidadeOrigem,
		tabelaDestino.endereco as EnderecoDestino,
		tabelaDestino.UnidadeDespesa as UnidadeDespesaDestino,
		tabelaDestino.Orgao as OrgaoDestino,
		tabelaDestino.ent_codigo as ent_codigoDestino,
		tabelaDestino.UnidadeOrcamentaria as UnidadeOrcamentariaDestino,
		tabelaOrigem.endereco as EnderecoOrigem,
		tabelaOrigem.UnidadeDespesa as UnidadeDespesaOrigem,
		tabelaOrigem.Orgao as OrgaoOrigem,
		tabelaOrigem.ent_codigo as ent_codigoOrigem,
		tabelaOrigem.UnidadeOrcamentaria as UnidadeOrcamentariaOrigem,
		--BemItem.bit_GRB,
		MovimentacaoBem.mov_GPB as bit_GRB,
		mov_data,
		BemItem.bit_registroPat
		
	From 
		BemPatrimonial 
	inner join BemItem with(nolock)
		on BemPatrimonial.bem_id = BemItem.bem_id
	inner join GrupoBens with(nolock)
		on GrupoBens.grp_id=BemPatrimonial.grp_id 
	inner join MovimentacaoBem
		on MovimentacaoBem.bem_id = BemItem.bem_id 
		and MovimentacaoBem.bit_id= BemItem.bit_id 
		AND MovimentacaoBem.mov_situacao not in (3,4)
	inner join dbo.FN_GetDestinoGPB(@bem_id ,@bit_id,@numGrbDestino,@tpm_operacaoDestino,@origem,@destino,1) tabelaDestino
		on tabelaDestino.UnidadeDestino=MovimentacaoBem.mov_unidadeDestino
	inner join dbo.FN_GetOrigemGPB(@bem_id,@bit_id,@numGrbDestino,@tpm_operacaoDestino,@origem,@destino) as tabelaOrigem
		on  tabelaOrigem.UnidadeOrigem=MovimentacaoBem.mov_unidadeOrigem
	where
		MovimentacaoBem.mov_GPB=@numGrbDestino
	group by 
		BemPatrimonial.bem_id 
		,MovimentacaoBem.mov_unidadeDestino
		, BemPatrimonial.bem_descricao
		, BemItem.bit_valorOrigem
		, GrupoBens.grp_descricao
		, BemPatrimonial.bem_valorOrigem
		,MovimentacaoBem.mov_unidadeOrigem
		,tabelaDestino.endereco 
		,tabelaDestino.UnidadeDespesa
		,tabelaDestino.Orgao 
		,tabelaDestino.ent_codigo 
		,tabelaDestino.UnidadeOrcamentaria
		,tabelaOrigem.endereco 
		,tabelaOrigem.UnidadeDespesa 
		,tabelaOrigem.Orgao 
		,tabelaOrigem.ent_codigo 
		,tabelaOrigem.UnidadeOrcamentaria 
		--,BemItem.bit_GRB
		,MovimentacaoBem.mov_GPB
		,mov_data
		,BemItem.bit_registroPat
	 
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_SelectAgrupados]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Luana Piva
-- Create date: 01/07/2014
-- Description:	Retorna um dataTable contendo os bens que serão selecionados para 
-- montar a GRB
-- tipoSolicitacao: 8 - Impressao
--	                9 - Reimpressão				
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GRB_SelectAgrupados]

	@uni_idRestricao int,
	@grp_id int,
	@bem_descricao varchar(max),
	@tipoSolicitacao int,
	@wrk_id int,
	@tpm_operacao varchar(max),
	@grb varchar(max),
	@ano varchar(4),
	@origem int,
	@destino int
AS
BEGIN

	IF @tipoSolicitacao =8 -- IMPRESSÃO
	BEGIN
	
	;WITH MoviBem AS
	(
		SELECT
			bem_id
			,bit_id
			,mov_unidadeOrigem
			,mov_unidadeDestino
			,ISNULL(MovimentacaoBem.mov_GPB,'Não possui guia')as mov_GPB
			,tpm_id
			,uni_id
			
		FROM 
			MovimentacaoBem WITH (NoLock)
		WHERE
			MovimentacaoBem.mov_situacao = 5
			AND MovimentacaoBem.uni_id  =(select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))
			AND  (MovimentacaoBem.mov_unidadeOrigem in( select uni_id from  dbo.FN_GetUnidadeEFilhas(@uni_idRestricao)) or MovimentacaoBem.mov_unidadeDestino = @uni_idRestricao)
			AND DATEPART(YEAR, mov_data) = CAST(@ano as INT)
			AND MovimentacaoBem.mov_unidadeOrigem = @origem
			AND MovimentacaoBem.mov_unidadeDestino = @destino
			
	)	
	
	, BemItemWorkStatus AS
	(
		Select 
			bem_id
			,bit_id
		From 
			BemItemWfStatus WITH (NoLock)
		Where
			 BemItemWfStatus.bws_situacao=1
			AND BemItemWfStatus.wrk_id=@wrk_id
			AND BemItemWfStatus.stp_id = @tipoSolicitacao
	)	
		SELECT 
			GrupoBens.grp_nome,
			GrupoBens.grp_id,
			BemPatrimonial.bem_descricao,
			BemItem.bem_id,
			dbo.FN_BuscarBitID_GRB(MoviBem.mov_unidadeDestino,@grp_id,@bem_descricao,@tipoSolicitacao,@wrk_id,@tpm_operacao,@grb,BemItem.bem_id) as bit_id,
			MoviBem.mov_unidadeOrigem as origem,
			MoviBem.mov_unidadeDestino as destino,
			COUNT(BemItem.bit_id) as quantidade,
			MoviBem.mov_GPB

		FROM 		
			MoviBem WITH(NoLock)
			inner join TipoMovimentacao as TipMov WITH(NoLock)
				on TipMov.tpm_id = MoviBem.tpm_id 
			inner join BemItemWorkStatus WITH(NoLock)
				on BemItemWorkStatus.bem_id=MoviBem.bem_id 
				AND BemItemWorkStatus.bit_id=MoviBem.bit_id				
			INNER JOIN BemPatrimonial  WITH(NoLock)
				on MoviBem.bem_id = BemPatrimonial.bem_id 
			inner join BemItem with(nolock)
				on MoviBem.bem_id=BemItem.bem_id
				AND MoviBem.bit_id = BemItem.bit_id
			inner join GrupoBens with(nolock)
				on GrupoBens.grp_id = BemPatrimonial.grp_id
			inner join Unidade with(nolock)
				on Unidade.uni_id = BemItem.bit_uniGestora 
			
		WHERE			
			(@origem is null or (@origem=MoviBem.mov_unidadeOrigem))
			AND (@grp_id is null or (@grp_id=GrupoBens.grp_id))
			AND (@bem_descricao is null or (bem_descricao like '%'+@bem_descricao+'%'))
			AND (@grb is null or @grb='0' or BemItem.bit_GRB=@grb)
			AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))					
				AND	((select uni_id from dbo.FN_GetUnidadeGestoraImediata(MoviBem.mov_unidadeDestino)) =
					(select uni_id from dbo.FN_GetUnidadeGestoraImediata(MoviBem.mov_unidadeOrigem)))
		GROUP BY 
			BemItem.bem_id
			,MoviBem.mov_unidadeOrigem
			,MoviBem.mov_unidadeDestino
			,BemPatrimonial.bem_descricao
			,mov_GPB
			,GrupoBens.grp_id
			,GrupoBens.grp_nome
	
			ORDER BY 
			BemPatrimonial.bem_descricao ASC
	END
	
	ELSE -- REIMPRESSÃO
	BEGIN
	
	;WITH MoviBem AS
	(
		SELECT
			bem_id
			,bit_id
			,mov_unidadeOrigem
			,mov_unidadeDestino
			,mov_GPB
			,tpm_id
			,uni_id
		FROM 
			MovimentacaoBem WITH (NoLock)
		WHERE
			MovimentacaoBem.mov_situacao not in (3,4)
			AND MovimentacaoBem.uni_id in(select uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))			
			AND (MovimentacaoBem.mov_unidadeOrigem in( select uni_id from  dbo.FN_GetUnidadeEFilhas(@uni_idRestricao)) or MovimentacaoBem.mov_unidadeDestino = @uni_idRestricao)		
			And (mov_GPB = @grb)
			AND DATEPART(YEAR, mov_data) = CAST(@ano as INT)
			AND MovimentacaoBem.mov_unidadeOrigem = @origem
			AND MovimentacaoBem.mov_unidadeDestino = @destino		
	
	)
	
		SELECT 
			GrupoBens.grp_nome,
			GrupoBens.grp_id,
			BemPatrimonial.bem_descricao,
			BemItem.bem_id,
			dbo.FN_BuscarBitID_GRB(MoviBem.mov_unidadeDestino,@grp_id,@bem_descricao,@tipoSolicitacao,@wrk_id,@tpm_operacao,@grb,BemItem.bem_id) as bit_id,
			MoviBem.mov_unidadeOrigem as origem,
			MoviBem.mov_unidadeDestino as destino,
			COUNT(BemItem.bit_id) as quantidade,
			MoviBem.mov_GPB
			
		FROM 
		
			MoviBem WITH(NoLock)
			inner join TipoMovimentacao as TipMov WITH(NoLock)
				on TipMov.tpm_id = MoviBem.tpm_id 			
			inner join BemPatrimonial WITH(NoLock)
				on MoviBem.bem_id = BemPatrimonial.bem_id
			inner join BemItem with(nolock)
				on MoviBem.bem_id = BemItem.bem_id
				AND MoviBem.bit_id=BemItem.bit_id
			inner join GrupoBens with(nolock)
				on GrupoBens.grp_id = BemPatrimonial.grp_id
			inner join Unidade with(nolock)
				on Unidade.uni_id = BemItem.bit_uniGestora 							
			
		WHERE			
			--(@origem is null or (@origem=MoviBem.mov_unidadeOrigem))
			--AND ((@destino is null)OR(@destino = MoviBem.mov_unidadeDestino))		
			 (@grp_id is null or (@grp_id=GrupoBens.grp_id))
			AND (@bem_descricao is null or (bem_descricao like '%'+@bem_descricao+'%'))
			AND ((@grb IS NULL OR @grb = '0') OR MoviBem.mov_GPB = @grb)
			AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))					
			AND	((select uni_id from dbo.FN_GetUnidadeGestoraImediata(MoviBem.mov_unidadeDestino)) =
					(select uni_id from dbo.FN_GetUnidadeGestoraImediata(MoviBem.mov_unidadeOrigem)))

			
		GROUP BY 
			BemItem.bem_id
			,MoviBem.mov_unidadeOrigem
			,MoviBem.mov_unidadeDestino
			,MoviBem.mov_GPB
			,BemPatrimonial.bem_descricao
			,GrupoBens.grp_id
			,GrupoBens.grp_nome		
			
		ORDER BY 
			BemPatrimonial.bem_descricao ASC
	
	end
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Figueiredo
-- Create date: 21/10/2010
-- Description:	Stored procedure que retorna todas as sequencias numéricas de GRB ordenadas por ano
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GRB_SelectBy_All]
AS
BEGIN
	SELECT 
		grb_ano
		,grb_numeroInicial
		,grb_proximoNumero
		,grb_dataCriacao
		,grb_dataAlteracao

	FROM 
		GRB WITH(NOLOCK)
	ORDER BY 
		grb_ano DESC	
		

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_SelectBy_Ano]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Figueiredo
-- Create date: 21/10/2010
-- Description:	Stored procedure que retorna uma grb referente a um ano especifico
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GRB_SelectBy_Ano] 
	@ano char(4)
AS
BEGIN
	
	SELECT 
		* 
	from 
		dbo.GRB with(nolock)
	WHERE 
		grb_ano = @ano
	
	
	return @@rowcount
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_SelectMontaTabelaImpressaoGRB]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Fabio A
-- Create date: 20/09/2010 as 08:55
-- Description:	Retorna um dataTable contendo os bens que serão selecionados para 
--montar a GPB
-- tipoSolicitacao: 8 - Impressao
--	                9 - Reimpressão
--					wrk_id =3
--					tpm_operacao=2

-- Alteração: Luana Piva
-- Data: 25/03/2014
-- Descrição: correção filtros GRB para impressão e reimpressão

-- Alteração: Nicholas de Assis
-- Data: 09/04/2014
-- Descricao: Retirado algumas cláusulas que estavam gerando bug no cliente (tag '[Correção 09/04/2014]')
-- Não foi possível alinhar o motivo dessas clásulas terem sido colocadas na tela pelo histórico das atividades,
-- mas pela regra de funcionamento das guias elas estão incorretas.

-- Alteração: Luana Piva
-- Data: 11/04/2014
-- Descrição: Retirado algumas cláusulas que estavam gerando bug no cliente (tag '[Correção 09/04/2014]')
-- Não foi possível alinhar o motivo dessas clásulas terem sido colocadas na tela pelo histórico das atividades,
-- mas pela regra de funcionamento das guias elas estão incorretas.

-- Alteração: Luana Piva
-- Data: 16/04/2014
-- Descrição: Adicionei uma clausula AND para trazer restritamente movimentações GRB na reimpressão e impressão.

-- Alteração: Wellington Santana
-- Data: 01/07/2014
-- Descrição: Foi retirada do select geral a clausula AND feita para trazer os movimentações retritas a GRB ,
--	e trouxe para tabela temporaria MoviBem
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GRB_SelectMontaTabelaImpressaoGRB]
	@uni_id int,
	@uni_idRestricao int,
	@grp_id int,
	@bem_descricao varchar(max),
	@tipoSolicitacao int,
	@wrk_id int,
	@tpm_operacao varchar(max),
	@grb varchar(max)
AS
BEGIN

	IF @tipoSolicitacao =8 -- IMPRESSÃO
	BEGIN
	
	;WITH MoviBem AS
	(
		SELECT
			bem_id
			,bit_id
			,mov_unidadeOrigem
			,mov_unidadeDestino
			,ISNULL(MovimentacaoBem.mov_GPB,'Não possui guia')as mov_GPB
			,tpm_id
			,uni_id
			
		FROM 
			MovimentacaoBem WITH (NoLock)
		WHERE
			MovimentacaoBem.mov_situacao = 5
			--[Correção 09/04/2014]
			--And (MovimentacaoBem.mov_unidadeDestino!=MovimentacaoBem.mov_unidadeOrigem)			
			--AND  (Exists( select uni_id from dbo.FN_GetUnidadeEFilhas(@uni_idRestricao) where uni_id  = MovimentacaoBem.mov_unidadeOrigem))
			--AND (EXISTS( select uni_id from dbo.FN_GetUnidadeEFilhas(mov_unidadeOrigem) where uni_id  = MovimentacaoBem.mov_unidadeDestino)
			--		OR EXISTS( select uni_id from dbo.FN_GetUnidadeEFilhas(mov_unidadeDestino) where uni_id  = MovimentacaoBem.mov_unidadeOrigem))	
			AND MovimentacaoBem.uni_id  =(select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))
			AND  (MovimentacaoBem.mov_unidadeOrigem in( select uni_id from  dbo.FN_GetUnidadeEFilhas(@uni_idRestricao)) or MovimentacaoBem.mov_unidadeDestino = @uni_idRestricao)
			-- parte abaixo adicionada 01/07/2014
			AND	((select uni_id from dbo.FN_GetUnidadeGestoraImediata(mov_unidadeDestino)) =
					(select uni_id from dbo.FN_GetUnidadeGestoraImediata(mov_unidadeOrigem)))	
	)	
	
	, BemItemWorkStatus AS
	(
		Select 
			bem_id
			,bit_id
		From 
			BemItemWfStatus WITH (NoLock)
		Where
			 BemItemWfStatus.bws_situacao=1
			AND BemItemWfStatus.wrk_id=@wrk_id
			AND BemItemWfStatus.stp_id = @tipoSolicitacao
	)	
		SELECT 
			GrupoBens.grp_nome,
			GrupoBens.grp_id,
			BemPatrimonial.bem_descricao,
			BemItem.bem_id,
			dbo.FN_BuscarBitID_GRB(MoviBem.mov_unidadeDestino,@grp_id,@bem_descricao,@tipoSolicitacao,@wrk_id,@tpm_operacao,@grb,BemItem.bem_id) as bit_id,
			MoviBem.mov_unidadeOrigem as origem,
			MoviBem.mov_unidadeDestino as destino,
			COUNT(BemItem.bit_id) as quantidade,
			MoviBem.mov_GPB

		FROM 		
			MoviBem WITH(NoLock)
			inner join TipoMovimentacao as TipMov WITH(NoLock)
				on TipMov.tpm_id = MoviBem.tpm_id 
			inner join BemItemWorkStatus WITH(NoLock)
				on BemItemWorkStatus.bem_id=MoviBem.bem_id 
				AND BemItemWorkStatus.bit_id=MoviBem.bit_id				
			INNER JOIN BemPatrimonial  WITH(NoLock)
				on MoviBem.bem_id = BemPatrimonial.bem_id 
			inner join BemItem with(nolock)
				on MoviBem.bem_id=BemItem.bem_id
				AND MoviBem.bit_id = BemItem.bit_id
			inner join GrupoBens with(nolock)
				on GrupoBens.grp_id = BemPatrimonial.grp_id
			inner join Unidade with(nolock)
				on Unidade.uni_id = BemItem.bit_uniGestora 
			
		WHERE
			(@uni_id is null or (@uni_id=MoviBem.mov_unidadeOrigem))
			AND (@grp_id is null or (@grp_id=GrupoBens.grp_id))
			AND (@bem_descricao is null or (bem_descricao like '%'+@bem_descricao+'%'))
			AND (@grb is null or @grb='0' or BemItem.bit_GRB=@grb)
			AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))
			-- parte abaixo adicionada 16/04/2014
				--AND	((select uni_id from dbo.FN_GetUnidadeGestoraImediata(mov_unidadeDestino)) =
				--		(select uni_id from dbo.FN_GetUnidadeGestoraImediata(mov_unidadeOrigem)))			
				
		GROUP BY 
			BemItem.bem_id
			,MoviBem.mov_unidadeOrigem
			,MoviBem.mov_unidadeDestino
			,BemPatrimonial.bem_descricao
			,mov_GPB
			,GrupoBens.grp_id
			,GrupoBens.grp_nome
			
			ORDER BY 
			origem
			, destino asc
	END
	
	ELSE -- REIMPRESSÃO
	BEGIN
	
	;WITH MoviBem AS
	(
		SELECT
			bem_id
			,bit_id
			,mov_unidadeOrigem
			,mov_unidadeDestino
			,mov_GPB
			,tpm_id
			,uni_id
		FROM 
			MovimentacaoBem WITH (NoLock)
		WHERE
			MovimentacaoBem.mov_situacao not in (3,4)
			AND MovimentacaoBem.uni_id in(select uni_idgestora from dbo.FN_GetUnidadesSuperiores(MovimentacaoBem.mov_unidadeDestino))			
			AND (MovimentacaoBem.mov_unidadeOrigem in( select uni_id from  dbo.FN_GetUnidadeEFilhas(@uni_idRestricao)) or MovimentacaoBem.mov_unidadeDestino = @uni_idRestricao)		
			And (mov_GPB = @grb)
			-- parte abaixo adicionada 01/07/2014
			AND ((select uni_id from dbo.FN_GetUnidadeGestoraImediata(mov_unidadeDestino)) =
					(select uni_id from dbo.FN_GetUnidadeGestoraImediata(mov_unidadeOrigem)))	
	)
	
		SELECT 
			GrupoBens.grp_nome,
			GrupoBens.grp_id,
			BemPatrimonial.bem_descricao,
			BemItem.bem_id,
			dbo.FN_BuscarBitID_GRB(MoviBem.mov_unidadeDestino,@grp_id,@bem_descricao,@tipoSolicitacao,@wrk_id,@tpm_operacao,@grb,BemItem.bem_id) as bit_id,
			MoviBem.mov_unidadeOrigem as origem,
			MoviBem.mov_unidadeDestino as destino,
			COUNT(BemItem.bit_id) as quantidade,
			MoviBem.mov_GPB
			
		FROM 
		
			MoviBem WITH(NoLock)
			inner join TipoMovimentacao as TipMov WITH(NoLock)
				on TipMov.tpm_id = MoviBem.tpm_id 			
			inner join BemPatrimonial WITH(NoLock)
				on MoviBem.bem_id = BemPatrimonial.bem_id
			inner join BemItem with(nolock)
				on MoviBem.bem_id = BemItem.bem_id
				AND MoviBem.bit_id=BemItem.bit_id
			inner join GrupoBens with(nolock)
				on GrupoBens.grp_id = BemPatrimonial.grp_id
			inner join Unidade with(nolock)
				on Unidade.uni_id = BemItem.bit_uniGestora 							
			
		WHERE
			(@uni_id is null or (@uni_id=MoviBem.mov_unidadeOrigem or @uni_id=MoviBem.mov_unidadeDestino))
			AND (@grp_id is null or (@grp_id=GrupoBens.grp_id))
			AND (@bem_descricao is null or (bem_descricao like '%'+@bem_descricao+'%'))
			AND ((@grb IS NULL OR @grb = '0') OR MoviBem.mov_GPB = @grb)
			AND (TipMov.tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,',') ))
			--parte abaixo adicionada 16/04/2014
			--AND	((select uni_id from dbo.FN_GetUnidadeGestoraImediata(MoviBem.mov_unidadeDestino)) =
			--		(select uni_id from dbo.FN_GetUnidadeGestoraImediata(MoviBem.mov_unidadeOrigem)))

			
		GROUP BY 
			BemItem.bem_id
			,MoviBem.mov_unidadeOrigem
			,MoviBem.mov_unidadeDestino
			,MoviBem.mov_GPB
			,BemPatrimonial.bem_descricao
			,GrupoBens.grp_id
			,GrupoBens.grp_nome		
			
		ORDER BY 
			origem
			, destino asc
	
	end
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GRB_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Figueiredo
-- Create date: 21/10/2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GRB_UPDATE]
	@grb_ano CHAR(4),
	@grb_proximoNumero varchar(20),
	@grb_dataAlteracao DATETIME

AS
BEGIN
	UPDATE GRB 
	SET 
		grb_proximoNumero = @grb_proximoNumero, 
		grb_dataAlteracao =  @grb_dataAlteracao

	WHERE 
		grb_ano = @grb_ano 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_OrderByNome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_GrupoBens_OrderByNome]

@grpDescricao VARCHAR(100)
	
AS
BEGIN
	SELECT 
		grp_id
		,grp_idPai
		,grp_nome
		,grp_nomeAbr
		,grp_descricao
		,grp_situacao
		,grp_dataCriacao
		,grp_dataAlteracao

	FROM 
		GrupoBens WITH(NOLOCK)
		
	WHERE
		@grpDescricao IS NULL OR grp_nome Like '%' + @grpDescricao + '%'
	
	ORDER BY  grp_nome asc
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_Raiz_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_GrupoBens_Raiz_All]
	
AS
BEGIN

	select
		grp_id = -1
		,grp_nome = '--- Selecione um grupo Raiz ---'

	union all

	SELECT 
		grp_id
		,grp_nome

	FROM 
		GrupoBens WITH(NOLOCK)
	where
		grp_idPai is null
	
	ORDER BY 
		grp_nome
	
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_Select_Ancestral_by_grpid]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		JORGE FREITAS	
-- Create date: 5/10/2010
-- Description:	Seleciona o grupo de bem ancestral (nivel mais alto) 
-- a partir de um grupo de bem (grp_id)
-- OBS: Parametros Contabeis --> chaveado pelos ancestrais (usado na movimentacao)
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GrupoBens_Select_Ancestral_by_grpid]	
	@grp_id int
AS
BEGIN
	SELECT 
		* 
	FROM 
		dbo.FN_GetGrupoBensSuperiores(@grp_id) 
	Where grp_idPai is null
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_GrupoBens_SelectBy_All]
	
AS
BEGIN
	SELECT 
		grp_id
		,grp_idPai
		,grp_nome
		,grp_nomeAbr
		,grp_descricao
		,grp_situacao
		,grp_dataCriacao
		,grp_dataAlteracao
		,grp_nroSerie
		,grp_marca
		,grp_modelo
		,grp_tipo
		,grp_placa
		,grp_chassi
		,grp_anoFabricacao
		,grp_quilometragem
		,grp_potencia
		,grp_unidadePotencia
		,grp_cilindros

	FROM 
		GrupoBens WITH(NOLOCK)
	
	ORDER BY grp_idPai, grp_nome ASC 
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_SelectBy_Ancestrais]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Jean Costa
-- Create date: 13/08/2010 17:25
-- Description:	Carrega os grupos de bens pai (Ancestral)
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_GrupoBens_SelectBy_Ancestrais]	
AS
BEGIN
	SELECT 
		grp_id
		,grp_idPai
		,grp_nome
		,grp_nomeAbr
		,grp_descricao
		,grp_situacao
		,grp_dataCriacao
		,grp_dataAlteracao

	FROM 
		GrupoBens WITH(NOLOCK)
	WHERE 
		grp_idPai IS NULL
		AND grp_situacao = 1
	ORDER BY 
		grp_nome ASC 
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_SelectBy_Grp_idPai]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Jean Costa
-- Create date: 13/08/2010 17:25
-- Description:	Carrega os grupos de bens atraves do grp_idpai
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_GrupoBens_SelectBy_Grp_idPai]	
@grp_idPai INT

AS
BEGIN
	SELECT 
		grp_id
		,grp_idPai
		,grp_nome
		,grp_nomeAbr
		,grp_descricao
		,grp_situacao
		,grp_dataCriacao
		,grp_dataAlteracao

	FROM 
		GrupoBens WITH(NOLOCK)
	WHERE 
		grp_idPai = @grp_idPai
		AND grp_situacao = 1
	ORDER BY grp_nome ASC 
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_SelectBy_Nome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Jean Costa
-- Create date: 09/08/2010 18:10
-- Description:	utilizado na busca de nome de grupo de bense, retorna quantidade
--				dos grupos de bens que não foram excluídos logicamente,
--				filtrados por:
--					nome, id
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_GrupoBens_SelectBy_Nome]	
	@grp_nome VARCHAR(100)	
	,@grp_id_alteracao int
	
AS
BEGIN
	SELECT 
		grp_id
		,grp_nome
	FROM
		GrupoBens WITH (NOLOCK)		
	WHERE
		grp_situacao <> 3
		AND UPPER(grp_nome) = UPPER(@grp_nome)	
		AND ((@grp_id_alteracao is null) or (grp_id <> @grp_id_alteracao))
	ORDER BY
		grp_nome
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_SelectBy_Nome_SemAcento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Pedro Gimenez
-- Create date: 16/11/2011 08:40
-- Description:	utilizado na importação de planilha de bens do legado,
--              busca o nome do grupo do bem, desconsideranco acentuação
--				filtrados por:
--					nome, id
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_GrupoBens_SelectBy_Nome_SemAcento]	
	@grp_nome VARCHAR(100)	
	,@grp_id_alteracao int
	
AS
BEGIN
	SELECT 
		grp_id
		,grp_nome
	FROM
		GrupoBens WITH (NOLOCK)		
	WHERE
		grp_situacao <> 3
		AND UPPER(grp_nome) = UPPER(@grp_nome) collate sql_latin1_general_cp1251_cs_as
		AND ((@grp_id_alteracao is null) or (grp_id <> @grp_id_alteracao))
	ORDER BY
		grp_nome
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_SelectBy_Recursive_Grp_idPai]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_GrupoBens_SelectBy_Recursive_Grp_idPai]	
	 @grp_id INT				= null
	,@grpDescricao VARCHAR(100) = null

AS


if(@grp_id is not null)

	BEGIN
			SELECT 
					grp_id
					,grp_idPai
					,grp_nome
					,grp_nomeAbr
					,grp_descricao
					,grp_situacao
					,grp_dataCriacao
					,grp_dataAlteracao

			FROM 
					GrupoBens gp WITH(NOLOCK)
			WHERE 
					1 = 1
					AND (@grp_id is null or gp.grp_id in (select grp_id from FN_GetGrupoHierarquia (@grp_id)))
					AND grp_situacao = 1
			ORDER BY 
					grp_nome ASC 

			SELECT @@ROWCOUNT	
	
	END

else

	BEGIN
		SELECT 
				grp_id
				,grp_idPai
				,grp_nome
				,grp_nomeAbr
				,grp_descricao
				,grp_situacao
				,grp_dataCriacao
				,grp_dataAlteracao

		FROM 
				GrupoBens WITH(NOLOCK)
		
		WHERE
				1 = 1
				and @grpDescricao IS NULL OR grp_nome Like '%' + @grpDescricao + '%'
	
		ORDER BY  
				grp_nome asc

		SELECT @@ROWCOUNT
	
	END



GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_ValidaGrpIDPaiByGrp_ID]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Wellington Santana	
-- Create date: 23/05/2014
-- Description:	Verifica se existe algum Grupo de bens com grp_idPAI de outro grupo, para validar exclusão.
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GrupoBens_ValidaGrpIDPaiByGrp_ID]
	@grp_idPai INT
as
BEGIN
	SELECT 
		grp_id
		,grp_idPai
		,grp_nome
		,grp_nomeAbr
		,grp_descricao
		,grp_situacao
		,grp_dataCriacao
		,grp_dataAlteracao

	FROM 
		GrupoBens WITH(NOLOCK)
	WHERE 
		grp_idPai = @grp_idPai
		AND grp_situacao <> 3
	ORDER BY grp_nome ASC 
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_Verifica_Vinculo_Cod_Especie]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Luana Guimarães
-- Create date: 05/02/2014
-- Description:	Verifica se o código espécie já existe na tabela.				
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_GrupoBens_Verifica_Vinculo_Cod_Especie]

	@codigoEspecie varchar(50)

AS
BEGIN		
	SELECT
		 ceg.ceg_codigo_especie,
		 ceg.ceg_situacao
		 
	FROM	
		Cod_Especie_GrupoBens AS ceg WITH(NoLock)
	   
	WHERE
		ceg.ceg_codigo_especie = @codigoEspecie	
			
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_GrupoBens_Vinculo_Bem]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	Luana Piva
-- Create date: 20/12/2013
-- Description:	Retorna grp_id vinculado com bens
-- =============================================
CREATE PROCEDURE [dbo].[NEW_GrupoBens_Vinculo_Bem]
	
	@grp_id INT 
	
AS
BEGIN	
	
	SELECT 
		bp.grp_id

	FROM 
		BemPatrimonial bp WITH(NOLOCK)	
	INNER JOIN BemItem bet WITH(NOLOCK)
		ON bet.bem_id = bp.bem_id
		
	WHERE 
		bet.bit_situacao <> 3
		AND bp.grp_id = @grp_id	
		
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventario_CarregaInventarioAbertobyUniID]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Figueiredo
-- Create date: 14/10/2010
-- Description:	Stored procedure que retorna inventarios abertos de uma unidade
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Inventario_CarregaInventarioAbertobyUniID]
	@uni_id int
AS
BEGIN
	SELECT
		inv_id
      ,uni_id
      ,pes_id
      ,inv_periodoInicio
      ,inv_periodoFim
      ,inv_dataCriacao
      ,inv_dataAlteracao 
	FROM 
		Inventario as inv WITH(NoLock)
	WHERE 
		inv.uni_id = @uni_id 
		  and  inv.inv_periodoInicio < GETDATE()
		  and  (inv.inv_periodoFim is null or inv.inv_periodoFim > GETDATE()) 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventario_Encerramento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 25/08/2010
-- Description:	Retorna todos os inventarios em aberto de todas as unidades vinculadas a unidade do usuario
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Inventario_Encerramento] 
	@uni_id int
AS
BEGIN

	SELECT 
		dbo.Inventario.inv_id ,
		        dbo.Inventario.uni_id ,
		        dbo.Inventario.pes_id ,
		        dbo.Inventario.inv_periodoInicio ,
		        dbo.Inventario.inv_periodoFim ,
		        dbo.Inventario.inv_dataCriacao ,
		        dbo.Inventario.inv_dataAlteracao
		, up.pes_nome
		, uad_nome 
		, (SELECT COUNT(biw_id) 
				FROM dbo.BemItemWfStatus AS biwf WITH(NoLock)
			INNER JOIN dbo.BemItem AS bi WITH(NoLock) 
				ON bi.bit_id = biwf.bit_id 
				AND bi.bem_id = biwf.bem_id
			WHERE biwf.bws_situacao = 1 
				AND (bi.bit_uniGuarda = dbo.Inventario.uni_id )			
			) AS wf_itens
		
	FROM 
		Inventario WITH(NoLock)
	INNER JOIN 
		VW_ConPatUsuarioPessoa AS up WITH(NoLock) 
			ON up.pes_id = dbo.Inventario.pes_id
	LEFT OUTER JOIN 
		dbo.VW_UnidadeAdministrativa WITH(NoLock) 
			ON dbo.Inventario.uni_id = dbo.VW_UnidadeAdministrativa.uni_id
	
	WHERE 
		dbo.Inventario.uni_id IN ( SELECT uni_id from FN_GetUnidadeEFilhas(@uni_id))
		AND inv_periodoFim IS NULL	 
	 ORDER BY 
		dbo.Inventario.uni_id
		, dbo.Inventario.inv_id
		
SELECT @@ROWCOUNT

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventario_EncerramentoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 25/08/2010
-- Description:	Retorna todos os inventarios em aberto de todas as unidades vinculadas a unidade do usuario
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Inventario_EncerramentoRS] 
	@uni_id int
AS
BEGIN

	SELECT 
		dbo.Inventario.inv_id ,
		        dbo.Inventario.uni_id ,
		        dbo.Inventario.pes_id ,
		        dbo.Inventario.inv_periodoInicio ,
		        dbo.Inventario.inv_periodoFim ,
		        dbo.Inventario.inv_dataCriacao ,
		        dbo.Inventario.inv_dataAlteracao
		, up.pes_nome
		, uad_nome 
		, (SELECT COUNT(biw_id) 
				FROM dbo.BemItemWfStatus AS biwf WITH(NoLock)
			INNER JOIN dbo.BemItem AS bi WITH(NoLock) 
				ON bi.bit_id = biwf.bit_id 
				AND bi.bem_id = biwf.bem_id
			WHERE biwf.bws_situacao = 1 
				AND (bi.bit_uniGuarda = dbo.Inventario.uni_id )			
			) AS wf_itens
		
	FROM 
		Inventario WITH(NoLock)
	INNER JOIN 
		VW_ConPatUsuarioPessoa AS up WITH(NoLock) 
			ON up.pes_id = dbo.Inventario.pes_id
	LEFT OUTER JOIN 
		dbo.VW_UnidadeAdministrativa WITH(NoLock) 
			ON dbo.Inventario.uni_id = dbo.VW_UnidadeAdministrativa.uni_id
	
	WHERE 
		dbo.Inventario.uni_id IN ( SELECT uni_id from FN_GetUnidadeEFilhas(@uni_id))
		AND inv_periodoFim IS NULL	 
	 ORDER BY 
		dbo.Inventario.uni_id
		, dbo.Inventario.inv_id
		
SELECT @@ROWCOUNT

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventario_EncerramentoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 25/08/2010
-- Description:	Retorna todos os inventarios em aberto de todas as unidades vinculadas a unidade do usuario
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Inventario_EncerramentoSP] 
	@uni_id int
AS
BEGIN

	SELECT 
		dbo.Inventario.inv_id ,
		        dbo.Inventario.uni_id ,
		        dbo.Inventario.pes_id ,
		        dbo.Inventario.inv_periodoInicio ,
		        dbo.Inventario.inv_periodoFim ,
		        dbo.Inventario.inv_dataCriacao ,
		        dbo.Inventario.inv_dataAlteracao
		, up.pes_nome
		, uad_nome 
		, (SELECT COUNT(biw_id) 
				FROM dbo.BemItemWfStatus AS biwf WITH(NoLock)
			INNER JOIN dbo.BemItem AS bi WITH(NoLock) 
				ON bi.bit_id = biwf.bit_id 
				AND bi.bem_id = biwf.bem_id
			WHERE biwf.bws_situacao = 1 
				AND (bi.bit_uniGuarda = dbo.Inventario.uni_id )			
			) AS wf_itens
		
	FROM 
		Inventario WITH(NoLock)
	INNER JOIN 
		VW_ConPatUsuarioPessoa AS up WITH(NoLock) 
			ON up.pes_id = dbo.Inventario.pes_id
	LEFT OUTER JOIN 
		dbo.VW_UnidadeAdministrativa WITH(NoLock) 
			ON dbo.Inventario.uni_id = dbo.VW_UnidadeAdministrativa.uni_id
	
	WHERE 
		dbo.Inventario.uni_id IN ( SELECT uni_id from FN_GetUnidadeEFilhas(@uni_id))
		AND inv_periodoFim IS NULL	 
	 ORDER BY 
		dbo.Inventario.uni_id
		, dbo.Inventario.inv_id
		
SELECT @@ROWCOUNT

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventario_RelatorioCabecalhoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio N
-- Create date: 26/10/2010
-- Description:	Lista nome, rg e carga e tudo para montar a 
--              parte de cima do relatorio
-- =============================================
create PROCEDURE [dbo].[NEW_Inventario_RelatorioCabecalhoRS]
	@uni_id int,
	@inv_id int
AS
BEGIN
	select top 1
		Inventario.inv_periodoInicio dataInicio,
		Inventario.inv_periodoFim dataFim,
		dbo.FN_GetUniNome(Inventario.uni_id) nomeUnidade,
		dbo.VW_ConPatUsuarioPessoa.pes_nome,
		dbo.Synonym_SYS_Grupo_SSO.gru_nome AS cargo,
		dbo.Synonym_PES_PessoaDocumento_SSO.psd_numero AS RG,
	  (select  top 1 uni_nomegestora from dbo.FN_GetUnidadesSuperiores(@uni_id)) de
	from 
		Inventario 
	inner join dbo.VW_ConPatUsuarioPessoa with(nolock)
		On Inventario.pes_id = dbo.VW_ConPatUsuarioPessoa.pes_id
	inner join dbo.VW_ConPatUsuario with(nolock)
		on dbo.VW_ConPatUsuario.pes_id = dbo.VW_ConPatUsuarioPessoa.pes_id
	left join dbo.Synonym_PES_PessoaDocumento_SSO with(nolock)
		on dbo.Synonym_PES_PessoaDocumento_SSO.pes_id =dbo.VW_ConPatUsuario.pes_id
	left join dbo.Synonym_SYS_UsuarioGrupo_SSO with(nolock)
		on dbo.Synonym_SYS_UsuarioGrupo_SSO.usu_id= dbo.VW_ConPatUsuario.usu_id
	left join dbo.Synonym_SYS_Grupo_SSO with(nolock)
		on dbo.Synonym_SYS_UsuarioGrupo_SSO.gru_id= dbo.Synonym_SYS_Grupo_SSO.gru_id
			
		where 
			uni_id=@uni_id
			and inv_id=@inv_id
		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventario_RelatorioCabecalhoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio N
-- Create date: 26/10/2010
-- Description:	Lista nome, rg e carga e tudo para montar a 
--              parte de cima do relatorio
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Inventario_RelatorioCabecalhoSP]
	@uni_id int,
	@inv_id int
AS
BEGIN
	select top 1
		Inventario.inv_periodoInicio dataInicio,
		Inventario.inv_periodoFim dataFim,
		dbo.FN_GetUniNome(Inventario.uni_id) nomeUnidade,
		dbo.VW_ConPatUsuarioPessoa.pes_nome,
		dbo.Synonym_SYS_Grupo_SSO.gru_nome AS cargo,
		dbo.Synonym_PES_PessoaDocumento_SSO.psd_numero AS RG,
	  (select  top 1 uni_nomegestora from dbo.FN_GetUnidadesSuperiores(@uni_id)) de
	from 
		Inventario 
	inner join dbo.VW_ConPatUsuarioPessoa with(nolock)
		On Inventario.pes_id = dbo.VW_ConPatUsuarioPessoa.pes_id
	inner join dbo.VW_ConPatUsuario with(nolock)
		on dbo.VW_ConPatUsuario.pes_id = dbo.VW_ConPatUsuarioPessoa.pes_id
	left join dbo.Synonym_PES_PessoaDocumento_SSO with(nolock)
		on dbo.Synonym_PES_PessoaDocumento_SSO.pes_id =dbo.VW_ConPatUsuario.pes_id
	left join dbo.Synonym_SYS_UsuarioGrupo_SSO with(nolock)
		on dbo.Synonym_SYS_UsuarioGrupo_SSO.usu_id= dbo.VW_ConPatUsuario.usu_id
	left join dbo.Synonym_SYS_Grupo_SSO with(nolock)
		on dbo.Synonym_SYS_UsuarioGrupo_SSO.gru_id= dbo.Synonym_SYS_Grupo_SSO.gru_id
			
		where 
			uni_id=@uni_id
			and inv_id=@inv_id
		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventario_RelatorioTabelaRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio N
-- Create date: 26/10/2010
-- Description:	Lista nome, rg e carga e tudo para montar a parte de cina do relatorio
-- =============================================
create PROCEDURE [dbo].[NEW_Inventario_RelatorioTabelaRS]
	@uni_id int,
	@inv_id int
AS
BEGIN
	select
		BemPatrimonial.bem_observacao AS observacao,
		BemPatrimonial.bem_descricao AS descricao,
		StatusConservacao.stc_nome AS conservacao,
		dbo.FN_GetUniNome(BemItem.bit_uniGuarda) AS origem,
		BemItem.bit_valorOrigem AS unitario,
		BemPatrimonial.bem_id,
		COUNT(BemItem.bit_id) AS quantidade,
		(COUNT(BemItem.bit_id)*BemItem.bit_valorOrigem) AS total,
		BemPatrimonial.grp_id AS grupo,
		GrupoBens.grp_nome,
		BemPatrimonial.bem_ne AS notaEntrada,
		BemPatrimonial.bem_dataEntrada,
		BemItem.bit_registroPat AS etiqueta,
		COUNT(*) item
	from 
		Inventario 
	inner join Unidade
		on Inventario.uni_id = Unidade.uni_id
	inner join BemItem
		on BemItem.bit_uniGuarda=Unidade.uni_id
	inner join BemPatrimonial
		on BemPatrimonial.bem_id=BemItem.bem_id
	inner join StatusConservacao
		on StatusConservacao.stc_id = BemItem.stc_id
	inner join GrupoBens
		on BemPatrimonial.grp_id = GrupoBens.grp_id
	where
		Inventario.inv_id = @inv_id
		And Inventario.uni_id=@uni_id
		And  BemItem.bit_dataIncorporacao <= Inventario.inv_periodoInicio
		And  ((BemItem.bit_dataBaixa is null) or BemItem.bit_dataBaixa>=Inventario.inv_periodoFim)
	
	group by
		BemPatrimonial.bem_id
		,bit_uniGuarda
		,bem_observacao
		,bem_descricao
		,stc_nome
		,bit_valorOrigem
		,BemPatrimonial.grp_id
		,grp_nome
		,BemPatrimonial.bem_ne
		,BemPatrimonial.bem_dataEntrada
		,BemItem.bit_registroPat	
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventario_RelatorioTabelaSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio N
-- Create date: 26/10/2010
-- Description:	Lista nome, rg e carga e tudo para montar a parte de cina do relatorio
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Inventario_RelatorioTabelaSP]
	@uni_id int,
	@inv_id int
AS
BEGIN
	select
		BemPatrimonial.bem_observacao AS observacao,
		BemPatrimonial.bem_descricao AS descricao,
		StatusConservacao.stc_nome AS conservacao,
		dbo.FN_GetUniNome(BemItem.bit_uniGuarda) AS origem,
		BemItem.bit_valorOrigem AS unitario,
		BemPatrimonial.bem_id,
		COUNT(BemItem.bit_id) AS quantidade,
		(COUNT(BemItem.bit_id)*BemItem.bit_valorOrigem) AS total,
		BemPatrimonial.grp_id AS grupo,
		GrupoBens.grp_nome,
		BemPatrimonial.bem_ne AS notaEntrada,
		BemPatrimonial.bem_dataEntrada,
		BemItem.bit_registroPat AS etiqueta,
		COUNT(*) item
	from 
		Inventario 
	inner join Unidade
		on Inventario.uni_id = Unidade.uni_id
	inner join BemItem
		on BemItem.bit_uniGuarda=Unidade.uni_id
	inner join BemPatrimonial
		on BemPatrimonial.bem_id=BemItem.bem_id
	inner join StatusConservacao
		on StatusConservacao.stc_id = BemItem.stc_id
	inner join GrupoBens
		on BemPatrimonial.grp_id = GrupoBens.grp_id
	where
		Inventario.inv_id = @inv_id
		And Inventario.uni_id=@uni_id
		And  BemItem.bit_dataIncorporacao <= Inventario.inv_periodoInicio
		And  ((BemItem.bit_dataBaixa is null) or BemItem.bit_dataBaixa>=Inventario.inv_periodoFim)
	
	group by
		BemPatrimonial.bem_id
		,bit_uniGuarda
		,bem_observacao
		,bem_descricao
		,stc_nome
		,bit_valorOrigem
		,BemPatrimonial.grp_id
		,grp_nome
		,BemPatrimonial.bem_ne
		,BemPatrimonial.bem_dataEntrada
		,BemItem.bit_registroPat	
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventatio_emAberto]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 24/08/2010
-- Description:	Retorna todos os inventários em aberto de determinada unidade
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Inventatio_emAberto] 
	@uni_id INT
AS
BEGIN
	SELECT inv_id ,
	        uni_id ,
	        i.pes_id ,
	        inv_periodoInicio ,
	        inv_periodoFim ,
	        inv_dataCriacao ,
	        inv_dataAlteracao
	 FROM 
		Inventario AS i WITH(NoLock)
	 INNER JOIN 
		dbo.Synonym_PES_Pessoa_SSO AS p WITH(NoLock)
		ON p.pes_id = i.pes_id
	 WHERE 
		 uni_id = @uni_id 
		 AND inv_periodoFim IS NULL
			
	 
	 RETURN @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventatio_todos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 24/08/2010
-- Description:	Retorna todos os periodos em aberto de determinada unidade
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Inventatio_todos] 
	@uni_id INT
AS
BEGIN
	SELECT inv_id ,
	        uni_id ,
	        pes_id ,
	        inv_periodoInicio ,
	        inv_periodoFim ,
	        inv_dataCriacao ,
	        inv_dataAlteracao,
	        dbo.FN_GetUniNome( uni_id) nome
	 FROM 
		Inventario WITH(NoLock) 
	 WHERE 
		uni_id = @uni_id 
	 
	 select @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventatio_todos_UniIDeData]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio A
-- Create date: 24/08/2010
-- Description:	Retorna todos os periodos em aberto de determinada unidade
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Inventatio_todos_UniIDeData] 
	@uni_id INT,
	@data date
AS
BEGIN
	SELECT inv_id ,
	        uni_id ,
	        pes_id ,
	        inv_periodoInicio ,
	        inv_periodoFim ,
	        inv_dataCriacao ,
	        inv_dataAlteracao,
	        dbo.FN_GetUniNome( uni_id) AS nome
	 FROM 
		Inventario WITH(NoLock) 
	 WHERE 
			uni_id = @uni_id 
			and (@data is null OR inv_periodoInicio >= @data)
	
	SELECT @@ROWCOUNT
	 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Inventatio_UpdateAbertura_byUni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 03/09/2010
-- Description: coloca o item bit_contado como false de todos os itens de determinada unidade de guarda, 
-- para a abertura do inventario
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Inventatio_UpdateAbertura_byUni_id] 
	@uni_id INT
AS
BEGIN
		UPDATE 
			dbo.BemItem	
				SET bit_contado = 0
		WHERE 
			bit_uniGuarda = @uni_id 
	 
	 RETURN @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Localidade_Carregar_Cadastro]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author : Debora Cavaglieri
-- Create date : 29/11/2010
-- Description : Seleciona dados para carregar tela de cadastro de localidade	
-- ===========================================================================

CREATE PROCEDURE [dbo].[NEW_Localidade_Carregar_Cadastro]	
	@loc_nome VARCHAR(max)
	,@loc_descricao VARCHAR(max)
	,@uni_id INT
	,@end_texto VARCHAR(max)
AS
BEGIN
	SELECT 
	LOC.loc_id	
	, loc_nome 
	, loc_descricao 
	, ENR.end_cep AS loc_CEP
	, end_logradouro
	, loc_numero
	, loc_complemento
	, end_distrito AS loc_distrito
	, end_bairro AS loc_bairro
	, ENR.cid_id
	, CID.cid_nome AS loc_cidade
	, UNF.unf_sigla
	, CASE loc_situacao
			WHEN 2 THEN 'Bloqueado'
			WHEN 1 THEN 'Ativo'
			ELSE 'Padrão'
		  END AS loc_situacao_nome 	
	, loc_situacao
	, ENR.end_id 
	, ENR.end_zona
	FROM
		Localidade AS LOC WITH (NOLOCK)
	INNER JOIN Unidade AS UNI WITH (NOLOCK)
			ON LOC.uni_id = UNI.uni_id 
	INNER JOIN CORE_END_Endereco AS ENR WITH (NOLOCK)
			ON ENR.end_id = LOC.end_id
	INNER JOIN CORE_END_Cidade AS CID WITH (NOLOCK)
			ON ENR.cid_id = CID.cid_id
	INNER JOIN CORE_END_UnidadeFederativa AS UNF WITH (NOLOCK)
			ON CID.unf_id = UNF.unf_id
			
	WHERE
		loc_situacao <> 3
		AND UNI.uni_situacao <> 3
		AND LOC.uni_id = @uni_id		
		AND (@loc_nome IS NULL OR loc_nome LIKE '%' + @loc_nome + '%')
		AND (@loc_descricao IS NULL OR loc_descricao LIKE '%' + @loc_descricao + '%')
		AND (@end_texto IS NULL OR end_logradouro LIKE '%' + @end_texto + '%')
		
	ORDER BY
		loc_nome 
		
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Localidade_ExisteCEP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_Localidade_ExisteCEP]	
	@cep varchar(max)
	
AS
BEGIN
	SELECT 
		 ROW_NUMBER() OVER (ORDER BY end_cep, end_id) as linha
		 ,end_cep
		,end_id
	FROM
		dbo.CORE_END_Endereco with(nolock)
	WHERE
		(end_cep LIKE '%' + @cep + '%')	
		and (@cep not like '%000') -- se for cep da cidade não deve carregar endereço
		order by linha desc	

		
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Localidade_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author :
-- Create date : 20/08/2010 14:17
-- (Alteração) : Aline Dornelas
-- (Alteração): Luana Piva
-- Description :	
-- ===========================================================================

CREATE PROCEDURE [dbo].[NEW_Localidade_SelectBy_All]	
	 @end_id uniqueidentifier
	,@loc_nome VARCHAR(max)
	,@loc_descricao VARCHAR(max)
	,@loc_numero VARCHAR(200)
	,@loc_complemento VARCHAR(14)	
	,@loc_situacao TINYINT	
	,@uni_idHierarquia INT
	,@uni_id INT
	,@end_texto VARCHAR(max)
	,@dep_nome VARCHAR (100)

AS
BEGIN
	SELECT 
	LOC.loc_id
	, LOC.end_id 
	, loc_nome 
	,loc_numero
	, loc_descricao 
	, loc_complemento
	, loc_situacao 
	,DEP.dep_id	
	, CASE loc_situacao
			WHEN 2 THEN 'Bloqueado'
			WHEN 1 THEN 'Ativo'
			ELSE 'Padrão do sistema'
		  END AS loc_situacao_nome 	
	, UNI.uni_id
	,CASE WHEN Uni.uad_id is NULL 
		THEN UniEN.ent_razaoSocial
		ELSE uad_nome 
	END as uniNome
	, ENR.end_id
	, (end_logradouro + ' nº: ' + loc_numero + ', ' + end_bairro + ' - ' + cid_nome + '/' + unf_sigla) AS endereco
		
	FROM
		Localidade AS LOC WITH (NOLOCK)
	INNER JOIN Unidade AS UNI WITH (NOLOCK)
			ON LOC.uni_id = UNI.uni_id 
	LEFT JOIN VW_UnidadeAdministrativa AS UAD WITH (NOLOCK)
			ON UNI.uad_id = UAD.uad_id
			AND UNI.ent_id = UAD.ent_id
	LEFT JOIN VW_UnidadeEntidade AS UniEN  WITH (NoLock)	
		ON Uni.ent_id  = UniEN.ent_id AND Uni.uad_id is NULL
	INNER JOIN  CORE_END_Endereco AS ENR WITH (NOLOCK)
			ON LOC.end_id = ENR.end_id
	INNER JOIN CORE_END_Cidade AS CID WITH (NOLOCK)
			ON ENR.cid_id = CID.cid_id
	INNER JOIN CORE_END_UnidadeFederativa AS UNF WITH (NOLOCK)
			ON CID.unf_id = UNF.unf_id
	LEFT JOIN Dependencia AS DEP WITH(NOLOCK)
			ON DEP.loc_id = LOC.loc_id
			AND DEP.dep_nome = @dep_nome
	WHERE
		loc_situacao <> 3
		AND UNI.uni_situacao <> 3
		AND (@end_id IS NULL OR LOC.end_id <> @end_id)					
		AND (@loc_nome IS NULL OR loc_nome LIKE '%' + @loc_nome + '%')
		AND (@loc_complemento IS NULL OR loc_complemento LIKE '%' + @loc_complemento + '%')
		AND (@loc_numero IS NULL OR loc_numero LIKE '%' + @loc_numero + '%')
		AND (@loc_descricao IS NULL OR loc_descricao LIKE '%' + @loc_descricao + '%')
		AND (@uni_id IS NULL OR LOC.uni_id = @uni_id) 
		AND (@loc_situacao IS NULL OR loc_situacao = @loc_situacao)
		AND (@end_texto IS NULL OR end_logradouro LIKE '%' + @end_texto + '%')
		AND ((@uni_idHierarquia IS NULL) OR (LOC.uni_id IN(SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_idHierarquia))))	
		
		
	ORDER BY
		uniNome
		, loc_nome 
		
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Localidade_SelectBy_Padrao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author : Luana Piva
-- Create date : 02/04/2014
-- Description : Buscar localidade padrão
-- ===========================================================================

CREATE PROCEDURE [dbo].[NEW_Localidade_SelectBy_Padrao]	
	
	@uni_id INT

AS
BEGIN
	SELECT 
	LOC.loc_id,
	DEP.dep_id
		
	FROM
		Localidade AS LOC WITH (NOLOCK)
	INNER JOIN Unidade AS UNI WITH (NOLOCK)
			ON LOC.uni_id = UNI.uni_id 
	LEFT JOIN VW_UnidadeAdministrativa AS UAD WITH (NOLOCK)
			ON UNI.uad_id = UAD.uad_id
			AND UNI.ent_id = UAD.ent_id
	LEFT JOIN VW_UnidadeEntidade AS UniEN  WITH (NoLock)	
		ON Uni.ent_id  = UniEN.ent_id AND Uni.uad_id is NULL
	INNER JOIN  CORE_END_Endereco AS ENR WITH (NOLOCK)
			ON LOC.end_id = ENR.end_id
	INNER JOIN CORE_END_Cidade AS CID WITH (NOLOCK)
			ON ENR.cid_id = CID.cid_id
	INNER JOIN CORE_END_UnidadeFederativa AS UNF WITH (NOLOCK)
			ON CID.unf_id = UNF.unf_id			
	LEFT JOIN Dependencia AS DEP WITH(NOLOCK)
			ON DEP.loc_id = LOC.loc_id
	
	WHERE
		loc_situacao = 4
		AND UNI.uni_situacao <> 3
		AND (@uni_id IS NULL OR LOC.uni_id = @uni_id)	 	
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Localidade_SelectBy_UniIDSituacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author :	Fabio AKira (ALTERAÇÃO)
-- Create date: 20/08/2010 14:17
-- Description:	Seleciona a Localidade pela unidade e pea situaação
-- ===========================================================================

CREATE PROCEDURE [dbo].[NEW_Localidade_SelectBy_UniIDSituacao]
	@loc_situacao TINYINT	
	,@uni_id INT
AS
BEGIN
	SELECT 
	LOC.loc_id
	
	FROM
		Localidade AS LOC WITH (NOLOCK)
	WHERE
		loc_situacao<>3		
		and ((@uni_id IS NULL) OR (LOC.uni_id=@uni_id))	
		AND ((@loc_situacao IS NULL) OR (loc_situacao = @loc_situacao))				
	ORDER BY
		loc_nome desc
		
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Log_Sistema_Consulta]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Guilherme Lacerda
-- Create date: 02/05/2013
-- Description:	Consulta paginada dos logs
--				do sistema
-- Alterado : Christian Freitas
-- Data: 08/07/2013
-- Descrição: Unidade esta sendo buscada do campo log_grupoUA
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Log_Sistema_Consulta]
	@DataInicio DATETIME
	, @DataTermino DATETIME
	, @sis_id INT
	, @log_acao VARCHAR(50)
	, @usu_login VARCHAR(100)
	, @uni_id INT
	, @pageSize INT
	, @pageNumber INT
	, @totalRecords INT OUTPUT

AS
BEGIN

	-- NÚMERO DE REGISTROS
	SELECT
		@totalRecords = COUNT(1)
	FROM
		Synonym_Log_Sistema logs WITH(NOLOCK)
	LEFT JOIN Unidade uni	WITH(NOLOCK)	
		ON uni.uni_id = CASE WHEN ISNUMERIC(logs.log_grupoUA) = 1 THEN CONVERT(INT,logs.log_grupoUA)END
	LEFT JOIN VW_UnidadeAdministrativa AS un WITH(NOLOCK)
	    ON un.uad_id = uni.uad_id
	WHERE
		log_datahora >= @DataInicio
		AND log_datahora < dateadd(day,1,@DataTermino)
		AND sis_id = @sis_id
		AND (@log_acao IS NULL OR log_acao = @log_acao)
		AND (@usu_login IS NULL OR usu_login LIKE  '%'+@usu_login+'%')
		AND (@uni_id IS NULL OR un.uni_id = @uni_id OR un.uni_id IS NULL)
		
	-- CONSULTA PAGINADA
	SELECT TOP (@pagesize)
		*
	FROM
	(
		SELECT
			ROW_NUMBER() OVER (ORDER BY log_dataHora DESC) AS rowNumber
			, logs.log_id
			, logs.log_dataHora
			, logs.log_ip
			, logs.log_machineName
			, logs.log_acao
			, logs.log_descricao
			, logs.sis_id
			, logs.sis_nome
			, logs.mod_id
			, logs.mod_nome
			, logs.usu_id
			, logs.usu_login
			, logs.gru_id
			, logs.gru_nome
			, logs.log_grupoUA
			, un.uad_nome AS unidade
		FROM
		Synonym_Log_Sistema logs WITH(NOLOCK)
		LEFT JOIN Unidade uni WITH(NOLOCK)	
			ON uni.uni_id = CASE WHEN ISNUMERIC(logs.log_grupoUA) = 1 THEN CONVERT(INT,logs.log_grupoUA)END
		LEFT JOIN VW_UnidadeAdministrativa AS un WITH(NOLOCK)
			ON un.uad_id = uni.uad_id
		WHERE
			log_datahora >= @DataInicio
			AND log_datahora < dateadd(day,1,@DataTermino)
			AND sis_id = @sis_id
			AND (@log_acao IS NULL OR log_acao = @log_acao)
			AND (@usu_login IS NULL OR usu_login LIKE  '%'+@usu_login+'%')
			AND (@uni_id IS NULL OR un.uni_id = @uni_id OR un.uni_id IS NULL)
	) AS logs
	WHERE
		rowNumber > (@pageSize * (@pageNumber - 1))
	ORDER BY 
		log_dataHora desc

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_LOG_Sistema_SelectBy_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Pedro Gimenez (alteração)
-- Create date: 22/11/2011 15:00
-- Description:	utilizado na busca de log de sistema, específica do Conpat,
--              lista os dados do log em ordem decrescente.
--				novo campo: UNIDADE ADM. DO USUÁRIO
--				filtrados por:
--					data inicial e final, sistema do gestão core, tipo de
--					log e UNIDADE ADM. DO USUÁRIO.
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_LOG_Sistema_SelectBy_uni_id]
	@DataInicio DATETIME
	, @DataTermino DATETIME
	, @sis_id INT
	, @log_acao VARCHAR(50)
	, @usu_login VARCHAR(100)
	, @uni_id INT
AS
BEGIN

With LogSis AS

(
	SELECT 
		logs.log_id
		, logs.log_dataHora
		, logs.log_ip
		, logs.log_machineName
		, logs.log_acao
		, logs.log_descricao
		, logs.sis_id
		, logs.sis_nome
		, logs.mod_id
		, logs.mod_nome
		, logs.usu_id
		, logs.usu_login
		, logs.gru_id
		, logs.gru_nome
		, logs.log_grupoUA
	FROM
		Synonym_Log_Sistema AS Logs WITH(NOLOCK)
	Where
		log_datahora >= @DataInicio
		AND log_datahora < dateadd(day,1,@DataTermino)
		AND sis_id = @sis_id
)

	SELECT 
		logs.log_id
		, logs.log_dataHora
		, logs.log_ip
		, logs.log_machineName
		, logs.log_acao
		, logs.log_descricao
		, logs.sis_id
		, logs.sis_nome
		, logs.mod_id
		, logs.mod_nome
		, logs.usu_id
		, logs.usu_login
		, logs.gru_id
		, logs.gru_nome
		, logs.log_grupoUA
		, un.uad_nome AS unidade
	FROM
			LogSis AS logs 
		LEFT JOIN Synonym_SYS_UsuarioGrupoUA_SSO AS usuGru	WITH(NOLOCK)	
			ON logs.gru_id = usuGru.gru_id 
		       AND logs.usu_id = usuGru.usu_id
		LEFT JOIN VW_UnidadeAdministrativa AS un WITH(NOLOCK)
		    ON un.uad_id = usuGru.uad_id 
	WHERE
		 (@log_acao IS NULL OR log_acao = @log_acao)
		AND (@usu_login IS NULL OR usu_login LIKE  '%'+@usu_login+'%')
		AND (@uni_id IS NULL OR un.uni_id = @uni_id)
	ORDER BY 
		log_datahora DESC
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_LOG_Sistema_TOP1_Selectby_usu_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Luana Piva
-- Create date: 18/03/2014
-- Description:	veriica se existe algum log para esse usuário nesse sistema
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_LOG_Sistema_TOP1_Selectby_usu_id]
	@usu_id UNIQUEIDENTIFIER
	, @sis_id INT
AS
BEGIN
	SELECT TOP 1
		log_id
		, log_dataHora
		, log_ip
		, log_machineName
		, log_acao
		, log_descricao
		, sis_id
		, sis_nome
		, mod_id
		, mod_nome
		, usu_id
		, usu_login
		, gru_id
		, gru_nome
		, log_grupoUA
	FROM
		Synonym_Log_Sistema WITH(NOLOCK)
	WHERE
		usu_id = @usu_id
		AND (@sis_id IS NULL OR sis_id = @sis_id)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Mapa_Arrolamento_Delete]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
     
CREATE procedure [dbo].[NEW_Mapa_Arrolamento_Delete](        
  @funcao char         
 ,@bem_id bigint = null             
 ,@bit_id bigint = null              
 ,@uni_id bigint = null         
 ,@mar_guid varchar(50) = null 
)        
with recompile    
as        
       
if @funcao = 'I'        
begin        
    delete from         
    MapaArrolamento         
 where        
       uni_id	= @uni_id  
 and   bem_id	= @bem_id        
 and   bit_id	= @bit_id        
 and   mar_guid = @mar_guid        
end 

if @funcao = 'T'        
begin        
    delete from         
    MapaArrolamento         
 where        
       uni_id	= @uni_id
 and   mar_guid = @mar_guid        
end 

return isnull(@@rowcount,-1)        
        
         
GO
/****** Object:  StoredProcedure [dbo].[NEW_Mapa_Arrolamento_w]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*      
 Objetivo : Procedure de gravação Mapa de Arrolamento      
       
 Autor  :   Mar, 2017      
       
 Alteracao:         
       
 Testes  :       
      
     NEW_Mapa_Arrolamento_w 'I', 1690, 1, 5      
     NEW_Mapa_Arrolamento_w 'D', 1433547, 5039863, 5      
     NEW_Mapa_Arrolamento_w 'G', null, null, 5, 5, null, 1       
      
     select * from MapaArrolamento      
      
     update MapaArrolamento set mar_guid = null where mar_guid not in ('20170413135032')      
  
  ajuste em todos os guid  
     update mapaarrolamento set mar_guid = mar_guid+convert(varchar(10),uni_id)+convert(varchar(10),loc_id)     
  
*/      
  
  
   
      
CREATE procedure [dbo].[NEW_Mapa_Arrolamento_w](      
  @funcao char       
 ,@bem_id bigint = null           
 ,@bit_id bigint = null            
 ,@uni_id bigint = null       
 ,@loc_id bigint = null       
 ,@bit_peso bigint = null       
 ,@bit_composicao int = null       
)      
with recompile  
as      
      
--set @uni_id = (select uni_id from FN_GetUnidadeGestoraImediata(@uni_id))      
      
if(@loc_id is null)      
begin      
 set @loc_id = (select loc_id from bemitem with(nolock) where bem_id = @bem_id and bit_id = @bit_id)      
end      
      
if @funcao = 'I'      
begin      
      
 if not exists (      
      select       
        bem_id       
      from       
        MapaArrolamento       
      where       
        1 = 1      
        and bem_id = @bem_id       
        and bit_id = @bit_id       
        and uni_id = @uni_id      
     )      
 begin      
      
  insert into MapaArrolamento       
  (      
    bem_id          
   ,bit_id          
   ,uni_id       
   ,loc_id       
   ,bit_composicao      
      
  )      
  values      
  (      
    @bem_id          
   ,@bit_id          
   ,@uni_id        
   ,@loc_id      
   ,@bit_composicao      
      
  )      
 end      
      
 begin      
  update bemitem set bit_composicao = @bit_composicao, bit_peso = @bit_peso where bem_id = @bem_id and bit_id = @bit_id      
 end      
      
end      
      
if @funcao = 'D'      
begin      
      
 begin      
  update bemitem set bit_composicao = @bit_composicao, bit_peso = @bit_peso where bem_id = @bem_id and bit_id = @bit_id      
 end      
      
 delete from       
    MapaArrolamento       
 where      
    1 = 1       
 and   bem_id = @bem_id      
 and   bit_id = @bit_id      
 and   mar_guid is null      
       
end      
      
if @funcao = 'G'      
begin   
 
  UPDATE  MA SET 

 MA.MAR_GUID   = ((CASE @BIT_COMPOSICAO WHEN 1 THEN 'F' WHEN 2 THEN 'M' ELSE 'T' END)  + FORMAT(GETDATE(), 'yyyyMMddHHmmssFF4') + CONVERT(VARCHAR(10),@UNI_ID)  + CONVERT(VARCHAR(10),@LOC_ID) )        
,MA.MAR_DATAALTERACAO = GETDATE()  
,MAR_IMPRIMIR = 0    
,MA.BEM_DESCRICAO = BP.BEM_DESCRICAO
,MA.BEM_DATAENTRADA = BP.BEM_DATAENTRADA
,MA.STC_ID = B.STC_ID
,MA.DEP_ID = B.DEP_ID
,MA.BIT_UNIGESTORA = B.BIT_UNIGESTORA
,MA.BIT_UNIGUARDA = B.BIT_UNIGUARDA
,MA.BIT_REGISTROPAT = B.BIT_REGISTROPAT
,MA.BIT_GPB = B.BIT_GPB
,MA.BIT_GRB = B.BIT_GRB
,MA.BIT_VALORORIGEM = B.BIT_VALORORIGEM
,MA.BIT_VALORLIQUIDO = B.BIT_VALORLIQUIDO
,MA.BIT_DATAINCORPORACAO = B.BIT_DATAINCORPORACAO
,MA.BIT_STATUS = B.BIT_STATUS
,MA.BIT_SITUACAO = B.BIT_SITUACAO
 FROM
    MAPAARROLAMENTO MA     
 INNER JOIN BEMITEM B  WITH(NOLOCK) ON  B.BEM_ID = MA.BEM_ID AND B.BIT_ID = MA.BIT_ID
 INNER JOIN BEMPATRIMONIAL      BP WITH(NOLOCK)  ON BP.BEM_ID = B.BEM_ID
 WHERE   
       MA.UNI_ID = @UNI_ID      
 AND   MA.LOC_ID = @LOC_ID      
 AND ( MA.BIT_COMPOSICAO = @BIT_COMPOSICAO  OR @BIT_COMPOSICAO IS NULL)    
 AND   MA.MAR_GUID IS NULL     
end      
      
return isnull(@@rowcount,-1)      
      
       
      
GO
/****** Object:  StoredProcedure [dbo].[NEW_MapaGerencial_SelectBensUnidadeMapaPorUni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		Fabio Nazima
-- Create date: 25/08/2010 13:41:17
-- Description: Traz todas as diretorias de ensino assim como suas informações pertinentes ao
--				Mapa
-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_MapaGerencial_SelectBensUnidadeMapaPorUni_id]
	@ent_id uniqueidentifier
AS
BEGIN

	SELECT 
		a.uni_id,
		uad_codigo,
		uad_nome as nome,
		0 UniIdGestora,
		(select top 1(PeriodoUnidade.per_ano) from PeriodoUnidade where PeriodoUnidade.uni_id =a.uni_id and PeriodoUnidade.peu_situacao=2 order by per_ano desc,per_mes  desc) as ultimoAnoFechado ,
		(select top 1(PeriodoUnidade.per_mes) from PeriodoUnidade where PeriodoUnidade.uni_id =a.uni_id and PeriodoUnidade.peu_situacao=2 order by per_ano desc,per_mes desc ) as ultimoMesFechado,
		(select top 1(PeriodoUnidade.per_ano) from PeriodoUnidade where PeriodoUnidade.uni_id =a.uni_id and PeriodoUnidade.peu_situacao=1 order by per_ano desc,per_mes  desc) as ultimoAnoAberto ,
		(select top 1(PeriodoUnidade.per_mes) from PeriodoUnidade where PeriodoUnidade.uni_id =a.uni_id and PeriodoUnidade.peu_situacao=1 order by per_ano desc,per_mes desc ) as ultimoMesAberto,
		(select COUNT(bit_id) from BemItem inner join VW_UnidadeAdministrativa on  VW_UnidadeAdministrativa.uni_id=BemItem.bit_uniGuarda  where BemItem.bit_uniGuarda =a.uni_id  )as quantidadeBens,
		(select Sum(BemItem.bit_valorLiquido) from BemItem inner join VW_UnidadeAdministrativa on  VW_UnidadeAdministrativa.uni_id=BemItem.bit_uniGuarda  where BemItem.bit_uniGuarda =a.uni_id )as valorTotal,
		(CORE_END_Endereco.end_logradouro) as endereco,
		(' '+ LOC.loc_numero +' / '+dbo.CORE_END_Cidade.cid_nome+'- CEP:'+ CORE_END_Endereco.end_cep) complementos,
		(CORE_END_Cidade.cid_nome) as cidade,
		uni.uni_situacao numeroUnidadesAtivas,
		(select COUNT(VW_UnidadeAdministrativa.uni_id) from VW_UnidadeAdministrativa inner join VW_UnidadeGestora on VW_UnidadeAdministrativa.uad_idSuperior=VW_UnidadeGestora.uad_id where VW_UnidadeGestora.uni_id=a.uni_id ) numeroUnidades
	from 
		dbo.VW_UnidadeAdministrativa a
		INNER JOIN Unidade uni WITH(NOLOCK)
		ON a.uad_id = uni.uad_id
	LEFT JOIN Localidade as LOC
		ON LOC.uni_id = a.uni_id
		AND LOC.loc_situacao = 4
	LEFT JOIN dbo.CORE_END_Endereco
		ON dbo.CORE_END_Endereco.end_id=LOC.end_id
	LEFT JOIN dbo.CORE_END_Cidade
		ON dbo.CORE_END_Cidade.cid_id=dbo.CORE_END_Endereco.cid_id

	WHERE 
		a.ent_id = @ent_id
		AND a.tua_id NOT IN (SELECT par_valor FROM SYS_Parametros WHERE par_chave IN('TIPO_UAD_DIRETORIA_ENSINO','TIPO_UAD_ESCOLA'))	
	ORDER BY 
		uad_nome
		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MapaGerencial_SelectDiretoriasEnsino]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		Fabio Nazima
-- Create date: 25/08/2010 13:41:17
-- Description: Traz todas as diretorias de ensino assim como suas informações pertinentes ao
--				Mapa
-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_MapaGerencial_SelectDiretoriasEnsino]
	@uni_tipo uniqueidentifier
AS
BEGIN
	select 
			a.uni_id,
			uad_codigo,
			uni_nome as nome,
			0 UniIdGestora,
			(select top 1(PeriodoUnidade.per_ano) from PeriodoUnidade where PeriodoUnidade.uni_id =a.uni_id and PeriodoUnidade.peu_situacao=2 order by per_ano desc,per_mes  desc) as ultimoAnoFechado ,
			(select top 1(PeriodoUnidade.per_mes) from PeriodoUnidade where PeriodoUnidade.uni_id =a.uni_id and PeriodoUnidade.peu_situacao=2 order by per_ano desc,per_mes desc ) as ultimoMesFechado,
			(select top 1(PeriodoUnidade.per_ano) from PeriodoUnidade where PeriodoUnidade.uni_id =a.uni_id and PeriodoUnidade.peu_situacao=1 order by per_ano desc,per_mes  desc) as ultimoAnoAberto ,
			(select top 1(PeriodoUnidade.per_mes) from PeriodoUnidade where PeriodoUnidade.uni_id =a.uni_id and PeriodoUnidade.peu_situacao=1 order by per_ano desc,per_mes desc ) as ultimoMesAberto,
			(select COUNT(bit_id) from BemItem inner join VW_UnidadeAdministrativa on  VW_UnidadeAdministrativa.uni_id=BemItem.bit_uniGuarda inner join VW_UnidadeGestora on  VW_UnidadeAdministrativa.uad_idSuperior=VW_UnidadeGestora.uad_id where VW_UnidadeGestora.uni_id=a.uni_id  )as quantidadeBens,
			(select Sum(BemItem.bit_valorLiquido) from BemItem inner join VW_UnidadeAdministrativa on  VW_UnidadeAdministrativa.uni_id=BemItem.bit_uniGuarda inner join VW_UnidadeGestora on  VW_UnidadeAdministrativa.uad_idSuperior=VW_UnidadeGestora.uad_id where VW_UnidadeGestora.uni_id=a.uni_id  )as valorTotal,
			(select COUNT(VW_UnidadeAdministrativa.uni_id) from VW_UnidadeAdministrativa inner join VW_UnidadeGestora on VW_UnidadeAdministrativa.uad_idSuperior=VW_UnidadeGestora.uad_id where VW_UnidadeGestora.uni_id=a.uni_id and VW_UnidadeAdministrativa.uad_situacao = 1 ) as numeroUnidadesAtivas,
			(select COUNT(VW_UnidadeAdministrativa.uni_id) from VW_UnidadeAdministrativa inner join VW_UnidadeGestora on VW_UnidadeAdministrativa.uad_idSuperior=VW_UnidadeGestora.uad_id where VW_UnidadeGestora.uni_id=a.uni_id ) as numeroUnidades
	from 
		VW_UnidadeGestora  a WITH (NOLOCK)	
			
	where 
		uni_tipo=@uni_tipo
		
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MapaGerencial_SelectEscolas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		Fabio Nazima
-- Create date: 25/08/2010 13:41:17
-- Description: Traz todas as diretorias de ensino assim como suas informações pertinentes ao
--				Mapa
-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_MapaGerencial_SelectEscolas]
	@uni_tipo uniqueidentifier,
	@uni_id int
WITH RECOMPILE
AS
BEGIN
	select 
			Unidade.uni_id,
			uad_codigo,
			uad_nome as nome,
			--(select top 1 uni_idgestora
				--from dbo.FN_GetUnidadesSuperiores(Unidade.uni_id) 
				--where uni_id!=uni_idgestora) as UniIdGestora
			 0 UniIdGestora,
			(select top 1(PeriodoUnidade.per_ano) from PeriodoUnidade where PeriodoUnidade.uni_id =Unidade.uni_id and PeriodoUnidade.peu_situacao=2 order by per_ano desc,per_mes  desc) as ultimoAnoFechado ,
			(select top 1(PeriodoUnidade.per_mes) from PeriodoUnidade where PeriodoUnidade.uni_id =Unidade.uni_id and PeriodoUnidade.peu_situacao=2 order by per_ano desc,per_mes desc ) as ultimoMesFechado,
			(select top 1(PeriodoUnidade.per_ano) from PeriodoUnidade where PeriodoUnidade.uni_id =Unidade.uni_id and PeriodoUnidade.peu_situacao=1 order by per_ano desc,per_mes  desc) as ultimoAnoAberto ,
			(select top 1(PeriodoUnidade.per_mes) from PeriodoUnidade where PeriodoUnidade.uni_id =Unidade.uni_id and PeriodoUnidade.peu_situacao=1 order by per_ano desc,per_mes desc ) as ultimoMesAberto,
			(select COUNT(bit_id) from BemItem inner join VW_UnidadeAdministrativa on  VW_UnidadeAdministrativa.uni_id=BemItem.bit_uniGuarda  where BemItem.bit_uniGuarda =Unidade.uni_id  )as quantidadeBens,
			(select Sum(BemItem.bit_valorLiquido) from BemItem inner join VW_UnidadeAdministrativa on  VW_UnidadeAdministrativa.uni_id=BemItem.bit_uniGuarda  where BemItem.bit_uniGuarda =Unidade.uni_id )as valorTotal,
			(CORE_END_Endereco.end_logradouro) as endereco,
			(' '+c.uae_numero +' / '+dbo.CORE_END_Cidade.cid_nome+'- CEP:'+ CORE_END_Endereco.end_cep) complementos,
			(dbo.CORE_END_Cidade.cid_nome) as cidade,
			uni_situacao numeroUnidadesAtivas,
			(select COUNT(VW_UnidadeAdministrativa.uni_id) from VW_UnidadeAdministrativa inner join VW_UnidadeGestora on VW_UnidadeAdministrativa.uad_idSuperior=VW_UnidadeGestora.uad_id where VW_UnidadeGestora.uni_id=a.uni_id ) numeroUnidades
	from 
		Unidade WITH (NoLock)
	inner join dbo.VW_UnidadeAdministrativa a WITH (NoLock)
		on Unidade.ent_id = a.ent_id and Unidade.uad_id = a.uad_id 
	inner join dbo.VW_UnidadeAdministrativaEndereco c WITH(NoLock)
		on c.ent_id=Unidade.ent_id and c.uad_id=Unidade.uad_id
	left join dbo.CORE_END_Endereco WITH (NoLock)
		on dbo.CORE_END_Endereco.end_id=c.end_id
	left join dbo.CORE_END_Cidade WITH (NoLock)
		on dbo.CORE_END_Cidade.cid_id=dbo.CORE_END_Endereco.cid_id
			
	where 
		 --VW_UnidadeAdministrativa.tua_id = @uni_tipo
		 Unidade.uni_id in (select uni_id from dbo.FN_GetUnidadeEFilhas(@uni_id))
	
	order by 
		uad_nome asc
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MapaGerencial_SelectUnidadeMapaPorUni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		Fabio Nazima
-- Create date: 25/08/2010 13:41:17
-- Description: Traz todas as diretorias de ensino assim como suas informações pertinentes ao
--				Mapa
-- ===================================================================================
create PROCEDURE [dbo].[NEW_MapaGerencial_SelectUnidadeMapaPorUni_id]
	@uni_id int
AS
BEGIN
	select 
			a.uni_id,
			uad_codigo,
			uni_nome as nome,
			(select COUNT(bit_id) from BemItem inner join VW_UnidadeAdministrativa on  VW_UnidadeAdministrativa.uni_id=BemItem.bit_uniGuarda inner join VW_UnidadeGestora on  VW_UnidadeAdministrativa.uad_id=VW_UnidadeGestora.uad_id where VW_UnidadeGestora.uni_id=a.uni_id  )as quantidadeBens,
			(select Sum(BemItem.bit_valorLiquido) from BemItem inner join VW_UnidadeAdministrativa on  VW_UnidadeAdministrativa.uni_id=BemItem.bit_uniGuarda inner join VW_UnidadeGestora on  VW_UnidadeAdministrativa.uad_id=VW_UnidadeGestora.uad_id where VW_UnidadeGestora.uni_id=a.uni_id  )as valorTotal
		from
		VW_UnidadeGestora  a WITH (NOLOCK)	
			
	where 
		uni_id=@uni_id
		
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MENOR_PERIODO_PARA_EXPORTAR]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MENOR_PERIODO_PARA_EXPORTAR]  
--declare
  @uni_id INT --=69  
  
AS  
BEGIN  
  
SET LANGUAGE Portuguese  
DECLARE @tpm_id INT  
SELECT   
  @tpm_id= CAST(PA.par_valor AS INT)   
 FROM SYS_Parametros AS PA with (nolock)   
  WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';  
    
WITH MoviBem AS  
(  
 SELECT   
  mov.bem_id,  
  mov.bit_id,  
  mov.mov_observacao as Observacao,  
  mov.mov_unidadeDestino,  
  mov.mov_gpb,  
  mov.mov_valor,  
  mov.cco_codigoCredito,  
  mov.cco_codigoDebito,  
  mov.per_ano,  
  mov.tpm_id,  
  mov.grp_id,  
  mov.uni_id,  
  mov.per_mes,  
  mov.mov_situacao  
    
 FROM  
   MovimentacaoBem as mov WITH(NOLOCK) 
   inner join bemitem  bi WITH(NOLOCK)  
   on (mov.bem_id = bi.bem_id  
   and mov.bit_id = bi.bit_id)  
 WHERE  
  mov.mov_situacao in (1,4)  
  and mov.uni_id = @uni_id 
  and mov.mov_nl is null   
  and bi.bit_status not in (5)  
  and mov_dataCriacao > convert(date,'2014-02-28') 
)  
  
,BemNotaEmpenho AS   
(  
 SELECT   
  ROW_NUMBER() OVER (order  by BD.bem_id, BD.bit_id) as linha  
  ,BD.*   
 FROM  
  BemItemDocumento AS BD WITH(NOLOCK)   
 INNER JOIN MoviBem AS MO WITH(NOLOCK)   
  on MO.bem_id = BD.bem_id  
  and MO.bit_id = BD.bit_id  
 WHERE  
  mov_situacao in (1,4)  
  AND uni_id = @uni_id  
 --AND (@uni_id IS NULL OR uni_id = @uni_id)  
 and uni_id = isnull(@uni_id,uni_id)  
 AND bid_tipoDoc = 4  
)  

--select * from MoviBem
     
  SELECT 
  ROW_NUMBER() OVER (order  by M.per_ano,M.per_mes ) as linha,
     U.uni_codigoUGE AS UnidadeGestora  
   ,M.per_mes  
   ,M.per_ano 
  FROM  
   MoviBem M  WITH(NOLOCK)   
   INNER JOIN Unidade U WITH(NOLOCK)  
    ON U.uni_id = M.uni_id  
   --INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO as uad WITH(NOLOCK)  
   -- ON  uad.uad_id = U.uad_id AND  
   --   uad.ent_id = U.ent_id AND  
   --   uad.uad_situacao = 1  
   INNER JOIN ParametroContabil PC WITH(NOLOCK)  
    ON M.cco_codigoDebito = PC.cco_codigoDebito  
     AND M.cco_codigoCredito = PC.cco_codigoCredito  
     AND M.grp_id = PC.grp_id  
     AND M.tpm_id = PC.tpm_id   
   INNER JOIN TipoMovimentacao TM WITH (NOLOCK)  
    ON M.tpm_id = TM.tpm_id   
   LEFT JOIN BemNotaEmpenho BIC   --- ***************************************  
    ON BIC.bem_id = M.bem_id  
    AND BIC.bit_id = M.bit_id  
    AND BIC.linha = 1  
  WHERE   
   (PC.pco_evento IS NOT NULL) AND  
   ( TM.tpm_operacao NOT IN (2,6) OR (  
     ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )          
    OR M.tpm_id = @tpm_id))
  GROUP BY 
   U.uni_codigoUGE 
   ,M.per_mes  
   ,M.per_ano  
 --  ,uad.uad_nome  
  order by linha
END  
  
GO
/****** Object:  StoredProcedure [dbo].[New_MotivoCancelamento_Manutencao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[New_MotivoCancelamento_Manutencao]
 @moc_id		int		= null
,@moc_nome		varchar(100)	= null
,@moc_nomeAbr		varchar(100)	= null
,@moc_descricao		varchar(1000)	= null
,@moc_situacao		tinyint		= null
,@funcao char

AS

DECLARE @ret INT

if(@funcao = 'I')
BEGIN

	insert into
		MotivoCancelamento
	values
	(
		 @moc_nome
		,@moc_nomeAbr
		,@moc_descricao
		,@moc_situacao
		,getDate()
		,getDate()
	)	
		
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END


if(@funcao = 'U')
BEGIN

	update
		MotivoCancelamento
	set
		 moc_nome	= @moc_nome		
		,moc_nomeAbr	= @moc_nomeAbr
		,moc_descricao	= @moc_descricao	
		,moc_situacao	= @moc_situacao	
	where 
		moc_id = @moc_id 
		
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END


if(@funcao = 'D')
BEGIN

	update
		MotivoCancelamento
	set
		moc_situacao	= 3	
	where 
		moc_id = @moc_id 

		
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END






GO
/****** Object:  StoredProcedure [dbo].[NEW_MOVIMENTACAO_BEM_EXPORTACAO_NLS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[NEW_MOVIMENTACAO_BEM_EXPORTACAO_NLS] 
(
@dias int
)
as
begin
SELECT    
    ISNULL(MB.mov_nl, '') AS 'NL', 
	ISNULL(U.uni_codigoUGE, '') AS 'UGE',
	ISNULL(A.uad_codigo, '') AS 'CÓDIGO DA UNIDADE DE GUARDA', 
	ISNULL(A.uad_nome, '') AS 'NOME DA UNIDADE DE GUARDA', 
	CONVERT(VARCHAR(40), 
	ISNULL(SUBSTRING(BP.bem_descricao, 0, 40), '')) AS 'DESCRIÇÃO DO BEM 1/6',      
	CONVERT(VARCHAR(40),
	ISNULL(SUBSTRING(BP.bem_descricao, 40, 40), '')) AS 'DESCRIÇÃO DO BEM 2/6',
	CONVERT(VARCHAR(40), 
    ISNULL(SUBSTRING(BP.bem_descricao, 80, 40), '')) AS 'DESCRIÇÃO DO BEM 3/6', 
	CONVERT(VARCHAR(40), 
	ISNULL(SUBSTRING(BP.bem_descricao, 120, 40), '')) AS 'DESCRIÇÃO DO BEM 4/6',
	CONVERT(VARCHAR(40), 
	ISNULL(SUBSTRING(BP.bem_descricao, 160, 40), '')) AS 'DESCRIÇÃO DO BEM 5/6',
	CONVERT(VARCHAR(40), 
    ISNULL(SUBSTRING(BP.bem_descricao, 200, 40), '')) AS 'DESCRIÇÃO DO BEM 6/6', 
	ISNULL(MB.per_mes, '') AS 'MÊS', ISNULL(MB.per_ano, '') AS 'ANO', 
    ISNULL(MB.cco_codigoDebito, '') AS 'CÓDIGO DE DÉBITO',
	ISNULL(MB.cco_codigoCredito, '') AS 'CÓDIGO DE CRÉDITO', 
	ISNULL(PC.pco_evento, '') AS 'CÓDIGO DO EVENTO',
	CONVERT(VARCHAR(40), 
	ISNULL(SUBSTRING(PC.pco_historico, 0, 40), '')) AS 'NOME DO EVENTO 1/3',
	CONVERT(VARCHAR(40), 
    ISNULL(SUBSTRING(PC.pco_historico, 40, 40), '')) AS 'NOME DO EVENTO 2/3', 
	CONVERT(VARCHAR(40), 
	ISNULL(SUBSTRING(PC.pco_historico, 80, 40), ''))  AS 'NOME DO EVENTO 3/3', 
	ISNULL((SELECT        A.uad_nome
                                 FROM            Unidade AS U WITH (NOLOCK) INNER JOIN
                                                          Synonym_SYS_UnidadeAdministrativa_SSO AS A WITH (NOLOCK) ON A.uad_id = U.uad_id
                                 WHERE        (U.uni_id = MB.mov_unidadeOrigem)), '') AS 'NOME DA UNIDADE DE ORIGEM', 
	ISNULL((SELECT        A.uad_nome
                                 FROM            Unidade AS U WITH (NOLOCK) INNER JOIN
                                                          Synonym_SYS_UnidadeAdministrativa_SSO AS A WITH (NOLOCK) ON A.uad_id = U.uad_id
                                 WHERE        (U.uni_id = MB.mov_unidadeDestino)), '') AS 'NOME DA UNIDADE DE DESTINO', 
	CONVERT(VARCHAR(40), 
	ISNULL(MB.mov_valor, ''), 1) AS 'VALOR',
	(select uad_nome from [dbo].[FN_GetUnidadeGestoraImediata] (MB.mov_unidadeOrigem)) as 'UGE Origem',
	(select uad_nome from [dbo].[FN_GetUnidadeGestoraImediata] (MB.mov_unidadeDestino)) as 'UGE Destino'

FROM            MovimentacaoBem AS  MB WITH (NOLOCK)
		INNER JOIN
                BemPatrimonial AS BP WITH (NOLOCK) ON BP.bem_id = MB.bem_id 
		INNER JOIN
                Unidade AS U WITH (NOLOCK) ON U.uni_id = MB.mov_unidadeOrigem 
		INNER JOIN
                Synonym_SYS_UnidadeAdministrativa_SSO AS A WITH (NOLOCK) ON A.uad_id = U.uad_id 
		INNER JOIN
                ParametroContabil AS PC WITH (NOLOCK) ON MB.cco_codigoDebito = PC.cco_codigoDebito AND MB.cco_codigoCredito = PC.cco_codigoCredito AND 
                         MB.grp_id = PC.grp_id AND MB.tpm_id = PC.tpm_id 
		INNER JOIN
                TipoMovimentacao AS TM WITH (NOLOCK) ON MB.tpm_id = TM.tpm_id

WHERE        MB.mov_nl IS NOT NULL 
			AND MB.COD_SIAFEM IS NOT NULL --MB.per_ano in ('2014','2015') --
			--filtrar por data de alteração ref mes
			and mb.mov_dataAlteracao >= dateadd(day,-@dias,getdate())
end


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Agrupados_Update]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





--sp_helptext NEW_MovimentacaoBem_Agrupados_Update
-- =============================================
-- Author:		Allex Rocha
-- Create date: 26/11/2014
-- Description:	Cria um ID para cada movimentação do SIAFEM
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Agrupados_Update]
	  @uni_id INT
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)
	, @eventoDebito INT
	, @eventoCredito INT
	, @tpm_operacao INT 
	, @bid_numeroDoc VARCHAR(50)
	, @mov_observacao VARCHAR(MAX)
	, @cco_codigoDebito varchar(20)
	, @cco_codigoCredito varchar(20)
	, @uni_destino INT 
	, @mov_gpb VARCHAR(20)
	WITH RECOMPILE
AS
DECLARE @cod_siafem VARCHAR(30), @cod_siafem_old VARCHAR(30) = null
SET @cod_siafem_old = 
					(
					SELECT top 1 M.cod_siafem
			FROM
							dbo.MovimentacaoBem M WITH(NoLock)							
							INNER JOIN ParametroContabil PC WITH(NoLock)
								ON  M.cco_codigoDebito = PC.cco_codigoDebito
									AND M.cco_codigoCredito = PC.cco_codigoCredito
									AND M.grp_id = PC.grp_id
									AND M.tpm_id = PC.tpm_id	
							INNER JOIN TipoMovimentacao TM WITH(NoLock)
								ON M.tpm_id = TM.tpm_id 
								--AND	  (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL) --  TM.tpm_operacao = isnull(@tpm_operacao,TM.tpm_operacao)	--
							LEFT JOIN BemItemDocumento BIC  WITH(NoLock) 
								ON BIC.bem_id = M.bem_id
								AND BIC.bit_id = M.bit_id
								AND BIC.bid_tipoDoc = 4			
		WHERE
				M.mov_nl is null
			AND	M.cod_siafem is not null	
			AND	M.mov_situacao in (1,4)
			AND M.uni_id = @uni_id
			AND M.per_mes = @per_mes
			AND M.per_ano = @per_ano
			AND	(PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)--PC.pco_evento = isnull(@eventoDebito, PC.pco_evento)	--
			AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL )--PC.pco_eventoCredito = isnull(@eventoCredito, PC.pco_eventoCredito)   --
			AND	(BIC.bid_numeroDoc = @bid_numeroDoc OR @bid_numeroDoc IS NULL)--BIC.bid_numeroDoc = isnull(@bid_numeroDoc, BIC.bid_numeroDoc )	--
			AND	(M.mov_observacao = @mov_observacao OR @mov_observacao IS NULL)--M.mov_observacao = isnull(@mov_observacao, M.mov_observacao)	-- 
			AND M.cco_codigoDebito = @cco_codigoDebito
			AND M.cco_codigoCredito = @cco_codigoCredito
			AND (M.mov_unidadeDestino = @uni_destino OR @uni_destino IS NULL)--M.mov_unidadeDestino = isnull(@uni_destino, M.mov_unidadeDestino)		--
			AND ( ( (TM.tpm_operacao = @tpm_operacao or @tpm_operacao is null) and TM.tpm_operacao NOT IN (2,6) ) OR (--AND (TM.tpm_operacao NOT IN (2,6) OR (
				 ((SELECT TOP 1 uni_id from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id)
				OR (M.tpm_id = 1)		-- CAST((SELECT PA.par_valor FROM SYS_Parametros AS PA WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT))
			))
			AND (M.mov_GPB = @mov_gpb  or @mov_gpb IS NULL)--M.mov_GPB = isnull(@mov_gpb, M.mov_GPB)	--
					)


BEGIN   			
		IF @cod_siafem_old is null
		BEGIN
		SET @cod_siafem = 
				(
					SELECT top 1 CONVERT(VARCHAR, MAX(CONVERT(INT, dbo.FN_Split_cod_siafem(m.cod_siafem, '/')) + 1))
							+ '/G' + @per_mes + '/' + convert (varchar,@uni_id) + 'NL'
					  	    + REPLACE(CONVERT(VARCHAR, GETDATE(), 105), '-', '')
					FROM MovimentacaoBem AS m  WITH(NoLock) WHERE m.uni_id = @uni_id and m.per_ano = @per_ano and m.per_mes = @per_mes and  m.cod_siafem is not null
				)

				if @cod_siafem is null
					begin
					SET @cod_siafem = 
				(
						SELECT CONVERT(VARCHAR, MAX(CONVERT(INT, dbo.FN_Split_cod_siafem(null, '/')) + 1))
							+ '/G' + @per_mes + '/' + convert (varchar,@uni_id) + 'NL'
					  	    + REPLACE(CONVERT(VARCHAR, GETDATE(), 105), '-', '')
					--FROM MovimentacaoBem AS m  WITH(NoLock) WHERE m.uni_id = @uni_id and m.per_ano = @per_ano
				)
					end

					UPDATE MovimentacaoBem
					  SET cod_siafem = @cod_siafem
						FROM
							dbo.MovimentacaoBem M WITH(NoLock)							
							INNER JOIN ParametroContabil PC WITH(NoLock)
								ON  M.cco_codigoDebito = PC.cco_codigoDebito
									AND M.cco_codigoCredito = PC.cco_codigoCredito
									AND M.grp_id = PC.grp_id
									AND M.tpm_id = PC.tpm_id	
							INNER JOIN TipoMovimentacao TM WITH(NoLock)
								ON M.tpm_id = TM.tpm_id 
									--AND  TM.tpm_operacao = isnull(@tpm_operacao,TM.tpm_operacao)	--(TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL) --
							LEFT JOIN BemItemDocumento BIC  WITH(NoLock) 
								ON BIC.bem_id = M.bem_id
								AND BIC.bit_id = M.bit_id
								AND BIC.bid_tipoDoc = 4			
						WHERE
								M.mov_nl is null
							AND M.cod_siafem IS NULL
							AND M.mov_situacao in (1,4)
							AND M.uni_id = @uni_id
							AND M.per_mes = @per_mes
							AND M.per_ano = @per_ano
							AND	(PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)--PC.pco_evento = isnull(@eventoDebito, PC.pco_evento)	--
							AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL )--PC.pco_eventoCredito = isnull(@eventoCredito, PC.pco_eventoCredito)   --
							AND	(BIC.bid_numeroDoc = @bid_numeroDoc OR @bid_numeroDoc IS NULL)--BIC.bid_numeroDoc = isnull(@bid_numeroDoc, BIC.bid_numeroDoc )	--
							AND	(M.mov_observacao = @mov_observacao OR @mov_observacao IS NULL)--M.mov_observacao = isnull(@mov_observacao, M.mov_observacao)	-- 
							AND M.cco_codigoDebito = @cco_codigoDebito
							AND M.cco_codigoCredito = @cco_codigoCredito
							AND (M.mov_unidadeDestino = @uni_destino OR @uni_destino IS NULL)--M.mov_unidadeDestino = isnull(@uni_destino, M.mov_unidadeDestino)		--
							AND ( ( (TM.tpm_operacao = @tpm_operacao or @tpm_operacao is null) and TM.tpm_operacao NOT IN (2,6) ) OR (--AND (TM.tpm_operacao NOT IN (2,6) OR (
									 ((SELECT TOP 1 uni_id from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id)
									OR (M.tpm_id = 1)		-- CAST((SELECT PA.par_valor FROM SYS_Parametros AS PA WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT))
								))
					     	AND (M.mov_GPB = @mov_gpb  or @mov_gpb IS NULL)--M.mov_GPB = isnull(@mov_gpb, M.mov_GPB)	--
					
				IF @@ROWCOUNT > 0
					BEGIN
						SELECT @cod_siafem AS cod_siafem
					END
		END
		ELSE
		BEGIN			
			SELECT @cod_siafem_old AS cod_siafem
		END
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaAgrupados]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



		--sp_helptext NEW_MovimentacaoBem_ExportaAgrupados




-- =============================================
-- Author:		Jorge Freitas
-- Create date: 11/03/11

--Alterado: Debora Cavaglieri
--Date: 17/07/2012
--Alterações para que a STP não dê timeout

--Alterado: Luana Piva
--Date:29/11/2013
--Correção agrupamentos e add parâmetros codigoCredito e codigoDebito

-- Alterado: Wellington Santana
-- Date: 13/02/2014
-- Inserido o valor mov_unidadeOrigem

-- Alterado: Nicholas de Assis
-- Date: 26/02/2014
-- Correção agrupamento

-- Alterado: Henrique
-- Date: 25/11/2014
-- Inserido o retorno tpm_operacao
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaAgrupados]
  	@uni_id INT 
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)
	, @eventoDebito INT 
	, @eventoCredito INT
	, @tpm_operacao INT
	, @tpm_situacao INT
	, @cco_codigoDebito VARCHAR(20)
	, @cco_codigoCredito VARCHAR(20)
AS
BEGIN

	SET LANGUAGE Portuguese
	DECLARE @tpm_id INT
	SELECT 
			@tpm_id= CAST(PA.par_valor AS INT) 
		FROM SYS_Parametros AS PA 
			WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';
			
	WITH MoviBem AS
	(
		SELECT 
			bem_id,
			bit_id,
			mov_observacao as Observacao,
			mov_unidadeDestino,
			mov_unidadeOrigem,
			mov_gpb,
			mov_valor,
			cco_codigoCredito,
			cco_codigoDebito,
			per_ano,
			tpm_id,
			grp_id,
			uni_id,
			per_mes	,
			mov_situacao,
			mov_nl	
			
		FROM
			MovimentacaoBem WITH(NOLOCK)
		WHERE
				mov_nl IS NULL
			AND mov_situacao in (1,4)
			AND uni_id = @uni_id
			AND per_mes = @per_mes
			AND per_ano = @per_ano	
	)

	,BemNotaEmpenho AS 
	(
		SELECT 
			ROW_NUMBER() OVER (PARTITION by BD.bem_id, BD.bit_id order by BD.bem_id, BD.bit_id) as linha
			,BD.bem_id
			,BD.bit_id
			,BD.bid_id
			,BD.bid_tipoDoc
			,isnull(BD.bid_numeroDoc, '-1') as bid_numeroDoc
			,BD.bid_porcentagem
			,BD.bid_classificacao
			,BD.bid_observacao
			,BD.bid_dataAlteracao
			,BD.bid_dataCriacao
			,BD.bid_serie
			,BD.bid_dataEmissaoDoc
			,(MO.mov_valor * isnull(BD.bid_porcentagem, 1))/100 as valor_porc
		FROM
			BemItemDocumento AS BD WITH(NOLOCK) 
		INNER JOIN MoviBem AS MO WITH(NOLOCK) 
			on MO.bem_id = BD.bem_id
			and MO.bit_id = BD.bit_id
		WHERE
			MO.mov_nl IS NULL
		AND MO.mov_situacao in (1,4)
		AND uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano	
		AND bid_tipoDoc = 4
	)
	
	,MoviBem_BemNotaEmpenho AS 
	(
		SELECT 
			DISTINCT
			M.*
			,BIC.bid_id
			,BIC.bid_tipoDoc
			,bid_numeroDoc = (CASE
					WHEN TM.tpm_operacao = 2 THEN	
						(CASE
							WHEN TM.tpm_situacao = 4 THEN				
								BIC.bid_numeroDoc
							WHEN TM.tpm_situacao IS NULL THEN
								NULL
							ELSE 
								NULL
							END
						)			
					WHEN TM.tpm_operacao IS NULL THEN
						NULL
					ELSE
						NULL
					END
			)		
			,BIC.bid_porcentagem
			,bid_classificacao = (CASE
					WHEN TM.tpm_operacao = 2 THEN	
						(CASE
							WHEN TM.tpm_situacao = 4 THEN				
								BIC.bid_classificacao
							WHEN TM.tpm_situacao IS NULL THEN
								NULL
							ELSE 
								NULL
							END
						)			
					WHEN TM.tpm_operacao IS NULL THEN
						NULL
					ELSE
						NULL
					END
			)
			,BIC.bid_observacao
			,BIC.bid_dataAlteracao
			,BIC.bid_dataCriacao
			,BIC.bid_serie
			,BIC.bid_dataEmissaoDoc
			,BIC.valor_porc
		FROM MoviBem M 
		inner JOIN TipoMovimentacao as TM WITH(NOLOCK) 
			ON TM.tpm_id = M.tpm_id 
				AND (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL)
				AND (TM.tpm_situacao = @tpm_situacao or @tpm_situacao IS NULL)
		LEFT JOIN BemNotaEmpenho BIC
			ON BIC.bem_id = M.bem_id
			AND BIC.bit_id = M.bit_id		
	)
		  
	SELECT
		ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID
		, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao
		, U.uni_codigoUGE AS UnidadeGestora
		, '00001' AS Gestao		
		, PC.pco_evento as EventoD
		
		, EventoC = (CASE (PC.pco_evento)
					WHEN 540490 THEN									
						( CASE (ABS(MB.per_ano) - ABS(SUBSTRING(MB.bid_numeroDoc,1, 4)))   
							WHEN 0 THEN PC.pco_eventoCredito
							WHEN 1 THEN '540170'
							ELSE '540172'
						END)
						
					ELSE PC.pco_eventoCredito
					END
		)
		
		, PC.pco_eventoCredito
		, MB.bid_classificacao
		, MB.cco_codigoDebito as ClassificacaoD
		, ClassificacaoC = (CASE (PC.pco_evento)
					WHEN 540490 THEN				
						cast(MB.bid_classificacao as varchar(20))
					ELSE 
						MB.cco_codigoCredito
					END
		)			
		, Valor = (CASE (MB.tpm_id)
					WHEN 114 THEN				
						SUM(MB.valor_porc)
					ELSE 
						(SUM(MB.mov_valor * ISNULL(MB.bid_porcentagem/100,1)))
					END
		)
		
		, Observacao
		, MB.mov_unidadeDestino
		, MB.mov_unidadeOrigem
		, MB.bid_numeroDoc AS InscricaoEvento
		, MB.mov_gpb
		,PC.cco_codigoCredito
		,PC.cco_codigoDebito
		,TM.tpm_operacao
	FROM
	    MoviBem_BemNotaEmpenho MB
		INNER JOIN Unidade U WITH(NOLOCK)
			ON U.uni_id = MB.uni_id
		INNER JOIN ParametroContabil PC WITH(NOLOCK)
			ON MB.cco_codigoDebito = PC.cco_codigoDebito
				AND MB.cco_codigoCredito = PC.cco_codigoCredito
				AND MB.grp_id = PC.grp_id
				AND MB.tpm_id = PC.tpm_id	
		INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
			ON MB.tpm_id = TM.tpm_id 
				AND (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL)
				AND (TM.tpm_situacao = @tpm_situacao or @tpm_situacao IS NULL)
	WHERE 
		 MB.mov_situacao in (1,4)
		AND (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)
		AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)
		AND (MB.cco_codigoCredito = @cco_codigoCredito OR @cco_codigoCredito IS NULL)
		AND (MB.cco_codigoDebito = @cco_codigoDebito OR @cco_codigoDebito IS NULL)
		AND( TM.tpm_operacao NOT IN (2,6) OR (
			 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MB.mov_unidadeDestino)) <> MB.uni_id )								
			OR MB.tpm_id = @tpm_id))
		and PC.pco_evento is not null		

		--and 		
--not exists
--		(
--			select 1 from MovimentacaoBemEmExportacao mbex 
--				where 		mbex.bem_id = mb.bem_id 
--						and mbex.mov_valor = mb.mov_valor
--						and mbex.mov_unidadeOrigem = mb.mov_unidadeOrigem 
--						and mbex.uni_id = mb.uni_id
--						and mbex.per_mes = mb.per_mes
--						and mbex.per_ano = mb.per_ano
--						and mbex.cco_codigoDebito = mb.cco_codigoDebito
--						and mbex.cco_codigoCredito = mb.cco_codigoCredito
--						and mbex.grp_id = mb.grp_id
--						AND mbex.mov_GPB = MB.mov_GPB
--						AND mbex.bit_id = mb.bit_id
--						and mbex.mov_observacao = MB.Observacao
--						and mbex.mov_unidadeDestino =MB.mov_unidadeDestino
--						and mbex.tpm_id = MB.tpm_id					
--		)


	GROUP BY
		U.uni_codigoUGE
		, PC.pco_evento
		, PC.pco_eventoCredito
		, MB.cco_codigoDebito
		, MB.cco_codigoCredito
		, Observacao
		, MB.mov_unidadeDestino
		, MB.mov_unidadeOrigem
		, MB.bid_numeroDoc
		, MB.bid_classificacao
		, MB.per_ano
		, MB.mov_gpb
		, PC.cco_codigoDebito
		, PC.cco_codigoCredito
		, MB.tpm_id
		, TM.tpm_operacao	
		, MB.mov_situacao	
END

--select * from MovimentacaoBemEmExportacao  where  mov_dataExportacao >= getdate()-9
  --order by mov_dataExportacao desc
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaAgrupadosRobo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaAgrupadosRobo]      
 --DECLARE    
   @uni_id				 INT    
 , @per_mes				 CHAR(2)    
 , @per_ano				 CHAR(4)  
 , @eventoDebito		 INT      
 , @eventoCredito		 INT     
 , @tpm_operacao		 INT      
 , @tpm_situacao		 INT      
 , @cco_codigoDebito	 VARCHAR(20)     
 , @cco_codigoCredito	 VARCHAR(20)       
 , @status_exportacao	 INT   
WITH RECOMPILE      
AS       
BEGIN      
    
DECLARE    
   @new_uni_id				INT				= NULL    
 , @new_per_mes				CHAR(2)			= NULL    
 , @new_per_ano				CHAR(4)			= NULL     
 , @new_eventoDebito		INT				= NULL    
 , @new_eventoCredito		INT				= NULL     
 , @new_tpm_operacao		INT				= NULL    
 , @new_tpm_situacao		INT				= NULL    
 , @new_cco_codigoDebito    VARCHAR(20)		= NULL      
 , @new_cco_codigoCredito   VARCHAR(20)		= NULL    
 , @new_status_exportacao   INT				= NULL ;    
    
    
      
  SET @new_uni_id				= @uni_id        
  SET @new_per_mes				= @per_mes        
  SET @new_per_ano				= @per_ano        
  SET @new_eventoDebito			= @eventoDebito      
  SET @new_eventoCredito		= @eventoCredito      
  SET @new_tpm_operacao			= @tpm_operacao      
  SET @new_tpm_situacao			= @tpm_situacao      
  SET @new_cco_codigoDebito		= @cco_codigoDebito     
  SET @new_cco_codigoCredito	= @cco_codigoCredito     
  SET @new_status_exportacao	= @status_exportacao     
    
     
 SET LANGUAGE Portuguese      
 DECLARE @tpm_id INT      
 SELECT       
   @tpm_id= CAST(PA.par_valor AS INT)       
  FROM SYS_Parametros AS PA  WITH(NOLOCK)      
   WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';      
         
 WITH MoviBem AS      
 (      
  SELECT       
   mo.bem_id,      
   mo.bit_id,      
   mov_observacao as Observacao,      
   mov_unidadeDestino,      
   mov_unidadeOrigem,      
   mov_gpb,      
   mov_valor,      
   cco_codigoCredito,      
   cco_codigoDebito,      
   per_ano,      
   tpm_id,      
   grp_id,      
   uni_id,      
   per_mes ,      
   status_exportacao,      
   descricao_exportacao,       
   mov_situacao ,      
   mov_nl,      
   mov_data      
  FROM      
   MovimentacaoBem mo WITH(NOLOCK)      
         
    inner join bemitem  bi WITH(NOLOCK)      
    on (mo.bem_id = bi.bem_id      
    and mo.bit_id = bi.bit_id)      
          
  WHERE      
   mov_nl IS NULL      
   AND mov_situacao in (1,4)      
   AND uni_id = @new_uni_id      
   AND per_mes = @new_per_mes      
   AND per_ano = @new_per_ano      
  -- and (@new_status_exportacao is null  or status_exportacao = @new_status_exportacao)      
   and bi.bit_status not in (5)      
 )      
      
 ,BemNotaEmpenho AS       
 (      
  SELECT       
   ROW_NUMBER() OVER (PARTITION by BD.bem_id, BD.bit_id order by BD.bem_id, BD.bit_id) as linha      
   ,BD.bem_id      
   ,BD.bit_id      
   ,BD.bid_id      
   ,BD.bid_tipoDoc      
   ,isnull(BD.bid_numeroDoc, '-1') as bid_numeroDoc      
   ,BD.bid_porcentagem      
   ,BD.bid_classificacao      
   ,BD.bid_observacao      
   ,BD.bid_serie      
   ,BD.bid_dataEmissaoDoc      
   ,(MO.mov_valor * isnull(BD.bid_porcentagem, 1))/100 as valor_porc      
  FROM      
   BemItemDocumento AS BD WITH(NOLOCK)       
  INNER JOIN MoviBem AS MO WITH(NOLOCK)       
   on MO.bem_id = BD.bem_id      
   and MO.bit_id = BD.bit_id      
  WHERE      
   mo.mov_nl IS NULL      
  AND mo.mov_situacao in (1,4)      
  AND uni_id = @new_uni_id      
  AND per_mes = @new_per_mes      
  AND per_ano = @new_per_ano       
  AND bid_tipoDoc = 4      
 )      
       
 ,MoviBem_BemNotaEmpenho AS       
 (      
  SELECT       
   DISTINCT      
    M.*      
   ,BIC.bid_tipoDoc      
   ,bid_numeroDoc = (CASE      
     WHEN TM.tpm_operacao = 2 THEN       
      (CASE      
       WHEN TM.tpm_situacao = 4 THEN          
        BIC.bid_numeroDoc      
       WHEN TM.tpm_situacao IS NULL THEN      
        NULL      
       ELSE       
        NULL      
       END      
      )         
     WHEN TM.tpm_operacao IS NULL THEN      
      NULL      
     ELSE      
      NULL      
     END      
   )        
   ,BIC.bid_porcentagem      
   ,bid_classificacao = (CASE      
     WHEN TM.tpm_operacao = 2 THEN       
      (CASE      
       WHEN TM.tpm_situacao = 4 THEN          
        BIC.bid_classificacao      
       WHEN TM.tpm_situacao IS NULL THEN      
        NULL      
       ELSE       
        NULL      
       END      
      )         
     WHEN TM.tpm_operacao IS NULL THEN      
      NULL      
     ELSE      
      NULL      
     END      
   )      
   ,BIC.bid_observacao      
   ,BIC.bid_serie      
   ,BIC.bid_dataEmissaoDoc      
   ,BIC.valor_porc      
  FROM MoviBem M WITH(NOLOCK)      
  inner JOIN TipoMovimentacao as TM WITH(NOLOCK)       
   ON TM.tpm_id = M.tpm_id       
    AND (TM.tpm_operacao = @new_tpm_operacao or @new_tpm_operacao IS NULL)      
    AND (TM.tpm_situacao = @new_tpm_situacao or @new_tpm_situacao IS NULL)      
  LEFT JOIN BemNotaEmpenho BIC WITH(NOLOCK)      
   ON BIC.bem_id = M.bem_id      
   AND BIC.bit_id = M.bit_id      
   where M.mov_situacao in (1,4)      
 )      
          
 SELECT --top 3000      
  ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID      
  , REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao      
  , U.uni_codigoUGE AS UnidadeGestora      
  , '00001' AS Gestao        
  , PC.pco_evento as EventoD      
        
  , EventoC = (CASE (PC.pco_evento)      
     WHEN 540490 THEN               
      ( CASE (ABS(MB.per_ano) - ABS(SUBSTRING(MB.bid_numeroDoc,1, 4)))         
       WHEN 0 THEN PC.pco_eventoCredito      
       WHEN 1 THEN '540170'      
       ELSE '540172'      
      END)      
            
     ELSE PC.pco_eventoCredito      
     END      
  )      
        
  , PC.pco_eventoCredito      
  , MB.bid_classificacao      
  , MB.cco_codigoDebito as ClassificacaoD      
  , ClassificacaoC = (CASE (PC.pco_evento)      
     WHEN 540490 THEN          
      cast(MB.bid_classificacao as varchar(20))      
     ELSE       
      MB.cco_codigoCredito      
     END      
  )         
  , Valor = (CASE (MB.tpm_id)      
     WHEN 114 THEN          
      SUM(MB.valor_porc)      
     ELSE       
      (SUM(MB.mov_valor * ISNULL(MB.bid_porcentagem/100,1)))      
     END      
  )        
  , Observacao      
  , MB.mov_unidadeDestino      
  , MB.uni_id as mov_unidadeOrigem      
  , MB.bid_numeroDoc AS InscricaoEvento      
  , MB.mov_gpb      
  , PC.cco_codigoCredito      
  , PC.cco_codigoDebito      
  , TM.tpm_operacao      
  , status_exportacao = (CASE (MB.status_exportacao)              
         WHEN 0 THEN 'Pendente'      
         WHEN 1 THEN 'Aguardando Processamento'      
         WHEN 2 THEN 'Processando'      
         WHEN 3 THEN 'Finalizado'      
         WHEN 4 THEN 'Erro no Envio'      
         WHEN 5 THEN 'Erro parcial'      
         WHEN 6 THEN 'Erro Total'      
         WHEN 7 THEN 'Erro no Update'      
         WHEN 8 THEN 'Erro no LoginSiafem'      
         WHEN 9 THEN 'Erro no Documento'      
         WHEN 10 THEN 'Erro Periodo Encerrado'      
         else  'Pendente'      
         end)      
      
  , MB.descricao_exportacao       
  ,MB.bem_id         
 FROM      
     MoviBem_BemNotaEmpenho MB WITH(NOLOCK)      
  INNER JOIN Unidade U WITH(NOLOCK)      
   ON U.uni_id = MB.uni_id      
  INNER JOIN ParametroContabil PC WITH(NOLOCK)      
   ON MB.cco_codigoDebito = PC.cco_codigoDebito      
    AND MB.cco_codigoCredito = PC.cco_codigoCredito      
    AND MB.grp_id = PC.grp_id      
    AND MB.tpm_id = PC.tpm_id       
  INNER JOIN TipoMovimentacao TM WITH (NOLOCK)      
   ON MB.tpm_id = TM.tpm_id       
    AND (TM.tpm_operacao = @new_tpm_operacao or @new_tpm_operacao IS NULL)      
    AND (TM.tpm_situacao = @new_tpm_situacao or @new_tpm_situacao IS NULL)      
 WHERE       
  MB.mov_situacao in (1,4)      
 AND  (PC.pco_evento = @new_eventoDebito OR @new_eventoDebito IS NULL)      
  AND (PC.pco_eventoCredito = @new_eventoCredito OR @new_eventoCredito IS NULL)      
  AND (MB.cco_codigoCredito = @new_cco_codigoCredito OR @new_cco_codigoCredito IS NULL)      
  AND (MB.cco_codigoDebito = @new_cco_codigoDebito OR @new_cco_codigoDebito IS NULL)      
  AND( TM.tpm_operacao NOT IN (2,6) OR (      
    ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MB.mov_unidadeDestino) ) <> MB.uni_id )              
   OR MB.tpm_id = @tpm_id))      
  and PC.pco_evento is not null        
      
 GROUP BY      
    MB.bem_id       
  , MB.tpm_id        
  , PC.pco_evento      
  , PC.pco_eventoCredito      
  , MB.cco_codigoDebito      
  , MB.cco_codigoCredito      
  , Observacao      , MB.mov_unidadeDestino      
  , MB.uni_id      
  , MB.bid_numeroDoc      
  , Mb.bid_porcentagem      
  , MB.bid_classificacao      
  , MB.per_ano      
  , MB.mov_gpb      
  , PC.cco_codigoDebito      
  , PC.cco_codigoCredito      
  , U.uni_codigoUGE      
  , TM.tpm_operacao       
  , status_exportacao      
  , descricao_exportacao       
  , MB.grp_id      
END      
GO
/****** Object:  StoredProcedure [dbo].[NEW_MOVIMENTACAOBEM_EXPORTAAGRUPADOSROBO_TUNING]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MOVIMENTACAOBEM_EXPORTAAGRUPADOSROBO_TUNING]
  	  @uni_id INT 
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)
	, @eventoDebito INT 
	, @eventoCredito INT
	, @tpm_operacao INT
	, @tpm_situacao INT
	, @cco_codigoDebito VARCHAR(20)
	, @cco_codigoCredito VARCHAR(20)
	, @status_exportacao int
AS
BEGIN

	SET LANGUAGE Portuguese
	DECLARE @tpm_id INT
	SELECT 
			@tpm_id= CAST(PA.par_valor AS INT) 
		FROM SYS_Parametros AS PA  WITH(NOLOCK)
			WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';
	
CREATE TABLE #TB_MB(	
bem_id	bigint	,
bit_id	int	,
mov_observacao	varchar	(MAX),
mov_unidadeDestino	int	,
mov_unidadeOrigem	int	,
mov_GPB	varchar	(20),
mov_valor	money,
cco_codigoCredito	varchar	(20),
cco_codigoDebito	varchar	(20),
per_ano	char	(4),
tpm_id	int	,
grp_id	int	,
uni_id	int	,
per_mes	char	(2),
status_exportacao	int	,
descricao_exportacao	varchar	(MAX),
mov_situacao	tinyint	,
mov_nl	char	(11),
mov_data	date	
)
INSERT INTO #TB_MB
SELECT 
			mo.bem_id,
			mo.bit_id,
			mov_observacao as Observacao,
			mov_unidadeDestino,
			mov_unidadeOrigem,
			mov_gpb,
			mov_valor,
			cco_codigoCredito,
			cco_codigoDebito,
			per_ano,
			tpm_id,
			grp_id,
			uni_id,
			per_mes	,
			status_exportacao,
			descricao_exportacao,	
			mov_situacao	,
			mov_nl,
			mov_data
FROM
			MovimentacaoBem mo WITH(NOLOCK)
		
WHERE
			mov_nl IS NULL
			AND mov_situacao in (1,4)
			AND uni_id = @uni_id
			AND per_mes = @per_mes
			AND per_ano = @per_ano
			--and (@status_exportacao is null  or status_exportacao = @status_exportacao)
			--and bi.bit_status not in (5)	
		
	;WITH MoviBem AS
	(
		SELECT 
			mo.bem_id,
			mo.bit_id,
			mov_observacao as Observacao,
			mov_unidadeDestino,
			mov_unidadeOrigem,
			mov_gpb,
			mov_valor,
			cco_codigoCredito,
			cco_codigoDebito,
			per_ano,
			tpm_id,
			grp_id,
			uni_id,
			per_mes	,
			status_exportacao,
			descricao_exportacao,	
			mov_situacao	,
			mov_nl,
			mov_data
		FROM
			#TB_MB mo WITH(NOLOCK)
			
			 inner join bemitem		bi WITH(NOLOCK)
			 on (mo.bem_id = bi.bem_id
			 and mo.bit_id = bi.bit_id)
			 
		WHERE
			--mov_nl IS NULL
			--AND mov_situacao in (1,4)
			--AND uni_id = @uni_id
			--AND per_mes = @per_mes
			--AND per_ano = @per_ano
			(@status_exportacao is null  or status_exportacao = @status_exportacao)
			and bi.bit_status not in (5)
	)

	,BemNotaEmpenho AS 
	(
		SELECT 
			ROW_NUMBER() OVER (PARTITION by BD.bem_id, BD.bit_id order by BD.bem_id, BD.bit_id) as linha
			,BD.bem_id
			,BD.bit_id
			,BD.bid_id
			,BD.bid_tipoDoc
			,isnull(BD.bid_numeroDoc, '-1') as bid_numeroDoc
			,BD.bid_porcentagem
			,BD.bid_classificacao
			,BD.bid_observacao
			,BD.bid_serie
			,BD.bid_dataEmissaoDoc
			,(MO.mov_valor * isnull(BD.bid_porcentagem, 1))/100 as valor_porc
		FROM
			BemItemDocumento AS BD WITH(NOLOCK) 
		INNER JOIN MoviBem AS MO WITH(NOLOCK) 
			on MO.bem_id = BD.bem_id
			and MO.bit_id = BD.bit_id
		WHERE
			mo.mov_nl IS NULL
		AND mo.mov_situacao in (1,4)
		AND uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano	
		AND bid_tipoDoc = 4
	)
	
	,MoviBem_BemNotaEmpenho AS 
	(
		SELECT 
			DISTINCT
			 M.*
			,BIC.bid_tipoDoc
			,bid_numeroDoc = (CASE
					WHEN TM.tpm_operacao = 2 THEN	
						(CASE
							WHEN TM.tpm_situacao = 4 THEN				
								BIC.bid_numeroDoc
							WHEN TM.tpm_situacao IS NULL THEN
								NULL
							ELSE 
								NULL
							END
						)			
					WHEN TM.tpm_operacao IS NULL THEN
						NULL
					ELSE
						NULL
					END
			)		
			,BIC.bid_porcentagem
			,bid_classificacao = (CASE
					WHEN TM.tpm_operacao = 2 THEN	
						(CASE
							WHEN TM.tpm_situacao = 4 THEN				
								BIC.bid_classificacao
							WHEN TM.tpm_situacao IS NULL THEN
								NULL
							ELSE 
								NULL
							END
						)			
					WHEN TM.tpm_operacao IS NULL THEN
						NULL
					ELSE
						NULL
					END
			)
			,BIC.bid_observacao
			,BIC.bid_serie
			,BIC.bid_dataEmissaoDoc
			,BIC.valor_porc
		FROM MoviBem M WITH(NOLOCK)
		inner JOIN TipoMovimentacao as TM WITH(NOLOCK) 
			ON TM.tpm_id = M.tpm_id 
				AND (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL)
				AND (TM.tpm_situacao = @tpm_situacao or @tpm_situacao IS NULL)
		LEFT JOIN BemNotaEmpenho BIC WITH(NOLOCK)
			ON BIC.bem_id = M.bem_id
			AND BIC.bit_id = M.bit_id
			where M.mov_situacao in (1,4)
	)
		  
	SELECT top 3000
		ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID
		, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao
		, U.uni_codigoUGE AS UnidadeGestora
		, '00001' AS Gestao		
		, PC.pco_evento as EventoD
		
		, EventoC = (CASE (PC.pco_evento)
					WHEN 540490 THEN									
						( CASE (ABS(MB.per_ano) - ABS(SUBSTRING(MB.bid_numeroDoc,1, 4)))   
							WHEN 0 THEN PC.pco_eventoCredito
							WHEN 1 THEN '540170'
							ELSE '540172'
						END)
						
					ELSE PC.pco_eventoCredito
					END
		)
		
		, PC.pco_eventoCredito
		, MB.bid_classificacao
		, MB.cco_codigoDebito as ClassificacaoD
		, ClassificacaoC = (CASE (PC.pco_evento)
					WHEN 540490 THEN				
						cast(MB.bid_classificacao as varchar(20))
					ELSE 
						MB.cco_codigoCredito
					END
		)			
		, Valor = (CASE (MB.tpm_id)
					WHEN 114 THEN				
						SUM(MB.valor_porc)
					ELSE 
						(SUM(MB.mov_valor * ISNULL(MB.bid_porcentagem/100,1)))
					END
		)		
		, Observacao
		, MB.mov_unidadeDestino
		, MB.uni_id as mov_unidadeOrigem
		, MB.bid_numeroDoc AS InscricaoEvento
		, MB.mov_gpb
		, PC.cco_codigoCredito
		, PC.cco_codigoDebito
		, TM.tpm_operacao
		, status_exportacao = (CASE (MB.status_exportacao)								
								 WHEN 0 THEN 'Pendente'
								 WHEN 1 THEN 'Aguardando Processamento'
								 WHEN 2 THEN 'Processando'
								 WHEN 3 THEN 'Finalizado'
								 WHEN 4 THEN 'Erro no Envio'
								 WHEN 5 THEN 'Erro parcial'
								 WHEN 6 THEN 'Erro Total'
								 WHEN 7 THEN 'Erro no Update'
								 WHEN 8 THEN 'Erro no LoginSiafem'
								 WHEN 9 THEN 'Erro no Documento'
								 WHEN 10 THEN 'Erro Periodo Encerrado'
								 else  'Pendente'
								 end)

		, MB.descricao_exportacao	
		,MB.bem_id 		
	FROM
	    MoviBem_BemNotaEmpenho MB WITH(NOLOCK)
		INNER JOIN Unidade U WITH(NOLOCK)
			ON U.uni_id = MB.uni_id
		INNER JOIN ParametroContabil PC WITH(NOLOCK)
			ON MB.cco_codigoDebito = PC.cco_codigoDebito
				AND MB.cco_codigoCredito = PC.cco_codigoCredito
				AND MB.grp_id = PC.grp_id
				AND MB.tpm_id = PC.tpm_id	
		INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
			ON MB.tpm_id = TM.tpm_id 
				AND (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL)
				AND (TM.tpm_situacao = @tpm_situacao or @tpm_situacao IS NULL)
	WHERE 
	 MB.mov_situacao in (1,4)
	AND	 (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)
		AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)
		AND (MB.cco_codigoCredito = @cco_codigoCredito OR @cco_codigoCredito IS NULL)
		AND (MB.cco_codigoDebito = @cco_codigoDebito OR @cco_codigoDebito IS NULL)
		AND( TM.tpm_operacao NOT IN (2,6) OR (
			 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MB.mov_unidadeDestino) ) <> MB.uni_id )								
			OR MB.tpm_id = @tpm_id))
		and PC.pco_evento is not null		

	GROUP BY
		  MB.bem_id 
		, MB.tpm_id		
		, PC.pco_evento
		, PC.pco_eventoCredito
		, MB.cco_codigoDebito
		, MB.cco_codigoCredito
		, Observacao
		, MB.mov_unidadeDestino
		, MB.uni_id
		, MB.bid_numeroDoc
		, Mb.bid_porcentagem
		, MB.bid_classificacao
		, MB.per_ano
		, MB.mov_gpb
		, PC.cco_codigoDebito
		, PC.cco_codigoCredito
		, U.uni_codigoUGE
		, TM.tpm_operacao	
		, status_exportacao
		, descricao_exportacao	
		, MB.grp_id

DROP TABLE #TB_MB
END





GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaBaixas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  Rafael Amado    
-- Create date: 08/12/2010    
-- Description: Função que cria o XML usado para criação da NL para movimentação que não seja     
--    incorporação e transferências. Vide manual do SIAFEM v1.2.6,     
--    item SIAFNL001 – NL Nota de Lançamento, página 26.    
    
-- Alterado: Allex Rocha    
-- Date:  05/12/2014    
--    Alteração para pegar o ID da movimentação do SIAFEM e split do campo Observacao    
-- =============================================    
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaBaixas]    
 @uni_id INT    
 , @per_mes CHAR(2)    
 , @per_ano CHAR(4)    
 , @eventoDebito INT    
 , @eventoCredito INT    
 , @mov_observacao VARCHAR(MAX)    
 , @cco_codigoDebito VARCHAR(20)    
 , @cco_codigoCredito VARCHAR(20)    
 , @dataEmissao DATETIME    
 , @cod_siafem VARCHAR(30)    
--WITH RECOMPILE    
AS    
BEGIN    
 SET LANGUAGE Portuguese    
    
 DECLARE @data DATETIME    
 DECLARE @ultimodia DATETIME    
    
 SET @data = CONVERT(char(8),@per_ano + @per_mes + '01',112)    
 SET @ultimodia =ISNULL(@dataEmissao, dateadd(d,-1,dateadd(m,1,CONVERT(datetime,CONVERT(char(6),@data,112) + '01',112))))    
    
 ;WITH SIAFNL001(ID, DataEmissao, UnidadeGestora, Gestao, CgcCpfUgfav, GestaoFav, Evento, InscricaoEvento, Classificacao, Fonte, Valor, Observacao, NotaFiscal, cod_siafem) AS (    
  SELECT    
   ID    
   , DataEmissao    
   , UnidadeGestora    
   , Gestao    
   , '' AS CgcCpfUgfav    
   , '' AS GestaoFav    
   , Evento    
   , '' as InscricaoEvento    
   , Classificacao    
   , '' as Fonte    
   , REPLACE(CONVERT (varchar(20), CONVERT(money, Valor)), '.', '')    
   , Observacao     
   , '' as NotaFiscal    
   , cod_siafem    
  FROM    
   (SELECT    
    IDC =  (ROW_NUMBER() OVER (ORDER BY pco_evento)) + ((ROW_NUMBER() OVER (ORDER BY pco_evento))-1)    
    , IDD = ((ROW_NUMBER() OVER (ORDER BY pco_evento)) + (ROW_NUMBER() OVER (ORDER BY pco_evento)))    
    --, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao    
    , REPLACE(UPPER(CONVERT(CHAR,@ultimodia, 106)), ' ', '') AS DataEmissao    
    , U.uni_codigoUGE AS UnidadeGestora    
    , '00001' AS Gestao      
    , PC.pco_evento as EventoD    
    , PC.pco_eventoCredito as EventoC    
    , M.cco_codigoDebito as ClassificacaoD    
    , M.cco_codigoCredito as ClassificacaoC    
    , SUM(M.mov_valor) as Valor    
    , M.mov_observacao as Observacao    
    , M.mov_unidadeDestino    
    , M.cod_siafem    
   FROM    
    MovimentacaoBem M WITH(NOLOCK)    
    INNER JOIN Unidade U WITH(NOLOCK)    
     ON U.uni_id = M.uni_id    
    INNER JOIN ParametroContabil PC WITH(NOLOCK)    
     ON M.cco_codigoDebito = PC.cco_codigoDebito    
      AND M.cco_codigoCredito = PC.cco_codigoCredito    
      AND M.grp_id = PC.grp_id    
      AND M.tpm_id = PC.tpm_id      
    INNER JOIN TipoMovimentacao TM WITH(NOLOCK)     
      ON M.tpm_id = TM.tpm_id     
       AND TM.tpm_operacao IN(3,10)    
   WHERE     
    M.mov_nl IS NULL    
    AND M.mov_situacao in (1,4)    
    AND M.uni_id = @uni_id    
    AND M.per_mes = @per_mes    
    AND M.per_ano = @per_ano    
    AND (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)    
    AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)    
    AND (M.mov_observacao = @mov_observacao OR @mov_observacao IS NULL)    
    AND (M.cco_codigoDebito = @cco_codigoDebito OR @cco_codigoDebito IS NULL)    
    AND (M.cco_codigoCredito = @cco_codigoCredito OR @cco_codigoCredito IS NULL)    
    AND M.cod_siafem = @cod_siafem    
   GROUP BY    
    U.uni_codigoUGE    
    , PC.pco_evento    
    , PC.pco_eventoCredito    
    , M.cco_codigoDebito    
    , M.cco_codigoCredito    
    , M.mov_observacao    
    , M.mov_unidadeDestino    
    , M.cod_siafem) AS T1      
   UNPIVOT (Evento FOR Eventos IN ( EventoC, EventoD)) AS evt    
   UNPIVOT (Classificacao FOR Classificacoes IN (ClassificacaoC, ClassificacaoD)) AS cla    
   UNPIVOT (ID FOR IDs IN (IDC, IDD)) AS ids     
  WHERE     
   RIGHT(Eventos,1) =  RIGHT(Classificacoes,1)    
   AND RIGHT(Eventos,1) =  RIGHT(IDs,1)    
 )    
    
 SELECT    
  (SELECT 'SIAFNL001' FOR XML PATH('cdMsg'), TYPE)    
  , (SELECT    
   (SELECT     
    ID AS "@ID"    
    , DataEmissao AS "DataEmissao"    
    , UnidadeGestora AS "UnidadeGestora"    
    , Gestao AS "Gestao"    
    , CgcCpfUgfav AS "CgcCpfUgfav"    
    , GestaoFav AS "GestaoFav"      
   FROM     
    (SELECT     
     ID = T1.cod_siafem    
     , T1.DataEmissao    
     , T1.UnidadeGestora    
     , T1.Gestao    
     , T1.CgcCpfUgfav    
     , T1.GestaoFav     
     FROM     
     SIAFNL001 T1    
     --WHERE     
     --T1.ID = principal.ID     
    GROUP BY     
     T1.cod_siafem    
     , T1.DataEmissao    
     , T1.UnidadeGestora    
     , T1.Gestao    
     , T1.CgcCpfUgfav    
     , T1.GestaoFav) AS DOC    
   FOR XML PATH('documento'), TYPE)    
   ,    
   (SELECT    
    (SELECT           
    (SELECT    
     ID AS "@ID"    
     , Evento AS "Evento"    
     , InscricaoEvento AS "InscricaoEvento"    
     , Classificacao AS "Classificacao"    
     , Fonte AS "Fonte"    
     , Valor AS "Valor"    
    FROM    
     (SELECT     
      T1.ID    
      , T1.Evento    
      , T1.InscricaoEvento    
      , T1.Classificacao    
      , T1.Fonte    
      , T1.Valor     
      FROM     
      SIAFNL001 AS T1    
      --WHERE    
     -- T1.ID = principal.ID    
     ) AS EVT    
    FOR XML PATH('desc'), TYPE)    
   FOR XML PATH('Repeticao'), TYPE)    
   FOR XML PATH('Evento'), TYPE),    
   (    
    SELECT    
    (    
     SELECT     
     (    
      SELECT ID AS "obs/@ID", Observacao AS "obs/Observacao"    
      FROM    
       (    
        SELECT TOP 3 s.Id, s.Value as 'Observacao'    
        FROM FN_Split(CONVERT(VARCHAR(MAX), (    
                  SELECT TOP 1 T2.Observacao    
                  FROM SIAFNL001 AS T2    
                  GROUP BY T2.Observacao    
                 ))) AS s    
       ) AS OBS    
      FOR XML PATH(''), TYPE    
     )FOR XML PATH('Repeticao'), TYPE    
    )    
   FOR XML PATH('Observacao'), TYPE)    
   , '' AS "NotaFiscal/Repeticao"    
  FOR XML PATH('SiafemDocNL'), TYPE)    
 FOR XML PATH(''), ROOT('SIAFDOC')    
END    
    
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaTransferidos]    Script Date: 03/11/2011 19:02:38 ******/    
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaBaixasCessao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Debora Cavaglieri  
-- Create date: 18/03/2011  
-- Description: Função que cria o XML usado para criação da NL para movimentação   
--              de baixa de cessão.   
--              Vide manual do SIAFEM v1.2.6, item SIAFNL001 – NL Nota de Lançamento, página 26.  
  
-- Alterado: Allex Rocha  
-- Date:  05/12/2014  
--    Alteração para pegar o ID da movimentação do SIAFEM e split do campo Observacao  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaBaixasCessao]  
 @uni_id INT  
 , @per_mes CHAR(2)  
 , @per_ano CHAR(4)  
 , @eventoDebito INT  
 , @eventoCredito INT  
 , @mov_observacao VARCHAR(MAX)  
 , @cco_codigoDebito VARCHAR(20)  
 , @cco_codigoCredito VARCHAR(20)  
 , @dataEmissao DATETIME  
 , @cod_siafem VARCHAR(30)  
AS  
BEGIN  
 SET LANGUAGE Portuguese  
  
 declare @ultimodia datetime  
 declare @data datetime  
  
 SET @data = CONVERT(char(8),@per_ano + @per_mes + '01',112)  
 SET @ultimodia =ISNULL(@dataEmissao, dateadd(d,-1,dateadd(m,1,CONVERT(datetime,CONVERT(char(6),@data,112) + '01',112))))  
  
 ;WITH SIAFNL001X(ID, DataEmissao, UnidadeGestora, Gestao, CgcCpfUgfav, GestaoFav, Evento, InscricaoEvento, Classificacao, Fonte, Valor, Observacao, NotaFiscal, cod_siafem)  
 AS (  
  SELECT  
   ID  
   , DataEmissao  
   , UnidadeGestora  
   , Gestao  
   , '' AS CgcCpfUgfav  
   , '' AS GestaoFav  
   , Evento  
   , '' as InscricaoEvento  
   , Classificacao  
   , '' as Fonte  
   , REPLACE(CONVERT (varchar(20), CONVERT(money, Valor)), '.', '')  
   , Observacao   
   , '' as NotaFiscal  
   , cod_siafem  
  FROM  
   (SELECT  
    IDC =  (ROW_NUMBER() OVER (ORDER BY pco_evento)) + ((ROW_NUMBER() OVER (ORDER BY pco_evento))-1)  
    , IDD = ((ROW_NUMBER() OVER (ORDER BY pco_evento)) + (ROW_NUMBER() OVER (ORDER BY pco_evento)))  
    --, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao  
    , REPLACE(UPPER(CONVERT(CHAR,@ultimodia, 106)), ' ', '') AS DataEmissao  
    , U.uni_codigoUGE AS UnidadeGestora  
    , '00001' AS Gestao    
    , PC.pco_evento as EventoD  
    , PC.pco_eventoCredito as EventoC  
    , M.cco_codigoDebito as ClassificacaoD  
    , M.cco_codigoCredito as ClassificacaoC  
    , SUM(M.mov_valor) as Valor  
    , M.mov_observacao as Observacao  
    , M.mov_unidadeDestino  
    , M.cod_siafem  
   FROM  
    MovimentacaoBem M WITH(NOLOCK)  
    INNER JOIN Unidade U WITH(NOLOCK)  
     ON U.uni_id = M.uni_id  
    INNER JOIN ParametroContabil PC WITH(NOLOCK)  
     ON M.cco_codigoDebito = PC.cco_codigoDebito  
      AND M.cco_codigoCredito = PC.cco_codigoCredito  
      AND M.grp_id = PC.grp_id  
      AND M.tpm_id = PC.tpm_id    
    INNER JOIN TipoMovimentacao TM WITH(NOLOCK)   
      ON M.tpm_id = TM.tpm_id   
       AND TM.tpm_operacao = 11  
   WHERE   
    M.mov_nl IS NULL  
    AND M.mov_situacao in (1,4)  
    AND M.uni_id = @uni_id  
    AND M.per_mes = @per_mes  
    AND M.per_ano = @per_ano  
    AND (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)  
    AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)  
    AND (M.mov_observacao = @mov_observacao OR @mov_observacao IS NULL)  
    AND (M.cco_codigoDebito = @cco_codigoDebito OR @cco_codigoDebito IS NULL)  
    AND (M.cco_codigoCredito = @cco_codigoCredito OR @cco_codigoCredito IS NULL)  
    AND M.cod_siafem = @cod_siafem  
   GROUP BY  
    U.uni_codigoUGE  
    , PC.pco_evento  
    , PC.pco_eventoCredito  
    , M.cco_codigoDebito  
    , M.cco_codigoCredito  
    , M.mov_observacao  
    , M.mov_unidadeDestino   
    , M.cod_siafem  
    ) AS T1  
   UNPIVOT (Evento FOR Eventos IN ( EventoC, EventoD)) AS evt  
   UNPIVOT (Classificacao FOR Classificacoes IN (ClassificacaoC, ClassificacaoD)) AS cla  
   UNPIVOT (ID FOR IDs IN (IDC, IDD)) AS ids   
  WHERE   
   RIGHT(Eventos,1) =  RIGHT(Classificacoes,1)  
   AND RIGHT(Eventos,1) =  RIGHT(IDs,1)  
 )  
   
 , SIAFNL001  
  (ID, DataEmissao, UnidadeGestora, Gestao, CgcCpfUgfav, GestaoFav, Evento, InscricaoEvento, Classificacao, Fonte, Valor, Observacao, NotaFiscal, cod_siafem)  
  as  
   
  (select T1.ID   
   , T1.DataEmissao  
   , T1.UnidadeGestora  
   , T1.Gestao  
   , T1.CgcCpfUgfav  
   , T1.GestaoFav  
   , T1.Evento  
   , T1.InscricaoEvento  
   , T1.Classificacao  
   , T1.Fonte  
   , T1.Valor  
   , T1.Observacao  
   , T1.NotaFiscal  
   , T1.cod_siafem  
    FROM SIAFNL001X AS T1   
 UNION   
   
  SELECT  
   MAX(T1.ID) + 1 AS ID    
   , T1.DataEmissao  
   , T1.UnidadeGestora  
   , T1.Gestao  
   , T1.CgcCpfUgfav  
   , T1.GestaoFav  
   , (SELECT par_valor FROM SYS_Parametros WHERE par_chave = 'EVENTO_COMPLEMENTO_BAIXA_CESSAO') AS Evento  
   , '' AS InscricaoEvento  
   , (SELECT par_valor FROM SYS_Parametros WHERE par_chave = 'CONTA_COMPLEMENTO_CESSAO') AS Classificacao  
   , '' AS Fonte  
   , T1.Valor  
   , T1.Observacao  
   , T1.NotaFiscal  
   , T1.cod_siafem   
  FROM   
   SIAFNL001X as T1  
  GROUP BY  
    T1.DataEmissao  
   , T1.UnidadeGestora  
   , T1.Gestao  
   , T1.CgcCpfUgfav  
   , T1.GestaoFav  
   , T1.InscricaoEvento  
   , T1.Fonte  
   , T1.Valor  
   , T1.Observacao  
   , T1.NotaFiscal  
   , T1.cod_siafem     
  )  
   
 SELECT  
  (SELECT 'SIAFNL001' FOR XML PATH('cdMsg'), TYPE)  
  , (SELECT  
   (SELECT   
    ID AS "@ID"  
    , DataEmissao AS "DataEmissao"  
    , UnidadeGestora AS "UnidadeGestora"  
    , Gestao AS "Gestao"  
    , CgcCpfUgfav AS "CgcCpfUgfav"  
    , GestaoFav AS "GestaoFav"  
   FROM   
    (SELECT   
     ID = T1.cod_siafem  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav   
     FROM   
     SIAFNL001 T1  
     --WHERE   
     --T1.ID = principal.ID   
    GROUP BY   
     T1.cod_siafem  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav) AS DOC  
   FOR XML PATH('documento'), TYPE)  
   ,  
   (SELECT  
    (SELECT         
    (SELECT  
     ID AS "@ID"  
     , Evento AS "Evento"  
     , InscricaoEvento AS "InscricaoEvento"  
     , Classificacao AS "Classificacao"  
     , Fonte AS "Fonte"  
     , Valor AS "Valor"  
    FROM  
     (SELECT   
      T1.ID  
      , T1.Evento  
      , T1.InscricaoEvento  
      , T1.Classificacao  
      , T1.Fonte  
      , T1.Valor   
      FROM   
      SIAFNL001 AS T1  
      --WHERE  
     -- T1.ID = principal.ID  
     ) AS EVT  
    FOR XML PATH('desc'), TYPE)      
   FOR XML PATH('Repeticao'), TYPE)  
   FOR XML PATH('Evento'), TYPE),  
   (  
    SELECT  
    (  
     SELECT   
     (  
      SELECT ID AS "obs/@ID", Observacao AS "obs/Observacao"  
      FROM  
       (  
        SELECT TOP 3 s.Id, s.Value as 'Observacao'  
        FROM FN_Split(CONVERT(VARCHAR(MAX), (  
                  SELECT TOP 1 T2.Observacao  
                  FROM SIAFNL001 AS T2  
                  GROUP BY T2.Observacao  
                 ))) AS s  
       ) AS OBS  
      FOR XML PATH(''), TYPE  
     )FOR XML PATH('Repeticao'), TYPE  
    )  
   FOR XML PATH('Observacao'), TYPE)  
   , '' AS "NotaFiscal/Repeticao"  
  FOR XML PATH('SiafemDocNL'), TYPE)  
 FOR XML PATH(''), ROOT('SIAFDOC')  
END  
  
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaTransferidos]    Script Date: 03/11/2011 19:02:38 ******/  
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaCessao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  Jorge Freitas    
-- Create date: 18/03/2011    
-- Description: Função que cria o XML usado para criação da NL para movimentação de     
--    CESSAO. Vide manual do SIAFEM v1.2.6,     
--    item SIAFNL001 – NL Nota de Lançamento, página 26.    
    
-- Alterado: Allex Rocha    
-- Date:  05/12/2014    
--    Alteração para pegar o ID da movimentação do SIAFEM e split do campo Observacao    
-- =============================================    
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaCessao]    
 @uni_id INT    
 , @per_mes CHAR(2)    
 , @per_ano CHAR(4)    
 , @eventoDebito INT    
 , @eventoCredito INT     
 , @cco_credito VARCHAR (20)    
 , @cco_debito VARCHAR (20)    
 , @mov_observacao VARCHAR(MAX)    
 , @mov_GPB VARCHAR (20)    
 , @dataEmissao DATETIME    
 , @cod_siafem VARCHAR(30)    
AS    
BEGIN    
 SET LANGUAGE Portuguese    
    
 DECLARE @ultimodia datetime    
 DECLARE @data datetime    
    
 SET @data = CONVERT(char(8),@per_ano + @per_mes + '01',112)    
 SET @ultimodia =ISNULL(@dataEmissao, dateadd(d,-1,dateadd(m,1,CONVERT(datetime,CONVERT(char(6),@data,112) + '01',112))))    
    
 ;WITH SIAFNL001X(ID, DataEmissao, UnidadeGestora, Gestao, CgcCpfUgfav, GestaoFav, Evento, InscricaoEvento, Classificacao, Fonte, Valor, Observacao, NotaFiscal, cod_siafem)    
 AS (SELECT     
   ID     
   , DataEmissao    
   , UnidadeGestora    
   , Gestao    
   , CgcCpfUgfav    
   , '' as  GestaoFav    
   , Evento    
   , InscricaoEvento    
   , Classificacao    
   , '' as Fonte    
   , REPLACE(CONVERT (varchar(20), CONVERT(money, Valor)), '.', '')    
   , Observacao    
   , '' as NotaFiscal    
   , cod_siafem    
  FROM     
   (SELECT    
    ID     
    , DataEmissao    
    , UnidadeGestora    
    , Gestao    
    , CgcCpfUgfav    
    , Evento    
    , InscricaoEvento    
    , Classificacao    
    , Valor    
    , Observacao    
    , mov_unidadeDestino    
    , cod_siafem    
   FROM    
     (SELECT    
     IDC =  (ROW_NUMBER() OVER (ORDER BY pco_evento)) + ((ROW_NUMBER() OVER (ORDER BY pco_evento))-1)    
     , IDD = ((ROW_NUMBER() OVER (ORDER BY pco_evento)) + (ROW_NUMBER() OVER (ORDER BY pco_evento)))    
     --, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao    
     , REPLACE(UPPER(CONVERT(CHAR,@ultimodia, 106)), ' ', '') AS DataEmissao    
     , U.uni_codigoUGE AS UnidadeGestora    
     , '00001' AS Gestao      
     , PC.pco_evento as EventoD    
     , PC.pco_eventoCredito AS EventoC    
     , M.cco_codigoDebito as ClassificacaoD    
     , M.cco_codigoCredito as ClassificacaoC     
     , (SUM(M.mov_valor)) as Valor   -- *********************************    
     , M.mov_observacao as Observacao    
     , M.mov_unidadeDestino    
     , '' as InscricaoEvento    
     , M.mov_GPB as CgcCpfUgfav    
     , '' as GestaoFav    
     , M.cod_siafem    
    FROM    
     MovimentacaoBem M WITH(NOLOCK)    
     INNER JOIN Unidade U WITH(NOLOCK)    
      ON U.uni_id = M.uni_id    
     INNER JOIN ParametroContabil PC WITH(NOLOCK)    
      ON M.cco_codigoDebito = PC.cco_codigoDebito    
       AND M.cco_codigoCredito = PC.cco_codigoCredito    
       AND M.grp_id = PC.grp_id    
       AND M.tpm_id = PC.tpm_id     
     INNER JOIN     
       TipoMovimentacao TM WITH(NOLOCK)     
      ON M.tpm_id = TM.tpm_id     
       AND TM.tpm_operacao = 7    
    WHERE     
     M.mov_nl IS NULL    
     AND M.mov_situacao in (1,4)    
     AND M.uni_id = @uni_id    
     AND M.per_mes = @per_mes    
     AND M.per_ano = @per_ano    
     AND (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)    
     AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)    
     AND (PC.cco_codigoDebito = @cco_debito OR @cco_debito IS NULL)    
     AND (PC.cco_codigoCredito = @cco_credito OR @cco_credito IS NULL)    
     AND (M.mov_observacao = @mov_observacao OR @mov_observacao IS NULL)    
     AND (M.mov_GPB = @mov_GPB OR @mov_GPB IS NULL)    
     AND M.cod_siafem = @cod_siafem    
    GROUP BY         U.uni_codigoUGE    
     , PC.pco_evento    
     , PC.pco_eventoCredito    
     , M.cco_codigoDebito    
     , M.cco_codigoCredito    
     , M.mov_observacao    
     , M.mov_unidadeDestino    
     , M.per_ano    
     , M.mov_GPB       , M.cod_siafem    
    )        
     AS MOV    
    UNPIVOT (Evento FOR Eventos IN (EventoC, EventoD)) AS evt    
    UNPIVOT (Classificacao FOR Classificacoes IN (ClassificacaoC, ClassificacaoD)) AS cla     
    UNPIVOT (ID FOR IDs IN (IDC, IDD)) AS ids     
   WHERE     
    RIGHT(Eventos,1) =  RIGHT(Classificacoes,1) and    
    RIGHT(Eventos,1) =  RIGHT(IDs,1)) AS T1     
 )    
     
 , SIAFNL001    
  (ID, DataEmissao, UnidadeGestora, Gestao, CgcCpfUgfav, GestaoFav, Evento, InscricaoEvento, Classificacao, Fonte, Valor, Observacao, NotaFiscal, cod_siafem)    
  AS    
     
  (SELECT T1.ID      
   , T1.DataEmissao    
   , T1.UnidadeGestora    
   , T1.Gestao    
   , T1.CgcCpfUgfav    
   , T1.GestaoFav    
   , T1.Evento    
   , T1.InscricaoEvento    
   , T1.Classificacao    
   , T1.Fonte    
   , T1.Valor    
   , T1.Observacao    
   , T1.NotaFiscal    
   , T1.cod_siafem    
    FROM SIAFNL001X as T1    
     
     
 )    
     
 SELECT    
  (SELECT 'SIAFNL001' FOR XML PATH('cdMsg'), TYPE)    
  , (SELECT    
   (SELECT     
    ID AS "@ID"    
    , DataEmissao AS "DataEmissao"    
    , UnidadeGestora AS "UnidadeGestora"    
    , Gestao AS "Gestao"    
    , CgcCpfUgfav AS "CgcCpfUgfav"    
    , GestaoFav AS "GestaoFav"      
   FROM     
    (SELECT     
     ID = T1.cod_siafem    
     , T1.DataEmissao    
     , T1.UnidadeGestora    
     , T1.Gestao    
     , T1.CgcCpfUgfav    
     , T1.GestaoFav     
     FROM     
     SIAFNL001 T1    
     --WHERE     
    -- T1.ID = principal.ID     
    GROUP BY     
     T1.cod_siafem    
     , T1.DataEmissao    
     , T1.UnidadeGestora    
     , T1.Gestao    
     , T1.CgcCpfUgfav    
     , T1.GestaoFav) AS DOC    
   FOR XML PATH('documento'), TYPE)    
   ,    
   (SELECT    
    (SELECT           
    (SELECT    
     ID AS "@ID"    
     , Evento AS "Evento"    
     , InscricaoEvento AS "InscricaoEvento"    
     , Classificacao AS "Classificacao"    
     , Fonte AS "Fonte"    
     , Valor AS "Valor"    
    FROM    
     (SELECT     
      T1.ID    
      , T1.Evento    
      , T1.InscricaoEvento    
      , T1.Classificacao    
      , T1.Fonte    
      , T1.Valor     
      FROM     
      SIAFNL001 AS T1    
      --WHERE    
     -- T1.ID = principal.ID    
     ) AS EVT    
    FOR XML PATH('desc'), TYPE)        
   FOR XML PATH('Repeticao'), TYPE)    
   FOR XML PATH('Evento'), TYPE),    
   (    
    SELECT    
    (    
     SELECT     
     (    
      SELECT ID AS "obs/@ID", Observacao AS "obs/Observacao"    
      FROM    
       (    
        SELECT TOP 3 s.Id, s.Value as 'Observacao'    
        FROM FN_Split(CONVERT(VARCHAR(MAX), (    
                  SELECT TOP 1 T2.Observacao    
                  FROM SIAFNL001 AS T2    
                  GROUP BY T2.Observacao    
                 ))) AS s    
       ) AS OBS    
      FOR XML PATH(''), TYPE    
     )FOR XML PATH('Repeticao'), TYPE    
    )    
   FOR XML PATH('Observacao'), TYPE)    
   , '' AS "NotaFiscal/Repeticao"      
  FOR XML PATH('SiafemDocNL'), TYPE)    
 FOR XML PATH(''), ROOT('SIAFDOC')    
END    
    
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaSIAFEM]    Script Date: 03/11/2011 19:02:29 ******/    
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaDetalhes]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaDetalhes]
 	@uni_id INT 
	, @per_mes CHAR(2) 
	, @per_ano CHAR(4) 
	, @eventoDebito INT 
	, @eventoCredito INT 
	, @mov_observacao VARCHAR(MAX) 
	, @uni_destino INT 
	, @bid_numeroDoc VARCHAR(50)
	, @mov_gpb VARCHAR(20)
	, @codigoDebito VARCHAR(20)
	, @codigoCredito VARCHAR(20) 
	, @bid_classificacao VARCHAR(50)	
	, @bem_id INT
AS
BEGIN
	WITH cteMovimento AS 
	(
		SELECT 
		/*
			ROW_NUMBER() OVER (order  by BD.bem_id, BD.bit_id) as linha,			
			bid_id ,
			bid_tipoDoc ,
			bid_numeroDoc ,
			bid_porcentagem ,
			bid_classificacao ,
			bid_observacao ,
			bid_dataAlteracao ,
			bid_dataCriacao ,
			*/
			mov_data ,
			MO.bem_id ,
			MO.bit_id ,
			tpm_id ,
			grp_id ,
			cco_codigoDebito ,
			cco_codigoCredito ,
			per_mes ,
			per_ano ,
			uni_id ,
			fat_id ,
			usu_id ,
			mov_valor ,
			mov_valorReavaliado ,
			mov_percentualBaixa ,
			mov_GPB ,
			mov_unidadeOrigem ,
			mov_unidadeDestino ,
			mov_observacao ,
			mov_origem ,
			mov_nl ,
			mov_situacao ,
			mov_dataCriacao ,
			mov_dataAlteracao
		FROM
			MovimentacaoBem AS MO WITH(NOLOCK) 
		/*
		LEFT JOIN BemItemDocumento AS BD WITH(NOLOCK) 
			on MO.bem_id = BD.bem_id
			and MO.bit_id = BD.bit_id
			AND bid_tipoDoc = 4
	*/
		WHERE
			mov_nl IS NULL
			AND mov_situacao in (1,4)
			AND uni_id = @uni_id
			AND per_mes = @per_mes
			AND per_ano = @per_ano				
			AND (mov_unidadeDestino = @uni_destino OR @uni_destino IS NULL)
			AND (mov_observacao = @mov_observacao OR @mov_observacao IS NULL) 
			AND (mov_GPB = @mov_gpb OR @mov_gpb IS NULL )
			and (tpm_id <> CAST((SELECT PA.par_valor FROM SYS_Parametros AS PA WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT ))
	)
	
	, cteMovimento_BemItemDocumento AS 
	(
		SELECT 
			ROW_NUMBER() OVER (order  by BD.bem_id, BD.bit_id) as linha,			
			bid_id ,
			bid_tipoDoc ,
			bid_numeroDoc ,
			bid_porcentagem ,
			bid_classificacao ,
			bid_observacao ,
			bid_dataAlteracao ,
			bid_dataCriacao ,
			mov_data ,
			MO.bem_id ,
			MO.bit_id ,
			tpm_id ,
			grp_id ,
			cco_codigoDebito ,
			cco_codigoCredito ,
			per_mes ,
			per_ano ,
			uni_id ,
			fat_id ,
			usu_id ,
			mov_valor ,
			mov_valorReavaliado ,
			mov_percentualBaixa ,
			mov_GPB ,
			mov_unidadeOrigem ,
			mov_unidadeDestino ,
			mov_observacao ,
			mov_origem ,
			mov_nl ,
			mov_situacao ,
			mov_dataCriacao ,
			mov_dataAlteracao
		FROM
			MovimentacaoBem AS MO WITH(NOLOCK) 
		LEFT JOIN BemItemDocumento AS BD WITH(NOLOCK) 
			on MO.bem_id = BD.bem_id
			and MO.bit_id = BD.bit_id
			AND bid_tipoDoc = 4
	
		WHERE
			mov_nl IS NULL
			AND mov_situacao in (1,4)
			AND uni_id = @uni_id
			AND per_mes = @per_mes
			AND per_ano = @per_ano				
			AND (mov_unidadeDestino = @uni_destino OR @uni_destino IS NULL)
			AND (mov_observacao = @mov_observacao OR @mov_observacao IS NULL) 
			AND (mov_GPB = @mov_gpb OR @mov_gpb IS NULL )
			and (tpm_id = CAST((SELECT PA.par_valor FROM SYS_Parametros AS PA WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT ))
	)
	
	
	SELECT
		M.mov_data
		, M.bem_id
		, M.bit_id
		, M.tpm_id
		, M.grp_id
		, M.uni_id
		, M.cco_codigoCredito
		, M.cco_codigoDebito
		, BI.bit_registroPat
		, BP.bem_descricao
		, TM.tpm_descricao
		, M.mov_GPB
		--, (mov_valor * ISNULL(m.bid_porcentagem/100,1)) as Valor
		--, m.bid_numeroDoc
	FROM
		cteMovimento M WITH(NOLOCK)
		INNER JOIN BemItem BI WITH (NOLOCK)
			ON BI.bem_id = M.bem_id 
			AND BI.bit_id = M.bit_id
		INNER JOIN BemPatrimonial BP WITH (NOLOCK)
			ON BP.bem_id = M.bem_id	
		INNER JOIN Unidade U WITH(NOLOCK)
			ON U.uni_id = M.uni_id
		INNER JOIN ParametroContabil PC WITH(NOLOCK)
			ON M.cco_codigoDebito = PC.cco_codigoDebito
				AND M.cco_codigoCredito = PC.cco_codigoCredito
				AND M.grp_id = PC.grp_id
				AND M.tpm_id = PC.tpm_id	
		INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
			ON M.tpm_id = TM.tpm_id 
		
	WHERE 			
		(PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)
		AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)			
		AND( TM.tpm_operacao NOT IN (2,6) OR (
			 ((select top 1 uni_id from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
			--OR (M.tpm_id = CAST((SELECT PA.par_valor FROM SYS_Parametros AS PA WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT ))
		))
		--AND (m.bid_numeroDoc = @bid_numeroDoc OR (@bid_numeroDoc IS NULL AND m.bid_numeroDoc IS NULL ))
		AND (PC.cco_codigoDebito = @codigoDebito OR @codigoDebito IS NULL)
		AND (PC.cco_codigoCredito = @codigoCredito OR @codigoCredito IS NULL)	
		and BP.bem_id = @bem_id

UNION ALL

	SELECT
		M.mov_data
		, M.bem_id
		, M.bit_id
		, M.tpm_id
		, M.grp_id
		, M.uni_id
		, M.cco_codigoCredito
		, M.cco_codigoDebito
		, BI.bit_registroPat
		, BP.bem_descricao
		, TM.tpm_descricao
		, M.mov_GPB
		--, (mov_valor * ISNULL(m.bid_porcentagem/100,1)) as Valor
		--, m.bid_numeroDoc
	FROM
		cteMovimento_BemItemDocumento M WITH(NOLOCK)
		INNER JOIN BemItem BI WITH (NOLOCK)
			ON BI.bem_id = M.bem_id 
			AND BI.bit_id = M.bit_id
		INNER JOIN BemPatrimonial BP WITH (NOLOCK)
			ON BP.bem_id = M.bem_id	
		INNER JOIN Unidade U WITH(NOLOCK)
			ON U.uni_id = M.uni_id
		INNER JOIN ParametroContabil PC WITH(NOLOCK)
			ON M.cco_codigoDebito = PC.cco_codigoDebito
				AND M.cco_codigoCredito = PC.cco_codigoCredito
				AND M.grp_id = PC.grp_id
				AND M.tpm_id = PC.tpm_id	
		INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
			ON M.tpm_id = TM.tpm_id 
		
	WHERE 			
		(PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)
		AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)			
		AND((TM.tpm_operacao = 2 AND TM.tpm_situacao = 4) OR (
			 ((select top 1 uni_id from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
			OR (M.tpm_id = CAST((SELECT PA.par_valor FROM SYS_Parametros AS PA WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT ))
		))
		AND (m.bid_numeroDoc = @bid_numeroDoc OR (@bid_numeroDoc IS NULL AND m.bid_numeroDoc IS NULL ))
		AND (m.bid_classificacao = @bid_classificacao OR (@bid_classificacao IS NULL AND m.bid_classificacao IS NULL ))
		AND (PC.cco_codigoDebito = @codigoDebito OR @codigoDebito IS NULL)
		AND (PC.cco_codigoCredito = @codigoCredito OR @codigoCredito IS NULL)
		and BP.bem_id = @bem_id
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaDetalhes_AtualizaNL]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext NEW_MovimentacaoBem_ExportaDetalhes_AtualizaNL

-- ==========================================================================================
-- Author:		Debora Cavaglieri
-- Create date: 23/07/2012
-- Description:	

-- Alterado: Wellington Santana
-- Date: 13/02/2014
-- Description: adicionado parametro mov_gpb
-- ==========================================================================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaDetalhes_AtualizaNL]
	@uni_id INT
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)
	, @eventoDebito INT
	, @eventoCredito INT
	, @tpm_operacao INT
	, @bid_numeroDoc VARCHAR(50)
	, @mov_observacao VARCHAR(MAX)
	, @cco_codigoDebito varchar(20)
	, @cco_codigoCredito varchar(20)
	, @uni_destino INT
	,@nl varchar(11)
	, @mov_gpb VARCHAR(20)
AS
BEGIN
		UPDATE	
			MovimentacaoBem 
			SET mov_nl = @nl,
				mov_dataAlteracao = getdate()

		FROM
			MovimentacaoBem M 
			INNER JOIN Unidade U WITH(NoLock)
				ON U.uni_id = M.uni_id
			INNER JOIN ParametroContabil PC WITH(NoLock)
				ON M.cco_codigoDebito = PC.cco_codigoDebito
					AND M.cco_codigoCredito = PC.cco_codigoCredito
					AND M.grp_id = PC.grp_id
					AND M.tpm_id = PC.tpm_id	
			INNER JOIN TipoMovimentacao TM WITH(NoLock)
				ON M.tpm_id = TM.tpm_id 
					AND (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL)
			LEFT JOIN BemItemDocumento BIC  WITH(NoLock) 
				ON BIC.bem_id = M.bem_id
				AND BIC.bit_id = M.bit_id
				AND BIC.bid_tipoDoc = 4	
			LEFT JOIN BemItem BI WITH(NoLock)
				ON
				BI.bem_id = M.bem_id 
				AND BI.bit_id = M.bit_id	
			LEFT JOIN BemPatrimonial BP WITH(NoLock)
				ON
				BP.bem_id = M.bem_id
		WHERE 
			M.mov_nl IS NULL
			AND M.mov_situacao in (1,4)
			AND M.uni_id = @uni_id
			AND M.per_mes = @per_mes
			AND M.per_ano = @per_ano
			AND (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)
			AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL )
			AND (BIC.bid_numeroDoc = @bid_numeroDoc OR @bid_numeroDoc IS NULL)
			AND (M.mov_observacao = @mov_observacao OR @mov_observacao IS NULL) 
			AND M.cco_codigoDebito = @cco_codigoDebito 
			AND M.cco_codigoCredito = @cco_codigoCredito 
			AND(M.mov_unidadeDestino = @uni_destino OR @uni_destino IS NULL)
			AND( TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_id from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
				OR (M.tpm_id = CAST((SELECT PA.par_valor FROM SYS_Parametros AS PA WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT ))
			))
			AND ((@mov_gpb IS NULL) OR (@mov_gpb = M.mov_GPB))
			
			SELECT @@ROWCOUNT
		
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaDetalhes_AtualizaNL_robo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaDetalhes_AtualizaNL_robo]
	
	  @uni_id INT
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)
	, @eventoDebito INT
	, @eventoCredito INT
	, @tpm_operacao INT
	, @bid_numeroDoc VARCHAR(50)
	, @mov_observacao VARCHAR(MAX)
	, @cco_codigoDebito varchar(20)
	, @cco_codigoCredito varchar(20)
	, @uni_destino INT
	, @nl varchar(11)
	, @mov_gpb VARCHAR(20)
	, @status_exportacao int
	, @descricao_erro varchar(max)
	, @cod_siafem varchar(30)
	--WITH RECOMPILE
AS
set deadlock_priority 10
BEGIN
		UPDATE	
			MovimentacaoBem 
			SET mov_nl = @nl,
				mov_dataAlteracao = getdate(),
				status_exportacao = @status_exportacao,
				descricao_exportacao = @descricao_erro
			FROM
							dbo.MovimentacaoBem M WITH(NoLock)							
							INNER JOIN ParametroContabil PC WITH(NoLock)
								ON  M.cco_codigoDebito = PC.cco_codigoDebito
									AND M.cco_codigoCredito = PC.cco_codigoCredito
									AND M.grp_id = PC.grp_id
									AND M.tpm_id = PC.tpm_id	
							INNER JOIN TipoMovimentacao TM WITH(NoLock)
								ON M.tpm_id = TM.tpm_id 
									--AND  TM.tpm_operacao = isnull(@tpm_operacao,TM.tpm_operacao)	-- (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL) --
							LEFT JOIN BemItemDocumento BIC  WITH(NoLock) 
								ON BIC.bem_id = M.bem_id
								AND BIC.bit_id = M.bit_id
								AND BIC.bid_tipoDoc = 4		
		WHERE 
			M.mov_nl IS NULL
			and	(M.cod_siafem = @cod_siafem or @cod_siafem is null)--M.cod_siafem = isnull(@cod_siafem, M.cod_siafem)--		
			AND M.mov_situacao in (1,4)
			AND M.uni_id = @uni_id
			AND M.per_mes = @per_mes
			AND M.per_ano = @per_ano
			AND	(PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)--PC.pco_evento = isnull(@eventoDebito, PC.pco_evento)	--
			AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL )--PC.pco_eventoCredito = isnull(@eventoCredito, PC.pco_eventoCredito)   --
			AND	(BIC.bid_numeroDoc = @bid_numeroDoc OR @bid_numeroDoc IS NULL)--BIC.bid_numeroDoc = isnull(@bid_numeroDoc, BIC.bid_numeroDoc )	--
			AND	(M.mov_observacao = @mov_observacao )
			AND M.cco_codigoDebito = @cco_codigoDebito
			AND M.cco_codigoCredito = @cco_codigoCredito
			AND (M.mov_unidadeDestino = @uni_destino OR @uni_destino IS NULL)--M.mov_unidadeDestino = isnull(@uni_destino, M.mov_unidadeDestino)		--
			AND ( 
				   ((TM.tpm_operacao = @tpm_operacao or @tpm_operacao is null) and TM.tpm_operacao NOT IN (2,6) ) 
					OR (
						 (  (SELECT TOP 1 uni_id from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id)
						or (M.tpm_id = 1)		-- CAST((SELECT PA.par_valor FROM SYS_Parametros AS PA WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT))
			))
			AND (M.mov_GPB = @mov_gpb  or @mov_gpb IS NULL)--M.mov_GPB = isnull(@mov_gpb, M.mov_GPB)	--
			
			SELECT @@ROWCOUNT		
END



GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaIncorporados]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext NEW_MovimentacaoBem_ExportaIncorporados  
  
-- =============================================  
-- Author:  Rafael Amado  
-- Create date: 08/12/2010  
-- Description: Função que cria o XML usado para criação da NL para movimentação de   
--    incorporação. Vide manual do SIAFEM v1.2.6,   
--    item SIAFNL001 – NL Nota de Lançamento, página 26.  
  
-- Alterado: Henrique Aparecido  
-- Date:  05/12/2014  
--    Alteração para pegar o ID da movimentação do SIAFEM e split do campo Observacao  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaIncorporados]  
   
 @uni_id INT  
 , @per_mes CHAR(2)  
 , @per_ano CHAR(4)  
 , @eventoDebito INT  
 , @eventoCredito INT  
 , @mov_observacao VARCHAR(MAX)  
 , @cco_codigoDebito VARCHAR(20)  
 , @cco_codigoCredito VARCHAR(20)  
 , @dataEmissao DATETIME  
 , @cod_siafem VARCHAR(30)  
AS  
BEGIN  
 SET LANGUAGE Portuguese  
  
 DECLARE @data DATETIME  
 DECLARE @ultimodia DATETIME  
  
 SET @data = CONVERT(char(8),@per_ano + @per_mes + '01',112)  
 SET @ultimodia =ISNULL(@dataEmissao, dateadd(d,-1,dateadd(m,1,CONVERT(datetime,CONVERT(char(6),@data,112) + '01',112))))  
  
 ;WITH SIAFNL001(ID, DataEmissao, UnidadeGestora, Gestao, CgcCpfUgfav, GestaoFav, Evento, InscricaoEvento, Classificacao, Fonte, Valor, Observacao, NotaFiscal, cod_siafem) AS (  
  SELECT  
   ID  
   , DataEmissao  
   , UnidadeGestora  
   , Gestao  
   , '' AS CgcCpfUgfav  
   , '' AS GestaoFav  
   , Evento  
   , '' as InscricaoEvento  
   , Classificacao  
   , '' as Fonte  
   , REPLACE(CONVERT (varchar(20), CONVERT(money, Valor)), '.', '')  
   , Observacao   
   , NotaFiscal  
   , cod_siafem  
  FROM  
   (SELECT  
    IDD = (CASE (PC.pco_evento)  
        WHEN 540546 THEN               
         (ROW_NUMBER() OVER (ORDER BY pco_evento))           
        ELSE   
         (ROW_NUMBER() OVER (ORDER BY pco_evento)) + ((ROW_NUMBER() OVER (ORDER BY pco_evento))-1)  
        END)  
    ,IDC = ((ROW_NUMBER() OVER (ORDER BY pco_evento)) + (ROW_NUMBER() OVER (ORDER BY pco_evento)))  
    , REPLACE(UPPER(CONVERT(CHAR,@ultimodia, 106)), ' ', '') AS DataEmissao  
    , U.uni_codigoUGE AS UnidadeGestora  
    , '00001' AS Gestao    
    , PC.pco_evento as EventoD  
    , PC.pco_eventoCredito as EventoC  
    , M.cco_codigoDebito as ClassificacaoD  
    , M.cco_codigoCredito as ClassificacaoC  
    , SUM(M.mov_valor) as Valor  
    , M.mov_observacao as Observacao  
    , M.mov_unidadeDestino  
    , BP.bem_doctoCompra as NotaFiscal  
    , M.cod_siafem  
   FROM  
    MovimentacaoBem M WITH(NOLOCK)  
    INNER JOIN Unidade U WITH(NOLOCK)  
     ON U.uni_id = M.uni_id  
    INNER JOIN ParametroContabil PC WITH(NOLOCK)  
     ON M.cco_codigoDebito = PC.cco_codigoDebito  
      AND M.cco_codigoCredito = PC.cco_codigoCredito  
      AND M.grp_id = PC.grp_id  
      AND M.tpm_id = PC.tpm_id  
    INNER JOIN BemPatrimonial BP WITH(NOLOCK)  
     ON BP.bem_id = M.bem_id   
    INNER JOIN TipoMovimentacao TM WITH(NOLOCK)   
      ON M.tpm_id = TM.tpm_id   
       AND TM.tpm_operacao = 1   
   WHERE   
    M.mov_nl IS NULL  
    AND M.mov_situacao in (1,4)  
    AND M.uni_id = @uni_id  
    AND M.per_mes = @per_mes  
    AND M.per_ano = @per_ano      
    AND M.mov_observacao = @mov_observacao   
    AND M.cco_codigoDebito = @cco_codigoDebito   
    AND M.cco_codigoCredito = @cco_codigoCredito   
    AND M.cod_siafem = @cod_siafem  
    AND (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)  
    AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)  
   GROUP BY  
    U.uni_codigoUGE  
    , PC.pco_evento  
    , PC.pco_eventoCredito  
    , M.cco_codigoDebito  
    , M.cco_codigoCredito  
    , M.mov_observacao  
    , M.mov_unidadeDestino  
    , BP.bem_doctoCompra  
    , M.cod_siafem) AS T1    
   UNPIVOT (Evento FOR Eventos IN (EventoD, EventoC)) AS evt  
   UNPIVOT (Classificacao FOR Classificacoes IN (ClassificacaoD, ClassificacaoC)) AS cla   
   UNPIVOT (ID FOR IDs IN (IDD, IDC)) as Ids  
  WHERE   
   RIGHT(Eventos,1) = RIGHT(Classificacoes,1)  
   and RIGHT(Eventos,1) =  RIGHT(IDs,1)  
 )  
 SELECT  
  (SELECT 'SIAFNL001' FOR XML PATH('cdMsg'), TYPE)  
  , (SELECT  
   (SELECT   
    ID AS "@ID"  
    , DataEmissao AS "DataEmissao"  
    , UnidadeGestora AS "UnidadeGestora"  
    , Gestao AS "Gestao"  
    , CgcCpfUgfav AS "CgcCpfUgfav"  
    , GestaoFav AS "GestaoFav"    
   FROM   
    (SELECT   
     ID = T1.cod_siafem  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav   
     FROM   
     SIAFNL001 T1  
     --WHERE   
     -- T1.ID = principal.ID  
    GROUP BY   
     T1.cod_siafem  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav) AS DOC  
   FOR XML PATH('documento'), TYPE)  
   ,  
   (SELECT  
    (SELECT         
    (SELECT  
     ID AS "@ID"  
     , Evento AS "Evento"  
     , InscricaoEvento AS "InscricaoEvento"  
     , Classificacao AS "Classificacao"  
     , Fonte AS "Fonte"  
     , Valor AS "Valor"  
    FROM  
     (SELECT   
      T1.ID  
      , T1.Evento  
      , T1.InscricaoEvento  
      , T1.Classificacao  
      , T1.Fonte  
      , T1.Valor   
      FROM   
      SIAFNL001 AS T1  
      --WHERE  
     -- T1.ID = principal.ID  
     ) AS EVT  
    FOR XML PATH('desc'), TYPE)      
   FOR XML PATH('Repeticao'), TYPE)  
   FOR XML PATH('Evento'), TYPE),  
   (  
    SELECT  
    (  
     SELECT   
     (  
      SELECT ID AS "obs/@ID", Observacao AS "obs/Observacao"  
      FROM  
       (  
        SELECT TOP 3 s.Id, s.Value as 'Observacao'  
        FROM FN_Split(CONVERT(VARCHAR(MAX), (  
                  SELECT TOP 1 T2.Observacao  
                  FROM SIAFNL001 AS T2  
                  GROUP BY T2.Observacao  
                 ))) AS s  
       ) AS OBS  
      FOR XML PATH(''), TYPE  
     )FOR XML PATH('Repeticao'), TYPE  
    )  
   FOR XML PATH('Observacao'), TYPE)  
   , '' AS "NotaFiscal/Repeticao"  
  FOR XML PATH('SiafemDocNL'), TYPE)  
 FOR XML PATH(''), ROOT('SIAFDOC')  
END  
  
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaRecebimentos]    Script Date: 03/11/2011 19:04:12 ******/  
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaLinha]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Henrique
-- Create date: 24/11/2014
-- Description:	Pegar um item
-- =============================================

CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaLinha]
  	  @uni_id INT 
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)
	, @eventoDebito INT 
	, @eventoCredito INT
	, @tpm_operacao INT
	, @tpm_situacao INT
	, @cco_codigoDebito VARCHAR(20)
	, @cco_codigoCredito VARCHAR(20)
	, @bid_classificacao VARCHAR(50)
	, @InscricaoEvento VARCHAR(50)
	, @Observacao VARCHAR(max)
	, @mov_gpb VARCHAR(50)
	, @mov_unidadeDestino INT
	, @mov_unidadeOrigem INT
AS
BEGIN

	SET LANGUAGE Portuguese
	
	DECLARE @tpm_id INT
	SELECT 
			@tpm_id= CAST(PA.par_valor AS INT) 
		FROM SYS_Parametros AS PA 
			WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';
			
	WITH MoviBem AS
	(
		SELECT 
			bem_id,
			bit_id,
			mov_observacao as Observacao,
			mov_unidadeDestino,
			mov_unidadeOrigem,
			mov_gpb,
			mov_valor,
			cco_codigoCredito,
			cco_codigoDebito,
			per_ano,
			tpm_id,
			grp_id,
			uni_id
			
		FROM
			MovimentacaoBem WITH(NOLOCK)
		WHERE
				mov_nl IS NULL
			AND mov_situacao in (1,4)
			AND uni_id = @uni_id
			AND per_mes = @per_mes
			AND per_ano = @per_ano	
	)

	,BemNotaEmpenho AS 
	(
		SELECT 
			ROW_NUMBER() OVER (PARTITION by BD.bem_id, BD.bit_id order by BD.bem_id, BD.bit_id) as linha
			,BD.bem_id
			,BD.bit_id
			,BD.bid_id
			,BD.bid_tipoDoc
			,isnull(BD.bid_numeroDoc, '-1') as bid_numeroDoc
			,BD.bid_porcentagem
			,BD.bid_classificacao
			,BD.bid_observacao
			,BD.bid_dataAlteracao
			,BD.bid_dataCriacao
			,BD.bid_serie
			,BD.bid_dataEmissaoDoc
			, (MO.mov_valor * isnull(BD.bid_porcentagem, 1))/100 as valor_porc
		FROM
			BemItemDocumento AS BD WITH(NOLOCK) 
		INNER JOIN MovimentacaoBem AS MO WITH(NOLOCK) 
			on MO.bem_id = BD.bem_id
			and MO.bit_id = BD.bit_id
		WHERE
			mov_nl IS NULL
		AND mov_situacao in (1,4)
		AND uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano	
		AND bid_tipoDoc = 4
	)
	
	,MoviBem_BemNotaEmpenho AS 
	(
		SELECT 
			DISTINCT
			M.*
			,BIC.bid_id
			,BIC.bid_tipoDoc
			,bid_numeroDoc = (CASE
					WHEN TM.tpm_operacao = 2 THEN	
						(CASE
							WHEN TM.tpm_situacao = 4 THEN				
								BIC.bid_numeroDoc
							WHEN TM.tpm_situacao IS NULL THEN
								NULL
							ELSE 
								NULL
							END
						)			
					WHEN TM.tpm_operacao IS NULL THEN
						NULL
					ELSE
						NULL
					END
			)		
			,BIC.bid_porcentagem
			,bid_classificacao = (CASE
					WHEN TM.tpm_operacao = 2 THEN	
						(CASE
							WHEN TM.tpm_situacao = 4 THEN				
								BIC.bid_classificacao
							WHEN TM.tpm_situacao IS NULL THEN
								NULL
							ELSE 
								NULL
							END
						)			
					WHEN TM.tpm_operacao IS NULL THEN
						NULL
					ELSE
						NULL
					END
			)
			,BIC.bid_observacao
			,BIC.bid_dataAlteracao
			,BIC.bid_dataCriacao
			,BIC.bid_serie
			,BIC.bid_dataEmissaoDoc
			,BIC.valor_porc
		FROM MoviBem M 
		inner JOIN TipoMovimentacao as TM WITH(NOLOCK) 
			ON TM.tpm_id = M.tpm_id 
				AND (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL)
				AND (TM.tpm_situacao = @tpm_situacao or @tpm_situacao IS NULL)
		LEFT JOIN BemNotaEmpenho BIC
			ON BIC.bem_id = M.bem_id
			AND BIC.bit_id = M.bit_id			
	)
		  
	SELECT
		ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID
		, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao
		, U.uni_codigoUGE AS UnidadeGestora
		, '00001' AS Gestao		
		, PC.pco_evento as EventoD
		
		, EventoC = (CASE (PC.pco_evento)
					WHEN 540490 THEN									
						( CASE (ABS(MB.per_ano) - ABS(SUBSTRING(MB.bid_numeroDoc,1, 4)))   
							WHEN 0 THEN PC.pco_eventoCredito
							WHEN 1 THEN '540170'
							ELSE '540172'
						END)
						
					ELSE PC.pco_eventoCredito
					END
		)
		
		, PC.pco_eventoCredito
		, MB.bid_classificacao
		, MB.cco_codigoDebito as ClassificacaoD
		, ClassificacaoC = (CASE (PC.pco_evento)
					WHEN 540490 THEN				
						cast(MB.bid_classificacao as varchar(20))
					ELSE 
						MB.cco_codigoCredito
					END
		)			
		, Valor = (CASE (MB.tpm_id)
					WHEN 114 THEN				
						SUM(MB.valor_porc)
					ELSE 
						(SUM(MB.mov_valor * ISNULL(MB.bid_porcentagem/100,1)))
					END
		)
		
		, Observacao
		, mb.mov_unidadeDestino 
		, MB.mov_unidadeOrigem 
		, MB.bid_numeroDoc AS InscricaoEvento
		, MB.mov_gpb
		, PC.cco_codigoCredito
		, PC.cco_codigoDebito
	FROM
	    MoviBem_BemNotaEmpenho MB
		INNER JOIN Unidade U WITH(NOLOCK)
			ON U.uni_id = MB.uni_id
		INNER JOIN ParametroContabil PC WITH(NOLOCK)
			ON MB.cco_codigoDebito = PC.cco_codigoDebito
				AND MB.cco_codigoCredito = PC.cco_codigoCredito
				AND MB.grp_id = PC.grp_id
				AND MB.tpm_id = PC.tpm_id	
		INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
			ON MB.tpm_id = TM.tpm_id 
				AND (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL)
				AND (TM.tpm_situacao = @tpm_situacao or @tpm_situacao IS NULL)
	WHERE 

		 (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)
		AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)
		AND (MB.cco_codigoCredito = @cco_codigoCredito OR @cco_codigoCredito IS NULL)
		AND (MB.cco_codigoDebito = @cco_codigoDebito OR @cco_codigoDebito IS NULL)
		AND( TM.tpm_operacao NOT IN (2,6) OR (
			 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(MB.mov_unidadeDestino)) <> MB.uni_id)								
			OR MB.tpm_id = @tpm_id))
		and PC.pco_evento is not null	
			and
			(MB.bid_classificacao = @bid_classificacao or @bid_classificacao is null)
			and
			(MB.bid_numeroDoc = @InscricaoEvento or @InscricaoEvento is null)
			and
			(Observacao = @Observacao or @Observacao is null)
			and
			(MB.mov_gpb = @mov_gpb or @mov_gpb is null)
			and
			(MB.mov_unidadeDestino = @mov_unidadeDestino or @mov_unidadeDestino is null)
			and
			(MB.mov_unidadeOrigem = @mov_unidadeOrigem or @mov_unidadeOrigem is null) 
	GROUP BY
		U.uni_codigoUGE
		, PC.pco_evento
		, PC.pco_eventoCredito
		, MB.cco_codigoDebito
		, MB.cco_codigoCredito
		, Observacao
		, MB.mov_unidadeDestino
		, MB.mov_unidadeOrigem
		, MB.bid_numeroDoc
		, MB.bid_classificacao
		, MB.per_ano
		, MB.mov_gpb
		, PC.cco_codigoDebito
		, PC.cco_codigoCredito
		, MB.tpm_id			
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaRecebimentos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Jorge Freitas  
-- Create date: 11/03/2011  
-- Description: Função que cria o XML usado para criação da NL para movimentação de   
--    transferências. Vide manual do SIAFEM v1.2.6,   
--    item SIAFNL001 – NL Nota de Lançamento, página 26.  
  
-- Alterado: Allex Rocha  
-- Date:  05/12/2014  
--    Alteração para pegar o ID da movimentação do SIAFEM e split do campo Observacao  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaRecebimentos]  
 @uni_id INT  
 , @per_mes CHAR(2)  
 , @per_ano CHAR(4)  
 , @eventoDebito INT  
 , @eventoCredito INT  
 , @bid_numeroDoc CHAR (50)  
 , @mov_observacao VARCHAR(MAX)  
 , @cco_codigoDebito VARCHAR(20)  
 , @cco_codigoCredito VARCHAR(20)  
 , @dataEmissao DATETIME  
 , @cod_siafem VARCHAR(30)  
AS  
BEGIN  
 SET LANGUAGE Portuguese  
  
 DECLARE @ultimodia datetime  
 DECLARE @data datetime   
 DECLARE @tpm_id INT  
  
 SET @data = CONVERT(char(8),@per_ano + @per_mes + '01',112)  
 SET @ultimodia =ISNULL(@dataEmissao, dateadd(d,-1,dateadd(m,1,CONVERT(datetime,CONVERT(char(6),@data,112) + '01',112))))  
 SELECT  @tpm_id= CAST(PA.par_valor AS INT)  FROM SYS_Parametros AS PA WITH (NoLock) WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO'  
   
 ;WITH MoviBem AS  
 (  
  SELECT   
   mov_observacao as Observacao,  
   mov_unidadeDestino,  
   cco_codigoDebito,  
   cco_codigoCredito,  
   mov_valor,  
   per_ano,  
   uni_id,  
   tpm_id,  
   bem_id,  
   bit_id,  
   grp_id,  
   cod_siafem  
  FROM   
   MovimentacaoBem  
  WHERE  
    mov_nl IS NULL  
   AND mov_situacao in (1,4)  
   AND uni_id = @uni_id  
   AND per_mes = @per_mes  
   AND per_ano = @per_ano  
   AND tpm_id = @tpm_id  
 )  
   
 ,SIAFNL001(ID, DataEmissao, UnidadeGestora, Gestao, CgcCpfUgfav, GestaoFav, Evento, InscricaoEvento, Classificacao, Fonte, Valor, Observacao, NotaFiscal, cod_siafem) AS (  
  SELECT   
   ID   
   , DataEmissao  
   , UnidadeGestora  
   , Gestao  
   , '' as CgcCpfUgfav  
   , '' as GestaoFav  
   , Evento  
   , InscricaoEvento  
   , Classificacao  
   , '' as Fonte  
   , REPLACE(CONVERT (varchar(20), CONVERT(money, Valor)), '.', '')  
   , Observacao  
   , '' as NotaFiscal  
   , cod_siafem  
  FROM  
   (SELECT  
    ID   
    , DataEmissao  
    , UnidadeGestora  
    , Gestao  
    , Evento  
    , InscricaoEvento  
    , Classificacao  
    , Valor  
    , Observacao  
    , mov_unidadeDestino  
    , cod_siafem  
   FROM  
    (SELECT  
     IDC =  (ROW_NUMBER() OVER (ORDER BY pco_evento)) + ((ROW_NUMBER() OVER (ORDER BY pco_evento))-1)  
     , IDD = ((ROW_NUMBER() OVER (ORDER BY pco_evento)) + (ROW_NUMBER() OVER (ORDER BY pco_evento)))  
     --, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao  
     , REPLACE(UPPER(CONVERT(CHAR,@ultimodia, 106)), ' ', '') AS DataEmissao  
     , U.uni_codigoUGE AS UnidadeGestora  
     , '00001' AS Gestao    
     , PC.pco_evento as EventoD  
     , EventoC = (CASE (PC.pco_evento)  
        WHEN 540490 THEN   
         ( CASE (ABS(M.per_ano) - ABS(SUBSTRING(BIC.bid_numeroDoc,1, 4)))     
          WHEN 0 THEN PC.pco_eventoCredito  
          WHEN 1 THEN '540170'  
          ELSE '540172'  
         END)  
        ELSE PC.pco_eventoCredito  
        END  
     )  
     , M.cco_codigoDebito as ClassificacaoD  
     , ClassificacaoC = (CASE (PC.pco_evento)  
        WHEN 540490 THEN ('3' + CAST(BIC.bid_classificacao as varchar(19)))  
        else M.cco_codigoCredito   
        end)  
     , (SUM(M.mov_valor) * BIC.bid_porcentagem/100) as Valor  
     , Observacao  
     , M.mov_unidadeDestino  
     , InscricaoEventoD = (CASE (PC.pco_evento)  
        WHEN 540490 THEN ''  
        else BIC.bid_numeroDoc  
        end)  
     , BIC.bid_numeroDoc AS InscricaoEventoC  
     , M.cod_siafem  
    FROM  
     MoviBem M WITH(NOLOCK)  
     INNER JOIN Unidade U WITH(NOLOCK)  
      ON U.uni_id = M.uni_id  
     INNER JOIN ParametroContabil PC WITH(NOLOCK)  
      ON M.cco_codigoDebito = PC.cco_codigoDebito  
       AND M.cco_codigoCredito = PC.cco_codigoCredito  
       AND M.grp_id = PC.grp_id  
       AND M.tpm_id = PC.tpm_id   
     INNER JOIN BemItemDocumento BIC  
      ON BIC.bem_id = M.bem_id  
      AND BIC.bit_id = M.bit_id  
      AND BIC.bid_tipoDoc = 4   
    WHERE   
      (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)  
     AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)  
     AND (BIC.bid_numeroDoc = @bid_numeroDoc OR @bid_numeroDoc IS NULL)  
     AND (BIC.bid_classificacao IS NOT NULL)  
     AND (Observacao = @mov_observacao OR @mov_observacao IS NULL)  
     AND (M.cco_codigoCredito = @cco_codigoCredito OR @cco_codigoCredito IS NULL)  
     AND (M.cco_codigoDebito = @cco_codigoDebito OR @cco_codigoDebito IS NULL)  
     AND M.cod_siafem = @cod_siafem  
    GROUP BY  
     U.uni_codigoUGE  
     , PC.pco_evento  
     , PC.pco_eventoCredito  
     , M.cco_codigoDebito  
     , M.cco_codigoCredito  
     , Observacao  
     , M.mov_unidadeDestino  
     , BIC.bid_numeroDoc  
     , BIC.bid_porcentagem  
     , BIC.bid_classificacao  
     , M.per_ano  
     , M.cod_siafem) AS MOV  
    UNPIVOT (Evento FOR Eventos IN (EventoC, EventoD)) AS evt  
    UNPIVOT (Classificacao FOR Classificacoes IN (ClassificacaoC, ClassificacaoD)) AS cla   
    UNPIVOT (InscricaoEvento FOR InscricaoEventos IN (InscricaoEventoC, InscricaoEventoD)) AS ins   
    UNPIVOT (ID FOR IDs IN (IDC, IDD)) AS ids   
   WHERE   
    RIGHT(Eventos,1) =  RIGHT(Classificacoes,1) and  
    RIGHT(Eventos,1) =  RIGHT(InscricaoEventos,1) and   
    RIGHT(Eventos,1) =  RIGHT(IDs,1)) AS T1  
     
   CROSS APPLY (SELECT TOP 1   
       H.uni_id  
       , H.uni_idOriginal  
       , H.uni_codigoUGE AS CgcCpfUgfav  
       , '00001' AS GestaoFav      
      FROM   
       dbo.FN_GetUnidadesImportacao(T1.mov_unidadeDestino) H  
       LEFT JOIN UnidadeGestora UGE WITH(NOLOCK)   
        ON H.uni_id = UGE.uni_id  
      WHERE       
       NOT UGE.uni_id IS NULL) AS T2  
  WHERE  
   T1.mov_unidadeDestino = T2.uni_idOriginal  
   --AND T1.UnidadeGestora <> T2.CgcCpfUgfav  
 )  
   
 SELECT  
  (SELECT 'SIAFNL001' FOR XML PATH('cdMsg'), TYPE)  
  , (SELECT  
   (SELECT   
    ID AS "@ID"  
    , DataEmissao AS "DataEmissao"  
    , UnidadeGestora AS "UnidadeGestora"  
    , Gestao AS "Gestao"  
    , CgcCpfUgfav AS "CgcCpfUgfav"  
    , GestaoFav AS "GestaoFav"    
   FROM   
    (SELECT   
     ID = T1.cod_siafem  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav   
     FROM   
     SIAFNL001 T1  
     --WHERE   
    -- T1.ID = principal.ID   
    GROUP BY   
     T1.cod_siafem  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav) AS DOC  
  
   FOR XML PATH('documento'), TYPE)  
   ,  
   (SELECT  
    (SELECT         
    (SELECT  
     ID AS "@ID"  
     , Evento AS "Evento"  
     , InscricaoEvento AS "InscricaoEvento"  
     , Classificacao AS "Classificacao"  
     , Fonte AS "Fonte"  
     , Valor AS "Valor"  
    FROM  
     (SELECT   
      T1.ID  
      , T1.Evento  
      , T1.InscricaoEvento  
      , T1.Classificacao  
      , T1.Fonte  
      , T1.Valor   
      FROM   
      SIAFNL001 AS T1  
      --WHERE  
     -- T1.ID = principal.ID  
     ) AS EVT  
    FOR XML PATH('desc'), TYPE)      
   FOR XML PATH('Repeticao'), TYPE)  
   FOR XML PATH('Evento'), TYPE),  
   (  
    SELECT  
    (  
     SELECT   
     (  
      SELECT ID AS "obs/@ID", Observacao AS "obs/Observacao"  
      FROM  
       (  
        SELECT TOP 3 s.Id, s.Value as 'Observacao'  
        FROM FN_Split(CONVERT(VARCHAR(MAX), (  
                  SELECT TOP 1 T2.Observacao  
                  FROM SIAFNL001 AS T2  
                  GROUP BY T2.Observacao  
                 ))) AS s  
       ) AS OBS  
      FOR XML PATH(''), TYPE  
     )FOR XML PATH('Repeticao'), TYPE  
    )  
   FOR XML PATH('Observacao'), TYPE)  
   , '' AS "NotaFiscal/Repeticao"    
  FOR XML PATH('SiafemDocNL'), TYPE)  
 FOR XML PATH(''), ROOT('SIAFDOC')  
END  
  
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaSIAFEM]    Script Date: 03/11/2011 19:02:29 ******/  
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaSIAFEM]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================================  
-- Author:  Rafael Amado  
-- Create date: 08/12/2010  
-- Description: Função que cria o XML usado para criação da NL para movimentação que não seja   
--    incorporação e transferencias. Vide manual do SIAFEM v1.2.6,   
--    item SIAFNL001 – NL Nota de Lançamento, página 26.  
-- ==========================================================================================  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaSIAFEM]  
 @uni_id INT  
 , @per_mes CHAR(2)  
 , @per_ano CHAR(4)  
 , @eventoDebito INT  
 , @eventoCredito INT  
 , @mov_observacao VARCHAR(MAX)  
--WITH Recompile  
AS  
BEGIN  
 SET LANGUAGE Portuguese  
  
 ;WITH SIAFNL001(ID, DataEmissao, UnidadeGestora, Gestao, CgcCpfUgfav, GestaoFav, Evento, InscricaoEvento, Classificacao, Fonte, Valor, Observacao, NotaFiscal) AS (  
  SELECT  
   ID  
   , DataEmissao  
   , UnidadeGestora  
   , Gestao  
   , '' AS CgcCpfUgfav  
   , '' AS GestaoFav  
   , Evento  
   , '' as InscricaoEvento  
   , Classificacao  
   , '' as Fonte  
   , REPLACE(CONVERT (varchar(20), CONVERT(money, Valor)), '.', '')  
   , Observacao   
   , '' as NotaFiscal  
  FROM  
   (SELECT  
    ROW_NUMBER() OVER (ORDER BY PC.pco_evento) AS ID  
    , REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao  
    , U.uni_codigoUGE AS UnidadeGestora  
    , '00001' AS Gestao    
    , PC.pco_evento as EventoD  
    , PC.pco_eventoCredito as EventoC  
    , M.cco_codigoDebito as ClassificacaoD  
    , M.cco_codigoCredito as ClassificacaoC  
    , SUM(M.mov_valor) as Valor  
    , M.mov_observacao as Observacao  
    , M.mov_unidadeDestino  
   FROM  
    MovimentacaoBem M WITH(NOLOCK)  
    INNER JOIN Unidade U WITH(NOLOCK)  
     ON U.uni_id = M.uni_id  
    INNER JOIN ParametroContabil PC WITH(NOLOCK)  
     ON M.cco_codigoDebito = PC.cco_codigoDebito  
      AND M.cco_codigoCredito = PC.cco_codigoCredito  
      AND M.grp_id = PC.grp_id  
      AND M.tpm_id = PC.tpm_id    
    INNER JOIN TipoMovimentacao TM WITH(NOLOCK)   
      ON M.tpm_id = TM.tpm_id   
       AND TM.tpm_operacao IN(3,4,5,7)  
   WHERE   
    M.mov_nl IS NULL  
    AND M.mov_situacao in (1,4)  
    AND M.uni_id = @uni_id  
    AND M.per_mes = @per_mes  
    AND M.per_ano = @per_ano  
    AND (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)  
    AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)  
    AND (M.mov_observacao = @mov_observacao OR @mov_observacao IS NULL)  
   GROUP BY  
    U.uni_codigoUGE  
    , PC.pco_evento  
    , PC.pco_eventoCredito  
    , M.cco_codigoDebito  
    , M.cco_codigoCredito  
    , M.mov_observacao  
    , M.mov_unidadeDestino) AS T1    
   UNPIVOT (Evento FOR Eventos IN (EventoD, EventoC)) AS evt  
   UNPIVOT (Classificacao FOR Classificacoes IN (ClassificacaoD, ClassificacaoC)) AS cla   
  WHERE   
   RIGHT(Eventos,1) =  RIGHT(Classificacoes,1)  
 )  
 SELECT  
  (SELECT 'SIAFNL001' FOR XML PATH('cdMsg'), TYPE)  
  , (SELECT  
   (SELECT   
    ID AS "id"  
    , DataEmissao AS "DataEmissao"  
    , UnidadeGestora AS "UnidadeGestora"  
    , Gestao AS "Gestao"  
    , CgcCpfUgfav AS "CgcCpfUgfav"  
    , GestaoFav AS "GestaoFav"    
   FROM   
    (SELECT   
     T1.ID  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav   
     FROM   
     SIAFNL001 T1  
     WHERE   
     T1.ID = principal.ID   
    GROUP BY   
     T1.ID  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav) AS DOC  
   FOR XML PATH('documento'), TYPE)  
   , (SELECT  
    (SELECT   
     ID AS "Desc/@ID"  
     , Evento AS "Desc/Evento"  
     , InscricaoEvento AS "Desc/InscricaoEvento"  
     , Classificacao AS "Desc/Classificacao"  
     , Fonte AS "Desc/Fonte"  
     , Valor AS "Desc/Valor"  
    FROM  
     (SELECT   
      T1.ID  
      , T1.Evento  
      , T1.InscricaoEvento  
      , T1.Classificacao  
      , T1.Fonte  
      , T1.Valor   
      FROM   
      SIAFNL001 AS T1  
      WHERE  
      T1.ID = principal.ID) AS EVT  
    FOR XML PATH('Repeticao'), TYPE)   
   FOR XML PATH('Evento'), TYPE)  
   , (SELECT  
    (SELECT  
     ID AS "obs/@ID"  
     , Observacao AS "obs/Observacao"  
      FROM   
     (SELECT   
      T1.ID  
      , T1.Observacao   
      FROM   
      SIAFNL001 AS T1   
      WHERE   
      T1.ID = principal.ID  
      GROUP BY  
      T1.ID  
      , T1.Observacao) AS OBS  
    FOR XML PATH('Repeticao'), TYPE)  
   FOR XML PATH('Observacao'), TYPE)  
   , '' AS "NotaFiscal/Repeticao"  
  FROM (SELECT ID FROM SIAFNL001 GROUP BY ID) AS principal  
  FOR XML PATH('SiafemDocNL'), TYPE)  
 FOR XML PATH(''), ROOT('SIAFDOC')  
END  
  
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaTransferidos]    Script Date: 03/11/2011 19:02:38 ******/  
SET ANSI_NULLS ON  
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaTransferidos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Rafael Amado  
-- Create date: 08/12/2010  
-- Description: Função que cria o XML usado para criação da NL para movimentação de   
--    transferências. Vide manual do SIAFEM v1.2.6,   
--    item SIAFNL001 – NL Nota de Lançamento, página 26.  
  
-- Alterado: Allex Rocha  
-- Date:  05/12/2014  
--    Alteração para pegar o ID da movimentação do SIAFEM e split do campo Observacao  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaTransferidos]  
 @uni_id INT  
 , @per_mes CHAR(2)  
 , @per_ano CHAR(4)  
 , @eventoDebito INT  
 , @eventoCredito INT  
 , @mov_observacao VARCHAR(MAX)  
 , @mov_unidadeDestino INT  
 , @cco_codigoDebito VARCHAR(20)  
 , @cco_codigoCredito VARCHAR(20)  
 , @dataEmissao DATETIME  
 , @cod_siafem VARCHAR(30)  
AS  
BEGIN  
 SET LANGUAGE Portuguese  
  
 DECLARE @data DATETIME  
 DECLARE @ultimodia DATETIME  
  
 SET @data = CONVERT(char(8),@per_ano + @per_mes + '01',112)  
 SET @ultimodia =ISNULL(@dataEmissao, dateadd(d,-1,dateadd(m,1,CONVERT(datetime,CONVERT(char(6),@data,112) + '01',112))))  
  
 ;WITH SIAFNL001(ID, DataEmissao, UnidadeGestora, Gestao, CgcCpfUgfav, GestaoFav, Evento, InscricaoEvento, Classificacao, Fonte, Valor, Observacao, NotaFiscal, cod_siafem) AS (  
  SELECT   
   ID  
   , DataEmissao  
   , UnidadeGestora  
   , Gestao  
   , CgcCpfUgfav  
   , GestaoFav  
   , Evento  
   , '' as InscricaoEvento  
   , Classificacao  
   , '' as Fonte  
   , REPLACE(CONVERT (varchar(20), CONVERT(money, Valor)), '.', '')  
   , Observacao  
   , '' as NotaFiscal  
   , cod_siafem  
  FROM  
   (SELECT  
    ID  
    , DataEmissao  
    , UnidadeGestora  
    , Gestao  
    , Evento  
    , '' as InscricaoEvento  
    , Classificacao  
    , Valor  
    , Observacao  
    , mov_unidadeDestino  
    , cod_siafem  
   FROM  
    (SELECT  
     ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID  
     --, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao  
     , REPLACE(UPPER(CONVERT(CHAR,@ultimodia, 106)), ' ', '') AS DataEmissao  
     , U.uni_codigoUGE AS UnidadeGestora  
     , '00001' AS Gestao  
     , PC.pco_evento as EventoD  
     , PC.pco_eventoCredito as EventoC   
     , M.cco_codigoDebito as ClassificacaoD  
     , M.cco_codigoCredito as ClassificacaoC  
     , SUM(M.mov_valor) as Valor  
     , M.mov_observacao as Observacao  
     , M.mov_unidadeDestino  
     , M.cod_siafem  
    FROM  
     MovimentacaoBem M WITH(NOLOCK)  
     INNER JOIN Unidade U WITH(NOLOCK)  
      ON U.uni_id = M.uni_id  
     INNER JOIN ParametroContabil PC WITH(NOLOCK)  
      ON M.cco_codigoDebito = PC.cco_codigoDebito  
       AND M.cco_codigoCredito = PC.cco_codigoCredito  
       AND M.grp_id = PC.grp_id  
       AND M.tpm_id = PC.tpm_id  
     INNER JOIN TipoMovimentacao TM WITH(NOLOCK)   
      ON M.tpm_id = TM.tpm_id   
       AND TM.tpm_operacao = 2  
    WHERE   
     M.mov_nl IS NULL  
     AND M.mov_situacao in (1,4)  
     AND M.uni_id = @uni_id  
     AND M.per_mes = @per_mes  
     AND M.per_ano = @per_ano  
     AND (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)  
     AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)  
     AND (M.mov_observacao = @mov_observacao OR @mov_observacao IS NULL)  
     AND (M.mov_unidadeDestino = @mov_unidadeDestino OR @mov_unidadeDestino IS NULL)  
     AND (M.cco_codigoDebito = @cco_codigoDebito OR @cco_codigoDebito IS NULL)  
     AND (M.cco_codigoCredito = @cco_codigoCredito OR @cco_codigoCredito IS NULL)  
     AND (M.tpm_id <> (SELECT par_valor FROM SYS_Parametros WHERE par_chave = 'MOVIMENTO_RECEBIMENTO'))  
     AND ((SELECT TOP 1 uni_id FROM dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id)  
     AND M.cod_siafem = @cod_siafem  
    GROUP BY  
     U.uni_codigoUGE  
     , PC.pco_evento  
     , PC.pco_eventoCredito  
     , M.cco_codigoDebito  
     , M.cco_codigoCredito  
     , M.mov_observacao  
     , M.mov_unidadeDestino  
     , M.per_ano  
     , M.cod_siafem) AS MOV  
       
    UNPIVOT (Evento FOR Eventos IN (EventoD, EventoC)) AS evt  
    UNPIVOT (Classificacao FOR Classificacoes IN (ClassificacaoD, ClassificacaoC)) AS cla   
   WHERE  
    RIGHT(Eventos,1) =  RIGHT(Classificacoes,1)) AS T1  
   CROSS APPLY (SELECT TOP 1  
       H.uni_id  
       , H.uni_idOriginal  
       , H.uni_codigoUGE AS CgcCpfUgfav  
       , '00001' AS GestaoFav  
      FROM  
       dbo.FN_GetUnidadesImportacao(T1.mov_unidadeDestino) H  
       LEFT JOIN UnidadeGestora UGE WITH(NOLOCK)  
        ON H.uni_id = UGE.uni_id  
      WHERE  
       NOT UGE.uni_id IS NULL) AS T2  
  WHERE  
   T1.mov_unidadeDestino = T2.uni_idOriginal  
   --AND T1.UnidadeGestora <> T2.CgcCpfUgfav  
 )  
 SELECT  
  (SELECT 'SIAFNL001' FOR XML PATH('cdMsg'), TYPE)  
  , (SELECT  
   (SELECT  
    ID AS "@ID"  
    , DataEmissao AS "DataEmissao"  
    , UnidadeGestora AS "UnidadeGestora"  
    , Gestao AS "Gestao"  
    , CgcCpfUgfav AS "CgcCpfUgfav"  
    , GestaoFav AS "GestaoFav"  
   FROM   
    (SELECT   
     ID = T1.cod_siafem  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav   
     FROM   
     SIAFNL001 T1  
    --WHERE   
    -- T1.ID = principal.ID   
    GROUP BY  
     T1.cod_siafem  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav) AS DOC  
       
   FOR XML PATH('documento'), TYPE)  
   ,  
   (SELECT  
    (SELECT  
    (SELECT  
     ID AS "@ID"  
     , Evento AS "Evento"  
     , InscricaoEvento AS "InscricaoEvento"  
     , Classificacao AS "Classificacao"  
     , Fonte AS "Fonte"  
     , Valor AS "Valor"  
    FROM  
     (SELECT   
      T1.ID  
      , T1.Evento  
      , T1.InscricaoEvento  
      , T1.Classificacao  
      , T1.Fonte  
      , T1.Valor  
      FROM  
      SIAFNL001 AS T1  
      --WHERE  
     -- T1.ID = principal.ID  
     ) AS EVT  
    FOR XML PATH('desc'), TYPE)  
   FOR XML PATH('Repeticao'), TYPE)  
   FOR XML PATH('Evento'), TYPE),  
   (  
    SELECT  
    (  
     SELECT   
     (  
      SELECT ID AS "obs/@ID", Observacao AS "obs/Observacao"  
      FROM  
       (  
        SELECT TOP 3 s.Id, s.Value as 'Observacao'  
        FROM FN_Split(CONVERT(VARCHAR(MAX), (  
                  SELECT TOP 1 T2.Observacao  
                  FROM SIAFNL001 AS T2  
                  GROUP BY T2.Observacao  
                 ))) AS s  
       ) AS OBS  
      FOR XML PATH(''), TYPE  
     )FOR XML PATH('Repeticao'), TYPE  
    )  
   FOR XML PATH('Observacao'), TYPE  
   ), '' AS "NotaFiscal/Repeticao"  
  FOR XML PATH('SiafemDocNL'), TYPE)  
 FOR XML PATH(''), ROOT('SIAFDOC')  
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_ExportaTransfsemIncorp]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Jorge Freitas  
-- Create date: 28/02/2011  
-- Description: Função que cria o XML usado para criação da NL para movimentação de   
--    transferências. Vide manual do SIAFEM v1.2.6,   
--    item SIAFNL001 – NL Nota de Lançamento, página 26.  
  
-- Alterado: Allex Rocha  
-- Date:  05/12/2014  
--    Alteração para pegar o ID da movimentação do SIAFEM e split do campo Observacao  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_ExportaTransfsemIncorp]  
 @uni_id INT  
 , @per_mes CHAR(2)  
 , @per_ano CHAR(4)  
 , @eventoDebito INT  
 , @eventoCredito INT  
 , @mov_observacao VARCHAR(MAX)  
 , @mov_unidadeDestino INT  
 , @cco_codigoDebito VARCHAR(20)  
 , @cco_codigoCredito VARCHAR(20)  
 , @dataEmissao DATETIME  
 , @cod_siafem VARCHAR(30)  
 AS  
BEGIN  
 SET LANGUAGE Portuguese  
  
 DECLARE @data DATETIME  
 DECLARE @ultimodia DATETIME  
  
 SET @data = CONVERT(char(8),@per_ano + @per_mes + '01',112)  
 SET @ultimodia =ISNULL(@dataEmissao, dateadd(d,-1,dateadd(m,1,CONVERT(datetime,CONVERT(char(6),@data,112) + '01',112))))  
   
 ;WITH MoviBem AS  
 (  
  SELECT   
   cco_codigoDebito,  
   cco_codigoCredito,  
   mov_unidadeDestino,  
   mov_valor,  
   mov_observacao,  
   uni_id,  
   grp_id,  
   MovimentacaoBem.tpm_id,  
   per_ano,  
   cod_siafem  
  FROM  
   MovimentacaoBem  
  INNER JOIN TipoMovimentacao TM WITH(NOLOCK)   
   ON MovimentacaoBem.tpm_id = TM.tpm_id   
    AND TM.tpm_operacao = 6  
  Where      
    mov_nl IS NULL  
   AND mov_situacao in (1,4)  
   AND uni_id = @uni_id  
   AND per_mes = @per_mes  
   AND per_ano = @per_ano  
   AND ((SELECT TOP 1 uni_id FROM dbo.FN_GetUnidadesSuperiores(mov_unidadeDestino)) <> uni_id)  
 )  
   
 ,SIAFNL001(ID, DataEmissao, UnidadeGestora, Gestao, CgcCpfUgfav, GestaoFav, Evento, InscricaoEvento, Classificacao, Fonte, Valor, Observacao, NotaFiscal, cod_siafem) AS (  
  SELECT   
   ID   
   , DataEmissao  
   , UnidadeGestora  
   , Gestao  
   , CgcCpfUgfav  
   , GestaoFav  
   , Evento  
   , '' as InscricaoEvento  
   , Classificacao  
   , '' as Fonte  
   , REPLACE(CONVERT (varchar(20), CONVERT(money, Valor)), '.', '')  
   , Observacao  
   , '' as NotaFiscal  
   , cod_siafem  
  FROM  
   (SELECT  
    ID   
    , DataEmissao  
    , UnidadeGestora  
    , Gestao  
    , Evento  
    , '' as InscricaoEvento  
    , Classificacao  
    , Valor  
    , Observacao  
    , mov_unidadeDestino  
    , cod_siafem  
   FROM  
    (SELECT  
     ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID  
     , REPLACE(UPPER(CONVERT(CHAR,@ultimodia, 106)), ' ', '') AS DataEmissao  
     , U.uni_codigoUGE AS UnidadeGestora  
     , '00001' AS Gestao    
     , PC.pco_evento as EventoD  
     , PC.pco_eventoCredito as EventoC  
     , M.cco_codigoDebito as ClassificacaoD  
     , M.cco_codigoCredito as ClassificacaoC  
     , SUM(M.mov_valor) as Valor  
     , M.mov_observacao as Observacao  
     , M.mov_unidadeDestino  
     , M.cod_siafem  
    FROM  
     MoviBem M WITH(NOLOCK)  
     INNER JOIN Unidade U WITH(NOLOCK)  
      ON U.uni_id = M.uni_id  
     INNER JOIN ParametroContabil PC WITH(NOLOCK)  
      ON M.cco_codigoDebito = PC.cco_codigoDebito  
       AND M.cco_codigoCredito = PC.cco_codigoCredito  
       AND M.grp_id = PC.grp_id  
       AND M.tpm_id = PC.tpm_id  
    WHERE        
      (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)  
     AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)  
     AND (M.mov_observacao = @mov_observacao OR @mov_observacao IS NULL)  
     AND (M.mov_unidadeDestino = @mov_unidadeDestino OR @mov_unidadeDestino IS NULL)  
        AND (M.cco_codigoDebito = @cco_codigoDebito OR @cco_codigoDebito IS NULL)  
        AND (M.cco_codigoCredito = @cco_codigoCredito OR @cco_codigoCredito IS NULL)  
     AND M.cod_siafem = @cod_siafem  
    GROUP BY  
     U.uni_codigoUGE  
     , PC.pco_evento  
     , PC.pco_eventoCredito  
     , M.cco_codigoDebito  
     , M.cco_codigoCredito  
     , M.mov_observacao  
     , M.mov_unidadeDestino       
     , M.per_ano  
     , M.cod_siafem) AS MOV  
    UNPIVOT (Evento FOR Eventos IN (EventoD, EventoC)) AS evt  
    UNPIVOT (Classificacao FOR Classificacoes IN (ClassificacaoD, ClassificacaoC)) AS cla   
   WHERE   
    RIGHT(Eventos,1) =  RIGHT(Classificacoes,1)) AS T1  
   CROSS APPLY (SELECT TOP 1   
       H.uni_id  
       , H.uni_idOriginal  
       , H.uni_codigoUGE AS CgcCpfUgfav  
       , '00001' AS GestaoFav      
      FROM   
       dbo.FN_GetUnidadesImportacao(T1.mov_unidadeDestino) H  
       LEFT JOIN UnidadeGestora UGE WITH(NOLOCK)   
        ON H.uni_id = UGE.uni_id  
      WHERE       
       NOT UGE.uni_id IS NULL) AS T2  
  WHERE  
   T1.mov_unidadeDestino = T2.uni_idOriginal  
   --AND T1.UnidadeGestora <> T2.CgcCpfUgfav  
 )  
 SELECT  
  (SELECT 'SIAFNL001' FOR XML PATH('cdMsg'), TYPE)  
  , (SELECT  
   (SELECT   
    ID AS "@ID"  
    , DataEmissao AS "DataEmissao"  
    , UnidadeGestora AS "UnidadeGestora"  
    , Gestao AS "Gestao"  
    , CgcCpfUgfav AS "CgcCpfUgfav"  
    , GestaoFav AS "GestaoFav"    
   FROM   
    (SELECT   
     ID = T1.cod_siafem  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav  
     FROM   
     SIAFNL001 T1  
    -- WHERE   
    -- T1.ID = principal.ID   
    GROUP BY   
     T1.cod_siafem  
     , T1.DataEmissao  
     , T1.UnidadeGestora  
     , T1.Gestao  
     , T1.CgcCpfUgfav  
     , T1.GestaoFav) AS DOC  
   FOR XML PATH('documento'), TYPE)  
   ,  
   (SELECT  
    (SELECT         
    (SELECT  
     ID AS "@ID"  
     , Evento AS "Evento"  
     , InscricaoEvento AS "InscricaoEvento"  
     , Classificacao AS "Classificacao"  
     , Fonte AS "Fonte"  
     , Valor AS "Valor"  
    FROM  
     (SELECT   
      T1.ID  
      , T1.Evento  
      , T1.InscricaoEvento  
      , T1.Classificacao  
      , T1.Fonte  
      , T1.Valor   
      FROM   
      SIAFNL001 AS T1  
      --WHERE  
     -- T1.ID = principal.ID  
     ) AS EVT  
    FOR XML PATH('desc'), TYPE)      
   FOR XML PATH('Repeticao'), TYPE)  
   FOR XML PATH('Evento'), TYPE),  
   (  
    SELECT  
    (  
     SELECT   
     (  
      SELECT ID AS "obs/@ID", Observacao AS "obs/Observacao"  
      FROM  
       (  
        SELECT TOP 3 s.Id, s.Value as 'Observacao'  
        FROM FN_Split(CONVERT(VARCHAR(MAX), (  
                  SELECT TOP 1 T2.Observacao  
                  FROM SIAFNL001 AS T2  
                  GROUP BY T2.Observacao  
                 ))) AS s  
       ) AS OBS  
      FOR XML PATH(''), TYPE  
     )FOR XML PATH('Repeticao'), TYPE  
    )  
   FOR XML PATH('Observacao'), TYPE)  
   , '' AS "NotaFiscal/Repeticao"  
  FOR XML PATH('SiafemDocNL'), TYPE)  
 FOR XML PATH(''), ROOT('SIAFDOC')  
END  
  
/****** Object:  StoredProcedure [dbo].[NEW_ParametroContabil_EVENTOS]    Script Date: 03/11/2011 11:23:50 ******/  
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Fechamento_Pendente]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Fechamento_Pendente]
	  @uni_id Int
	, @per_mes Char (2)
	, @per_ano Char (4)

AS
BEGIN

;WITH MoviBem AS
(
	SELECT 
		bem_id 
		,bit_id 
		,tpm_id 
		, mov_unidadeDestino
		,mov_data
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		
	FROM 
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
			uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano
		AND mov_situacao = 5
)

	SELECT 
		bem_descricao  as Bem
		,BemItem.bit_registroPat as RegistroPatrimonial
		,dbo.FN_GetUniNome (BemItem.bit_uniGestora) as UniGestora
		,dbo.FN_GetUniNome (BemItem.bit_uniGuarda) as UniGuarda
		,tpm_nome as Movimento
		,'Transferência pendente. - ' + UniA.uad_nome  as Erro
		,MoviBem.mov_data
		,MoviBem.grp_id
		,MoviBem.cco_codigoDebito
		,MoviBem.cco_codigoCredito
		,MoviBem.bem_id
		,MoviBem.tpm_id
		,MoviBem.bit_id
	FROM  
		MoviBem
	INNER JOIN BemItem WITH(NOLOCK)
		ON BemItem.bem_id = MoviBem.bem_id
		AND BemItem.bit_id = MoviBem.bit_id
	INNER JOIN BemPatrimonial WITH(NOLOCK)
		ON MoviBem.bem_id = BemPatrimonial.bem_id
	INNER JOIN TipoMovimentacao WITH(NOLOCK)
		ON MoviBem.tpm_id = TipoMovimentacao.tpm_id 
	INNER JOIN VW_UnidadeAdministrativa as UniA
		ON UniA.uni_id = mov_unidadeDestino

	where
		bit_status not in (3,5)
	
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Fechamento_SemClassificao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Debora Cavaglieri
-- Create date: 30/11/2012
-- Description:	Seleciona os movimento de recebimento do mes, que 
--              tem número de empenho no item e não tem classificação. 
--              Usado no Fechamento mensal.
-- alter date: 15/05/2015
-- Description:	adicionando o retorno dos campos de 
--		Registro Patrimonial, Unidade Gestora e Unidade de Guarda no resultado do erro
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Fechamento_SemClassificao]
	  @uni_id Int
	, @per_mes Char (2)
	, @per_ano Char (4)
AS
BEGIN

DECLARE @par_recebimento int;
 SELECT 
		@par_recebimento = par_valor 
  FROM SYS_Parametros 
  WHERE 
		par_chave ='MOVIMENTO_RECEBIMENTO'
		AND GETDATE() >= par_vigenciaInicio
		AND GETDATE() <= par_vigenciaFim

;WITH MoviBem AS
(
	SELECT 
		MovimentacaoBem.bem_id
		,MovimentacaoBem.bit_id
		,tpm_id 
	FROM 
		MovimentacaoBem WITH(NOLOCK)
	INNER JOIN BemItem WITH(NOLOCK)
		ON BemItem.bem_id = MovimentacaoBem.bem_id
		AND BemItem.bit_id = MovimentacaoBem.bit_id
	WHERE 
		BemItem.bit_status <> 3 
		AND tpm_id = @par_recebimento
		AND uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano
)

	SELECT 
		bem_descricao as Bem
		,BemItem.bit_registroPat as RegistroPatrimonial
		,dbo.FN_GetUniNome (BemItem.bit_uniGestora) as UniGestora
		,dbo.FN_GetUniNome (BemItem.bit_uniGuarda) as UniGuarda
		,tpm_nome as Movimento
		,'O número de empenho do item não apresenta classificação.' as Erro
	FROM  
		MoviBem WITH(NOLOCK)
		INNER JOIN BemItem WITH(NOLOCK)
		ON BemItem.bem_id = MoviBem.bem_id
		AND BemItem.bit_id = MoviBem.bit_id
	INNER JOIN BemPatrimonial  WITH(NOLOCK)
		ON MoviBem.bem_id = BemPatrimonial.bem_id
	INNER JOIN TipoMovimentacao  WITH(NOLOCK)
		ON MoviBem.tpm_id = TipoMovimentacao.tpm_id 
	WHERE 
		 EXISTS (Select bem_id from BemItemDocumento  WITH(NOLOCK)
							WHERE bid_tipoDoc = 4	-- Número de Empenho
								AND MoviBem.bem_id = BemItemDocumento.bem_id
								AND MoviBem.bit_id = BemItemDocumento.bit_id
								AND (bid_classificacao IS NULL OR bid_classificacao =''))
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Fechamento_SemDepreciacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Fechamento_SemDepreciacao]
	  @uni_id Int
	, @per_mes Char (2)
	, @per_ano Char (4)
AS
BEGIN


;WITH TipoMovimentacaoDepreciacao AS
(
	SELECT 
		tpm_id
	FROM 
		TipoMovimentacao WITH(NOLOCK)
	WHERE
		tpm_operacao = 4 --depreciação
)

, MoviBemDepreciacao AS
(
	SELECT 
		MovimentacaoBem.bem_id
		,MovimentacaoBem.bit_id
		,tpm_id 
		, mov_situacao
		
	FROM 
		MovimentacaoBem WITH(NOLOCK)
	INNER JOIN BemItem WITH(NOLOCK)
		ON BemItem.bem_id = MovimentacaoBem.bem_id
		AND BemItem.bit_id = MovimentacaoBem.bit_id
	WHERE 
		BemItem.bit_status not in (3,5) 
		AND	uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano
		AND EXISTS (SELECT tpm_id FROM TipoMovimentacaoDepreciacao 
					       WHERE MovimentacaoBem.tpm_id = TipoMovimentacaoDepreciacao.tpm_id )	
)

, BemItemUnidade AS
(
	SELECT
		bem_id
		,bit_id
		,bit_registroPat
		,bit_uniGuarda
		,bit_uniGestora
	FROM
		BemItem WITH(NOLOCK)
	WHERE
		(bit_uniGuarda = @uni_id OR bit_uniGestora = @uni_id)
		AND bit_cotas > 0
		AND bit_dataIncorporacao <= CAST((@per_ano + '-'+ @per_mes + '-01') as datetime)  
		AND(bit_dataBaixa IS NULL OR CAST((@per_ano + '-'+ @per_mes + '-01') as datetime) <= bit_dataBaixa)
		and bit_status not in (3,5)
)

	SELECT 
		bem_descricao as Bem
		,BemItemUnidade.bit_registroPat as RegistroPatrimonial
		,dbo.FN_GetUniNome (BemItemUnidade.bit_uniGestora) as UniGestora
		,dbo.FN_GetUniNome (BemItemUnidade.bit_uniGuarda) as UniGuarda
		, 'DEPRECIAÇÃO' AS Movimento
		,'Item não foi depreciado.' as Erro
	FROM  
		BemItemUnidade 		
	INNER JOIN BemPatrimonial
		ON BemPatrimonial .bem_id = BemItemUnidade.bem_id		
	WHERE 
		BemPatrimonial.bem_valorOrigem > 0
		AND NOT EXISTS(SELECT bem_id 
						FROM MoviBemDepreciacao 
						WHERE  MoviBemDepreciacao.bem_id = BemItemUnidade.bem_id
						AND MoviBemDepreciacao.bit_id = BemItemUnidade.bit_id)

END


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Fechamento_SemIncorporacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Fechamento_SemIncorporacao]
      @uni_id Int
	, @per_mes Char (2)
	, @per_ano Char (4)
AS
BEGIN


;WITH MoviBem AS
(
	SELECT 
		MovimentacaoBem.bem_id
		,MovimentacaoBem.bit_id
		,tpm_id 
		, mov_situacao
	FROM 
		MovimentacaoBem WITH(NOLOCK)
	WHERE 		
			uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano
		AND mov_situacao NOT IN(3,4,5)		
)

, BemItemUnidade AS
(
	SELECT
		bem_id
		,bit_id
		,bit_registroPat
		,bit_uniGuarda
		,bit_uniGestora
	FROM
		BemItem WITH(NOLOCK)
	WHERE
		BemItem.bit_status not in (3,5) 
		AND (bit_uniGuarda = @uni_id OR bit_uniGestora = @uni_id)
		AND NOT BemItem.bit_registroPat IS NULL
		AND BemItem.bit_dataIncorporacao IS NULL
)

	SELECT 
		bem_descricao AS Bem
		,BemItemUnidade.bit_registroPat as RegistroPatrimonial
		,dbo.FN_GetUniNome (BemItemUnidade.bit_uniGestora) as UniGestora
		,dbo.FN_GetUniNome (BemItemUnidade.bit_uniGuarda) as UniGuarda
		, 'INCORPORAÇÃO' AS Movimento
		,'Bem não incorporado.' as Erro
	FROM  
		BemItemUnidade 		
	INNER JOIN BemPatrimonial WITH(NOLOCK)
		ON BemPatrimonial .bem_id = BemItemUnidade.bem_id
		
		
	WHERE 
		BemPatrimonial.bem_valorOrigem > 0
		--AND BemPatrimonial.bem_legado = 0
		AND CAST((@per_ano + @per_mes ) AS INT) >= CAST (CONVERT (varchar(6),bem_dataEntrada, 112) as int)  
		AND NOT EXISTS(SELECT bem_id 
						FROM MoviBem 
						WHERE  MoviBem .bem_id = BemItemUnidade.bem_id
						AND MoviBem.bit_id = BemItemUnidade.bit_id)
						
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Fechamento_SemNE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Fechamento_SemNE]
	  @uni_id Int
	, @per_mes Char (2)
	, @per_ano Char (4)
AS
BEGIN

DECLARE @par_recebimento int;
 SELECT 
		@par_recebimento = par_valor 
  FROM SYS_Parametros 
  WHERE 
		par_chave ='MOVIMENTO_RECEBIMENTO'
		AND GETDATE() >= par_vigenciaInicio
		AND GETDATE() <= par_vigenciaFim

;WITH MoviBem AS
(
	SELECT 
		bem_id
		,bit_id
		,tpm_id 
	FROM 
		MovimentacaoBem 
	WHERE 
		tpm_id = @par_recebimento
		AND uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano
)

	SELECT 
		bem_descricao AS Bem
		,BemItem.bit_registroPat as RegistroPatrimonial
		,dbo.FN_GetUniNome (BemItem.bit_uniGestora) as UniGestora
		,dbo.FN_GetUniNome (BemItem.bit_uniGuarda) as UniGuarda
		,tpm_nome AS Movimento
		,'Item sem número de empenho.' as Erro
	FROM  
		MoviBem WITH(NOLOCK)
	INNER JOIN BemItem WITH(NOLOCK)
		ON BemItem.bem_id = MoviBem.bem_id
		AND BemItem.bit_id = MoviBem.bit_id
	INNER JOIN BemPatrimonial WITH(NOLOCK)
		ON MoviBem.bem_id = BemPatrimonial.bem_id
	INNER JOIN TipoMovimentacao WITH(NOLOCK)
		ON MoviBem.tpm_id = TipoMovimentacao.tpm_id 
	WHERE 
		BemItem.bit_status not in (3,5)
		AND NOT EXISTS (Select bem_id from BemItemDocumento
							WHERE bid_tipoDoc = 4	-- Número de Empenho
								AND MoviBem.bem_id = BemItemDocumento.bem_id
								AND MoviBem.bit_id = BemItemDocumento.bit_id)
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_GpbGrb]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_GpbGrb]  
	@bem_id BIGINT,  
	@bit_id INT,  
	@tpm_operacao VARCHAR(MAX)  
--WITH RECOMPILE  
AS  
BEGIN  
  
	WITH Movimentacao AS(  
   
	SELECT    
		mov_unidadeDestino  
		,mov_unidadeOrigem  
		,mov_situacao  
	FROM  
		MovimentacaoBem AS MOV WITH(NOLOCK)  
		INNER JOIN  TipoMovimentacao AS TPM WITH(NOLOCK)  
		ON MOV.tpm_id = TPM.tpm_id  
	WHERE  
		1=1
		  AND mov_situacao  = 5  
		  AND mov_GPB IS NULL  
		  AND bem_id = @bem_id  
		  AND bit_id = @bit_id  
		  AND tpm_operacao IN (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao,','))  
	)  
  
	SELECT    
		(Select TOP 1 uni_idGestora FROM dbo.FN_GetUnidadesSuperiores(mov_unidadeDestino)) AS gestoraDestino  
		,(Select TOP 1 uni_idGestora FROM dbo.FN_GetUnidadesSuperiores(mov_unidadeOrigem )) AS gestoraOrigem    
		--,mov_situacao
	FROM  
	Movimentacao  
  


END 


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_INSERT_BATCH]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Wellington Rossi
-- Create date: 30/10/2013
-- Description:	Insertção e Alteração em Lote
-- Alteração: cópia para Conpat 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_INSERT_BATCH]
    @DataTable dbo.MovimentacaoBemTableType READONLY 
AS
BEGIN 

    MERGE INTO dbo.MovimentacaoBem AS M
    USING @DataTable AS T 
	ON (M.mov_data = T.mov_data 
		AND M.bem_id = T.bem_id 
		AND M.bit_id = T.bit_id 
		AND M.tpm_id = T.tpm_id 
		AND M.grp_id = T.grp_id 
		AND M.cco_codigoDebito = T.cco_codigoDebito 
		AND M.cco_codigoCredito = T.cco_codigoCredito) 
    WHEN MATCHED THEN 
		UPDATE SET 
			per_mes = T.per_mes 
			, per_ano = T.per_ano 
			, uni_id = T.uni_id 
			, fat_id = T.fat_id 
			, usu_id = T.usu_id 
			, mov_valor = T.mov_valor 
			, mov_valorReavaliado = T.mov_valorReavaliado 
			, mov_percentualBaixa = T.mov_percentualBaixa 
			, mov_GPB = T.mov_GPB 
			, mov_unidadeOrigem = T.mov_unidadeOrigem 
			, mov_unidadeDestino = T.mov_unidadeDestino 
			, mov_observacao = T.mov_observacao 
			, mov_origem = T.mov_origem 
			, mov_nl = T.mov_nl 
			, mov_situacao = T.mov_situacao 
			, mov_dataCriacao = T.mov_dataCriacao 
			, mov_dataAlteracao = T.mov_dataAlteracao 
			, mov_dataOriginal = T.mov_dataOriginal 
    WHEN NOT MATCHED THEN 
		INSERT ( mov_data 
				, bem_id 
				, bit_id 
				, tpm_id 
				, grp_id 
				, cco_codigoDebito 
				, cco_codigoCredito 
				, per_mes 
				, per_ano 
				, uni_id 
				, fat_id 
				, usu_id 
				, mov_valor 
				, mov_valorReavaliado 
				, mov_percentualBaixa 
				, mov_GPB 
				, mov_unidadeOrigem 
				, mov_unidadeDestino 
				, mov_observacao 
				, mov_origem 
				, mov_nl 
				, mov_situacao 
				, mov_dataCriacao 
				, mov_dataAlteracao 
				, mov_dataOriginal)
		VALUES ( T.mov_data 
				, T.bem_id 
				, T.bit_id 
				, T.tpm_id 
				, T.grp_id 
				, T.cco_codigoDebito 
				, T.cco_codigoCredito 
				, T.per_mes 
				, T.per_ano 
				, T.uni_id 
				, T.fat_id 
				, T.usu_id 
				, T.mov_valor 
				, T.mov_valorReavaliado 
				, T.mov_percentualBaixa 
				, T.mov_GPB 
				, T.mov_unidadeOrigem 
				, T.mov_unidadeDestino 
				, T.mov_observacao 
				, T.mov_origem 
				, T.mov_nl 
				, T.mov_situacao 
				, T.mov_dataCriacao 
				, T.mov_dataAlteracao 
				, T.mov_dataOriginal
				);
	
	SELECT ISNULL(@@ROWCOUNT,-1)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Manutencao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Manutencao]   
 @tpm_id INT  
 , @per_mes INT  
 , @per_ano INT  
 , @bit_registroPat VARCHAR(20)  
 , @mov_data DATETIME  
 , @mov_GPB varchar(20)  
 , @uni_id int  
AS  
BEGIN  
  
 SELECT mb.mov_data ,  
         mb.bem_id ,  
         mb.bit_id ,  
         mb.tpm_id ,  
         mb.grp_id ,  
         mb.uni_id ,  
         mb.cco_codigoDebito ,  
         mb.cco_codigoCredito ,  
         mb.per_mes ,  
         mb.per_ano ,  
         mb.fat_id ,  
         mb.usu_id ,  
         mb.mov_valor ,  
         mb.mov_valorReavaliado ,  
         mb.mov_percentualBaixa ,  
         mb.mov_GPB ,  
         mb.mov_unidadeOrigem ,  
         mb.mov_unidadeDestino ,  
         mb.mov_observacao ,  
         mb.mov_origem ,  
         mb.mov_nl ,  
         mb.mov_situacao ,  
         mb.mov_dataCriacao ,  
         mb.mov_dataAlteracao,  
         bi.bit_registroPat,  
         bp.bem_descricao,  
         tm.tpm_descricao  
           
     FROM dbo.MovimentacaoBem AS mb WITH(NoLock)  
  INNER JOIN dbo.BemItem AS bi WITH(NoLock)   
   ON mb.bem_id = bi.bem_id   
   AND mb.bit_id = bi.bit_id  
  INNER JOIN dbo.BemPatrimonial AS bp WITH(NoLock)  
   ON bp.bem_id = bi.bem_id  
  INNER JOIN dbo.TipoMovimentacao AS tm WITH(NoLock)  
   ON tm.tpm_id = mb.tpm_id   
   and (tpm_situacao = 1 or tpm_situacao = 4)  
  
 WHERE   
  1 = 1  
  and (mb.mov_nl IS NULL or mb.mov_nl = 'LEGADO' or mb.mov_nl = 'GRB' )  
  AND (mb.mov_situacao = 1 or mb.mov_situacao = 4 or mb.mov_situacao = 5 )  
  AND (mb.mov_data = CAST(@mov_data AS Date) OR @mov_data IS NULL)    
  AND (mb.per_ano = @per_ano OR @per_ano IS NULL)  
  AND (mb.per_mes = @per_mes OR @per_mes IS NULL)  
  AND (mb.tpm_id = @tpm_id OR @tpm_id IS NULL)  
  AND (bi.bit_registroPat = @bit_registroPat OR @bit_registroPat IS NULL)  
  AND (@mov_GPB IS NULL OR mb.mov_GPB = @mov_GPB)  
  AND (mb.uni_id = @uni_id OR @uni_id IS NULL)  
    
  ORDER BY   
   mb.uni_id  
   , mb.mov_data  
    
    
  SELECT @@ROWCOUNT  
END  
  


  
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_MontaRelatorioGPBeGRPporUnidadeGestoraRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Pedro Gimenez
-- Create date: 30/04/2012
-- Description:	Relatório de GPB e GRB por Unidade Gestora
-- =============================================
create PROCEDURE [dbo].[NEW_MovimentacaoBem_MontaRelatorioGPBeGRPporUnidadeGestoraRS]
	@unicedente_id int,
	@unicessionaria_id int,
	@data_inicial date,
	@data_final date,
	@grp_id int,
	@numguia int,
	@numcontrato varchar(20),
	@numempenho varchar(20),
	@descricao varchar(100)	
AS
BEGIN	

WITH BemItemNE AS
(
	SELECT 
		bid_numeroDoc
		, bit_id
		, bem_id
	FROM 
		BemItemDocumento With (NoLock)
	WHERE
		bid_tipoDoc = 4
)
, BemItemProcesso AS
(
	SELECT 
		bid_numeroDoc
		, bit_id
		, bem_id
	FROM 
		BemItemDocumento With (NoLock)
	WHERE
		bid_tipoDoc = 2
)

		SELECT 
			dbo.FN_GetUniNome(MB.mov_unidadeOrigem)  AS uniOrigem,		  
			dbo.FN_GetUniNome(MB.mov_unidadeDestino) AS uniDestino,
			dbo.FN_GetUniNome(BI.bit_uniGestora)     AS uniGes,		
			BP.bem_descricao,
			Mb.mov_valor,
			ISNULL(MB.mov_GPB,'Não possui guia')as mov_GPB,
			BINE.bid_numeroDoc as bem_ne,
			BIProcesso.bid_numeroDoc as bem_contrProcessual,			
			GB.grp_nome,				
			MB.mov_dataCriacao,
			MB.mov_dataAlteracao
		FROM 
			BemPatrimonial AS BP WITH(NoLock)
			INNER JOIN BemItem AS BI with(nolock)
				ON BP.bem_id= BI.bem_id
			LEFT JOIN BemItemNE AS BINE 
				ON BI.bem_id = BINE.bem_id
				AND BI.bit_id = BINE.bit_id
			LEFT JOIN BemItemProcesso AS BIProcesso 
				ON BI.bem_id = BIProcesso.bem_id
				AND BI.bit_id = BIProcesso.bit_id
			INNER JOIN GrupoBens AS GB with(nolock)
				ON GB.grp_id = BP.grp_id
			INNER JOIN MovimentacaoBem AS MB WITH(NoLock)
				ON MB.bem_id = BI.bem_id
				AND MB.bit_id= BI.bit_id
				AND MB.mov_situacao not in (3,4)
			INNER JOIN TipoMovimentacao AS TM WITH(NoLock)
				ON TM.tpm_id = MB.tpm_id 
		WHERE
			(@unicedente_id = 0             OR (@unicedente_id = MB.mov_unidadeOrigem))
			AND (@unicessionaria_id = 0     OR (@unicessionaria_id = MB.mov_unidadeDestino))
			AND (@descricao IS NULL         OR (UPPER(BP.bem_descricao)         LIKE '%' + UPPER(@descricao) + '%'))
			AND (@numcontrato IS NULL       OR (UPPER(BIProcesso.bid_numeroDoc) LIKE '%' + UPPER(@numcontrato) + '%'))
			AND (@numempenho IS NULL        OR (UPPER(BINE.bid_numeroDoc)       LIKE '%' + UPPER(@numempenho) + '%'))
			AND (@numguia = 0               OR (@numguia = MB.mov_GPB))			
			AND (@grp_id = 0                OR (@grp_id=GB.grp_id))
			AND (@data_inicial IS NULL      OR CONVERT(DATE, MB.mov_data,103) >= @data_inicial) 
			AND (@data_final IS NULL        OR CONVERT(DATE, MB.mov_data,103) <= @data_final)								
			AND (MB.mov_unidadeDestino != MB.mov_unidadeOrigem)
			AND NOT (mov_GPB IS NULL)
			AND BI.bit_situacao = 1
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_MontaRelatorioGPBeGRPporUnidadeGestoraSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext NEW_MovimentacaoBem_MontaRelatorioGPBeGRPporUnidadeGestoraSP

-- =============================================
-- Author:		Pedro Gimenez
-- Create date: 30/04/2012
-- Description:	Relatório de GPB e GRB por Unidade Gestora
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_MontaRelatorioGPBeGRPporUnidadeGestoraSP]
	@unicedente_id int,
	@unicessionaria_id int,
	@data_inicial date,
	@data_final date,
	@grp_id int,
	@numguia varchar(20),
	@numcontrato varchar(50),
	@numempenho varchar(50),
	@descricao varchar(100)	
AS
BEGIN	

WITH BemItemNE AS
(
	SELECT 
		bid_numeroDoc
		, bit_id
		, bem_id
	FROM 
		BemItemDocumento With (NoLock)
	WHERE
		bid_tipoDoc = 4
)
, BemItemProcesso AS
(
	SELECT 
		bid_numeroDoc
		, bit_id
		, bem_id
	FROM 
		BemItemDocumento With (NoLock)
	WHERE
		bid_tipoDoc = 2
)

		SELECT 
			dbo.FN_GetUniNome(MB.mov_unidadeOrigem)  AS uniOrigem,		  
			dbo.FN_GetUniNome(MB.mov_unidadeDestino) AS uniDestino,
			dbo.FN_GetUniNome(BI.bit_uniGestora)     AS uniGes,		
			BP.bem_descricao ,
			Mb.mov_valor,
			ISNULL(MB.mov_GPB,'Não possui guia')as mov_GPB,
			BINE.bid_numeroDoc as bem_ne,
			BIProcesso.bid_numeroDoc as bem_contrProcessual,			
			GB.grp_nome,				
			MB.mov_dataCriacao,
			MB.mov_dataAlteracao,
			ISNULL (CAST(BI.bit_registroPat as VARCHAR(500)),'Sem Registro Patrimonial') as bit_registroPat
		FROM 
			BemPatrimonial AS BP WITH(NoLock)
			INNER JOIN BemItem AS BI with(nolock)
				ON BP.bem_id= BI.bem_id
			LEFT JOIN BemItemNE AS BINE 
				ON BI.bem_id = BINE.bem_id
				AND BI.bit_id = BINE.bit_id
			LEFT JOIN BemItemProcesso AS BIProcesso 
				ON BI.bem_id = BIProcesso.bem_id
				AND BI.bit_id = BIProcesso.bit_id
			INNER JOIN GrupoBens AS GB with(nolock)
				ON GB.grp_id = BP.grp_id
			INNER JOIN MovimentacaoBem AS MB WITH(NoLock)
				ON MB.bem_id = BI.bem_id
				AND MB.bit_id= BI.bit_id
				AND MB.mov_situacao not in (3,4)
			INNER JOIN TipoMovimentacao AS TM WITH(NoLock)
				ON TM.tpm_id = MB.tpm_id 
		WHERE
			(@unicedente_id = 0             OR (@unicedente_id = MB.mov_unidadeOrigem))
			AND (@unicessionaria_id = 0     OR (@unicessionaria_id = MB.mov_unidadeDestino))
			AND (@descricao IS NULL         OR (UPPER(BP.bem_descricao)         LIKE '%' + UPPER(@descricao) + '%'
																	COLLATE Latin1_General_CI_AI)) --ignora acentuacao
			AND (@numcontrato IS NULL       OR (UPPER(BIProcesso.bid_numeroDoc) LIKE '%' + UPPER(@numcontrato) + '%'))																	
			AND (@numempenho IS NULL        OR (UPPER(BINE.bid_numeroDoc)       LIKE '%' + UPPER(@numempenho) + '%'))																	
			AND (@numguia IS NULL    OR     @numguia = '0'    OR (@numguia = MB.mov_GPB))			
			AND (@grp_id = 0                OR (@grp_id=GB.grp_id))
			AND (@data_inicial IS NULL      OR CONVERT(DATE, MB.mov_data,103) >= @data_inicial) 
			AND (@data_final IS NULL        OR CONVERT(DATE, MB.mov_data,103) <= @data_final)								
			AND (MB.mov_unidadeDestino != MB.mov_unidadeOrigem)
			AND NOT (mov_GPB IS NULL)
			AND BI.bit_situacao = 1
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_MontaRelatorioLancamentoContabeisRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Fabio Nazima
-- Create date:04/10/2010
-- Description:	monta relatorio de movimentacao por conta
-- =============================================
create PROCEDURE [dbo].[NEW_MovimentacaoBem_MontaRelatorioLancamentoContabeisRS]
	@cco varchar(20),
	@dataInicial date,
	@dataFinal date,
	@uniges_id int,
	@uniguarda_id int
AS
BEGIN	
	WITH

	tbUnidades AS (
	
		SELECT uni_id, uad_id
		FROM
			dbo.FN_GetUnidadeEFilhas(@uniges_id)		

	)

		SELECT 
			MOV.mov_data as data,
			mov.bem_id,
			mov.bit_id,
			Case
				when MOV.cco_codigoCredito = CC.cco_codigo then MOV.cco_codigoDebito 
				when MOV.cco_codigoDebito = CC.cco_codigo then MOV.cco_codigoCredito
			end
			as conta,
					Case 
					when MOV.cco_codigoCredito=MOV.cco_codigoDebito then
						Case 
							when (select top 1 uni_id from dbo.FN_GetUnidadesSuperiores(mov_unidadeDestino ))= mov.uni_id
								then 'Debito'
							when (select top 1 uni_id from dbo.FN_GetUnidadesSuperiores(mov_unidadeOrigem ))= mov.uni_id
								then 'Credito'
							else
								Case
									when MOV.cco_codigoCredito= CC.cco_codigo then 'Credito'
									when MOV.cco_codigoDebito= CC.cco_codigo then 'Debito'
								end
						end
							
				else
					Case
						when MOV.cco_codigoCredito= CC.cco_codigo then 'Credito'
						when MOV.cco_codigoDebito= CC.cco_codigo then 'Debito'
					end
				end
			as tipoConta,
			MOV.mov_valor as valor,
			MOV.mov_observacao as historico,
			MOV.mov_nl as situacao,
			CC.cco_codigo as codigo,
			CC.cco_nome as nomeConta,
			(select uni_codigoUGE from Unidade where uni_id = MOV.uni_id) as UGE,
			unGua.uni_id,
			uadGua.uad_nome
		FROM 
			ContasContabeis AS CC
			INNER JOIN 
				MovimentacaoBem AS MOV 
				ON 
					CC.cco_codigo = MOV.cco_codigoDebito
					OR (CC.cco_codigo = MOV.cco_codigoCredito AND MOV.cco_codigoCredito <> MOV.cco_codigoDebito)					
			INNER JOIN tbUnidades AS unGua	
				ON unGua.uni_id = mov.uni_id		
			INNER JOIN dbo.VW_UnidadeAdministrativa AS uadGua WITH(NoLock)
				ON unGua.uad_id = uadGua.uad_id		

					
		WHERE 
			(@cco = '0' or @cco is null or (CC.cco_codigo = @cco ))
			And (((select top 1 mov.uni_id from dbo.FN_GetUnidadesSuperiores(MOV.mov_unidadeOrigem )) = mov.uni_id) 
				or ((select top 1 mov.uni_id from dbo.FN_GetUnidadesSuperiores(MOV.mov_unidadeDestino )) = mov.uni_id))
			And (@dataInicial is null or (CONVERT(int,MOV.per_ano)=YEAR(@dataInicial) and CONVERT(int,MOV.per_mes)>=CONVERT(int, Month(@dataInicial))) or (CONVERT(int,MOV.per_ano)>CONVERT(int,YEAR(@dataInicial))))
			And (@dataFinal is null or (CONVERT(int,MOV.per_ano)= Convert(int,YEAR(@dataFinal)) and CONVERT(int,MOV.per_mes)<=CONVERT(int,Month(@dataFinal))) or (CONVERT(int,MOV.per_ano)<CONVERT(int, YEAR(@dataFinal))))
			And (mov_situacao NOT IN (5,3)  )
			AND ((@uniguarda_id  = 0) OR (unGua.uni_id = @uniguarda_id))
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_MontaRelatorioLancamentoContabeisSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
--sp_helptext NEW_MovimentacaoBem_MontaRelatorioLancamentoContabeisSP        
        
-- =============================================        
-- Author:  Fabio Nazima        
-- Create date:04/10/2010        
-- Description: monta relatorio de movimentacao por conta        
-- =============================================        
      
--select * from movimentacaobem where mov_nl = '2017NL01181'      
--select * from unidade where uni_codigoUGE = '080305',--      
  
--exec [dbo].[NEW_MovimentacaoBem_MontaRelatorioLancamentoContabeisSP] null, getdate()-365 , getdate() ,52,0  
  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_MontaRelatorioLancamentoContabeisSP]        
--declare      
 @cco varchar(20), --= null,        
 @dataInicial date,-- = getdate()-365,        
 @dataFinal date,-- = getdate() ,        
 @uniges_id int,-- = 38,        
 @uniguarda_id int--    = 0      
 AS        
BEGIN         
 WITH     
        
 tbUnidades AS (        
         
  SELECT uni_id, uad_id , case when @uniges_id=85 then 1 else 0 end  as uge       
  FROM        
   dbo.FN_GetUnidadeEFilhas(@uniges_id)          
        
 )  , tbMovi as (      
        
  SELECT   pc.pco_evento as eventoDebito, pc.pco_eventoCredito as eventoCredito,      
  mov_unidadeDestino,      
  mov_unidadeOrigem,      
 -- mov.uni_id,      
  mov.cco_codigoCredito,      
  mov.cco_codigoDebito,      
   MOV.mov_data as data,        
   mov.bem_id,        
   mov.bit_id,        
   CC.cco_codigo,      
   Case        
    when MOV.cco_codigoCredito = CC.cco_codigo then MOV.cco_codigoDebito         
    when MOV.cco_codigoDebito = CC.cco_codigo then MOV.cco_codigoCredito        
   end        
   as conta,        
     (Case         
     when MOV.cco_codigoCredito=MOV.cco_codigoDebito then        
      (Case         
       when (select top 1 uni_id from dbo.[FN_GetUnidadeGestoraImediata](mov_unidadeDestino )) = unGua.uni_id       
        then 'Debito'       
       when (select top 1 uni_id from dbo.[FN_GetUnidadeGestoraImediata](mov_unidadeOrigem )) = unGua.uni_id       
  then (case when MOV.mov_nl = 'LEGADO'      
   then 'Debito'      
   else      
     'Credito' end)      
       else        
        (Case        
         when MOV.cco_codigoCredito= CC.cco_codigo then (case when MOV.mov_nl = 'LEGADO'      
   then 'Debito'      
   else 'Credito' end )      
         when MOV.cco_codigoDebito= CC.cco_codigo then 'Debito'        
        end  )      
      end)      
               
    else        
     (Case        
      when MOV.cco_codigoCredito= CC.cco_codigo then (case when MOV.mov_nl = 'LEGADO'      
   then 'Debito'      
   else 'Credito' end )      
      when MOV.cco_codigoDebito= CC.cco_codigo then 'Debito'        
     end  )      
    end  )      
   as tipoConta,        
   (Case         
    -- when mov_unidadeDestino=mov_unidadeOrigem  then '0,00'     
 when (select  top 1 uni_id from [dbo].[FN_GetUnidadeGestoraImediata](mov_unidadeOrigem) ) =     
 (select  top 1 uni_id from [dbo].[FN_GetUnidadeGestoraImediata](mov_unidadeDestino ))  then '0,00'    
  else MOV.mov_valor END)   as valor,        
   MOV.mov_observacao as historico,        
   MOV.mov_nl as situacao,        
   CC.cco_codigo as codigo,        
   CC.cco_nome as nomeConta,        
   (select uni_codigoUGE from Unidade with (nolock) where uni_id = MOV.uni_id) as UGE,        
   unGua.uni_id,        
   uadGua.uad_nome        
  -- ,mov_unidadeOrigem,mov_unidadeDestino  
  FROM         
   ContasContabeis  AS CC with (nolock)        
   INNER JOIN         
    MovimentacaoBem AS MOV  with (nolock)        
    ON         
     CC.cco_codigo = MOV.cco_codigoDebito        
     OR (CC.cco_codigo = MOV.cco_codigoCredito AND MOV.cco_codigoCredito <> MOV.cco_codigoDebito)             
   INNER JOIN tbUnidades AS unGua with (nolock)        
    ON unGua.uni_id = mov.uni_id     or unGua.uni_id = mov.mov_unidadeDestino      
   INNER JOIN dbo.VW_UnidadeAdministrativa AS uadGua WITH(NoLock)        
    ON unGua.uad_id = uadGua.uad_id         
 INNER JOIN PARAMETROCONTABIL PC     with (nolock)       
 ON PC.TPM_ID = MOV.TPM_ID AND PC.GRP_ID = MOV.GRP_ID      
 AND PC.CCO_CODIGOCREDITO =  MOV.CCO_CODIGOCREDITO  AND       
       PC.CCO_CODIGODEBITO = MOV.CCO_CODIGODEBITO      
  WHERE         
   (@cco = '0' or @cco is null or (CC.cco_codigo = @cco ))        
   And (((select top 1 mov.uni_id from dbo.[FN_GetUnidadeGestoraImediata](MOV.mov_unidadeOrigem )) = mov.uni_id)         
    or ((select top 1 mov.uni_id from dbo.[FN_GetUnidadeGestoraImediata](MOV.mov_unidadeDestino )) = mov.uni_id))        
And (@dataInicial is null or (CONVERT(int,MOV.per_ano)=YEAR(@dataInicial) and CONVERT(int,MOV.per_mes)>=CONVERT(int, Month(@dataInicial))) or (CONVERT(int,MOV.per_ano)>CONVERT(int,YEAR(@dataInicial))))        
   And (@dataFinal is null or (CONVERT(int,MOV.per_ano)= Convert(int,YEAR(@dataFinal)) and CONVERT(int,MOV.per_mes)<=CONVERT(int,Month(@dataFinal))) or (CONVERT(int,MOV.per_ano)<CONVERT(int, YEAR(@dataFinal))))        
   And (mov.mov_situacao IN (1,2,4,6,7)  )        
   AND ((@uniguarda_id  = 0) OR (unGua.uni_id = @uniguarda_id))        
 --  and   mov_unidadeDestino is not null  
)



select * from tbMovi


END     
    
    
--SELECT TOP 100 * FROM MOVIMENTACAOBEM WITH (NOLOCK) WHERE mov_unidadeDestino = mov_unidadeOrigem
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_MontaRelManutencaoRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Pedro Gimenez
-- Create date: 11/01/2012
-- Description:	retorna os movimentos do sistema que foram alterados
--              na tela de manutenção de movimentos
-- =================================================================
create PROCEDURE [dbo].[NEW_MovimentacaoBem_MontaRelManutencaoRS] 
	@tpm_id INT
	, @per_mes INT
	, @per_ano INT
	, @bit_registroPat VARCHAR(20)
	, @mov_data DATETIME
	, @mov_GPB varchar(20)
	, @uni_id int
AS
BEGIN

	SELECT mb.mov_data ,
	        mb.bem_id ,
	        mb.bit_id ,
	        mb.tpm_id ,
	        mb.grp_id ,
	        mb.uni_id ,
	        dbo.FN_GetUniNome(mb.uni_id) as unidade,
	        mb.cco_codigoDebito ,
	        mb.cco_codigoCredito ,
	        mb.per_mes ,
	        mb.per_ano ,
	        mb.fat_id ,
	        mb.usu_id ,
	        mb.mov_valor ,
	        mb.mov_valorReavaliado ,
	        mb.mov_percentualBaixa ,
	        mb.mov_GPB ,
	        mb.mov_unidadeOrigem ,
	        mb.mov_unidadeDestino ,
	        mb.mov_observacao ,
	        mb.mov_origem ,
	        mb.mov_nl ,
	        mb.mov_situacao ,
	        mb.mov_dataCriacao ,
	        mb.mov_dataAlteracao,
	        bi.bit_registroPat,
	        bp.bem_descricao,
	        tm.tpm_descricao
	        
	    FROM dbo.MovimentacaoBem AS mb WITH(NoLock)
		INNER JOIN dbo.BemItem AS bi WITH(NoLock) 
			ON mb.bem_id = bi.bem_id 
			AND mb.bit_id = bi.bit_id
		INNER JOIN dbo.BemPatrimonial AS bp WITH(NoLock)
			ON bp.bem_id = bi.bem_id
		INNER JOIN dbo.TipoMovimentacao AS tm WITH(NoLock)
			ON tm.tpm_id = mb.tpm_id 
			
	WHERE 
		(mb.mov_data = CAST(@mov_data AS Date) OR @mov_data IS NULL)		
		AND (mb.per_ano = @per_ano OR @per_ano = 0)
		AND (mb.per_mes = @per_mes OR @per_mes = 0)
		AND (mb.tpm_id = @tpm_id OR @tpm_id = 0)
		AND (bi.bit_registroPat = @bit_registroPat 
			 OR @bit_registroPat IS NULL)
		AND (mb.uni_id = @uni_id OR @uni_id IS NULL)
		AND (@mov_GPB IS NULL OR mb.mov_GPB = @mov_GPB)
		AND (mb.mov_nl IS NULL)	
		and mb.mov_situacao = 3
		and mb.mov_dataAlteracao > mb.mov_dataCriacao
	 
	 ORDER BY 
		 mb.uni_id
		 , mb.mov_data
	 
	 
	 SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_MontaRelManutencaoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext NEW_MovimentacaoBem_Manutencao  
--sp_helptext NEW_MovimentacaoBem_MontaRelManutencaoSP  
-- =================================================================  
-- Author:  Pedro Gimenez  
-- Create date: 11/01/2012  
-- Description: retorna os movimentos do sistema que foram alterados  
--              na tela de manutenção de movimentos  
-- =================================================================  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_MontaRelManutencaoSP]   
 @tpm_id INT  
 , @per_mes INT  
 , @per_ano INT  
 , @bit_registroPat VARCHAR(20)  
 , @mov_data DATETIME  
 , @mov_GPB varchar(20)  
 , @uni_id int  
AS  
BEGIN  
  
 SELECT mb.mov_data ,  
         mb.bem_id ,  
         mb.bit_id ,  
         mb.tpm_id ,  
         mb.grp_id ,  
         mb.uni_id ,  
         dbo.FN_GetUniNome(mb.uni_id) as unidade,  
         mb.cco_codigoDebito ,  
         mb.cco_codigoCredito ,  
         mb.per_mes ,  
         mb.per_ano ,  
         mb.fat_id ,  
         mb.usu_id ,  
         mb.mov_valor ,  
         mb.mov_valorReavaliado ,  
         mb.mov_percentualBaixa ,  
         mb.mov_GPB ,  
         mb.mov_unidadeOrigem ,  
         mb.mov_unidadeDestino ,  
         mb.mov_observacao ,  
         mb.mov_origem ,  
         mb.mov_nl ,  
         mb.mov_situacao ,  
         mb.mov_dataCriacao ,  
         mb.mov_dataAlteracao,  
         bi.bit_registroPat,  
         bp.bem_descricao,  
         tm.tpm_descricao  
           
     FROM dbo.MovimentacaoBem AS mb WITH(NoLock)  
  INNER JOIN dbo.BemItem AS bi WITH(NoLock)   
   ON mb.bem_id = bi.bem_id   
   AND mb.bit_id = bi.bit_id  
  INNER JOIN dbo.BemPatrimonial AS bp WITH(NoLock)  
   ON bp.bem_id = bi.bem_id  
  INNER JOIN dbo.TipoMovimentacao AS tm WITH(NoLock)  
   ON tm.tpm_id = mb.tpm_id   
     
 WHERE   
  (mb.mov_data = CAST(@mov_data AS Date) OR @mov_data IS NULL)    
  AND (mb.per_ano = @per_ano OR @per_ano = 0)  
  AND (mb.per_mes = @per_mes OR @per_mes = 0)  
  AND (mb.tpm_id = @tpm_id OR @tpm_id = 0)  
  AND (bi.bit_registroPat = @bit_registroPat   
    OR @bit_registroPat IS NULL)  
  AND (mb.uni_id = @uni_id OR @uni_id IS NULL)  
  AND (@mov_GPB IS NULL OR mb.mov_GPB = @mov_GPB)  
  AND (mb.mov_nl IS NULL or mb.mov_nl = 'LEGADO' or mb.mov_nl = 'GRB')   
  and mb.mov_situacao = 3  
  and mb.mov_dataAlteracao > mb.mov_dataCriacao  
    
  ORDER BY   
   mb.uni_id  
   , mb.mov_data  
    
    
  SELECT @@ROWCOUNT  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Pendente]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  JORGE FREITAS  
-- Create date: 05/10/2010  
-- Description: SELECIONA MOVIMENTACOES PENDENTES   
--                (TRANSFERENCIAS ESPERANDO RECEBIMENTO, situação = 5   
--    ou MOVIMENTO DE REMESSA, OPERACAO = 8 E STATUS DO BEM = 4 )  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Pendente]  
  @bem_id BIGINT  
 , @bit_id INT  
 , @bit_status int  
 , @tpm_operacao int  
 , @mov_situacao int  
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT mov1.[mov_data]  
      ,mov1.[bem_id]  
      ,mov1.[bit_id]   
      ,mov1.[tpm_id]   
      ,tpm1.tpm_operacao    
      ,[grp_id]  
      ,[cco_codigoDebito]  
      ,[cco_codigoCredito]  
      ,[mov_unidadeDestino]  
      ,[mov_valor]   
      ,[mov_GPB]   
  FROM   
  MovimentacaoBem mov1 WITH(NoLock)  
  INNER JOIN TipoMovimentacao tpm1 WITH(NoLock)  
  on mov1.tpm_id = tpm1.tpm_id   
  AND (@tpm_operacao is null or tpm1.tpm_operacao = @tpm_operacao)  
  INNER JOIN BemItem bi1 with (NoLock)  
  on bi1.bem_id = mov1.bem_id and   
     bi1.bit_id = mov1.bit_id and   
     (@bit_status is null or bi1.bit_status = @bit_status)   
  WHERE   
 mov1.mov_situacao = @mov_situacao  
 AND mov1.bem_id = @bem_id  
 AND mov1.bit_id = @bit_id   
   
  order by mov_data desc   
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Pendente_byUni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Pendente_byUni_id]  
  @uni_id INT  
--With Recompile  
AS  
BEGIN  
IF ( Exists(SELECT uni_id FROM UnidadeGestora with (nolock) WHERE uni_id = @UNI_ID AND uge_situacao = 1))  
BEGIN  
  
 WITH MoviBem AS  
 (  
  Select   
   *  
  FROM   
   MovimentacaoBem  with (nolock)
  WHERE  
   mov_situacao = 5  
   AND (mov_unidadeDestino = @uni_id OR mov_unidadeOrigem = @uni_id)  
 )  
   
 SELECT mov_data ,  
         mb.bem_id ,  
         mb.bit_id ,  
         tpm_id ,  
         mb.grp_id ,  
         cco_codigoDebito ,  
         cco_codigoCredito ,  
         per_mes ,  
         per_ano ,  
         uni_id ,  
         mb.fat_id ,  
         mb.usu_id ,  
         mov_valor ,  
         mov_valorReavaliado ,  
         mov_percentualBaixa ,  
         mov_GPB ,  
         mov_unidadeOrigem ,  
         mov_unidadeDestino ,  
         mov_observacao ,  
         mov_origem ,  
         mov_nl ,  
         mov_situacao ,  
         mov_dataCriacao ,  
         mov_dataAlteracao ,  
         biw_id ,  
         bws_id ,  
         bi.wrk_id ,  
         bi.stp_id ,  
         bws_observacao ,  
         bws_situacao ,  
         bws_dataCriacao ,  
         bws_dataAlteracao,  
         bp.bem_descricao,  
         b.bit_registroPat,  
         dbo.FN_GetUniNome(mov_unidadeOrigem) AS origem,  
         dbo.FN_GetUniNome(mov_unidadeDestino) AS destino  
   
 FROM   
  MoviBem  AS mb WITH (NoLock)  
 INNER JOIN   
  BemItemWfStatus  AS bi WITH (NoLock)  
  ON mb.bem_id = bi.bem_id   
  AND mb.bit_id = bi.bit_id  
 INNER JOIN   
  BemPatrimonial AS bp WITH (NoLock)  
  ON bi.bem_id = bp.bem_id  
 INNER JOIN   
  PatrimonioWfStatus AS pws WITH (NoLock)  
  ON pws.stp_id = bi.stp_id   
  AND pws.wrk_id = bi.wrk_id  
  AND pws.wfs_uniGestora = 0  
 INNER JOIN dbo.BemItem AS b WITH (NoLock)  
  ON b.bit_id = bi.bit_id   
  AND b.bem_id = bi.bem_id  
 
 WHERE   
   bi.bws_situacao = 1  
  AND bi.wrk_id = 3  
  
 END   
   
 ELSE  
 BEGIN  
 WITH MoviBem AS  
 (  
  SELECT   
   *   
  FROM   
   MovimentacaoBem   with (nolock)
  WHERE   
   mov_situacao = 5  
   AND (mov_unidadeDestino = @uni_id OR mov_unidadeOrigem = @uni_id)  
 )  
   
  SELECT mov_data ,  
         mb.bem_id ,  
         mb.bit_id ,  
         tpm_id ,  
         mb.grp_id ,  
         cco_codigoDebito ,  
         cco_codigoCredito ,  
         per_mes ,  
         per_ano ,  
         uni_id ,  
         mb.fat_id ,  
         mb.usu_id ,  
         mov_valor ,  
         mov_valorReavaliado ,  
         mov_percentualBaixa ,  
         mov_GPB ,  
         mov_unidadeOrigem ,  
         mov_unidadeDestino ,  
         mov_observacao ,  
         mov_origem ,  
         mov_nl ,  
         mov_situacao ,  
         mov_dataCriacao ,  
         mov_dataAlteracao ,  
         biw_id ,  
         bws_id ,  
         bi.wrk_id ,  
         bi.stp_id ,  
         bws_observacao ,  
         bws_situacao ,  
         bws_dataCriacao ,  
         bws_dataAlteracao,  
         bp.bem_descricao,  
         b.bit_registroPat,  
         dbo.FN_GetUniNome(mov_unidadeOrigem) AS origem,  
         dbo.FN_GetUniNome(mov_unidadeDestino) AS destino  
   
 FROM   
  MoviBem  AS mb WITH (NoLock)  
 INNER JOIN   
  BemItemWfStatus  AS bi WITH (NoLock)  
  ON mb.bem_id = bi.bem_id   
  AND mb.bit_id = bi.bit_id  
 INNER JOIN   
  BemPatrimonial AS bp WITH (NoLock)  
  ON bi.bem_id = bp.bem_id  
 INNER JOIN   
  PatrimonioWfStatus AS pws WITH (NoLock)  
  ON pws.stp_id = bi.stp_id   
  AND pws.wrk_id = bi.wrk_id  
  AND pws.wfs_uniGuarda = 0  
 INNER JOIN   
  BemItem AS b WITH (NoLock)  
  ON b.bit_id = bi.bit_id   
  AND b.bem_id = bi.bem_id  
   
 WHERE   
   bi.bws_situacao = 1  
  AND bi.wrk_id = 3  
   
 ORDER BY   
  bi.bem_id  
  , bi.bit_id  
 END  
END 


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Pendente_byUni_idRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  João Rossetti    
-- Create date: 23/11/2010    
-- Description: Seleciona movimentações pendentes por unidade    
-- =============================================    
    
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Pendente_byUni_idRS]    
  @uni_id INT    
--With Recompile    
AS    
BEGIN    
IF ( Exists(SELECT uni_id FROM UnidadeGestora WHERE uni_id = @UNI_ID AND uge_situacao = 1))    
BEGIN    
    
 WITH MoviBem AS    
 (    
  Select     
   *    
  FROM     
   MovimentacaoBem   with(nolock) 
  WHERE    
   mov_situacao = 5    
   AND (mov_unidadeDestino = @uni_id OR mov_unidadeOrigem = @uni_id)    
 )    
     
 SELECT mov_data ,    
         mb.bem_id ,    
         mb.bit_id ,    
         tpm_id ,    
         mb.grp_id ,    
         cco_codigoDebito ,    
         cco_codigoCredito ,    
         per_mes ,    
         per_ano ,    
         uni_id ,    
         mb.fat_id ,    
         mb.usu_id ,    
         mov_valor ,    
         mov_valorReavaliado ,    
         mov_percentualBaixa ,    
         mov_GPB ,    
         mov_unidadeOrigem ,    
         mov_unidadeDestino ,    
         mov_observacao ,    
         mov_origem ,    
         mov_nl ,    
         mov_situacao ,    
         mov_dataCriacao ,    
         mov_dataAlteracao ,    
         biw_id ,    
         bws_id ,    
         bi.wrk_id ,    
         bi.stp_id ,    
         bws_observacao ,    
         bws_situacao ,    
         bws_dataCriacao ,    
         bws_dataAlteracao,    
         bp.bem_descricao,    
         b.bit_registroPat,    
         dbo.FN_GetUniNome(mov_unidadeOrigem) AS origem,    
         dbo.FN_GetUniNome(mov_unidadeDestino) AS destino    
     
 FROM     
  MoviBem  AS mb WITH (NoLock)    
 INNER JOIN     
  BemItemWfStatus  AS bi WITH (NoLock)    
  ON mb.bem_id = bi.bem_id     
  AND mb.bit_id = bi.bit_id    
 INNER JOIN     
  BemPatrimonial AS bp WITH (NoLock)    
  ON bi.bem_id = bp.bem_id    
 INNER JOIN     
  PatrimonioWfStatus AS pws WITH (NoLock)    
  ON pws.stp_id = bi.stp_id     
  AND pws.wrk_id = bi.wrk_id    
  AND pws.wfs_uniGestora = 0    
 INNER JOIN dbo.BemItem AS b WITH (NoLock)    
  ON b.bit_id = bi.bit_id     
  AND b.bem_id = bi.bem_id    
     
 WHERE     
   bi.bws_situacao = 1    
  AND bi.wrk_id = 3    
    
 END     
     
 ELSE    
 BEGIN    
 WITH MoviBem AS    
 (    
  SELECT     
   *     
  FROM     
   MovimentacaoBem     with (nolock)
  WHERE     
   mov_situacao = 5    
   AND (mov_unidadeDestino = @uni_id OR mov_unidadeOrigem = @uni_id)    
 )    
     
  SELECT mov_data ,    
         mb.bem_id ,    
         mb.bit_id ,    
         tpm_id ,    
         mb.grp_id ,    
         cco_codigoDebito ,    
         cco_codigoCredito ,    
         per_mes ,    
         per_ano ,    
         uni_id ,    
         mb.fat_id ,    
         mb.usu_id ,    
         mov_valor ,    
         mov_valorReavaliado ,    
         mov_percentualBaixa ,    
         mov_GPB ,    
         mov_unidadeOrigem ,    
         mov_unidadeDestino ,    
         mov_observacao ,    
         mov_origem ,    
         mov_nl ,    
         mov_situacao ,    
         mov_dataCriacao ,    
         mov_dataAlteracao ,    
         biw_id ,    
         bws_id ,    
         bi.wrk_id ,    
         bi.stp_id ,    
         bws_observacao ,    
         bws_situacao ,    
         bws_dataCriacao ,    
         bws_dataAlteracao,    
         bp.bem_descricao,    
         b.bit_registroPat,    
         dbo.FN_GetUniNome(mov_unidadeOrigem) AS origem,    
         dbo.FN_GetUniNome(mov_unidadeDestino) AS destino    
     
 FROM     
  MoviBem  AS mb WITH (NoLock)    
 INNER JOIN     
  BemItemWfStatus  AS bi WITH (NoLock)    
  ON mb.bem_id = bi.bem_id     
  AND mb.bit_id = bi.bit_id    
 INNER JOIN     
  BemPatrimonial AS bp WITH (NoLock)    
  ON bi.bem_id = bp.bem_id    
 INNER JOIN     
  PatrimonioWfStatus AS pws WITH (NoLock)    
  ON pws.stp_id = bi.stp_id     
  AND pws.wrk_id = bi.wrk_id    
  AND pws.wfs_uniGuarda = 0    
 INNER JOIN     
  BemItem AS b WITH (NoLock)    
  ON b.bit_id = bi.bit_id     
  AND b.bem_id = bi.bem_id    
     
 WHERE     
   bi.bws_situacao = 1    
  AND bi.wrk_id = 3    
     
 ORDER BY     
  bi.bem_id    
  , bi.bit_id    
 END    
END 
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Pendente_byUni_idSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  João Rossetti  
-- Create date: 23/11/2010  
-- Description: Seleciona movimentações pendentes por unidade  
-- =============================================  
  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Pendente_byUni_idSP]  
  @uni_id INT  
--With Recompile  
AS  
BEGIN  
IF ( Exists(SELECT uni_id FROM UnidadeGestora with(nolock) WHERE uni_id = @UNI_ID AND uge_situacao = 1))  
BEGIN  
  
 WITH MoviBem AS  
 (  
  Select   
   *  
  FROM   
   MovimentacaoBem  with(nolock)
  WHERE  
   mov_situacao = 5  
   AND (mov_unidadeDestino = @uni_id OR mov_unidadeOrigem = @uni_id)  
 )  
   
 SELECT mov_data ,  
         mb.bem_id ,  
         mb.bit_id ,  
         tpm_id ,  
         mb.grp_id ,  
         cco_codigoDebito ,  
         cco_codigoCredito ,  
         per_mes ,  
         per_ano ,  
         uni_id ,  
         mb.fat_id ,  
         mb.usu_id ,  
         mov_valor ,  
         mov_valorReavaliado ,  
         mov_percentualBaixa ,  
         mov_GPB ,  
         mov_unidadeOrigem ,  
         mov_unidadeDestino ,  
         mov_observacao ,  
         mov_origem ,  
         mov_nl ,  
         mov_situacao ,  
         mov_dataCriacao ,  
         mov_dataAlteracao ,  
         biw_id ,  
         bws_id ,  
         bi.wrk_id ,  
         bi.stp_id ,  
         bws_observacao ,  
         bws_situacao ,  
         bws_dataCriacao ,  
         bws_dataAlteracao,  
         bp.bem_descricao,  
         b.bit_registroPat,  
         dbo.FN_GetUniNome(mov_unidadeOrigem) AS origem,  
         dbo.FN_GetUniNome(mov_unidadeDestino) AS destino  
   
 FROM   
  MoviBem  AS mb WITH (NoLock)  
 INNER JOIN   
  BemItemWfStatus  AS bi WITH (NoLock)  
  ON mb.bem_id = bi.bem_id   
  AND mb.bit_id = bi.bit_id  
 INNER JOIN   
  BemPatrimonial AS bp WITH (NoLock)  
  ON bi.bem_id = bp.bem_id  
 INNER JOIN   
  PatrimonioWfStatus AS pws WITH (NoLock)  
  ON pws.stp_id = bi.stp_id   
  AND pws.wrk_id = bi.wrk_id  
  AND pws.wfs_uniGestora = 0  
 INNER JOIN dbo.BemItem AS b WITH (NoLock)  
  ON b.bit_id = bi.bit_id   
  AND b.bem_id = bi.bem_id  
   
 WHERE   
   bi.bws_situacao = 1  
  AND bi.wrk_id = 3  
  
 END   
   
 ELSE  
 BEGIN  
 WITH MoviBem AS  
 (  
  SELECT   
   *   
  FROM   
   MovimentacaoBem   with (nolock)
  WHERE   
   mov_situacao = 5  
   AND (mov_unidadeDestino = @uni_id OR mov_unidadeOrigem = @uni_id)  
 )  
   
  SELECT mov_data ,  
         mb.bem_id ,  
         mb.bit_id ,  
         tpm_id ,  
         mb.grp_id ,  
         cco_codigoDebito ,  
         cco_codigoCredito ,  
         per_mes ,  
         per_ano ,  
         uni_id ,  
         mb.fat_id ,  
         mb.usu_id ,  
         mov_valor ,  
         mov_valorReavaliado ,  
         mov_percentualBaixa ,  
         mov_GPB ,  
         mov_unidadeOrigem ,  
         mov_unidadeDestino ,  
         mov_observacao ,  
         mov_origem ,  
         mov_nl ,  
         mov_situacao ,  
         mov_dataCriacao ,  
         mov_dataAlteracao ,  
         biw_id ,  
         bws_id ,  
         bi.wrk_id ,  
         bi.stp_id ,  
         bws_observacao ,  
         bws_situacao ,  
         bws_dataCriacao ,  
         bws_dataAlteracao,  
         bp.bem_descricao,  
         b.bit_registroPat,  
         dbo.FN_GetUniNome(mov_unidadeOrigem) AS origem,  
         dbo.FN_GetUniNome(mov_unidadeDestino) AS destino  
   
 FROM   
  MoviBem  AS mb WITH (NoLock)  
 INNER JOIN   
  BemItemWfStatus  AS bi WITH (NoLock)  
  ON mb.bem_id = bi.bem_id   
  AND mb.bit_id = bi.bit_id  
 INNER JOIN   
  BemPatrimonial AS bp WITH (NoLock)  
  ON bi.bem_id = bp.bem_id  
 INNER JOIN   
  PatrimonioWfStatus AS pws WITH (NoLock)  
  ON pws.stp_id = bi.stp_id   
  AND pws.wrk_id = bi.wrk_id  
  AND pws.wfs_uniGuarda = 0  
 INNER JOIN   
  BemItem AS b WITH (NoLock)  
  ON b.bit_id = bi.bit_id   
  AND b.bem_id = bi.bem_id  
   
 WHERE   
   bi.bws_situacao = 1  
  AND bi.wrk_id = 3  
   
 ORDER BY   
  bi.bem_id  
  , bi.bit_id  
 END  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Select_mov_dataBy_bem_id_bit_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Wellington Santana	
-- Create date: 13/02/2014
-- Description:	retorna mov_data e mov_dataCriacao, filtrados por mov_observação,bem_id
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Select_mov_dataBy_bem_id_bit_id]
	@bem_id INT,
	@bit_id INT,
	@tpm_id INT 
AS
BEGIN

	SELECT
		mov_data
	FROM
		MovimentacaoBem WITH(NOLOCK)
		
	WHERE (bem_id = @bem_id)
		AND (bit_id = @bit_id)
		AND (tpm_id = @tpm_id)

	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_SelectAll]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_SelectAll]  
   @uni_id Int  
 , @per_mes Char (2)  
 , @per_ano Char (4)  
 ,@mov_GPB varchar(20)  
 ,@bit_id int  
 ,@bem_id int  
--With Recompile  
AS  
BEGIN  
SELECT   
   mov_data   
   , bem_id   
   , bit_id   
   , tpm_id   
   , grp_id   
   , uni_id   
   , cco_codigoDebito   
   , cco_codigoCredito   
   , per_mes   
   , per_ano   
   , fat_id   
   , usu_id   
   , mov_valor   
   , mov_valorReavaliado   
   , mov_percentualBaixa   
   , mov_GPB   
   , mov_unidadeOrigem   
   , mov_unidadeDestino   
   , mov_observacao   
   , mov_origem   
   , mov_situacao   
   , mov_dataCriacao   
   , mov_dataAlteracao   
   
FROM    
 MovimentacaoBem WITH(NOLOCK)  
WHERE   
 (@uni_id is null or @uni_id=MovimentacaoBem.uni_id)  
 AND  (@per_mes is null or @per_mes=MovimentacaoBem.per_mes)  
 And (@per_ano is null or @per_ano = MovimentacaoBem.per_ano)  
 And (@mov_GPB is null or @mov_GPB = MovimentacaoBem.mov_GPB)   
 And (@bem_id is null or @bem_id = MovimentacaoBem.bem_id)  
 And (@bit_id is null or @bit_id = MovimentacaoBem.bit_id)  
   
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_SelectBy_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================
-- Author:		Aline Dornelas
-- Create date: 31/08/2010 09:44:15
-- Description:	Utilizado na busca de movimentacao do bem, 
--				retorna as movimentações do BemPatrimonial 
--				que não foram excluídas logicamente, 
--				filtrados por: id do BemPatrimonial
-- ===================================================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_SelectBy_bem_id]
	@bem_id BIGINT,
	@mov_situacao INT
AS
BEGIN
	SELECT
		*
	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE
		((@mov_situacao = 0 and mov_situacao <> 3) 
		OR (mov_situacao = @mov_situacao))
		AND (bem_id = @bem_id)

	RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_SelectBy_bem_id_bit_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================
-- Author:		Aline Dornelas
-- Create date: 31/08/2010 09:53:44
-- Description:	Utilizado na busca de movimentacao do bem item, 
--				retorna as movimentações do BemItem 
--				que não foram excluídas logicamente, 
--				filtrados por: id do BemItem
-- ===================================================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_SelectBy_bem_id_bit_id]
	@bem_id BIGINT,
	@bit_id INT
AS
BEGIN
	SELECT
	   mov_data
      ,bem_id
      ,bit_id
      ,tpm_id
      ,grp_id
      ,cco_codigoDebito
      ,cco_codigoCredito
      ,per_mes
      ,per_ano
      ,uni_id
      ,fat_id
      ,usu_id
      ,mov_valor
      ,mov_valorReavaliado
      ,mov_percentualBaixa
      ,mov_GPB
      ,mov_unidadeOrigem
      ,mov_unidadeDestino
      ,mov_observacao
      ,mov_origem
      ,mov_nl
      ,mov_situacao
      ,mov_dataCriacao
      ,mov_dataAlteracao
	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE
		mov_situacao <> 3
		AND (bem_id = @bem_id)
		AND (bit_id = @bit_id)
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_SelectBy_bem_id_bit_id_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================
-- Author:		DeboraCavaglieri
-- Create date: 20/07/2012
-- Description:	Utilizado na busca de movimentacao do bem item, 
--				retorna as movimentações do BemItem 
--	
-- ===================================================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_SelectBy_bem_id_bit_id_All]
	@bem_id BIGINT,
	@bit_id INT
AS
BEGIN
	SELECT
	   mov_data
      ,bem_id
      ,bit_id
      ,tpm_id
      ,grp_id
      ,cco_codigoDebito
      ,cco_codigoCredito
      ,per_mes
      ,per_ano
      ,uni_id
      ,fat_id
      ,usu_id
      ,mov_valor
      ,mov_valorReavaliado
      ,mov_percentualBaixa
      ,mov_GPB
      ,mov_unidadeOrigem
      ,mov_unidadeDestino
      ,mov_observacao
      ,mov_origem
      ,mov_nl
      ,mov_situacao
      ,mov_dataCriacao
      ,mov_dataAlteracao
	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE
		 (bem_id = @bem_id)
		AND (bit_id = @bit_id)
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_SelectBy_bem_id_bit_id_mov_data]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================
-- Author:		Jorge Freitas
-- Create date: 23/10/2010
-- Description:	Retorna os movimentos que nao estão cancelados de um bem-item
--              efetuados a partir de uma determinada data-hora 
--              Utilizado no cancelamento de movimento.
-- ===================================================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_SelectBy_bem_id_bit_id_mov_data]
	@bem_id BIGINT,
	@bit_id INT,
	@mov_data datetime,
	@mov_dataCriacao datetime
	
AS
BEGIN
	SELECT
		*
	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE
		mov_situacao <> 3
		AND (bem_id = @bem_id)
		AND (bit_id = @bit_id)
		AND (mov_data >= @mov_data )
		AND (mov_dataCriacao >= @mov_dataCriacao)
	ORDER BY 
		bem_id, bit_id
		, mov_data DESC
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_SelectBy_Bem_idAndOperacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author: Wellington Santana 
-- Create date: 17/02/2014
-- Description:	Utilizado na busca de movimentacao do bem item, 
--				retorna as movimentações do BemItem 
--				que não foram excluídas logicamente, 
--				filtrados por: id do BemItem e operação do 
--				tipo de movimentação.
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_SelectBy_Bem_idAndOperacao]
	@bem_id BIGINT,
	@bit_id INT,
	@tpm_operacao VARCHAR(MAX),
	@mov_datamax DATETIME,
	@mov_situacao TINYINT
AS
BEGIN
	SELECT
		*
	FROM
		MovimentacaoBem AS MOV WITH(NOLOCK)
		INNER JOIN TipoMovimentacao AS TPM WITH(NOLOCK)
			ON MOV.tpm_id = TPM.tpm_id
	WHERE
		((@mov_situacao IS NULL AND mov_situacao <> 3) OR
		(@mov_situacao IS NOT NULL AND mov_situacao = @mov_situacao))
		AND (bem_id = @bem_id)
		AND (bit_id = @bit_id)
		AND (tpm_operacao in (select valor from dbo.FN_StringToArrayInt64(@tpm_operacao, ';')))
		AND (@mov_datamax IS NULL OR MOV.mov_data <= @mov_datamax)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_SelectBy_Historico]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_SelectBy_Historico]  
 @bem_id BIGINT  
 , @bit_id INT  
 , @mov_dataIni DATE  
 , @mov_dataFim DATE  
 , @mov_origem TINYINT  
 , @tpm_id INT  
  
--WITH RECOMPILE  
AS   
BEGIN  
  
 SELECT  
  CONVERT(VARCHAR,mov_data,103) AS mov_data  
  -- Conta crédito  
  , (SELECT cco_nome FROM ContasContabeis WITH (NOLOCK) WHERE cco_situacao <> 3 AND cco_codigo = cco_codigoCredito) AS cco_contaCredito_nome  
  -- Conta débito  
  , (SELECT cco_nome FROM ContasContabeis WITH (NOLOCK) WHERE cco_situacao <> 3 AND cco_codigo = cco_codigoDebito) AS  cco_contaDebito_nome  
  -- NL  
  , (CASE WHEN mov_nl IS NOT NULL THEN mov_nl  ELSE '-' END) AS mov_nl  
  -- Tipo de movimentação  
  , tpm_nome  
  -- Valor  
  , mov_valor  
  -- Valor reavaliado  
  , mov_valorReavaliado  
  -- Percentual baixa  
  , mov_percentualBaixa  
  -- Fator depreciação  
  , fat_nome  
  -- GPB / GRB / TermoCessao  
  , mov_GPB AS mov_GPB_GRB_TermoCessao   
  -- Unidade origem  
  , (SELECT   
    CASE WHEN UA.uad_id IS NOT NULL  
     THEN UA.uad_nome   
     ELSE  UE.ent_razaoSocial    
     END as uni_nome  
   FROM   
    Unidade AS UNI WITH (NOLOCK)  
   LEFT JOIN VW_UnidadeEntidade AS UE WITH (NOLOCK)  
    ON UNI.ent_id = UE.ent_id  
   LEFT JOIN VW_UnidadeAdministrativa AS UA WITH (NOLOCK)  
    ON UNI.uad_id = UA.uad_id AND UNI.ent_id = UA.ent_id  
   WHERE   
    UNI.uni_situacao <> 3  
    AND UNI.uni_id = mov_unidadeOrigem  
   ) AS mov_unidadeOrigem_nome  
  -- Unidade destino  
  , (SELECT   
    CASE WHEN UA.uad_id IS NOT NULL  
     THEN UA.uad_nome   
     ELSE  UE.ent_razaoSocial    
     END as uni_nome  
   FROM   
    Unidade AS UNI WITH (NOLOCK)  
   LEFT JOIN VW_UnidadeEntidade AS UE WITH (NOLOCK)  
    ON UNI.ent_id = UE.ent_id  
   LEFT JOIN VW_UnidadeAdministrativa AS UA WITH (NOLOCK)  
    ON UNI.uad_id = UA.uad_id AND UNI.ent_id = UA.ent_id  
   WHERE   
    UNI.uni_situacao <> 3  
    AND UNI.uni_id = mov_unidadeDestino  
   ) AS mov_unidadeDestino_nome  
  -- Observação  
  , mov_observacao  
  -- Usuário  
  , usu_nome = pes_nome
  /*, (CASE mov_origem   
   WHEN 1 THEN pes_nome  
   WHEN 2 THEN 'Movimentação automática'  
     END) AS usu_nome  */
 FROM  
  MovimentacaoBem AS MOV WITH (NOLOCK)  
 INNER JOIN BemItem AS BEM WITH (NOLOCK)  
  ON MOV.bem_id = BEM.bem_id AND MOV.bit_id = BEM.bit_id  
 INNER JOIN TipoMovimentacao AS TPM WITH (NOLOCK)  
  ON MOV.tpm_id = TPM.tpm_id  
 LEFT JOIN FatorDepreciacao AS FAT WITH (NOLOCK)  
  ON BEM.fat_id = FAT.fat_id  
 LEFT JOIN VW_ConPatUsuario AS USU WITH (NOLOCK)  
  ON MOV.usu_id = USU.usu_id  
 LEFT JOIN VW_ConPatUsuarioPessoa AS PES WITH (NOLOCK)  
  ON USU.pes_id = PES.pes_id  
 WHERE  
  mov_situacao <> 3  
  AND ((MOV.bem_id = @bem_id) AND ((MOV.bit_id = @bit_id) OR (@bit_id is null)))  
  AND ((mov_data >= @mov_dataIni) AND (mov_data <= @mov_dataFim))  
  AND ((@mov_origem IS NULL) OR (mov_origem = @mov_origem))  
  AND ((@tpm_id IS NULL) OR (MOV.tpm_id = @tpm_id))  

 ORDER BY  
  MOV.mov_data  
  ,MOV.mov_dataCriacao  
    
 SELECT @@ROWCOUNT   
END 


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_SelectBy_Operacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_SelectBy_Operacao]
	@bem_id BIGINT,
	@bit_id INT,
	@tpm_operacao TINYINT,
	@mov_datamax DATETIME,
	@mov_situacao TINYINT
WITH RECOMPILE
AS
BEGIN

	--Para movimentaçoes dos tipos incorporação ele verifica se ja tem uma incorporação do tipo 1,12,7
	if @tpm_operacao in (1,7,12)
		begin
			SELECT
				*
			FROM
				MovimentacaoBem AS MOV WITH(NOLOCK)
				INNER JOIN TipoMovimentacao AS TPM WITH(NOLOCK)
					ON MOV.tpm_id = TPM.tpm_id
			WHERE
				((@mov_situacao IS NULL AND mov_situacao <> 3) OR
				(@mov_situacao IS NOT NULL AND mov_situacao = @mov_situacao))
				AND (bem_id = @bem_id)
				AND (bit_id = @bit_id)
				AND (tpm_operacao in (1,7,12))
				AND (@mov_datamax IS NULL OR MOV.mov_data <= @mov_datamax)
			RETURN ISNULL(@@ROWCOUNT,-1)
		end

	-- Se não, ele considera se a oporação ja foi feita
	else

		begin
			SELECT
				*
			FROM
				MovimentacaoBem AS MOV WITH(NOLOCK)
				INNER JOIN TipoMovimentacao AS TPM WITH(NOLOCK)
					ON MOV.tpm_id = TPM.tpm_id
			WHERE
				((@mov_situacao IS NULL AND mov_situacao <> 3) OR
				(@mov_situacao IS NOT NULL AND mov_situacao = @mov_situacao))
				AND (bem_id = @bem_id)
				AND (bit_id = @bit_id)
				AND (tpm_operacao = @tpm_operacao) 
				AND (@mov_datamax IS NULL OR MOV.mov_data <= @mov_datamax)
			RETURN ISNULL(@@ROWCOUNT,-1)
		end
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_Selectby_OperacaoPeriodo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jorge Freitas
-- Create date: 06/09/2010
-- Description:	Seleciona a mov de bem filtrados por operacao
-- e periodo. E que não foram excluidas logicamente.
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_Selectby_OperacaoPeriodo]
	@bem_id BIGINT
	,@bit_id INT
	,@uni_id Int 
	,@tpm_operacao TINYINT
	,@per_mes Char (2)
	,@per_ano Char (4)
AS
BEGIN
	SELECT
		*
	FROM
		MovimentacaoBem AS MOV WITH(NOLOCK)
		INNER JOIN 
			TipoMovimentacao AS TPM WITH(NOLOCK)
				ON MOV.tpm_id = TPM.tpm_id 
				AND (@tpm_operacao is null or TPM.tpm_operacao = @tpm_operacao)
				AND TPM.tpm_situacao <> 4
	WHERE
		mov_situacao <> 3
		AND (@bem_id is null or MOV.bem_id = @bem_id)
		AND (@bit_id is null or MOV.bit_id = @bit_id)		
		AND (@uni_id is null or @uni_id = MOV.uni_id)
	    AND (@per_mes is null or @per_mes=MOV.per_mes)
		And (@per_ano is null or @per_ano = MOV.per_ano)
		AND MOV.mov_situacao <> 4
		
			
	RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_SelectByBemIDAndBitID]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_SelectByBemIDAndBitID]
	@bem_id BIGINT,
	@bit_id Varchar(max),
	@mov_data DATETIME,
	@per_mes char(2),
	@per_ano char(4),
	@tpm_id int,
	@mov_GPB varchar(20),
	@uni_id int
AS
BEGIN

	SELECT 
			  mov_data 
			, bem_id 
			, bit_id 
			, tpm_id 
			, grp_id 
			, uni_id 
			, cco_codigoDebito 
			, cco_codigoCredito 
			, per_mes 
			, per_ano 
			, fat_id 
			, usu_id 
			, mov_valor 
			, mov_valorReavaliado 
			, mov_percentualBaixa 
			, mov_GPB 
			, mov_unidadeOrigem 
			, mov_unidadeDestino 
			, mov_observacao 
			, mov_origem 
			, mov_situacao 
			, mov_dataCriacao 
			, mov_dataAlteracao 
	FROM
		MovimentacaoBem as mov WITH(NOLOCK)
	WHERE
		mov_situacao <> 3
		AND (bem_id = @bem_id)
		AND EXISTS (select valor from dbo.FN_StringToArrayInt64(@bit_id, ';') WHERE bit_id = valor)
		AND (mov.mov_data = @mov_data OR @mov_data IS NULL)
		AND (mov.per_mes = @per_mes OR @per_mes IS NULL)
		AND (mov.per_ano = @per_ano OR @per_ano IS NULL)
		AND (mov.tpm_id = @tpm_id OR @tpm_id IS NULL)
		AND (mov.mov_gpb = @mov_GPB OR @mov_GPB IS NULL)
		AND (mov.uni_id = @uni_id)
	ORDER BY 
		bem_id, bit_id
		, mov_data DESC
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END





GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_UPDATE_DataHistorico]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_UPDATE_DataHistorico]  
 @mov_data DATETIME  
 , @bem_id BIGINT  
 , @bit_id INT  
 , @tpm_id INT  
 , @grp_id INT  
 , @cco_codigoDebito VARCHAR (20)  
 , @cco_codigoCredito VARCHAR (20)  
 , @mov_observacao VarChar(MAX)  
 , @mov_dataAlteracao DATETIME  
 , @mov_dataoriginal DATETIME  
 , @mov_situacao TINYINT  
  
AS  
BEGIN  
  
 UPDATE MovimentacaoBem   
 SET   
  mov_data = @mov_data   
  , mov_observacao = @mov_observacao   
  , mov_dataAlteracao = @mov_dataAlteracao   
  , mov_situacao = @mov_situacao   
  
 WHERE   
  mov_data = @mov_dataoriginal    
  AND bem_id = @bem_id   
  AND bit_id = @bit_id   
  AND tpm_id = @tpm_id   
  AND grp_id = @grp_id   
  AND cco_codigoDebito = @cco_codigoDebito   
  AND cco_codigoCredito = @cco_codigoCredito  
  and (mov_nl is null or mov_nl = 'LEGADO'or mov_nl = 'GRB')  
  
    
  SELECT @@ROWCOUNT  
END  
  
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_UPDATE_mov_nl]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Jorge Freitas
-- Create date: 25/02
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_UPDATE_mov_nl]
	@uni_id int
	, @per_mes char(2)
	, @per_ano char(4)
	, @operacao int
	, @cco_codigoDebito VARCHAR (20)
	, @cco_codigoCredito VARCHAR (20)
	, @mov_unidestino int
	, @mov_nl varchar(11)
AS
BEGIN
	UPDATE MovimentacaoBem 
	SET 
		mov_nl = @mov_nl
		
	WHERE 
	    uni_id = @uni_id
	    AND mov_nl IS NULL
		AND mov_situacao in (1,4)
	    AND per_mes = @per_mes
	    AND per_ano = @per_ano
		AND cco_codigoDebito = @cco_codigoDebito 
		AND cco_codigoCredito = @cco_codigoCredito 
		AND
		((@operacao = 1 AND EXISTS (
					SELECT 
						tpm_id 
					FROM 
						TipoMovimentacao TM WITH(NOLOCK) 
					WHERE 
						TM.tpm_id = MovimentacaoBem.tpm_id  AND TM.tpm_operacao = 1)
		)
		OR
		(@operacao = 2 AND EXISTS (
					SELECT 
						tpm_id 
					FROM 
						TipoMovimentacao TM WITH(NOLOCK) 
					WHERE 
						TM.tpm_id = MovimentacaoBem.tpm_id  AND TM.tpm_operacao IN(2,6))
		)
		OR
		(@operacao = 3 AND EXISTS (
					SELECT 
						tpm_id 
					FROM 
						TipoMovimentacao TM WITH(NOLOCK) 
					WHERE 
						TM.tpm_id = MovimentacaoBem.tpm_id  AND TM.tpm_operacao IN(3,4,5,7))
		))		
		
		RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_UPDATE_ObsHistorico]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_UPDATE_ObsHistorico]
	@mov_data DATETIME
	, @bem_id BIGINT
	, @mov_GPB varchar(20)
	, @tpm_id INT
	, @grp_id INT
	, @cco_codigoDebito VARCHAR (20)
	, @cco_codigoCredito VARCHAR (20)
	, @mov_observacao VarChar(MAX)
	, @mov_dataAlteracao DATETIME
	, @mov_dataoriginal DATETIME
	, @mov_situacao TINYINT

AS
BEGIN

	UPDATE MovimentacaoBem 
	SET 
		mov_observacao = dbo.fnSiafemConsolidadoObservacao(@mov_observacao,@mov_dataoriginal, @bem_id,@tpm_id,@grp_id,@cco_codigoDebito,@cco_codigoCredito,mov_GPB)
	
	WHERE 
		mov_data = @mov_dataoriginal  
		AND bem_id = @bem_id 
		AND mov_GPB = @mov_GPB 
		AND tpm_id = @tpm_id 
		AND grp_id = @grp_id 
		AND cco_codigoDebito = @cco_codigoDebito 
		AND cco_codigoCredito = @cco_codigoCredito 
		and mov_situacao = 1

		
	SELECT @@ROWCOUNT
END



GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_UPDATE_Reenvio]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Henrique Aparecido
-- Create date: 14/07/2015
-- Description:	Manutencao de movimento , so permite alteracao de data e historico
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_UPDATE_Reenvio]
	@mov_data DATETIME
	, @bem_id BIGINT
	, @bit_id INT
	, @tpm_id INT
	, @grp_id INT
	, @cco_codigoDebito VARCHAR (20)
	, @cco_codigoCredito VARCHAR (20)
	, @mov_observacao VarChar(MAX)
	, @mov_dataAlteracao DATETIME
	, @mov_dataoriginal DATETIME
	, @mov_situacao TINYINT
	WITH RECOMPILE
AS
BEGIN
	UPDATE MovimentacaoBem 
	SET 
		mov_data = @mov_data 
		, mov_observacao = @mov_observacao 
		, mov_dataAlteracao = @mov_dataAlteracao 
		, mov_situacao = @mov_situacao 
		FROM 
		MovimentacaoBem mov1 WITH(NoLock) 
  WHERE 
	    mov1.bem_id = @bem_id
	AND mov1.bit_id = @bit_id 
	And mov1.mov_data = @mov_dataoriginal 		
	AND mov1.tpm_id = @tpm_id 
	AND mov1.grp_id = @grp_id 
	AND mov1.cco_codigoDebito = @cco_codigoDebito 
	AND mov1.cco_codigoCredito = @cco_codigoCredito 

		
		SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_updateExportaRobo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[NEW_MovimentacaoBem_updateExportaRobo](
  	  @uni_id INT 
	, @per_mes varchar(2)
	, @per_ano varchar(4)
	, @status_exportacao INT
	)
as 
begin
		update dbo.MovimentacaoBem
		set status_exportacao =  @status_exportacao
			, descricao_exportacao = null
		where
			 uni_id = @uni_id
		and  per_mes = @per_mes
		and  per_ano = @per_ano
		and  mov_nl  is null
		and  mov_situacao in (1,4)


		SELECT @@ROWCOUNT
end

--		exec [dbo].[NEW_MovimentacaoBem_updateExportaRobo] 2,'03','2014',1 


--select * from MovimentacaoBem where
--			 uni_id = 2
--		and  per_mes = '04'
--		and  per_ano = '2014'
--		and status_exportacao is not null

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBem_VerificaBensUnidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		Christian Freitas
-- Create date: 18/12/2013
-- Description:	Verifica se o bem passado pertence ou não a unidade
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBem_VerificaBensUnidade]
	@uni_id INT,
	@bit_regPatrimonial VARCHAR(20)
AS

BEGIN
	
	SELECT u.uni_id,
		   l.loc_id,
		   bi.bit_id		
		 FROM BemItem bi 
	INNER JOIN Localidade l
		ON l.loc_id = bi.loc_id
	INNER JOIN Unidade u
		ON u.uni_id = l.uni_id

	WHERE u.uni_id = @uni_id AND
		  bi.bit_registroPat = @bit_regPatrimonial
	
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBemByBemID_Manutencao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBemByBemID_Manutencao] 
	@tpm_id INT
	, @per_mes INT
	, @per_ano INT
	, @mov_data DATETIME
	, @mov_GPB varchar(20)
	, @bem_id int
	, @uni_id int
AS
BEGIN

	SELECT	bi.bit_uniGuarda,
			mb.mov_data ,
	        mb.bem_id ,
	        mb.bit_id ,
	        mb.tpm_id ,
	        mb.grp_id ,
	        mb.uni_id ,
	        mb.cco_codigoDebito ,
	        mb.cco_codigoCredito ,
	        mb.per_mes ,
	        mb.per_ano ,
	        mb.fat_id ,
	        mb.usu_id ,
	        mb.mov_valor ,
	        mb.mov_valorReavaliado ,
	        mb.mov_percentualBaixa ,
	        mb.mov_GPB ,
	        mb.mov_unidadeOrigem ,
	        mb.mov_unidadeDestino ,
	        mb.mov_observacao ,
	        mb.mov_origem ,
	        mb.mov_nl ,
	        mb.mov_situacao ,
	        mb.mov_dataCriacao ,
	        mb.mov_dataAlteracao,
	        bi.bit_registroPat,
	        bp.bem_descricao,
	        tm.tpm_descricao
	        
	    FROM dbo.MovimentacaoBem AS mb WITH(NoLock)
		INNER JOIN dbo.BemItem AS bi WITH(NoLock) 
			ON mb.bem_id = bi.bem_id 
			AND mb.bit_id = bi.bit_id
		INNER JOIN dbo.BemPatrimonial AS bp WITH(NoLock)
			ON bp.bem_id = bi.bem_id
		INNER JOIN dbo.TipoMovimentacao AS tm WITH(NoLock)
			ON tm.tpm_id = mb.tpm_id 
			and (tpm_situacao = 1 or tpm_situacao = 4)
			

	WHERE 
		(mb.mov_nl IS NULL)	
		--AND (mb.mov_situacao = 1 or mb.mov_situacao = 4)
		AND (mb.mov_situacao = 1)
		AND (mb.mov_data = CAST(@mov_data AS Date) OR @mov_data IS NULL)		
		AND (mb.per_ano = @per_ano OR @per_ano IS NULL)
		AND (mb.per_mes = @per_mes OR @per_mes IS NULL)
		AND (mb.tpm_id = @tpm_id OR @tpm_id IS NULL)
		AND (@mov_GPB IS NULL OR mb.mov_GPB = @mov_GPB)
		AND (mb.uni_id = @uni_id OR @uni_id IS NULL)
		AND (bi.bem_id = @bem_id OR @bem_id IS NULL)
	 
	 ORDER BY 
		 mb.uni_id
		 , mb.mov_data
	 
	 
	 SELECT @@ROWCOUNT
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBemByBemID_Manutencao_TUNING]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBemByBemID_Manutencao_TUNING] 
	@tpm_id INT
	, @per_mes INT
	, @per_ano INT
	, @mov_data DATETIME
	, @mov_GPB varchar(20)
	, @bem_id BIGint
	, @uni_id int
AS
BEGIN

	SELECT	bi.bit_uniGuarda,
			mb.mov_data ,
	        mb.bem_id ,
	        mb.bit_id ,
	        mb.tpm_id ,
	        mb.grp_id ,
	        mb.uni_id ,
	        mb.cco_codigoDebito ,
	        mb.cco_codigoCredito ,
	        mb.per_mes ,
	        mb.per_ano ,
	        mb.fat_id ,
	        mb.usu_id ,
	        mb.mov_valor ,
	        mb.mov_valorReavaliado ,
	        mb.mov_percentualBaixa ,
	        mb.mov_GPB ,
	        mb.mov_unidadeOrigem ,
	        mb.mov_unidadeDestino ,
	        mb.mov_observacao ,
	        mb.mov_origem ,
	        mb.mov_nl ,
	        mb.mov_situacao ,
	        mb.mov_dataCriacao ,
	        mb.mov_dataAlteracao,
	        bi.bit_registroPat,
	        bp.bem_descricao,
	        tm.tpm_descricao
	        
	    FROM dbo.MovimentacaoBem AS mb WITH(NoLock)
		INNER JOIN dbo.BemItem AS bi WITH(NoLock) 
			ON mb.bem_id = bi.bem_id 
			AND mb.bit_id = bi.bit_id
		INNER JOIN dbo.BemPatrimonial AS bp WITH(NoLock)
			ON bp.bem_id = bi.bem_id
		INNER JOIN dbo.TipoMovimentacao AS tm WITH(NoLock)
			ON tm.tpm_id = mb.tpm_id 
			and (tpm_situacao = 1 or tpm_situacao = 4)
			

	WHERE 
		(mb.mov_nl IS NULL)	
		--AND (mb.mov_situacao = 1 or mb.mov_situacao = 4)
		AND (mb.mov_situacao = 1)
		AND (mb.mov_data = CAST(@mov_data AS Date) OR @mov_data IS NULL)		
		AND (mb.per_ano = @per_ano OR @per_ano IS NULL)
		AND (mb.per_mes = @per_mes OR @per_mes IS NULL)
		AND (mb.tpm_id = @tpm_id OR @tpm_id IS NULL)
		AND (@mov_GPB IS NULL OR mb.mov_GPB = @mov_GPB)
		AND (mb.uni_id = @uni_id OR @uni_id IS NULL)
		AND (bi.bem_id = @bem_id OR @bem_id IS NULL)
	 
	 ORDER BY 
		 mb.uni_id
		 , mb.mov_data
	 
	 
	 SELECT @@ROWCOUNT


	 
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBemEmExportacao_Agrupados]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Debora Cavaglieri
-- Create date: 25/04/2013
-- Description:	Função que carrega os movimentos enviados para exportação mas que
--              não tiveram um retorno adequado.
-- =============================================
-- Author:		Luana Piva
-- Date:		18/12/2013
--				Adicionar retornor dos campos pc.cco_codigo_credito e pc.pco_codigodebito
-- =============================================
-- Author:		Nicholas de Assis
-- Date:		20/05/2014
--				Adicionado campo bid_classificacao no retorno do select
-- =============================================
-- Author:		Allex Rocha
-- Date:		28/11/2014
--				Adicionado os campos mov_unidadeOrigem e tpm_operacao no retorno do select
-- =============================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBemEmExportacao_Agrupados]
	 @uni_id INT
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)
AS
BEGIN

SET LANGUAGE Portuguese
DECLARE @tpm_id INT
SELECT 
		@tpm_id= CAST(PA.par_valor AS INT) 
	FROM SYS_Parametros AS PA 
		WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';
		
WITH MoviBem AS
(
	SELECT
		bem_id,
		bit_id,
		mov_observacao as Observacao,
		mov_unidadeDestino,
		mov_unidadeOrigem,
		mov_gpb,
		mov_valor,
		cco_codigoCredito,
		cco_codigoDebito,
		per_ano,
		tpm_id,
		grp_id,
		uni_id
	FROM
		MovimentacaoBemEmExportacao WITH(NOLOCK)
	WHERE
		    mov_situacao in (1,4)
		AND uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano	
)

,BemNotaEmpenho AS 
(
	SELECT
		ROW_NUMBER() OVER (partition by BD.bem_id, BD.bit_id order  by BD.bem_id, BD.bit_id) as linha
		,BD.* 
	FROM
		BemItemDocumento AS BD WITH(NOLOCK) 
	INNER JOIN MovimentacaoBemEmExportacao AS MO WITH(NOLOCK) 
		on MO.bem_id = BD.bem_id
		and MO.bit_id = BD.bit_id
	WHERE
		mov_situacao in (1,4)
	AND uni_id = @uni_id
	AND per_mes = @per_mes
	AND per_ano = @per_ano	
	AND bid_tipoDoc = 4
)
		SELECT
			ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID
			, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao
			, U.uni_codigoUGE AS UnidadeGestora
			, '00001' AS Gestao		
			, PC.pco_evento as EventoD
			, EventoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN
							
							( CASE (ABS(M.per_ano) - ABS(SUBSTRING(BIC.bid_numeroDoc, 1, 4)))
								WHEN 0 THEN PC.pco_eventoCredito
								WHEN 1 THEN '540170'
								ELSE '540172'
							END)
						ELSE PC.pco_eventoCredito
						END
			)
			, PC.pco_eventoCredito
			, M.cco_codigoDebito as ClassificacaoD
			, ClassificacaoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							cast(BIC.bid_classificacao as varchar(20))
						ELSE 
							M.cco_codigoCredito
						END
			)
			--, (SUM(M.mov_valor) * ISNULL(BIC.bid_porcentagem/100,1)) as Valor
			, (SUM(M.mov_valor)) as Valor
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc AS InscricaoEvento
			, M.mov_gpb
			, PC.pco_eventoCredito
			, PC.cco_codigoDebito
			, PC.cco_codigoCredito
			, BIC.bid_classificacao
			, M.mov_unidadeOrigem
			, TM.tpm_operacao
		FROM
			MoviBem M
			INNER JOIN Unidade U WITH(NOLOCK)
				ON U.uni_id = M.uni_id
			INNER JOIN ParametroContabil PC WITH(NOLOCK)
				ON M.cco_codigoDebito = PC.cco_codigoDebito
					AND M.cco_codigoCredito = PC.cco_codigoCredito
					AND M.grp_id = PC.grp_id
					AND M.tpm_id = PC.tpm_id
			INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
				ON M.tpm_id = TM.tpm_id
			LEFT JOIN BemNotaEmpenho BIC
				ON BIC.bem_id = M.bem_id
				AND BIC.bit_id = M.bit_id
				AND BIC.linha = 1
		WHERE 
			(TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id)
				OR M.tpm_id = @tpm_id))
		GROUP BY
			U.uni_codigoUGE
			, PC.pco_evento
			, PC.pco_eventoCredito
			, M.cco_codigoDebito
			, M.cco_codigoCredito
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc
			, BIC.bid_porcentagem
			, BIC.bid_classificacao
			, M.per_ano
			, M.mov_gpb
			, PC.cco_codigoDebito
			, PC.cco_codigoCredito
			, M.mov_unidadeOrigem
			, TM.tpm_operacao
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBemEmExportacao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================================
-- Author:		Debora Cavaglieri
-- Create date: 24/04/2013
-- Description:	Deleta da tabela MovimentacaoBemEmExportacao os dados que
--              foram enviados para o SIAFEM. É usada para conferir se todos os passos do
--              processo de exportação foram concluídos com sucesso.
-- ==========================================================================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBemEmExportacao_DELETE]
	 @uni_id INT
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)
	, @eventoDebito INT
	, @eventoCredito INT
	, @bid_numeroDoc CHAR (50)
	, @mov_observacao VARCHAR(MAX)
	, @tpm_operacao INT
	, @cco_codigoDebito VARCHAR(20)
	, @cco_codigoCredito VARCHAR(20)
	, @uni_destino INT
	, @mov_gpb VARCHAR(20)

AS
BEGIN

DECLARE @tpm_id INT
SELECT 
		@tpm_id= CAST(PA.par_valor AS INT) 
	FROM SYS_Parametros AS PA WITH(NOLOCK)
		WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';

WITH BemNotaEmpenho AS 
( 
	SELECT 
		ROW_NUMBER() OVER (partition by BD.bem_id, BD.bit_id order by BD.bem_id, BD.bit_id) as linha
		,BD.* 
	FROM
		BemItemDocumento AS BD WITH(NOLOCK) 
	INNER JOIN MovimentacaoBem AS MO WITH(NOLOCK) 
		on MO.bem_id = BD.bem_id
		and MO.bit_id = BD.bit_id
	WHERE
		mov_nl IS NULL
	AND mov_situacao in (1,4)
	AND uni_id = @uni_id
	AND per_mes = @per_mes
	AND per_ano = @per_ano	
	AND bid_tipoDoc = 4
)

DELETE FROM
		MovimentacaoBemEmExportacao
	FROM 
		MovimentacaoBemEmExportacao M 
			INNER JOIN Unidade U WITH(NoLock)
				ON U.uni_id = M.uni_id
			INNER JOIN ParametroContabil PC WITH(NoLock)
				ON M.cco_codigoDebito = PC.cco_codigoDebito
					AND M.cco_codigoCredito = PC.cco_codigoCredito
					AND M.grp_id = PC.grp_id
					AND M.tpm_id = PC.tpm_id	
			INNER JOIN TipoMovimentacao TM WITH(NoLock)
				ON M.tpm_id = TM.tpm_id 
					AND (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL)
			LEFT JOIN BemItemDocumento BIC  WITH(NoLock) 
				ON BIC.bem_id = M.bem_id
				AND BIC.bit_id = M.bit_id
				AND BIC.bid_tipoDoc = 4	
			LEFT JOIN BemItem BI WITH(NoLock)
				ON
				BI.bem_id = M.bem_id 
				AND BI.bit_id = M.bit_id	
			LEFT JOIN BemPatrimonial BP WITH(NoLock)
				ON
				BP.bem_id = M.bem_id
		WHERE 
			    M.mov_situacao in (1,4)
			AND M.uni_id = @uni_id
			AND M.per_mes = @per_mes
			AND M.per_ano = @per_ano
			AND (PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)
			AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL )
			AND (BIC.bid_numeroDoc = @bid_numeroDoc OR @bid_numeroDoc IS NULL)
			AND (M.mov_observacao = @mov_observacao OR @mov_observacao IS NULL) 
			AND M.cco_codigoDebito = @cco_codigoDebito 
			AND M.cco_codigoCredito = @cco_codigoCredito 
			AND(M.mov_unidadeDestino = @uni_destino OR @uni_destino IS NULL)
			AND( TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_id from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
				OR (M.tpm_id = CAST((SELECT PA.par_valor FROM SYS_Parametros AS PA WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT ))
			))
			AND ((@mov_gpb IS NULL) OR (@mov_gpb = M.mov_GPB))
		
	SELECT @@ROWCOUNT

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBemEmExportacao_Detalhes]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================================
-- Author:		Debora Cavaglieri
-- Create date: 25/04/2013
-- Description:	Função que carrega os movimentos enviados para exportação mas que
--              não tiveram um retorno adequado.
-- Alteração: Luana 21/11/2013- Adicionei parâmetros codigoCredito e codigoDebito
-- ==========================================================================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBemEmExportacao_Detalhes]
		@uni_id INT
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)
	, @eventoDebito INT
	, @eventoCredito INT
	, @mov_observacao VARCHAR(MAX)
	, @uni_destino INT
	, @bid_numeroDoc VARCHAR(50)
	, @mov_gpb VARCHAR(20)
	, @codigoCredito VARCHAR(20)
	, @codigoDebito VARCHAR(20)
	
AS
BEGIN

	WITH cteMovimento AS 
	(
		SELECT 
			ROW_NUMBER() OVER (partition by BD.bem_id, BD.bit_id order  by BD.bem_id, BD.bit_id) as linha,
			bid_id ,
			bid_tipoDoc ,
			bid_numeroDoc ,
			bid_porcentagem ,
			bid_classificacao ,
			bid_observacao ,
			bid_dataAlteracao ,
			bid_dataCriacao ,
			mov_data ,
			MO.bem_id ,
			MO.bit_id ,
			tpm_id ,
			grp_id ,
			cco_codigoDebito ,
			cco_codigoCredito ,
			per_mes ,
			per_ano ,
			uni_id ,
			fat_id ,
			usu_id ,
			mov_valor ,
			mov_valorReavaliado ,
			mov_percentualBaixa ,
			mov_GPB ,
			mov_unidadeOrigem ,
			mov_unidadeDestino ,
			mov_observacao ,
			mov_origem ,
			mov_situacao ,
			mov_dataCriacaoMovimento ,
			mov_dataExportacao 
		FROM
			MovimentacaoBemEmExportacao AS MO WITH(NOLOCK) 
		LEFT JOIN BemItemDocumento AS BD WITH(NOLOCK) 
			on MO.bem_id = BD.bem_id
			and MO.bit_id = BD.bit_id
			AND bid_tipoDoc = 4
		WHERE
			mov_situacao in (1,4)
			AND uni_id = @uni_id
			AND per_mes = @per_mes
			AND per_ano = @per_ano	
			
			AND (BD.bid_numeroDoc = @bid_numeroDoc OR @bid_numeroDoc IS NULL)
			AND (Mo.mov_observacao = @mov_observacao OR @mov_observacao IS NULL) 
			AND (Mo.mov_unidadeDestino = @uni_destino OR @uni_destino IS NULL)
			AND (mo.mov_GPB = @mov_gpb OR @mov_gpb IS NULL )
	)

		SELECT
			M.mov_data
			, M.bem_id
			, M.bit_id
			, M.tpm_id
			, M.grp_id
			, M.uni_id
			, M.cco_codigoCredito
			, M.cco_codigoDebito
			, BI.bit_registroPat
			, BP.bem_descricao
			, TM.tpm_descricao
			, M.mov_GPB
		FROM
			cteMovimento AS M WITH(NOLOCK)
			INNER JOIN BemItem BI WITH (NOLOCK)
				ON BI.bem_id = M.bem_id 
				AND BI.bit_id = M.bit_id
			INNER JOIN BemPatrimonial BP WITH (NOLOCK)
				ON BP.bem_id = M.bem_id	
			INNER JOIN Unidade U WITH(NOLOCK)
				ON U.uni_id = M.uni_id
			INNER JOIN ParametroContabil PC WITH(NOLOCK)
				ON M.cco_codigoDebito = PC.cco_codigoDebito
					AND M.cco_codigoCredito = PC.cco_codigoCredito
					AND M.grp_id = PC.grp_id
					AND M.tpm_id = PC.tpm_id	
			INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
				ON M.tpm_id = TM.tpm_id 
			
		WHERE 
						
			(PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)
			AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)
			
			AND( TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_id from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
				OR (M.tpm_id = CAST((SELECT PA.par_valor FROM SYS_Parametros AS PA WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT ))
			))
			AND (PC.cco_codigoCredito = @codigoCredito OR @codigoCredito IS NULL)
			AND (PC.cco_codigoDebito = @codigoDebito OR @codigoDebito IS NULL)
		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBemEmExportacao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================================
-- Author:		Debora Cavaglieri
-- Create date: 22/04/2013
-- Description:	Insere no tabela MovimentacaoBemEmExportacao temporariamente os dados que
--              serão enviados para o SIAFEM. É usada para conferir se todos os passos do
--              processo de exportação foram concluídos com sucesso.

-- Alterado: Nicholas de Assis
-- Date: 28/02/2014
-- Adicionado parametro bid_classificacao para filtrar corretamente os dados 
-- ==========================================================================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBemEmExportacao_INSERT]
	 @uni_id INT
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)
	, @eventoDebito INT
	, @eventoCredito INT
	, @bid_numeroDoc CHAR (50)
	, @mov_observacao VARCHAR(MAX)
	, @tpm_operacao INT
	, @cco_codigoDebito VARCHAR(20)
	, @cco_codigoCredito VARCHAR(20)
	, @recebimento bit
	, @mov_gpb VARCHAR(20)
	, @bid_classificacao VARCHAR(50)

AS
BEGIN

DECLARE @tpm_id INT
SELECT 
		@tpm_id= CAST(PA.par_valor AS INT) 
	FROM SYS_Parametros AS PA WITH(NOLOCK)
		WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';

WITH BemNotaEmpenho AS 
( 
	SELECT 
		ROW_NUMBER() OVER (partition by BD.bem_id, BD.bit_id order by BD.bem_id, BD.bit_id) as linha
		,BD.* 
	FROM
		BemItemDocumento AS BD WITH(NOLOCK) 
	INNER JOIN MovimentacaoBem AS MO WITH(NOLOCK) 
		on MO.bem_id = BD.bem_id
		and MO.bit_id = BD.bit_id
	WHERE
		mov_nl IS NULL
	AND mov_situacao in (1,4)
	AND uni_id = @uni_id
	AND per_mes = @per_mes
	AND per_ano = @per_ano	
	AND bid_tipoDoc = 4
	AND (bid_numeroDoc = @bid_numeroDoc OR @bid_numeroDoc IS NULL)
	AND (bid_classificacao = @bid_classificacao OR @bid_classificacao IS NULL)
)
INSERT INTO MovimentacaoBemEmExportacao
           (mov_data
           ,bem_id
           ,bit_id
           ,tpm_id
           ,grp_id
           ,cco_codigoDebito
           ,cco_codigoCredito
           ,per_mes
           ,per_ano
           ,uni_id
           ,fat_id
           ,usu_id
           ,mov_valor
           ,mov_valorReavaliado
           ,mov_percentualBaixa
           ,mov_GPB
           ,mov_unidadeOrigem
           ,mov_unidadeDestino
           ,mov_observacao
           ,mov_origem
           ,mov_situacao
           ,mov_dataCriacaoMovimento
           ,mov_dataExportacao)

    SELECT
		DISTINCT
           mov_data 
           , Mov.bem_id 
           , Mov.bit_id 
           , Mov.tpm_id 
           , Mov.grp_id 
           , Mov.cco_codigoDebito
           , Mov.cco_codigoCredito
           , per_mes
           , per_ano
           , uni_id
           , fat_id
           , usu_id
           , mov_valor
           , mov_valorReavaliado
           , mov_percentualBaixa
           , mov_GPB
           , mov_unidadeOrigem
           , mov_unidadeDestino
           , mov_observacao
           , mov_origem
           , mov_situacao
           , mov_dataCriacao --mov_dataCriacaoMovimento
           , GETDATE() --mov_dataExportacao
     FROM
		MovimentacaoBem AS Mov WITH(NoLock)
	INNER JOIN ParametroContabil PC WITH(NOLOCK)
		ON Mov.cco_codigoDebito = PC.cco_codigoDebito
		AND Mov.cco_codigoCredito = PC.cco_codigoCredito
		AND Mov.grp_id = PC.grp_id
		AND Mov.tpm_id = PC.tpm_id
	INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
		ON Mov.tpm_id = TM.tpm_id 		
	LEFT JOIN BemNotaEmpenho BIC   
		ON BIC.bem_id = Mov.bem_id
		AND BIC.bit_id = Mov.bit_id
		--AND BIC.linha = 1
	WHERE	
		mov_nl IS NULL		
		AND mov_situacao in (1,4)
		AND uni_id = @uni_id
		AND per_mes = @per_mes
		AND per_ano = @per_ano	
		AND (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL)	
		AND(PC.pco_evento = @eventoDebito OR @eventoDebito IS NULL)
		AND (PC.pco_eventoCredito = @eventoCredito OR @eventoCredito IS NULL)
		AND (Mov.cco_codigoCredito = @cco_codigoCredito OR @cco_codigoCredito IS NULL)
		AND (Mov.cco_codigoDebito = @cco_codigoDebito OR @cco_codigoDebito IS NULL)
		AND (BIC.bid_numeroDoc = @bid_numeroDoc OR @bid_numeroDoc IS NULL)
		AND (bid_classificacao = @bid_classificacao OR @bid_classificacao IS NULL)
		AND ((@recebimento = 1 AND BIC.bid_classificacao IS NOT NULL) OR @recebimento = 0)
		AND	(mov_observacao = @mov_observacao OR @mov_observacao IS NULL)
		AND( TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(Mov.mov_unidadeDestino)) <> Mov.uni_id )								
			OR Mov.tpm_id = @tpm_id))
		AND ((@mov_gpb IS NULL) OR (@mov_gpb = mov.mov_GPB))
		
		
	SELECT @@ROWCOUNT

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBemEmExportacao_LimpaExportacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Gabriel Malinosqui
-- Create date: 09/06/14
-- Description:	Deleta todas as exportações 
-- =============================================

CREATE PROCEDURE [dbo].[NEW_MovimentacaoBemEmExportacao_LimpaExportacao]

@uni_id INT,
@per_mes VARCHAR(2), 
@per_ano VARCHAR(4)

AS
BEGIN

DELETE FROM MovimentacaoBemEmExportacao
WHERE 
uni_id = @uni_id AND
per_mes LIKE @per_mes AND
per_ano LIKE @per_ano

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_MovimentacaoBemEmExportacao_ValidaEmpenho]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================================
-- Author:		Luana Piva
-- Create date: 17/02/2014
-- Description:	Valida se movimentação de recebimento possui nota de empenho com classificação e observação.
-- ==========================================================================================
CREATE PROCEDURE [dbo].[NEW_MovimentacaoBemEmExportacao_ValidaEmpenho]
	 @uni_id INT
	, @per_mes CHAR(2)
	, @per_ano CHAR(4)	
	, @bid_numeroDoc CHAR (50)
	, @mov_observacao VARCHAR(MAX)		

AS
BEGIN

DECLARE @tpm_id INT
SELECT 
		@tpm_id= CAST(PA.par_valor AS INT) 
	FROM SYS_Parametros AS PA WITH(NOLOCK)
		WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';

WITH BemNotaEmpenho AS 
( 
	SELECT 
		BD.bem_id,
		BD.bit_id,
		BD.bid_numeroDoc,
		BD.bid_classificacao
	FROM
		BemItemDocumento AS BD WITH(NOLOCK) 
	INNER JOIN MovimentacaoBem AS MO WITH(NOLOCK) 
		on MO.bem_id = BD.bem_id
		and MO.bit_id = BD.bit_id	
	WHERE
		mov_nl IS NULL
	AND mov_situacao in (1,4)
	AND uni_id = @uni_id
	AND per_mes = @per_mes
	AND per_ano = @per_ano	
	AND bid_tipoDoc = 4
)
	SELECT 
	 Mov.bem_id
	 FROM
		MovimentacaoBem AS Mov WITH(NoLock)			
	INNER JOIN BemNotaEmpenho BIC   
		ON BIC.bem_id = Mov.bem_id
		AND BIC.bit_id = Mov.bit_id		
	WHERE
		
		mov_nl IS NULL		
		AND mov_situacao in (1,4)				
		AND (BIC.bid_numeroDoc = @bid_numeroDoc)
		AND (BIC.bid_classificacao IS NOT NULL)
		AND	(mov_observacao = @mov_observacao)					
		
	SELECT @@ROWCOUNT

END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ParametroContabil_EVENTOS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_ParametroContabil_EVENTOS]
	@tpm_operacao int 
	, @eventoD int
AS
BEGIN
	SELECT DISTINCT	
		 PC.pco_evento
		, PC.pco_eventoCredito
		, pc.cco_codigoDebito
		, pc.cco_codigoCredito
	FROM 
		ParametroContabil AS PC With(NoLock)
	INNER JOIN	TipoMovimentacao AS TM With (NoLock)
		ON	TM.tpm_id = PC.tpm_iD
			AND (TM.tpm_operacao = @tpm_operacao or @tpm_operacao IS NULL)
	WHERE
		PC.pco_evento <> 0
		AND 
		(PC.pco_evento = @eventoD OR @eventoD IS NULL)
	ORDER BY 
		PC.pco_evento, PC.pco_eventoCredito
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_ParametroContabil_GetVinculo_By_ContaContabil]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Luana Piva
-- Create date: 19/03/2014
-- Description:	<Busca parâmetros ativos vinculados ao parâmetro>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ParametroContabil_GetVinculo_By_ContaContabil]
	@cco_codigo varchar(20) 
AS
BEGIN	
	SELECT
		cco_codigoDebito,
		cco_codigoCredito			
		
	FROM
		ParametroContabil WITH(NOLOCK)
	WHERE
		(cco_codigoDebito = @cco_codigo
		OR cco_codigoCredito = @cco_codigo)
		AND pco_situacao <> 3
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ParametroContabil_MovimentoAutomatico]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- ============================================= -- Author:  <JORGE FREITAS> -- Create date: <18/10/2010> -- Description: <Busca parametro contabil para movimento  --    automatico> -- ============================================= 
CREATE PROCEDURE [dbo].[NEW_ParametroContabil_MovimentoAutomatico] 
  @tpm_id int,  
  @grp_id int, 
  @tpm_operacao int,  
  @pco_automatico bit    
  AS BEGIN  
  SELECT pco1.* ,   tpm1.tpm_descricao   
  from ParametroContabil AS pco1 
   INNER JOIN   TipoMovimentacao as tpm1 
   on    tpm1.tpm_id = pco1.tpm_id    
    and    (tpm1.tpm_operacao = @tpm_operacao or @tpm_operacao is null)
	  WHERE    (pco1.tpm_id = @tpm_id or @tpm_id is null)  
	   and (pco1.grp_id = @grp_id or @grp_id is null)   
	   and (pco1.pco_automatico = @pco_automatico or @pco_automatico is null)  
	    and pco1.pco_situacao = 1 
		
		   END 
GO
/****** Object:  StoredProcedure [dbo].[NEW_ParametroContabil_SELECTBY_Descricoes]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<JORGE FREITAS>
-- Create date: <17/08/2010>
-- Description:	<Seleção de Parâmetros Contáveis com filtro(LIKE) 
--               das descrições de TIPO MOVIMENTACAO, GRUPO DE BENS E UNIDADES >
-- obs: A descrição da unidade pode ser da SYS_UnidadeAdministrativa caso uad_id nao seja nulo
--      ou da [SYS_Entidade] caso uad_id nulo e ent_id nao nulo 

-- OBSERVACAO: 04/10/2010 --> FOI RETIRADO O CAMPO UNI_ID DA TABELA DE PARAMETROS
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ParametroContabil_SELECTBY_Descricoes] 
	@tpm_nome varchar(100) ,
	@grp_nome varchar(100)
AS
BEGIN
	SELECT DISTINCT
		PC1.tpm_id 
		,TM1.tpm_nome
		,PC1.grp_id 
		,GB1.grp_nome
		,PC1.cco_codigoDebito 
		,PC1.cco_codigoCredito
		,PC1.pco_historico
		,PC1.pco_evento
		,PC1.pco_automatico
		,PC1.pco_situacao
		,PC1.pco_dataCriacao
		,PC1.pco_dataAlteracao				 
	FROM
		ParametroContabil PC1 WITH(NoLock)
		INNER JOIN TipoMovimentacao TM1 WITH(NoLock) 
			on PC1.tpm_id = TM1.tpm_id 
			AND TM1.tpm_nome LIKE '%' + RTRIM(@tpm_nome) + '%'
		INNER JOIN GrupoBens GB1  WITH(NoLock)
			on PC1.grp_id = GB1.grp_id 
			AND GB1.grp_nome LIKE '%' + RTRIM(@grp_nome) + '%'
	WHERE 
		PC1.pco_situacao <> 3  -- 3. excluido 
 		and PC1.pco_situacao <> 4  -- 4. interno de sistema
 		and PC1.pco_situacao <> 6  -- 6. interno de sistema bloqueado pela conta
 	ORDER BY 	
 		PC1.tpm_id 		
		,PC1.grp_id 		
		,PC1.cco_codigoDebito 
 		,PC1.cco_codigoCredito
 		
 	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ParametroContabil_SELECTby_tpmid_grpid]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Jorge Freitas  
-- Create date: 26/08/10  
-- Description: Seleciona dados dos parametros contábeis   
--    usado no cadastro de movimentacao de bens  
--    FILTROS:tpm_id - tipo de mov  
--      grp_id - grupo de bens  
--        
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_ParametroContabil_SELECTby_tpmid_grpid]   
 @tpm_id INT  
 , @grp_id INT  
 , @tpm_operacao int  
   
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT  
   PCO1.cco_codigoDebito   
  ,CCO1.cco_nome as cco_nomeDebito  
  ,PCO1.cco_codigoCredito  
  ,CCO2.cco_nome as cco_nomeCredito  
  ,PCO1.pco_historico  
  ,PCO1.grp_id     
  ,PCO1.tpm_id   
  ,TP1.tpm_nome   
 FROM  
  ParametroContabil PCO1 WITH(NoLock)  
 inner join   
  ContasContabeis CCO1 WITH(NoLock)  
  on CCO1.cco_codigo = PCO1.cco_codigoDebito   
 inner join   
  ContasContabeis CCO2 WITH(NoLock)   
  on CCO2.cco_codigo = PCO1.cco_codigoCredito    
 inner join   
  TipoMovimentacao TP1 WITH(NoLock)  
  on TP1.tpm_id = PCO1.tpm_id   
  and (tp1.tpm_operacao = @tpm_operacao or @tpm_operacao is null)   
 WHERE   
  (PCO1.tpm_id  = @tpm_id or @tpm_id is null)  
  and ((PCO1.grp_id = (SELECT grp_id FROM dbo.FN_GetGrupoBensSuperiores(@grp_id) where grp_idPai is null)) or @grp_id is null)  
  and PCO1.pco_situacao =1  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_ParametroContabil_SELECTby_tpmid_grpid_existente]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Figueiredo
-- Create date: 08/11/2010
-- Description:	Stored Procedure que retorna uma parametrizacao contabil ja existente para um tipo de movimentação e grupo de bens
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ParametroContabil_SELECTby_tpmid_grpid_existente] 
	@tpm_id INT
	, @grp_id INT	
AS
BEGIN
	SELECT * FROM ParametroContabil AS pco WITH(nolock)
	WHERE 
		pco.tpm_id  = @tpm_id
		and (pco.grp_id = (SELECT grp_id FROM dbo.FN_GetGrupoBensSuperiores(@grp_id) WHERE grp_idPai is null))
		and pco.pco_situacao <>3
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ParametroContabil_Testa_pco_automatico]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<JORGE FREITAS>
-- Create date: <18/08/2010>
-- Description:	<TESTE se existe outro registro de parametro com status de >
--              <automatico para o mesmo tipo de movimento>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ParametroContabil_Testa_pco_automatico] 
	@tpm_id INT
	, @grp_id INT
	, @cco_codigoDebito VARCHAR (20)
	, @cco_codigoCredito VARCHAR (20)
AS
BEGIN

    SELECT 
		pco_automatico 
	FROM 
		ParametroContabil WITH(NoLock)
	WHERE 
		tpm_id = @tpm_id 
		AND grp_id = @grp_id 
		AND (cco_codigoDebito <> @cco_codigoDebito 
			OR cco_codigoCredito <> @cco_codigoCredito)
		AND	pco_automatico = 1 	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_ParametroContabil_ValidaBy_Movimento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Luana Piva
-- Create date: 19/12/2013
-- Description:	retorna parametros utilizados em movimentações
-- =============================================
CREATE PROCEDURE [dbo].[NEW_ParametroContabil_ValidaBy_Movimento] 

	 @grp_id INT	
AS
BEGIN

	SELECT pco.grp_id  
	FROM ParametroContabil AS pco WITH(nolock)
	INNER JOIN MovimentacaoBem as mov WITH(NOLOCK)
	ON (pco.cco_codigoCredito = mov.cco_codigoCredito
		OR pco.cco_codigoDebito = mov.cco_codigoDebito)	
	
	WHERE 
	mov.grp_id = @grp_id	
	
	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_PatrimonioApi_GetSelectPatrimoniosByAno]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===================================================================================

-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_PatrimonioApi_GetSelectPatrimoniosByAno]
	@ano INT
AS

BEGIN
SELECT
	CAST(unidade.uni_id AS INT) AS uad_id,
	cod_inep = NULL,
	CAST(DATEPART(year,bemPat.bem_dataEntrada) AS INT) AS pat_anoAquisicao,
	CAST(grp_nome AS VARCHAR) AS pat_grupoBens,
	CAST(bit_valorOrigem AS NUMERIC) AS pat_valorBens,
	CAST(movBem.mov_unidadeOrigem AS VARCHAR) AS pat_origemRecurso,
	CAST(gruIndGeral.faq_id AS TINYINT)  AS fac_id
FROM BemPatrimonial AS bemPat 
	INNER JOIN BemItem AS bemItem
		on bemPat.bem_id = bemItem.bem_id
	INNER JOIN GrupoBens AS gruBens 
		on gruBens.grp_id=bemPat.grp_id 
	INNER JOIN MovimentacaoBem AS movBem
		on movBem.bem_id = BemItem.bem_id 
		and movBem.bit_id= BemItem.bit_id 
	INNER JOIN dbo.Unidade AS unidade 
	ON movBem.uni_id = unidade.uni_id
	LEFT JOIN GrupoBens_IndicadorGerencial AS gruIndGeral
	ON gruIndGeral.grp_id = gruBens.grp_id
	WHERE DATEPART(year,bemPat.bem_dataEntrada)= @ano
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_PatrimonioWfStatus_SelectBY_wkrId]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================  
-- Author:  Debora Cavaglieri  
-- Create date: 03/11/2010   
-- Description: Busca proximo passo não obrigatorio do workflow  
-- ========================================================================  
  
CREATE PROCEDURE [dbo].[NEW_PatrimonioWfStatus_SelectBY_wkrId]  
 @wrk_id int,  
 @stp_id int  
--WITH RECOMPILE  
AS  
BEGIN  
/****** Script for SelectTopNRows command from SSMS  ******/  
  SELECT TOP 1  
   wrk_id  
      ,stp_id  
      ,stp_idProximo  
      ,wfs_obrigatorio  
      ,wfs_somenteExibicao  
      ,wfs_uniGestora  
      ,wfs_uniGuarda  
      ,wfs_situacao  
      ,wfs_dataCriacao  
      ,wfs_dataAlteracao  
  FROM   
 PatrimonioWfStatus as PatStatus With(NoLock)  
  WHERE   
 wrk_id = @wrk_id   
 AND stp_id > @stp_id   
   
  
 SELECT @@ROWCOUNT  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Periodo_SalvarBy_XML]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 13/08/2010 14:54
-- Description:	Procedure para salvar os Periodos.
--				Básicamente ele remove os que não existem no XML de entrada
--				e insere os que existem no XML não existem no banco de dados											 
-- =========================================================================
CREATE PROCEDURE [dbo].[NEW_Periodo_SalvarBy_XML]
	@grupoXml XML
AS
BEGIN
	--Insere os registros que estão no xml e não estão na tabela
	INSERT INTO dbo.Periodo
	        ( per_mes ,
	          per_ano ,
	          per_situacao ,
	          per_dataCriacao ,
	          per_dataAlteracao
	        )	
	SELECT
		  T.Item.value('(@per_mes)[1]', 'char(2)') AS per_mes
		, T.Item.value('(@per_ano)[1]', 'char(4)') AS per_ano
		, 1
		, T.Item.value('(@per_dataCriacao)[1]','datetime')AS per_dataCriacao
		, T.Item.value('(@per_dataCriacao)[1]','datetime')AS per_dataAlteracao
	FROM
		@grupoXml.nodes('/ArrayOfTmpPeriodos/TmpPeriodos') AS T(Item)
	WHERE
		NOT EXISTS (
			SELECT 
				per_mes
				,per_ano 
			FROM 
				dbo.Periodo AS p
			WHERE
				T.Item.value('(@per_mes)[1]', 'char(2)') = p.per_mes
				AND T.Item.value('(@per_ano)[1]', 'char(4)') = p.per_ano
				)
	RETURN 1
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Periodo_Select]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		João Victor
-- Create date: 16/08/2010 10:30
-- Description:	le os periodos
-- ========================================================================

CREATE PROCEDURE [dbo].[NEW_Periodo_Select]
@ano char(4)
AS
BEGIN
	SELECT per_mes ,
	        per_ano ,
	        per_situacao ,
	        per_dataCriacao ,
	        per_dataAlteracao

	FROM 
		Periodo WITH(NOLOCK) 
		
	WHERE per_ano = @ano OR @ano IS NULL
	ORDER BY CONVERT(INT, per_ano), CONVERT(INT,per_mes)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Periodo_Select_ano]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		João Victor
-- Create date: 16/08/2010 10:30
-- Description:	le os periodos
-- ========================================================================

CREATE PROCEDURE [dbo].[NEW_Periodo_Select_ano]
	
AS
BEGIN
	SELECT DISTINCT per_ano

	FROM 
		Periodo WITH(NOLOCK) 
		
	ORDER BY per_ano
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_PeriodoUnidade_NumeroDePeriodosPorUnidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_PeriodoUnidade_NumeroDePeriodosPorUnidade]
@uni_id int
,@situacao int
AS
BEGIN
	if @situacao!=-1
	begin	
	SELECT 
		PeriodoUnidade.per_mes
		,PeriodoUnidade.per_ano
		,PeriodoUnidade.peu_situacao 
		,PeriodoUnidade.uni_id
		,PeriodoUnidade.peu_dataAlteracao
		,PeriodoUnidade.peu_dataCriacao
	FROM 
		PeriodoUnidade WITH(NOLOCK) 
		
	WHERE 
		@uni_id=uni_id
		And PeriodoUnidade.peu_situacao=@situacao
		
	end
	else
	begin
		SELECT 
		PeriodoUnidade.per_mes
		,PeriodoUnidade.per_ano
		,PeriodoUnidade.peu_situacao 
		,PeriodoUnidade.uni_id
		,PeriodoUnidade.peu_dataAlteracao
		,PeriodoUnidade.peu_dataCriacao
	FROM 
		PeriodoUnidade WITH(NOLOCK) 
		
	WHERE 
		@uni_id=uni_id
		
	end
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_PeriodoUnidade_SelectByAll]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_PeriodoUnidade_SelectByAll]
 @mes varchar(2),
@ano varchar(4),
@uni_id int,
@peu_situacao int

AS
BEGIN
	SELECT 
		PeriodoUnidade.per_mes
		,PeriodoUnidade.per_ano
		,PeriodoUnidade.peu_situacao 
		,PeriodoUnidade.uni_id
		,PeriodoUnidade.peu_dataAlteracao
		,PeriodoUnidade.peu_dataCriacao

	FROM 
		PeriodoUnidade WITH(NOLOCK) 
		
	WHERE 
		(@uni_id is null or @uni_id=uni_id)
		AND (@mes is null or @mes=per_mes)
		AND (@ano is null or @ano = per_ano)
		AND (@peu_situacao is null or @peu_situacao = peu_situacao) 
	
	order by PeriodoUnidade.per_ano desc, PeriodoUnidade.per_mes desc
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_PeriodoUnidade_VerificaMovimentacaoporUnidadeGestora]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_PeriodoUnidade_VerificaMovimentacaoporUnidadeGestora]
@mes varchar(2),
@ano varchar(4),
@uni_id int,
@bem_id int,
@bit_id int
AS
BEGIN
	SELECT 
		bem_id
	FROM 
		MovimentacaoBem WITH(NoLock)
	
	WHERE 
		(uni_id= (select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(@uni_id)))
		AND per_mes = @mes
		AND per_ano = @ano
		AND bem_id = @bem_id
		AND bit_id = @bit_id
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_PeriodoUnidade_VerificaPeriodoValido]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_PeriodoUnidade_VerificaPeriodoValido]
		@mes varchar(2),
		@ano varchar(4),
		@uni_id int
AS
BEGIN
	SELECT 
		PeriodoUnidade.per_mes
		,PeriodoUnidade.per_ano
		,PeriodoUnidade.peu_situacao 

	FROM 
		PeriodoUnidade WITH(NOLOCK) 
		
	WHERE 
		uni_id=@uni_id 
	and (
			(
				CONVERT(int,@mes)>= CONVERT(int,per_mes) 
				and CONVERT(int,@ano)=CONVERT(int, per_ano)
			) 
			or	CONVERT(int,@ano) > CONVERT(int, per_ano)
		)	
	
	ORDER BY 
		PeriodoUnidade.per_ano desc
		, PeriodoUnidade.per_mes desc
	
END

GO
/****** Object:  StoredProcedure [dbo].[New_Rel_Etq_Patrimonial]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Objetivo :	Gerar o Relatorio Etiqueta conforme Task #1663, Task #3249
	
	Autor	 :			Janeiro,2016
	
	Alteracao:			Fevereiro,2016
	
	Testes	 : 

				New_Rel_Etq_Patrimonial null, 21 , 1,3
				New_Rel_Etq_Patrimonial null, 21, 1,1
				New_Rel_Etq_Patrimonial null, 21, 2,1
				New_Rel_Etq_Patrimonial null, 68, 2,1,'2016-10-07','2016-10-07'

	sp_helptext New_Rel_Etq_Patrimonial

*/

create procedure [dbo].[New_Rel_Etq_Patrimonial]
	 @bem_ids varchar(max) = '' -- Recebe uma string separada por ',' de bem_id e a fnSplit monta uma tbl para relacionar.	
	,@uni_id int = 0
	,@wrk_id int = 0
	,@stp_id int = 0
	,@bem_dataCadastro	date = null
	,@bem_dataCadastroFim	date = null
as

declare
@tiporelatorio varchar(100) = ''

set @tiporelatorio =	case  @stp_id 
				
				when 
					1 
				then 
					'Pedido de Impressão de Etiqueta Patrimonial para Unidade Gestora' 

				when 
					3 
				then 
					'Pedido de Impressão de Etiqueta Patrimonial ao Fornecedor' 
			end  

if (@stp_id = 1 and @wrk_id = 2 )
begin
	set @tiporelatorio = 'Reimpressão' 
end

begin
	if (@bem_ids != '') 
	begin
		select 
			 codigo					= bi.bem_id  
			,descricao				= bp.bem_descricao
			,unidadeGuarda			= dbo.FN_GetUniNome(bit_uniGuarda)
			,unidadeGestora			= dbo.FN_GetUniNome(bit_uniGestora)
			,entrada				= bp.bem_dataEntrada
			,cadastro				= bp.bem_dataCriacao
			,localizacao			= lc.loc_nome
			,dependencia			= dp.dep_nome
			,etiqueta				= bi.bit_registroPat
			,titulo					= @tiporelatorio
		from
			BemItem													bi with(nolock)
		
			inner join BemPatrimonial								bp with(nolock)
				on(bi.bem_id = bp.bem_id)
		
			left join Dependencia									dp with(nolock)
				on(dp.loc_id = bi.loc_id
			and		dp.dep_id = bi.dep_id) 
				
			inner join Localidade									lc with(nolock)
				on(bi.loc_id = lc.loc_id)
		
			inner join	(
							select 
									item 
							from 
									dbo.fnSplit(@bem_ids,',')		
							group by 
									item  
					)											bis							
				on(bi.bem_id = bis.item)

	end 

else --if (@bem_ids != '') 
	/* Chamado da tela: AreaAdm/Relatorios/Etiqueta/Filtros.aspx */

	if(@stp_id = 1 and @wrk_id = 1)
	begin
		set @stp_id = 4
	end

	begin

		select distinct
			codigo					= bi.bem_id  
			,descricao				= bp.bem_descricao
			,unidadeGuarda				= dbo.FN_GetUniNome(bit_uniGuarda)
			,unidadeGestora				= dbo.FN_GetUniNome(bit_uniGestora)
			,entrada				= bp.bem_dataEntrada
			,cadastro				= biw.bws_dataCriacao
			,localizacao				= lc.loc_nome
			,dependencia				= ' '
			,etiqueta				= bi.bit_registroPat
			,titulo					= @tiporelatorio
		from
			BemItem											bi with(nolock)
		
			inner join BemPatrimonial								bp with(nolock)
				on(bi.bem_id = bp.bem_id)
				
			inner join Localidade									lc with(nolock)
				on(bi.loc_id = lc.loc_id)
		
			left join BemItemWfStatus								biw with(nolock)
				on(bi.bem_id = biw.bem_id
				and bi.bit_id = biw.bit_id) 
		
			where
				1 = 1
				--and	bi.bit_uniGestora		= @uni_id
				and	biw.stp_id			= @stp_id 
				--and	biw.bws_situacao		= 1  
				and	biw.wrk_id			in (@wrk_id)
				and	bi.bit_status			not in (3,5)
				
				and	(@bem_dataCadastro is null or  convert(date,biw.bws_dataCriacao) >= @bem_dataCadastro)	
				and	(@bem_dataCadastroFim is null or  convert(date,biw.bws_dataCriacao) <= @bem_dataCadastroFim)
				and	bi.bit_registroPat is not null


	end 
end

	


GO
/****** Object:  StoredProcedure [dbo].[new_rel_nl_gerada]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[new_rel_nl_gerada]
as 
begin

SELECT	ISNULL(MB.mov_nl, '') AS 'NL',
		ISNULL(U.uni_codigoUGE, '') AS 'UGE',
		ISNULL(A.uad_codigo, '') AS 'CÓDIGO DA UNIDADE DE GUARDA',
		ISNULL(A.uad_nome, '') AS 'NOME DA UNIDADE DE GUARDA',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao,   0, 40), '')) AS 'DESCRIÇÃO DO BEM 1/6',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao,  40, 40), '')) AS 'DESCRIÇÃO DO BEM 2/6',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao,  80, 40), '')) AS 'DESCRIÇÃO DO BEM 3/6',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao, 120, 40), '')) AS 'DESCRIÇÃO DO BEM 4/6',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao, 160, 40), '')) AS 'DESCRIÇÃO DO BEM 5/6',
		CONVERT(VARCHAR(40), ISNULL(SUBSTRING(BP.bem_descricao, 200, 40), '')) AS 'DESCRIÇÃO DO BEM 6/6',
		ISNULL(MB.per_mes, '') AS 'MÊS',
		ISNULL(MB.per_ano, '') AS 'ANO',
		ISNULL(MB.cco_codigoDebito, '') AS 'CÓDIGO DE DÉBITO',
		ISNULL(MB.cco_codigoCredito, '') AS 'CÓDIGO DE CRÉDITO',
		ISNULL
		((
			SELECT uad_nome
			FROM Unidade AS U
			JOIN Synonym_SYS_UnidadeAdministrativa_SSO AS A ON (A.uad_id = U.uad_id)
			WHERE U.uni_id = MB.mov_unidadeOrigem
		), '') AS 'NOME DA UNIDADE DE ORIGEM',
		ISNULL
		((
			SELECT uad_nome
			FROM Unidade AS U
			INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO AS A ON (A.uad_id = U.uad_id)
			WHERE U.uni_id = MB.mov_unidadeDestino
		), '') AS 'NOME DA UNIDADE DE DESTINO',
		CONVERT(VARCHAR(40), ISNULL(MB.mov_valor, ''), 1) AS 'VALOR'
FROM MovimentacaoBem AS MB
INNER JOIN BemPatrimonial AS BP ON (BP.bem_id = MB.bem_id)
INNER JOIN Unidade AS U ON (U.uni_id = MB.mov_unidadeOrigem)
INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO AS A ON (A.uad_id = U.uad_id)
WHERE MB.mov_nl IS NOT NULL AND MB.per_ano = '2014'
 ORDER BY MB.mov_nl, MB.mov_data
end
GO
/****** Object:  StoredProcedure [dbo].[NEW_Rel_SIAFEM_Consolidado]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================================
-- Author:		Luana Piva
-- Create date: 13/08/13
-- Description:	Carrega SIAFEM consolidado onde nl é nulo.
-- ==========================================================================================
CREATE PROCEDURE [dbo].[NEW_Rel_SIAFEM_Consolidado]
	 @uni_id INT	

AS
BEGIN

SET LANGUAGE Portuguese
DECLARE @tpm_id INT
SELECT 
		@tpm_id= CAST(PA.par_valor AS INT) 
	FROM SYS_Parametros AS PA 
		WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';
		
WITH MoviBem AS
(
	SELECT 
		mov.bem_id,
		mov.bit_id,
		mov.mov_observacao as Observacao,
		mov.mov_unidadeDestino,
		mov.mov_gpb,
		mov.mov_valor,
		mov.cco_codigoCredito,
		mov.cco_codigoDebito,
		mov.per_ano,
		mov.tpm_id,
		mov.grp_id,
		mov.uni_id,
		mov.per_mes
		
	FROM
		 MovimentacaoBem as mov WITH(NOLOCK)
		
		
	WHERE
		    mov.mov_situacao in (1,4)
		AND (@uni_id IS NULL OR mov.uni_id = @uni_id)
		AND mov.mov_nl is null		
		
		
)

,BemNotaEmpenho AS 
(
	SELECT 
		ROW_NUMBER() OVER (order  by BD.bem_id, BD.bit_id) as linha
		,BD.* 
	FROM
		BemItemDocumento AS BD WITH(NOLOCK) 
	INNER JOIN MovimentacaoBemEmExportacao AS MO WITH(NOLOCK) 
		on MO.bem_id = BD.bem_id
		and MO.bit_id = BD.bit_id
	WHERE
		mov_situacao in (1,4)
	AND uni_id = @uni_id

	AND bid_tipoDoc = 4
)
	  
		SELECT
			ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID
			, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao
			, U.uni_codigoUGE AS UnidadeGestora
			, '00001' AS Gestao		
			, PC.pco_evento as EventoD
			, EventoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							
							( CASE (ABS(M.per_ano) - ABS(SUBSTRING(BIC.bid_numeroDoc,1, 4)))   
								WHEN 0 THEN PC.pco_eventoCredito
								WHEN 1 THEN '540170'
								ELSE '540172'
							END)
							
						ELSE PC.pco_eventoCredito
						END
			)
			,PC.pco_eventoCredito
			, M.cco_codigoDebito as ClassificacaoD
			, ClassificacaoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							cast(BIC.bid_classificacao as varchar(20))
						ELSE 
							M.cco_codigoCredito
						END
			)			
			, (SUM(M.mov_valor) * ISNULL(BIC.bid_porcentagem/100,1)) as Valor   -- *********************************
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc AS InscricaoEvento    --- *********************************
			, M.mov_gpb				
			,M.per_mes
			,M.per_ano
			,uad.uad_nome
			
		FROM
			MoviBem M 
			INNER JOIN Unidade U WITH(NOLOCK)
				ON U.uni_id = M.uni_id
			INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO as uad WITH(NOLOCK)
				ON	 uad.uad_id = U.uad_id AND
					 uad.ent_id = U.ent_id AND
					 U.uni_situacao = 1
				
			INNER JOIN ParametroContabil PC WITH(NOLOCK)
				ON M.cco_codigoDebito = PC.cco_codigoDebito
					AND M.cco_codigoCredito = PC.cco_codigoCredito
					AND M.grp_id = PC.grp_id
					AND M.tpm_id = PC.tpm_id	
			INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
				ON M.tpm_id = TM.tpm_id 
			LEFT JOIN BemNotaEmpenho BIC   --- ***************************************
				ON BIC.bem_id = M.bem_id
				AND BIC.bit_id = M.bit_id
				AND BIC.linha = 1
		WHERE 
			(PC.pco_evento IS NOT NULL) AND
			( TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
				OR M.tpm_id = @tpm_id))
				
			
				
		GROUP BY
			U.uni_codigoUGE
			, M.per_ano
			,M.per_mes
			, PC.pco_evento
			, PC.pco_eventoCredito
			, M.cco_codigoDebito
			, M.cco_codigoCredito
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc
			, BIC.bid_porcentagem
			, BIC.bid_classificacao			
			, M.mov_gpb
			, uad.uad_nome
			
			
		ORDER BY 
			U.uni_codigoUGE
			, M.per_ano
			,M.per_mes
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Rel_SIAFEM_ConsolidadoSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[NEW_Rel_SIAFEM_ConsolidadoSP]
	 @uni_id INT	

AS
BEGIN

SET LANGUAGE Portuguese
DECLARE @tpm_id INT
SELECT 
		@tpm_id= CAST(PA.par_valor AS INT) 
	FROM SYS_Parametros AS PA 
		WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';
		
WITH MoviBem AS
(
	SELECT 
		mov.bem_id,
		mov.bit_id,
		mov.mov_observacao as Observacao,
		mov.mov_unidadeDestino,
		mov.mov_gpb,
		mov.mov_valor,
		mov.cco_codigoCredito,
		mov.cco_codigoDebito,
		mov.per_ano,
		mov.tpm_id,
		mov.grp_id,
		mov.uni_id,
		mov.per_mes,
		mov.mov_situacao
		
	FROM
		 MovimentacaoBem	as	mov WITH(NOLOCK)
		 
		 inner join bemitem		bi WITH(NOLOCK)
		 on (mov.bem_id = bi.bem_id
		 and mov.bit_id = bi.bit_id)
		
		
	WHERE
		mov.mov_situacao in (1,4)
		and mov.uni_id = isnull(@uni_id,mov.uni_id)
		and mov.mov_nl is null	
		and bi.bit_status not in (5)
		and mov_dataCriacao > convert(date,'2014-02-28') 
)

,BemNotaEmpenho AS 
(
	SELECT 
		ROW_NUMBER() OVER (order  by BD.bem_id, BD.bit_id) as linha
		,BD.* 
	FROM
		BemItemDocumento AS BD WITH(NOLOCK) 
	INNER JOIN MovimentacaoBemEmExportacao AS MO WITH(NOLOCK) 
		on MO.bem_id = BD.bem_id
		and MO.bit_id = BD.bit_id
	WHERE
		mov_situacao in (1,4)
	--AND uni_id = @uni_id
	--AND (@uni_id IS NULL OR uni_id = @uni_id)
	and uni_id = isnull(@uni_id,uni_id)
	AND bid_tipoDoc = 4
)
	  
		SELECT
			 ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID
			, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao
			, U.uni_codigoUGE AS UnidadeGestora
			, '00001' AS Gestao		
			, PC.pco_evento as EventoD
			, EventoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							
							( CASE (ABS(M.per_ano) - ABS(SUBSTRING(BIC.bid_numeroDoc,1, 4)))   
								WHEN 0 THEN PC.pco_eventoCredito
								WHEN 1 THEN '540170'
								ELSE '540172'
							END)
							
						ELSE PC.pco_eventoCredito
						END
			)
			,PC.pco_eventoCredito
			, M.cco_codigoDebito as ClassificacaoD
			, ClassificacaoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							cast(BIC.bid_classificacao as varchar(20))
						ELSE 
							M.cco_codigoCredito
						END
			)			
			, (SUM(M.mov_valor) * ISNULL(BIC.bid_porcentagem/100,1)) as Valor   -- *********************************
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc AS InscricaoEvento    --- *********************************
			, M.mov_gpb				
			,M.per_mes
			,M.per_ano
			,uad.uad_nome
			,m.bem_id --<Add Task #2339
			,m.bit_id
			
		FROM
			MoviBem M 
			INNER JOIN Unidade U WITH(NOLOCK)
				ON U.uni_id = M.uni_id
			INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO as uad WITH(NOLOCK)
				ON	 uad.uad_id = U.uad_id AND
					 uad.ent_id = U.ent_id AND
					 uad.uad_situacao = 1
				
			INNER JOIN ParametroContabil PC WITH(NOLOCK)
				ON M.cco_codigoDebito = PC.cco_codigoDebito
					AND M.cco_codigoCredito = PC.cco_codigoCredito
					AND M.grp_id = PC.grp_id
					AND M.tpm_id = PC.tpm_id	
			INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
				ON M.tpm_id = TM.tpm_id 
			left JOIN BemNotaEmpenho BIC   --- ***************************************
				ON BIC.bem_id = M.bem_id
				AND BIC.bit_id = M.bit_id
				AND BIC.linha = 1
		WHERE 
			(PC.pco_evento IS NOT NULL) AND
			( TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
				OR M.tpm_id = @tpm_id))
				
		GROUP BY
			 U.uni_codigoUGE
			,M.per_ano
			,M.per_mes
			, PC.pco_evento
			, PC.pco_eventoCredito
			, M.cco_codigoDebito
			, M.cco_codigoCredito
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc
			, BIC.bid_porcentagem
			, BIC.bid_classificacao			
			, M.mov_gpb
			, uad.uad_nome
			, m.bem_id
			, m.bit_id		
			
		ORDER BY 
			U.uni_codigoUGE
			, M.per_ano
			,M.per_mes
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_Rel_SIAFEM_ConsolidadoSP_Teste]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext NEW_Rel_SIAFEM_ConsolidadoSP

-- ==========================================================================================
-- Author:		Luana Piva
-- Create date: 13/08/13
-- Description:	Carrega SIAFEM consolidado onde nl é nulo.
-- ==========================================================================================

-- exec [dbo].[NEW_Rel_SIAFEM_ConsolidadoSP_teste] null

CREATE PROCEDURE [dbo].[NEW_Rel_SIAFEM_ConsolidadoSP_Teste]
	 @uni_id INT	

AS
BEGIN

SET LANGUAGE Portuguese
DECLARE @tpm_id INT
SELECT 
		@tpm_id= CAST(PA.par_valor AS INT) 
	FROM SYS_Parametros AS PA 
		WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';
		
WITH MoviBem AS
(
	SELECT 
		mov.bem_id,
		mov.bit_id,
		mov.mov_observacao as Observacao,
		mov.mov_unidadeDestino,
		mov.mov_gpb,
		mov.mov_valor,
		mov.cco_codigoCredito,
		mov.cco_codigoDebito,
		mov.per_ano,
		mov.tpm_id,
		mov.grp_id,
		mov.uni_id,
		mov.per_mes
		
	FROM
		 MovimentacaoBem as mov WITH(NOLOCK)
		
		
	WHERE
		    mov.mov_situacao in (1,4)
		AND (@uni_id IS NULL OR mov.uni_id = @uni_id)
		AND mov.mov_nl is null		
		
		
)

,BemNotaEmpenho AS 
(
	SELECT 
		ROW_NUMBER() OVER (order  by BD.bem_id, BD.bit_id) as linha
		,BD.* 
	FROM
		BemItemDocumento AS BD WITH(NOLOCK) 
	INNER JOIN MovimentacaoBemEmExportacao AS MO WITH(NOLOCK) 
		on MO.bem_id = BD.bem_id
		and MO.bit_id = BD.bit_id
	WHERE
		mov_situacao in (1,4)
	AND (uni_id = @uni_id or @uni_id is null)

	AND bid_tipoDoc = 4
)
	  
		SELECT
			--ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID
			--, 
			--REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao
			--, 
			U.uni_codigoUGE AS UnidadeGestora
			, '00001' AS Gestao		
			, PC.pco_evento as EventoD
			, EventoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							
							( CASE (ABS(M.per_ano) - ABS(SUBSTRING(BIC.bid_numeroDoc,1, 4)))   
								WHEN 0 THEN PC.pco_eventoCredito
								WHEN 1 THEN '540170'
								ELSE '540172'
							END)
							
						ELSE PC.pco_eventoCredito
						END
			)
			--,PC.pco_eventoCredito
			, M.cco_codigoDebito as ClassificacaoD
			, ClassificacaoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							cast(BIC.bid_classificacao as varchar(20))
						ELSE 
							M.cco_codigoCredito
						END
			)			
			, SUM(M.mov_valor) as Valor --* ISNULL(BIC.bid_porcentagem/100,1)) as Valor   -- *********************************
			--, Observacao
			--, M.mov_unidadeDestino
			--, BIC.bid_numeroDoc AS InscricaoEvento    --- *********************************
			--, M.mov_gpb				
			,M.per_mes
			,M.per_ano
			,uad.uad_nome
			
		FROM
			MoviBem M 
			INNER JOIN Unidade U WITH(NOLOCK)
				ON U.uni_id = M.uni_id
			INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO as uad WITH(NOLOCK)
				ON	 uad.uad_id = U.uad_id AND
					 uad.ent_id = U.ent_id AND
					 uad.uad_situacao = 1
				
			INNER JOIN ParametroContabil PC WITH(NOLOCK)
				ON M.cco_codigoDebito = PC.cco_codigoDebito
					AND M.cco_codigoCredito = PC.cco_codigoCredito
					AND M.grp_id = PC.grp_id
					AND M.tpm_id = PC.tpm_id	
			INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
				ON M.tpm_id = TM.tpm_id 
			LEFT JOIN BemNotaEmpenho BIC   --- ***************************************
				ON BIC.bem_id = M.bem_id
				AND BIC.bit_id = M.bit_id
				AND BIC.linha = 1
		WHERE 
			(PC.pco_evento IS NOT NULL) AND
			( TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
				OR M.tpm_id = @tpm_id))
				
			and m.per_ano = '2014'
				
				
		GROUP BY
			U.uni_codigoUGE
			, M.per_ano
			,M.per_mes
			, PC.pco_evento
			, PC.pco_eventoCredito
			, M.cco_codigoDebito
			, M.cco_codigoCredito
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc
			, BIC.bid_porcentagem
			, BIC.bid_classificacao			
			, M.mov_gpb
			, uad.uad_nome
			
			
		ORDER BY 
			U.uni_codigoUGE
			, M.per_ano
			,M.per_mes
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Rel_SIAFEM_ConsolidadoSP_todas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_Rel_SIAFEM_ConsolidadoSP_todas]
	 @uni_id INT =null,	
	 @dataInicial date =null,
	@dataFinal date =null,
	@Evento varchar(20)=null
AS
BEGIN

SET LANGUAGE Portuguese
DECLARE @tpm_id INT
SELECT 
		@tpm_id= CAST(PA.par_valor AS INT) 
	FROM SYS_Parametros AS PA with (nolock) 
		WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';
		
WITH MoviBem AS
(
	SELECT 
		mov.bem_id,
		mov.bit_id,
		mov.mov_observacao as Observacao,
		mov.mov_unidadeDestino,
		mov.mov_gpb,
		mov.mov_valor,
		mov.cco_codigoCredito,
		mov.cco_codigoDebito,
		mov.per_ano,
		mov.tpm_id,
		mov.grp_id,
		mov.uni_id,
		mov.per_mes,
		mov.mov_situacao
		
	FROM
		 MovimentacaoBem	as	mov WITH(NOLOCK)
		 
		 inner join bemitem		bi WITH(NOLOCK)
		 on (mov.bem_id = bi.bem_id
		 and mov.bit_id = bi.bit_id)
		
		
	WHERE
		mov.mov_situacao in (1,4)
		and mov.uni_id = isnull(@uni_id,mov.uni_id)
		and mov.mov_nl is null	
		and bi.bit_status not in (5)
		and mov_dataCriacao > convert(date,'2014-02-28') 	
	
		
)

,BemNotaEmpenho AS 
(
	SELECT 
		ROW_NUMBER() OVER (order  by BD.bem_id, BD.bit_id) as linha
		,BD.* 
	FROM
		BemItemDocumento AS BD WITH(NOLOCK) 
	INNER JOIN MoviBem AS MO WITH(NOLOCK) 
		on MO.bem_id = BD.bem_id
		and MO.bit_id = BD.bit_id
	WHERE
		mov_situacao in (1,4)
	--AND uni_id = @uni_id
	--AND (@uni_id IS NULL OR uni_id = @uni_id)
	and uni_id = isnull(@uni_id,uni_id)
	AND bid_tipoDoc = 4
)
	  
		SELECT
			ROW_NUMBER() OVER (ORDER BY pco_evento) AS ID
			, REPLACE(UPPER(CONVERT(CHAR, GETDATE(), 106)), ' ', '') AS DataEmissao
			, U.uni_codigoUGE AS UnidadeGestora
			, '00001' AS Gestao		
			, PC.pco_evento as EventoD
			, EventoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							
							( CASE (ABS(M.per_ano) - ABS(SUBSTRING(BIC.bid_numeroDoc,1, 4)))   
								WHEN 0 THEN PC.pco_eventoCredito
								WHEN 1 THEN '540170'
								ELSE '540172'
							END)
							
						ELSE PC.pco_eventoCredito
						END
			)
			,PC.pco_eventoCredito
			, M.cco_codigoDebito as ClassificacaoD
			, ClassificacaoC = (CASE (PC.pco_evento)
						WHEN 540490 THEN				
							cast(BIC.bid_classificacao as varchar(20))
						ELSE 
							M.cco_codigoCredito
						END
			)			
			, (SUM(M.mov_valor) * ISNULL(BIC.bid_porcentagem/100,1)) as Valor   -- *********************************
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc AS InscricaoEvento    --- *********************************
			, M.mov_gpb				
			,M.per_mes
			,M.per_ano
			,uad.uad_nome
			
		FROM
			MoviBem M  WITH(NOLOCK) 
			INNER JOIN Unidade U WITH(NOLOCK)
				ON U.uni_id = M.uni_id
			INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO as uad WITH(NOLOCK)
				ON	 uad.uad_id = U.uad_id AND
					 uad.ent_id = U.ent_id AND
					 uad.uad_situacao = 1
				
			INNER JOIN ParametroContabil PC WITH(NOLOCK)
				ON M.cco_codigoDebito = PC.cco_codigoDebito
					AND M.cco_codigoCredito = PC.cco_codigoCredito
					AND M.grp_id = PC.grp_id
					AND M.tpm_id = PC.tpm_id	
			INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
				ON M.tpm_id = TM.tpm_id 
			LEFT JOIN BemNotaEmpenho BIC   --- ***************************************
				ON BIC.bem_id = M.bem_id
				AND BIC.bit_id = M.bit_id
				AND BIC.linha = 1
		WHERE 
			(PC.pco_evento IS NOT NULL and PC.pco_evento = isnull(@Evento,PC.pco_evento)) AND
			( TM.tpm_operacao NOT IN (2,6) OR (
				 ((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
				OR M.tpm_id = @tpm_id))
				
			
				
		GROUP BY
			U.uni_codigoUGE
			, M.per_ano
			,M.per_mes
			, PC.pco_evento
			, PC.pco_eventoCredito
			, M.cco_codigoDebito
			, M.cco_codigoCredito
			, Observacao
			, M.mov_unidadeDestino
			, BIC.bid_numeroDoc
			, BIC.bid_porcentagem
			, BIC.bid_classificacao			
			, M.mov_gpb
			, uad.uad_nome
			
			
		ORDER BY 
			U.uni_codigoUGE
			, M.per_ano
			,M.per_mes
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_Rel_SIAFEM_ConsolidadoSPSum]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_Rel_SIAFEM_ConsolidadoSPSum]
	 @uni_id INT	

AS
BEGIN

SET LANGUAGE Portuguese
DECLARE 

@tpm_id INT
,@retorno int

SELECT 	@tpm_id= CAST(PA.par_valor AS INT) FROM SYS_Parametros AS PA  WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO';
		
WITH MoviBem AS
(
	SELECT 
		mov.bem_id,
		mov.bit_id,
		mov.mov_observacao as Observacao,
		mov.mov_unidadeDestino,
		mov.mov_gpb,
		mov.mov_valor,
		mov.cco_codigoCredito,
		mov.cco_codigoDebito,
		mov.per_ano,
		mov.tpm_id,
		mov.grp_id,
		mov.uni_id,
		mov.per_mes
		
	FROM
		 MovimentacaoBem	as	mov WITH(NOLOCK)
		 
		 inner join bemitem		bi WITH(NOLOCK)
		 on (mov.bem_id = bi.bem_id
		 and mov.bit_id = bi.bit_id)
		
		
	WHERE
		mov.mov_situacao in (1,4)
		and mov.uni_id = isnull(@uni_id,mov.uni_id)
		and mov.mov_nl is null	
		and bi.bit_status not in (5)
		and mov_dataCriacao > convert(date,'2014-02-28') 
		
		
)

,BemNotaEmpenho AS 
(
	SELECT 
		ROW_NUMBER() OVER (order  by BD.bem_id, BD.bit_id) as linha
		,BD.* 
	FROM
		BemItemDocumento AS BD WITH(NOLOCK) 
	INNER JOIN MovimentacaoBemEmExportacao AS MO WITH(NOLOCK) 
		on MO.bem_id = BD.bem_id
		and MO.bit_id = BD.bit_id
	WHERE
		mov_situacao in (1,4)
	--AND uni_id = @uni_id
	--AND (@uni_id IS NULL OR uni_id = @uni_id)
	and uni_id = isnull(@uni_id,uni_id)
	AND bid_tipoDoc = 4
)


select @retorno = (
	  
SELECT 
	top 1
	Periodo = M.per_ano + M.per_mes
			
FROM
	MoviBem M 
	INNER JOIN Unidade U WITH(NOLOCK)
		ON U.uni_id = M.uni_id
	INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO as uad WITH(NOLOCK)
		ON	 uad.uad_id = U.uad_id AND
				uad.ent_id = U.ent_id AND
				uad.uad_situacao = 1
				
	INNER JOIN ParametroContabil PC WITH(NOLOCK)
		ON M.cco_codigoDebito = PC.cco_codigoDebito
			AND M.cco_codigoCredito = PC.cco_codigoCredito
			AND M.grp_id = PC.grp_id
			AND M.tpm_id = PC.tpm_id	
	INNER JOIN TipoMovimentacao TM WITH (NOLOCK)
		ON M.tpm_id = TM.tpm_id 
	left JOIN BemNotaEmpenho BIC   --- ***************************************
		ON BIC.bem_id = M.bem_id
		AND BIC.bit_id = M.bit_id
		AND BIC.linha = 1
WHERE 
	(PC.pco_evento IS NOT NULL) AND
	( TM.tpm_operacao NOT IN (2,6) OR (
			((select top 1 uni_idgestora from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino)) <> M.uni_id )								
		OR M.tpm_id = @tpm_id))
				
			
			
ORDER BY 
 	M.per_ano 
	,M.per_mes 
)


select @retorno
	 
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_Rel_Uges_Ultimo_Periodo_Aberto]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[NEW_Rel_Uges_Ultimo_Periodo_Aberto]

as
begin

set language Portuguese

	select 
		*
	from(

		select 
			 uni_id
			,uni_nome	= dbo.FN_GetUniNome(uni_id) --+ '(' + convert(varchar(100),uni_id) + ')'
			,per		= dbo.fnRetornaUltimoPeriodoAberto(uni_id) 
		from 
			VW_UnidadeGestora
	
	)as result
	where 
		result.per is not null
	order by
		per

END


GO
/****** Object:  StoredProcedure [dbo].[new_restart_services_siafem]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Objetivo :	Resetar envios SIAFEM
	
	Autor	 :	Juscilan Moreto		Janeiro,2016
	
	Alteracao:	Melhorias no @nome_robo e @status_exportacao Evitar duplicidades	13/01/2016
	
	Testes	 : 

			//reinicia
			new_restart_services_siafem 71,'10','2016',1
			//erro
			new_restart_services_siafem 71,'10','2016',2

*/

create procedure [dbo].[new_restart_services_siafem] 
(
	 @uni_id int
	,@per_mes varchar(2) 
	,@per_ano varchar(4) 
	,@status_exportacao int = 1
)
as

declare 

@senha_siafem varchar(max) = ''
,@usu_login varchar(max) = ''
,@nome_robo varchar(max) = ''

--completar com zero a esquerda
set @per_mes = right('0'+ @per_mes,2)

if(@status_exportacao) = 1

	begin

		if (not exists (select 
					top 1 uni_id 
				from 
					ExecutarRoboSiafem with(nolock) 
				where 
					1 = 1 
					and uni_id		= @uni_id
					and per_mes		= @per_mes
					and per_ano		= @per_ano
					and status_exportacao	= @status_exportacao
				)
		)
		begin
			select @usu_login =	(
						
						select 
							top 1 user_siafem 
						from 
							ExecutarRoboSiafem with(nolock) 
						where 
							1 = 1 
							and uni_id		= @uni_id
							and per_mes		= @per_mes
							and per_ano		= @per_ano
						)

			select @senha_siafem = (
						select 
							usu_senha 
						from 
							Coresso..SYS_Usuario with(nolock)
						where 
							usu_login = @usu_login
							
						)


			select @nome_robo =	(
						
						select 
							top 1 nomerobo 
						from 
							ExecutarRoboSiafem with(nolock) 
						where 
							1 = 1 
							and uni_id		= @uni_id
							and per_mes		= @per_mes
							and per_ano		= @per_ano
						)


			if not exists(
				select 
					top 1 nomerobo
				from 
					ExecutarRoboSiafem with(nolock) 
				where 
					1 = 1 
					and nomerobo		= @nome_robo
					and status_exportacao	= @status_exportacao 						
			
			)
			begin


				update 
					ExecutarRoboSiafem 
				set 
					status_exportacao	= 1  
					,senha_siafem		= @senha_siafem 
					,data_alteracao		= getdate()
				where
					1 = 1 
					and uni_id	= @uni_id
					and per_mes	= @per_mes
					and per_ano	= @per_ano

			end
		end

		select @@ROWCOUNT
	end

else --if(@status_exportacao) = 1

	begin

		update 
			ExecutarRoboSiafem 
		set 
			status_exportacao = 4  
			,data_alteracao		= getdate()
		where
			1 = 1 
			and uni_id	= @uni_id
			and per_mes	= @per_mes
			and per_ano	= @per_ano


		select @@ROWCOUNT
	end



GO
/****** Object:  StoredProcedure [dbo].[NEW_Seguradora_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =====================================================================
-- Author:		Aline Dornelas
-- Create date: 12/08/2010 17:17
-- Description:	Retorna todas as seguradoras que não foram excluídas
--				logicamente, fitradas por código e razão social
-- Modificação: Inclusão do filtro por CNPJ
-- ======================================================================
CREATE PROCEDURE [dbo].[NEW_Seguradora_SelectBy_All]
	@ent_codigo VARCHAR(20),
	@ent_razaoSocial VARCHAR(200),
	@ent_cnpj VARCHAR(14)
AS
BEGIN
	SELECT 
		SEG.seg_id,
		ENT.ent_razaoSocial,
		ENT.ent_codigo,
		ENT.ent_cnpj,
		CASE SEG.seg_situacao 
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
			ELSE 'Padrao do sistema'
		  END AS seg_situacaoNome
	FROM 
		Seguradora AS SEG WITH (NOLOCK)
	INNER JOIN
		Synonym_SYS_Entidade_SSO AS ENT WITH(NOLOCK)
			ON SEG.ent_id = ENT.ent_id
	WHERE
		SEG.seg_situacao = 1
		AND ((@ent_codigo IS NULL) OR (ENT.ent_codigo LIKE '%' + @ent_codigo + '%')) 
		AND ((@ent_razaoSocial IS NULL) OR (ENT.ent_razaoSocial LIKE '%' + @ent_razaoSocial + '%'))
		AND ((@ent_cnpj IS NULL) OR (ENT.ent_cnpj LIKE '%' + @ent_cnpj + '%'))
	ORDER BY
		ENT.ent_razaoSocial
		
SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Seguradora_SelectBy_All_BloqueadasAtivas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =====================================================================
-- Author:		Luana
-- Create date: 18/12/2013
-- Description:	Retorna todas as seguradoras que não foram excluídas
--				logicamente, fitradas por código e razão social
-- ======================================================================
CREATE PROCEDURE [dbo].[NEW_Seguradora_SelectBy_All_BloqueadasAtivas]
	@ent_codigo VARCHAR(20),
	@ent_razaoSocial VARCHAR(200),
	@ent_cnpj VARCHAR(14)
AS
BEGIN
	SELECT 
		SEG.seg_id,
		ENT.ent_razaoSocial,
		ENT.ent_codigo,
		ENT.ent_cnpj,
		CASE SEG.seg_situacao 
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
			ELSE 'Padrao do sistema'
		  END AS seg_situacaoNome
	FROM 
		Seguradora AS SEG WITH (NOLOCK)
	INNER JOIN
		Synonym_SYS_Entidade_SSO AS ENT WITH(NOLOCK)
			ON SEG.ent_id = ENT.ent_id
	WHERE
		SEG.seg_situacao <> 3
		AND ((@ent_codigo IS NULL) OR (ENT.ent_codigo LIKE '%' + @ent_codigo + '%')) 
		AND ((@ent_razaoSocial IS NULL) OR (ENT.ent_razaoSocial LIKE '%' + @ent_razaoSocial + '%'))
		AND ((@ent_cnpj IS NULL) OR (ENT.ent_cnpj LIKE '%' + @ent_cnpj + '%'))
	ORDER BY
		ENT.ent_razaoSocial
		
SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Seguradora_SelectBy_Codigo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===============================================================
-- Author:		Aline Dornelas
-- Create date:
-- Description:	Utilizado na busca de código da seguradora, 
--				retorna as seguradoras que não foram excluídas 
--				logicamente, filtrados por: codigo da seguradora.
-- ================================================================
CREATE PROCEDURE [dbo].[NEW_Seguradora_SelectBy_Codigo] 
	@seg_id_alteracao INT,
	@ent_codigo VARCHAR(20)
AS
BEGIN
	SELECT
		S.seg_id
	FROM 
		Seguradora S WITH(NOLOCK)
		INNER JOIN Synonym_SYS_Entidade_SSO E WITH(NOLOCK)
			ON S.ent_id = E.ent_id
	WHERE 
		S.seg_situacao <> 3
		AND E.ent_codigo = @ent_codigo
		AND ((@seg_id_alteracao IS NULL) or (S.seg_id <> @seg_id_alteracao))
		
	RETURN ISNULL(@@ROWCOUNT,-1)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Seguradora_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Aline Dornelas	
-- Create date: 11/08/2010 17:12
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Seguradora_UPDATE]
	@seg_id INT,
	@seg_situacao TINYINT,
	@seg_dataAlteracao DATETIME

AS
BEGIN
	UPDATE Seguradora
	SET 
		seg_situacao = @seg_situacao, 
		seg_dataAlteracao =  @seg_dataAlteracao

	WHERE 
		seg_id = @seg_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[New_SelectGrupoBensIndicadorGerenciaBy_GrpID]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		Wellington Santana
-- Create date: 22/05/2014
-- Description: Retorna Grupobens_IndicadorGerencial por grp_id
-- ===================================================================================
CREATE PROCEDURE [dbo].[New_SelectGrupoBensIndicadorGerenciaBy_GrpID]
	@grp_id int
AS
BEGIN
		SELECT
				gig.faq_id
		FROM
				GrupoBens_IndicadorGerencial as gig WITH(NOLOCK)
		WHERE
				(gig.grp_id = @grp_id)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SelectImportados_Servico]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Luana Piva
-- Create date: 08/07/2014
-- Description:	Retorna status do parâmetro de acordo com a chave
-- ==================================================================

CREATE PROCEDURE [dbo].[NEW_SelectImportados_Servico]
AS
BEGIN
	SELECT top 1000
		bpl_id
		,bpl_registroPatrimonial
		,bpl_cadmat
		,bpl_material
		,bpl_numeroDoc1
		,bpl_dataCriacaoDoc1
		,bpl_numeroDoc2
		,bpl_dataCriacaoDoc2
		,bpl_numeroDoc3
		,bpl_dataCriacaoDoc3
		,bpl_numeroDoc4
		,bpl_dataCriacaoDoc4
		,bpl_numeroDoc5
		,bpl_dataCriacaoDoc5
		,bpl_numeroDoc6
		,bpl_dataCriacaoDoc6
		,bpl_cnpjFornecedor
		,bpl_valorUnitario
		,bpl_valorUnitario
		,bpl_valorTotal
		,bpl_statusConservacao
		,bpl_statusUtilizacao
		,bpl_dependencia
		,bpl_observacao
		,bpl_situacao
		,bpl_dataImportacao
		,bpl_unidade
		,bpl_grupoBem
		,bpl_dataTransferencia
		,bpl_registroPatAnterior
		,bpl_tipoBem
		,bpl_tipoBemObservacao
		,bpl_serieDocumentoCompra
		,bpl_marca
		,bpl_modelo
		,bpl_codFornecedor
		,bpl_situacaoPatrimonial
		,bpl_codProgFinanc
		,bpl_matriculaPessoa
		,bpl_codEspecie
		,bpl_nroSerie
		,bpl_nro_placa_veic
		,bpl_nro_chassi_veic
		,bpl_tipo_veic
		,bpl_marca_veic
		,bpl_modelo_veic
		,bpl_potencia_veic
		,bpl_potencia_unidade
		,bpl_cilindro_veic
		,bpl_ano_fabr_veic
		,bpl_quilometragem_veic
		,bpl_tipo
		,bpl_quantidade
		,bpl_log
		,bpl_razaoSocialFornecedor		

	FROM 
		BemPatrimonialLegado WITH(NOLOCK) 
		WHERE bpl_situacao <> 3
		AND bpl_log is null
		AND bpl_dataTransferencia is null
		
			
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SelectIndicadoresGerenciais_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================================================
-- Author:		Wellington Santana
-- Create date: 22/05/2014
-- Description: Retorna todos os Indicadores Gerenciais
-- ===================================================================================
CREATE PROCEDURE [dbo].[NEW_SelectIndicadoresGerenciais_All]
	
AS
BEGIN
		
	SELECT
			faq_id,
			faq_nome,
			faq_sigla
	FROM
		IndicadorGerencial WITH(NOLOCK)
		
	ORDER BY faq_id 
	
END

GO
/****** Object:  StoredProcedure [dbo].[New_SelectIndicadorGerencialByFaq_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Wellington Santana
-- Create date: 22/05/2014
-- Description: Selecionar indicador gerencial por faq_id
-- ========================================================================
CREATE PROCEDURE [dbo].[New_SelectIndicadorGerencialByFaq_id]
	@faq_id VARCHAR(30)
AS
BEGIN
	SELECT 
			faq_id,
			faq_nome,
			faq_sigla
	FROM
			IndicadorGerencial WITH(NOLOCK)
	WHERE
			(faq_id = @faq_id)
END

GO
/****** Object:  StoredProcedure [dbo].[New_SelectValidaUnidadeCoreSSOByBpl_unidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Wellington Santana
-- Create date: 11/07/2014
-- Description:	Verifica se a unidade existe na Tabela UnidadeAdministrativa_SSO do CoreSSO
-- =============================================
CREATE PROCEDURE [dbo].[New_SelectValidaUnidadeCoreSSOByBpl_unidade]
	@bpl_unidade int
as	
BEGIN
	SELECT
		U.uni_id,
		U.ent_id,
		U.uad_id
	FROM
		dbo.Unidade as U WITH(NOLOCK)
		INNER JOIN Synonym_SYS_UnidadeAdministrativa_SSO as UA WITH(NOLOCK)
			ON U.uad_id = UA.uad_id
				AND U.ent_id = UA.ent_id
	WHERE 
		U.uni_id = @bpl_unidade
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Sincronizacao_Atualiza_Localidade_Padrao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================
-- Author:		Luana Piva
-- Create date: 10/06/2014
-- Description:	Após a importação de escolas e diretorias, as unidades podem ficar ocasionalmente com mais de uma localidade padrão, 
-- o que não é permitido. Esse processo serve para, no caso de existir mais de uma localidade padrão por unidade, a localizações mais antiga
-- recebem a situação "1" (não padrão). 
-- =============================================================
CREATE PROCEDURE [dbo].[NEW_Sincronizacao_Atualiza_Localidade_Padrao]
AS BEGIN
	
	--Agrupa localidades por unidade
	WITH loc_padrao AS 
	(
		SELECT
		ROW_NUMBER() OVER (PARTITION by loc.uni_id order by loc.loc_dataCriacao desc) as linha
		,loc.loc_id,
		loc.loc_situacao,
		loc.uni_id
		
		FROM Localidade AS loc WITH(NOLOCK)
		
		WHERE loc.loc_situacao = 4				
	)	
	--Atualiza localidades	
	UPDATE Localidade 
	SET
		Localidade.loc_situacao = 1	
	WHERE
		Localidade.loc_id in (	
								-- Seleciona as localidades mais antigas, dentre as unidades que possuem mais de uma 
								-- localidade padrão
								 SELECT 	loc.loc_id								  
								 FROM Localidade AS loc WITH(NOLOCK)
									INNER JOIN loc_padrao
								 ON loc_padrao.loc_id = loc.loc_id
									AND loc_padrao.uni_id = loc.uni_id
									AND	loc_padrao.linha > 1
							  )
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Sincronizacao_Diretoria_To_Unidade_Step1]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================
-- Author:		Aline Dornelas
-- Create date: 
-- Description:	Importação de Diretorias de Ensino 
--				da BaseCieProdesp para CoreSSO e ConPat
-- =============================================================
CREATE PROCEDURE [dbo].[NEW_Sincronizacao_Diretoria_To_Unidade_Step1]
AS BEGIN

-- SYS_UnidadeAdministrativa
MERGE dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA_Target
	USING
	(
		SELECT 
			CD_DIRETORIADEENSINO
			, NM_DIRETORIA
			, ID_COORDENADORIA
		FROM 
			dbo.Synonym_Diretoria_CIE WITH(NOLOCK)
	) 
	AS UA_Source
	(
		codigo
		, nome
		, idSuperior
	)
    ON (UA_Target.uad_codigo = UA_Source.codigo COLLATE SQL_Latin1_General_CP1_CI_AS)
    -- UPDATE
    WHEN MATCHED THEN
        UPDATE SET
			-- ent_id 
			ent_id = dbo.FN_GetValorParemetrosAtivo('ENTIDADE_SECRETARIA')
			-- tua_id
			, tua_id = dbo.FN_GetValorParemetrosAtivo('TIPO_UAD_DIRETORIA_ENSINO')
			-- uad_codigo
			, uad_codigo = UA_Source.codigo
			-- uad_nome
			, uad_nome = UA_Source.nome
			-- uad_idSuperior (1– COGSP  | 2- CEI)
			, uad_idSuperior = (CASE WHEN UA_Source.idSuperior = 1 THEN 
									dbo.FN_GetValorParemetrosAtivo('UAD_COGSP')
								ELSE CASE WHEN UA_Source.idSuperior = 2 THEN 
									dbo.FN_GetValorParemetrosAtivo('UAD_CEI') END 
								END)
			-- uad_dataAlteracao
			, uad_dataAlteracao = GETDATE()
	-- INSERT
	WHEN NOT MATCHED THEN   
		INSERT
		(
			ent_id
			, tua_id
			, uad_codigo
			, uad_nome
			, uad_idSuperior
			
		)
	   VALUES
	   (
			-- ent_id 
			dbo.FN_GetValorParemetrosAtivo('ENTIDADE_SECRETARIA')
			-- tua_id
			, dbo.FN_GetValorParemetrosAtivo('TIPO_UAD_DIRETORIA_ENSINO')
			-- uad_codigo
			 , UA_Source.codigo
			-- uad_nome
			 , UA_Source.nome
			-- uad_idSuperior (1– COGSP  | 2- CEI)
			 , (CASE WHEN UA_Source.idSuperior = 1 THEN 
					dbo.FN_GetValorParemetrosAtivo('UAD_COGSP')
					ELSE CASE WHEN UA_Source.idSuperior = 2 THEN 
					dbo.FN_GetValorParemetrosAtivo('UAD_CEI') END 
				END)
		);
	
-- END_Endereco
MERGE dbo.Synonym_END_Endereco_SSO AS Endereco_Target
	USING
	(
		SELECT
			E.end_id 
			, C.cid_id
			, (CASE WHEN CHARINDEX(',', TX_ENDERECO) > 0 THEN SUBSTRING([TX_ENDERECO],0,CHARINDEX(',',[TX_ENDERECO])) ELSE [TX_ENDERECO] END)
			, D.NM_BAIRRO
			, RTRIM(REPLACE(D.CD_CEP,'-','')) AS CD_CEP
		FROM 
			dbo.Synonym_Diretoria_CIE AS D WITH(NOLOCK)
		INNER JOIN CidadeIntegracaoSistemas AS C WITH(NOLOCK)
			ON D.ID_MUNICIPIO = C.cis_cidIdExterno COLLATE SQL_Latin1_General_CP1_CI_AS
			AND C.cis_origem = dbo.FN_GetValorParemetrosAtivo('SISTEMA_INTEGRACAO_BASECIEPRODESP')
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON D.CD_DIRETORIADEENSINO = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		LEFT JOIN dbo.Synonym_SYS_UnidadeAdministrativaEndereco_SSO AS E WITH(NOLOCK)
			ON UA.uad_id = E.uad_id AND UA.ent_id = E.ent_id
		GROUP BY 
			E.end_id
			, C.cid_id
			, (CASE WHEN CHARINDEX(',', TX_ENDERECO) > 0 THEN SUBSTRING([TX_ENDERECO],0,CHARINDEX(',',[TX_ENDERECO])) ELSE [TX_ENDERECO] END)
			, D.NM_BAIRRO
			, RTRIM(REPLACE(D.CD_CEP,'-',''))
	)
	AS Endereco_Source
	(
		end_id
		, cid_id
		, logradouro
		, bairro
		, cep
	)
	ON (Endereco_Source.end_id IS NOT NULL AND Endereco_Target.end_id = Endereco_Source.end_id)
	-- INSERT
	WHEN NOT MATCHED AND Endereco_Source.logradouro COLLATE SQL_Latin1_General_CP1_CI_AS IS NOT NULL
					 AND RTRIM(Endereco_Source.logradouro) <> '' 
				     AND Endereco_Source.cep COLLATE SQL_Latin1_General_CP1_CI_AS IS NOT NULL 
				     AND RTRIM(Endereco_Source.cep) <> '' THEN
		INSERT
		(
			cid_id
			, end_logradouro
			, end_bairro
			, end_cep
		)
		VALUES
		(
			-- cid_id
			Endereco_Source.cid_id
			-- end_logradouro
			, Endereco_Source.logradouro
			-- end_bairro
			, Endereco_Source.bairro
			-- end_cep
			, Endereco_Source.cep
		);
		
-- SYS_UnidadeAdministrativaEndereco
MERGE dbo.Synonym_SYS_UnidadeAdministrativaEndereco_SSO AS UAEndereco_Target
	USING
	(
		SELECT 
			ent_id
			, uad_id
			, (SELECT TOP 1 end_id FROM dbo.Synonym_END_Endereco_SSO AS E WITH(NOLOCK)
				WHERE E.end_cep = RTRIM(REPLACE(CD_CEP,'-','')) COLLATE SQL_Latin1_General_CP1_CI_AS
					AND E.end_logradouro = (CASE WHEN CHARINDEX(',', TX_ENDERECO) > 0 THEN SUBSTRING(TX_ENDERECO,0,CHARINDEX(',',TX_ENDERECO)) ELSE TX_ENDERECO END) COLLATE SQL_Latin1_General_CP1_CI_AS
					AND E.end_bairro = D.NM_BAIRRO COLLATE SQL_Latin1_General_CP1_CI_AS)
			, TX_ENDERECO
		FROM 
			dbo.Synonym_Diretoria_CIE AS D WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON D.CD_DIRETORIADEENSINO = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
	) 
	AS  UAEndereco_Source
	(
		ent_id
		, uad_id
		, end_id
		, end_completo
	)
	ON (UAEndereco_Target.uad_id = UAEndereco_Source.uad_id 
		AND UAEndereco_Target.ent_id = UAEndereco_Source.ent_id)
	-- INSERT
	WHEN NOT MATCHED AND UAEndereco_Source.end_id IS NOT NULL THEN
		 INSERT
			(
				ent_id
				, uad_id
				, end_id
				, uae_numero
			)
			VALUES
			(
				-- ent_id
				UAEndereco_Source.ent_id
				-- uad_id
				, UAEndereco_Source.uad_id
				-- end_id
				, UAEndereco_Source.end_id
				-- uae_numero
				, (CASE WHEN CHARINDEX(',', UAEndereco_Source.end_completo) > 0 THEN
					SUBSTRING(UAEndereco_Source.end_completo,CHARINDEX(',',UAEndereco_Source.end_completo)+1,10)
					ELSE
					'S/N'
				   END)
			);
			
-- Unidade
MERGE Unidade AS Unidade_Target
	USING
	(
		SELECT 
			UA.ent_id
			, UA.uad_id
		FROM 
			dbo.Synonym_Diretoria_CIE AS D WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON D.CD_DIRETORIADEENSINO = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
	) 
	AS Unidade_Source
	(
		ent_id
		,uad_id
	)
	ON (Unidade_Target.uad_id = Unidade_Source.uad_id AND Unidade_Target.ent_id = Unidade_Source.ent_id)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
			(
				ent_id
				, uad_id	
			)
		VALUES
			(
				 -- ent_id
				 dbo.FN_GetValorParemetrosAtivo('ENTIDADE_SECRETARIA')
				 -- uad_id
				 , Unidade_Source.uad_id
			);
					
			
-- UnidadeGestora
MERGE UnidadeGestora AS UnidadeGestora_Target
	USING
	(
		SELECT 
			uni_id
		FROM 
			dbo.Synonym_Diretoria_CIE AS D WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON D.CD_DIRETORIADEENSINO = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		INNER JOIN Unidade AS UNI WITH(NOLOCK)
			ON UA.uad_id = UNI.uad_id AND UA.ent_id = UNI.ent_id
	) 
	AS UnidadeGestora_Source
	(
		uni_id
	)
	ON (UnidadeGestora_Target.uni_id = UnidadeGestora_Source.uni_id)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
			(
				uni_id	
			)
		VALUES
			(
				UnidadeGestora_Source.uni_id
			);


-- UnidadeGuarda
MERGE UnidadeGuarda AS UnidadeGuarda_Target
	USING
	(
		SELECT 
			uni_id
		FROM 
			dbo.Synonym_Diretoria_CIE AS D WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON D.CD_DIRETORIADEENSINO = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		INNER JOIN Unidade  AS UNI WITH(NOLOCK)
			ON UA.uad_id = UNI.uad_id AND UA.ent_id = UNI.ent_id
	) 
	AS UnidadeGuarda_Source
	(
		uni_id
	)
	ON (UnidadeGuarda_Target.uni_id = UnidadeGuarda_Source.uni_id)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
			(
				uni_id	
			)
		VALUES
			(
				UnidadeGuarda_Source.uni_id
			);
			
-- Localidade
MERGE Localidade AS Localidade_Target
	USING
	(
		SELECT
			uni_id
			, uad_nome
			, end_id
			, uae_numero
			, uae_complemento
		FROM
			dbo.Synonym_Diretoria_CIE AS D WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON D.CD_DIRETORIADEENSINO = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativaEndereco_SSO AS UAE WITH(NOLOCK)
			ON UA.ent_id = UAE.ent_id AND UA.uad_id = UAE.uad_id
		INNER JOIN Unidade AS UNI WITH(NOLOCK)
			ON UA.uad_id = UNI.uad_id AND UA.ent_id = UNI.ent_id
	)
	AS Localidade_Source
	(
		uni_id
		, uni_nome
		, end_id
		, numero
		, complemento
	)
	ON (Localidade_Target.uni_id = Localidade_Source.uni_id
		AND Localidade_Target.end_id =  Localidade_Source.end_id
		AND Localidade_Target.loc_situacao = 4)
	---- UPDATE
	--WHEN MATCHED THEN
	--	 UPDATE SET
	--			loc_descricao = 'Prédio central de ' + Localidade_Source.uni_nome
	--			, loc_numero = Localidade_Source.numero
	--			, loc_complemento = Localidade_Source.complemento
	--			, loc_situacao = 4
	--			, loc_dataAlteracao = GETDATE()
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
			(
				uni_id
				, end_id
				, loc_nome
				, loc_descricao
				, loc_numero
				, loc_complemento
				, loc_situacao	
			)
		VALUES
			(
				-- uni_id
				Localidade_Source.uni_id
				-- end_id
				, Localidade_Source.end_id
				-- loc_nome
				, 'Prédio central'
				-- loc_descricao
				, 'Prédio central de ' + Localidade_Source.uni_nome
				-- loc_numero
				, Localidade_Source.numero
				-- loc_complemento
				, Localidade_Source.complemento
				-- loc_situacao (interna do sistema)
				, 4 
			);
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Sincronizacao_Diretoria_To_Unidade_Step2]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================
-- Author:		Aline Dornelas
-- Create date: 
-- Description:	Importação de Diretorias de Ensino 
--				da BaseCieProdesp para CoreSSO e ConPat
-- =============================================================
CREATE PROCEDURE [dbo].[NEW_Sincronizacao_Diretoria_To_Unidade_Step2]
AS BEGIN
		
-- SYS_UnidadeAdministrativaContato (TELEFONE)
DECLARE @TIPO_MEIO_CONTATO_TEL UNIQUEIDENTIFIER = dbo.FN_GetValorParemetrosAtivo('TIPO_MEIO_CONTATO_TEL');

MERGE dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS UAContato_Target
	USING
	(
		SELECT 
			UA.ent_id
			, UA.uad_id
			, ID_TELEFONE
			, '(' + D.CD_DDD + ') ' + D.ID_TELEFONE
		FROM 
			dbo.Synonym_Diretoria_CIE AS D WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON D.CD_DIRETORIADEENSINO = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
	) 
	AS UAContato_Source
	(
		ent_id
		, uad_id
		, telefone
		, contato
	)
	ON (UAContato_Target.uad_id = UAContato_Source.uad_id 
		AND UAContato_Target.ent_id = UAContato_Source.ent_id
		AND UAContato_Target.tmc_id = @TIPO_MEIO_CONTATO_TEL)
	-- INSERT
	WHEN NOT MATCHED AND UAContato_Source.telefone COLLATE SQL_Latin1_General_CP1_CI_AS IS NOT NULL 
					 AND RTRIM(UAContato_Source.telefone) <> '' THEN
		INSERT
		(
			ent_id
			, uad_id
			, tmc_id
			, uac_contato
		)
		VALUES
		(
			-- ent_id
			UAContato_Source.ent_id
			-- uad_id
			, UAContato_Source.uad_id
			-- tmc_id
			, @TIPO_MEIO_CONTATO_TEL
			-- uac_contato
			, UAContato_Source.contato
		);
		
		
-- SYS_UnidadeAdministrativaContato (FAX)
DECLARE @TIPO_MEIO_CONTATO_FAX UNIQUEIDENTIFIER = dbo.FN_GetValorParemetrosAtivo('TIPO_MEIO_CONTATO_FAX');

MERGE dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS UAContato_Target
	USING
	(
		SELECT 
			UA.ent_id
			, UA.uad_id
			, ID_FAX
			, '(' + D.CD_DDD + ') ' + D.ID_FAX
		FROM 
			dbo.Synonym_Diretoria_CIE AS D WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON D.CD_DIRETORIADEENSINO = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
	) 
	AS UAContato_Source
	(
		ent_id
		, uad_id
		, fax
		, contato
	)
	ON (UAContato_Target.uad_id = UAContato_Source.uad_id 
		AND UAContato_Target.ent_id = UAContato_Source.ent_id
		AND UAContato_Target.tmc_id = @TIPO_MEIO_CONTATO_FAX)
	-- INSERT
	WHEN NOT MATCHED AND UAContato_Source.fax COLLATE SQL_Latin1_General_CP1_CI_AS IS NOT NULL 
					 AND RTRIM(UAContato_Source.fax) <> '' THEN
	   INSERT
		(
			ent_id
			, uad_id
			, tmc_id
			, uac_contato
		)
		VALUES
		(
			-- ent_id
			UAContato_Source.ent_id
			-- uad_id
			, UAContato_Source.uad_id
			-- tmc_id
			, @TIPO_MEIO_CONTATO_FAX
			-- uac_contato
			, UAContato_Source.contato
		);
		
		
-- SYS_UnidadeAdministrativaContato (EMAIL)
DECLARE @TIPO_MEIO_CONTATO_EMAIL UNIQUEIDENTIFIER = dbo.FN_GetValorParemetrosAtivo('TIPO_MEIO_CONTATO_EMAIL');

MERGE dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS UAContato_Target
	USING
	(
		SELECT 
			UA.ent_id
			, UA.uad_id
			, D.ID_EMAIL
		FROM 
			dbo.Synonym_Diretoria_CIE AS D WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON D.CD_DIRETORIADEENSINO = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
	) 
	AS UAContato_Source
	(
		ent_id
		, uad_id
		, contato
	)
	ON (UAContato_Target.uad_id = UAContato_Source.uad_id 
		AND UAContato_Target.ent_id = UAContato_Source.ent_id
		AND UAContato_Target.tmc_id = @TIPO_MEIO_CONTATO_EMAIL)
	-- INSERT
	WHEN NOT MATCHED AND UAContato_Source.contato COLLATE SQL_Latin1_General_CP1_CI_AS IS NOT NULL 
					 AND RTRIM(UAContato_Source.contato) <> '' THEN
	   INSERT
		(
			ent_id
			, uad_id
			, tmc_id
			, uac_contato
		)
		VALUES
		(
			-- ent_id
			UAContato_Source.ent_id
			-- uad_id
			, UAContato_Source.uad_id
			-- tmc_id
			, @TIPO_MEIO_CONTATO_EMAIL
			-- uac_contato
			, UAContato_Source.contato
		);
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Sincronizacao_Endereco]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================
-- Author:		Nicholas de Assis
-- Create date: 
-- Description:	Importação dos Endereços
--				do CoreSSO para ConPat
-- =============================================================
CREATE PROCEDURE [dbo].[NEW_Sincronizacao_Endereco]
AS BEGIN

-- CORE_END_Pais
MERGE CORE_END_Pais AS CORE_END_Pais_Target
	USING
	(
		SELECT
			pai_id 	
			, pai_nome 	
			, pai_sigla 	
			, pai_ddi 	
			, pai_naturalMasc 	
			, pai_naturalFem 	
			, pai_situacao 	
			, pai_integridade	
		FROM
			Synonym_END_Pais_SSO WITH(NOLOCK) 
	)
	AS CORE_END_Pais_Source

	ON (CORE_END_Pais_Source.pai_id = CORE_END_Pais_Target.pai_id)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
		(
			pai_id 	
			, pai_nome 	
			, pai_sigla 	
			, pai_ddi 	
			, pai_naturalMasc 	
			, pai_naturalFem 	
			, pai_situacao 	
			, pai_integridade
		)
		VALUES
	    (
			CORE_END_Pais_Source.pai_id 	
			, CORE_END_Pais_Source.pai_nome 	
			, CORE_END_Pais_Source.pai_sigla 	
			, CORE_END_Pais_Source.pai_ddi 	
			, CORE_END_Pais_Source.pai_naturalMasc 	
			, CORE_END_Pais_Source.pai_naturalFem 	
			, CORE_END_Pais_Source.pai_situacao 	
			, CORE_END_Pais_Source.pai_integridade
	    );		

-- CORE_END_UnidadeFederativa
MERGE CORE_END_UnidadeFederativa AS CORE_END_UnidadeFederativa_Target
	USING
	(
		SELECT
			unf_id
			, pai_id 
			, unf_nome
			, unf_sigla	
			, unf_situacao 	
			, unf_integridade	
		FROM
			Synonym_END_UnidadeFederativa_SSO WITH(NOLOCK) 
	)
	AS CORE_END_UnidadeFederativa_Source

	ON (CORE_END_UnidadeFederativa_Source.unf_id = CORE_END_UnidadeFederativa_Target.unf_id)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
		(
			unf_id
			, pai_id 
			, unf_nome
			, unf_sigla	
			, unf_situacao 	
			, unf_integridade	
		)
		VALUES
	    (
	    	CORE_END_UnidadeFederativa_Source.unf_id
			, CORE_END_UnidadeFederativa_Source.pai_id 
			, CORE_END_UnidadeFederativa_Source.unf_nome
			, CORE_END_UnidadeFederativa_Source.unf_sigla	
			, CORE_END_UnidadeFederativa_Source.unf_situacao 	
			, CORE_END_UnidadeFederativa_Source.unf_integridade
	    );		

-- CORE_END_Cidade
MERGE CORE_END_Cidade AS CORE_END_Cidade_Target
	USING
	(
		SELECT
			cid_id	
			, pai_id
			, unf_id
			, cid_nome
			, cid_ddd
			, cid_situacao	
			, cid_integridade	
		FROM
			Synonym_END_Cidade_SSO WITH(NOLOCK) 
	)
	AS CORE_END_Cidade_Source

	ON (CORE_END_Cidade_Source.cid_id = CORE_END_Cidade_Target.cid_id)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
		(
			cid_id	
			, pai_id
			, unf_id
			, cid_nome
			, cid_ddd
			, cid_situacao	
			, cid_integridade	
		)
		VALUES
	    (
	    	CORE_END_Cidade_Source.cid_id	
			, CORE_END_Cidade_Source.pai_id
			, CORE_END_Cidade_Source.unf_id
			, CORE_END_Cidade_Source.cid_nome
			, CORE_END_Cidade_Source.cid_ddd
			, CORE_END_Cidade_Source.cid_situacao	
			, CORE_END_Cidade_Source.cid_integridade	
	    );		

-- CORE_END_Endereco
MERGE CORE_END_Endereco AS CORE_END_Endereco_Target
	USING
	(
		SELECT
			end_id
			, end_cep
			, end_logradouro
			, end_bairro
			, end_distrito	
			, end_zona
			, cid_id
			, end_situacao
			, end_dataCriacao	
			, end_dataAlteracao	
			, end_integridade
		FROM
			Synonym_END_Endereco_SSO WITH(NOLOCK) 
	)
	AS CORE_END_Endereco_Source

	ON (CORE_END_Endereco_Source.end_id = CORE_END_Endereco_Target.end_id)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
		(
			end_id
			, end_cep
			, end_logradouro
			, end_bairro
			, end_distrito	
			, end_zona
			, cid_id
			, end_situacao
			, end_dataCriacao	
			, end_dataAlteracao	
			, end_integridade
		)
		VALUES
	    (
	    	CORE_END_Endereco_Source.end_id
			, CORE_END_Endereco_Source.end_cep
			, CORE_END_Endereco_Source.end_logradouro
			, CORE_END_Endereco_Source.end_bairro
			, CORE_END_Endereco_Source.end_distrito	
			, CORE_END_Endereco_Source.end_zona
			, CORE_END_Endereco_Source.cid_id
			, CORE_END_Endereco_Source.end_situacao
			, CORE_END_Endereco_Source.end_dataCriacao	
			, CORE_END_Endereco_Source.end_dataAlteracao	
			, CORE_END_Endereco_Source.end_integridade
	    );		

-- CORE_SYS_UnidadeAdministrativaEndereco
MERGE CORE_SYS_UnidadeAdministrativaEndereco AS CORE_SYS_UnidadeAdministrativaEndereco_Target
	USING
	(
		SELECT
			ent_id
			, uad_id
			, uae_id
			, end_id
			, uae_numero
			, uae_complemento	
			, uae_situacao
			, uae_dataCriacao
			, uae_dataAlteracao	
		FROM
			Synonym_SYS_UnidadeAdministrativaEndereco_SSO WITH(NOLOCK) 
	)
	AS CORE_SYS_UnidadeAdministrativaEndereco_Source

	ON (CORE_SYS_UnidadeAdministrativaEndereco_Source.ent_id = CORE_SYS_UnidadeAdministrativaEndereco_Target.ent_id
		and CORE_SYS_UnidadeAdministrativaEndereco_Source.uad_id = CORE_SYS_UnidadeAdministrativaEndereco_Target.uad_id
		and CORE_SYS_UnidadeAdministrativaEndereco_Source.uae_id = CORE_SYS_UnidadeAdministrativaEndereco_Target.uae_id
	)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
		(
			ent_id
			, uad_id
			, uae_id
			, end_id
			, uae_numero
			, uae_complemento	
			, uae_situacao
			, uae_dataCriacao
			, uae_dataAlteracao	
		)
		VALUES
	    (
	    	CORE_SYS_UnidadeAdministrativaEndereco_Source.ent_id
			, CORE_SYS_UnidadeAdministrativaEndereco_Source.uad_id
			, CORE_SYS_UnidadeAdministrativaEndereco_Source.uae_id
			, CORE_SYS_UnidadeAdministrativaEndereco_Source.end_id
			, CORE_SYS_UnidadeAdministrativaEndereco_Source.uae_numero
			, CORE_SYS_UnidadeAdministrativaEndereco_Source.uae_complemento	
			, CORE_SYS_UnidadeAdministrativaEndereco_Source.uae_situacao
			, CORE_SYS_UnidadeAdministrativaEndereco_Source.uae_dataCriacao
			, CORE_SYS_UnidadeAdministrativaEndereco_Source.uae_dataAlteracao	
	    );		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Sincronizacao_Escola_To_Unidade_Step1]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================
-- Author:		Aline Dornelas
-- Create date: 
-- Description:	Importação de Escolas
--				da BaseCieProdesp para CoreSSO e ConPat
--				(Etapa 1 - SYS_UnidadeAdministrativa)
-- =============================================================
CREATE PROCEDURE [dbo].[NEW_Sincronizacao_Escola_To_Unidade_Step1]
AS BEGIN

-- SYS_UnidadeAdministrativa
MERGE dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA_Target
	USING
	(
		SELECT 
			ID_ESCOLA
			, NM_ESCOLA
			, CD_DIRETORIADEENSINO
		FROM 
			dbo.Synonym_Escola_CIE WITH(NOLOCK)
		WHERE
			CD_SITUACAO = 1
			AND (CD_REDE = 1)
			--OR CD_REDE = 5)
	) 
	AS UA_Source
	(
		codigo
		, nome
		, idSuperior
	)
    ON (UA_Target.uad_codigo = UA_Source.codigo COLLATE SQL_Latin1_General_CP1_CI_AS)
    -- UPDATE
    WHEN MATCHED THEN
        UPDATE SET
			-- ent_id 
			ent_id = dbo.FN_GetValorParemetrosAtivo('ENTIDADE_SECRETARIA')
			-- tua_id
			, tua_id = dbo.FN_GetValorParemetrosAtivo('TIPO_UAD_ESCOLA')
			-- uad_codigo
			, uad_codigo = UA_Source.codigo
			-- uad_nome
			, uad_nome = 
						(CASE (select count(UA1.uad_nome) from VW_UnidadeAdministrativa as UA1 where uad_codigo <> UA_Source.codigo COLLATE SQL_Latin1_General_CP1_CI_AS AND UA1.uad_nome = UA_Source.nome COLLATE SQL_Latin1_General_CP1_CI_AS) 
						when 0 
						then UA_Source.nome
						else UA_Source.nome + ' (Escola)' 
						END ) 
			-- uad_idSuperior
			, uad_idSuperior = (SELECT uad_id FROM dbo.Synonym_SYS_UnidadeAdministrativa_SSO WITH(NOLOCK) WHERE uad_codigo = idSuperior COLLATE SQL_Latin1_General_CP1_CI_AS)
			-- uad_dataAlteracao
			, uad_dataAlteracao = GETDATE()
	-- INSERT
	WHEN NOT MATCHED THEN   
		INSERT
		(
			ent_id
			, tua_id
			, uad_codigo
			, uad_nome
			, uad_idSuperior
			, uad_situacao
			
		)
	   VALUES
	   (
			-- ent_id 
			dbo.FN_GetValorParemetrosAtivo('ENTIDADE_SECRETARIA')
			-- tua_id
			, dbo.FN_GetValorParemetrosAtivo('TIPO_UAD_ESCOLA')
			-- uad_codigo
			 , UA_Source.codigo
			-- uad_nome
			 , (CASE (select count(UA1.uad_nome) from VW_UnidadeAdministrativa as UA1 where uad_codigo <> UA_Source.codigo COLLATE SQL_Latin1_General_CP1_CI_AS AND UA1.uad_nome = UA_Source.nome COLLATE SQL_Latin1_General_CP1_CI_AS) 
						when 0 
						then UA_Source.nome
						else UA_Source.nome + ' (Escola)' 
						END )
			-- uad_idSuperior
			 , (SELECT uad_id FROM dbo.Synonym_SYS_UnidadeAdministrativa_SSO WITH(NOLOCK) WHERE uad_codigo = idSuperior COLLATE SQL_Latin1_General_CP1_CI_AS)
			 ,1
		);		
-- END_Endereco
MERGE dbo.Synonym_END_Endereco_SSO AS Endereco_Target
	USING
	(
		SELECT
			UAE.end_id 
			, C.cid_id
			,(CASE WHEN CHARINDEX(',', TX_ENDERECO) > 0 THEN SUBSTRING([TX_ENDERECO],0,CHARINDEX(',',[TX_ENDERECO])) ELSE [TX_ENDERECO] END)
			, E.NM_BAIRRO
			, (RTRIM(E.CD_CEP) + RTRIM(CD_COMPLEMENTOCEP))
		FROM 
			dbo.Synonym_Escola_CIE AS E WITH(NOLOCK)
		INNER JOIN CidadeIntegracaoSistemas AS C WITH(NOLOCK)
			ON E.ID_MUNICIPIO = C.cis_cidIdExterno COLLATE SQL_Latin1_General_CP1_CI_AS
				AND C.cis_origem = dbo.FN_GetValorParemetrosAtivo('SISTEMA_INTEGRACAO_BASECIEPRODESP') 
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON E.ID_ESCOLA = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		LEFT JOIN dbo.Synonym_SYS_UnidadeAdministrativaEndereco_SSO AS UAE WITH(NOLOCK)
			ON UA.uad_id = UAE.uad_id AND UA.ent_id = UAE.ent_id
		WHERE
			CD_SITUACAO = 1
			AND (CD_REDE = 1)
			--OR CD_REDE = 5)
		GROUP BY 
			UAE.end_id
			, C.cid_id
			, (CASE WHEN CHARINDEX(',', E.TX_ENDERECO) > 0 THEN SUBSTRING([TX_ENDERECO],0,CHARINDEX(',',[TX_ENDERECO])) ELSE [TX_ENDERECO] END)
			, E.NM_BAIRRO
			, (RTRIM(E.CD_CEP) + RTRIM(CD_COMPLEMENTOCEP)) 
	)
	AS Endereco_Source
	(
		end_id
		, cid_id
		, logradouro
		, bairro
		, cep
	)
	ON (Endereco_Source.end_id IS NOT NULL AND Endereco_Target.end_id = Endereco_Source.end_id)
	-- INSERT
	WHEN NOT MATCHED AND Endereco_Source.logradouro COLLATE SQL_Latin1_General_CP1_CI_AS IS NOT NULL
					 AND RTRIM(Endereco_Source.logradouro) <> ''
					 AND Endereco_Source.cep COLLATE SQL_Latin1_General_CP1_CI_AS IS NOT NULL 
					 AND RTRIM(Endereco_Source.cep) <> '' THEN
		INSERT
		(
			cid_id
			, end_logradouro
			, end_bairro
			, end_cep
		)
		VALUES
		(
			-- cid_id
			Endereco_Source.cid_id
			-- end_logradouro
			, Endereco_Source.logradouro
			-- end_bairro
			, Endereco_Source.bairro
			-- end_cep
			, Endereco_Source.cep
		);	


-- SYS_UnidadeAdministrativaEndereco
MERGE dbo.Synonym_SYS_UnidadeAdministrativaEndereco_SSO AS UAEndereco_Target
	USING
	(
		SELECT 
			ent_id
			, uad_id
			, (SELECT TOP 1 end_id FROM dbo.Synonym_END_Endereco_SSO AS E WITH(NOLOCK)
				WHERE E.end_cep = (RTRIM(CD_CEP) + RTRIM(CD_COMPLEMENTOCEP)) COLLATE SQL_Latin1_General_CP1_CI_AS
					AND E.end_logradouro = (CASE WHEN CHARINDEX(',', TX_ENDERECO) > 0 THEN SUBSTRING(TX_ENDERECO,0,CHARINDEX(',',TX_ENDERECO)) ELSE TX_ENDERECO END) COLLATE SQL_Latin1_General_CP1_CI_AS
					AND E.end_bairro = NM_BAIRRO COLLATE SQL_Latin1_General_CP1_CI_AS)
			, E.TX_ENDERECO
			, E.TX_COMPLEMENTOENDERECO
		FROM 
			dbo.Synonym_Escola_CIE AS E WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON E.ID_ESCOLA = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		WHERE
			CD_SITUACAO = 1
			AND (CD_REDE = 1 )
			--OR CD_REDE = 5)
	) 
	AS  UAEndereco_Source
	(
		ent_id
		, uad_id
		, end_id
		, end_completo
		, complemento
	)
	ON (UAEndereco_Target.uad_id = UAEndereco_Source.uad_id 
		AND UAEndereco_Target.ent_id = UAEndereco_Source.ent_id)
	-- INSERT
	WHEN NOT MATCHED AND UAEndereco_Source.end_id IS NOT NULL THEN
		 INSERT
			(
				ent_id
				, uad_id
				, end_id
				, uae_numero
				, uae_complemento
			)
			VALUES
			(
				-- ent_id
				UAEndereco_Source.ent_id
				-- uad_id
				, UAEndereco_Source.uad_id
				-- end_id
				, UAEndereco_Source.end_id
				-- uae_numero
				, (CASE WHEN CHARINDEX(',', UAEndereco_Source.end_completo) > 0 THEN
					SUBSTRING(UAEndereco_Source.end_completo,CHARINDEX(',',UAEndereco_Source.end_completo)+1,10)
					ELSE
					'S/N'
				   END)
				-- uae_complemento
				, (CASE WHEN UAEndereco_Source.complemento IS NOT NULL THEN
					 UAEndereco_Source.complemento
					ELSE
					 NULL
				    END)
			);
		
-- Unidade
MERGE Unidade AS Unidade_Target
	USING
	(
		SELECT 
			UA.ent_id
			, UA.uad_id
			, CD_REDE
		FROM 
			dbo.Synonym_Escola_CIE AS E WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON E.ID_ESCOLA = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		WHERE
			CD_SITUACAO = 1
			AND (CD_REDE = 1 )
			--OR CD_REDE = 5)
	) 
	AS Unidade_Source
	(
		ent_id
		,uad_id
		, rede
	)
	ON (Unidade_Target.uad_id = Unidade_Source.uad_id AND Unidade_Target.ent_id = Unidade_Source.ent_id)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
			(
				ent_id
				, uad_id
				, uni_situacao	
			)
		VALUES
			(
				 -- ent_id
				 dbo.FN_GetValorParemetrosAtivo('ENTIDADE_SECRETARIA')
				 -- uad_id
				 , Unidade_Source.uad_id
				 -- uni_situacao (1- Ativo | 5- Municipalizada)
				 , (CASE WHEN Unidade_Source.rede = 5 
						THEN 5
						ELSE 1
					END)
						
			);
			
-- UnidadeGuarda
MERGE UnidadeGuarda AS UnidadeGuarda_Target
	USING
	(
		SELECT 
			uni_id
		FROM 
			dbo.Synonym_Escola_CIE AS E WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON E.ID_ESCOLA = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		INNER JOIN Unidade AS UNI WITH(NOLOCK)
			ON UA.uad_id = UNI.uad_id AND UA.ent_id = UNI.ent_id
	) 
	AS UnidadeGuarda_Source
	(
		uni_id
	)
	ON (UnidadeGuarda_Target.uni_id = UnidadeGuarda_Source.uni_id)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
			(
				uni_id	
			)
		VALUES
			(
				UnidadeGuarda_Source.uni_id
			);
			
-- Localidade
MERGE Localidade AS Localidade_Target
	USING
	(
		SELECT
			uni_id
			, uad_nome
			, end_id
			, uae_numero
			, uae_complemento
		FROM
			dbo.Synonym_Escola_CIE AS E WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON E.ID_ESCOLA = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativaEndereco_SSO AS UAE WITH(NOLOCK)
			ON UA.ent_id = UAE.ent_id AND UA.uad_id = UAE.uad_id
		INNER JOIN Unidade AS UNI WITH(NOLOCK)
			ON UA.uad_id = UNI.uad_id AND UA.ent_id = UNI.ent_id
		WHERE
			CD_SITUACAO = 1
			AND (CD_REDE = 1)
			--OR CD_REDE = 5)
	)
	AS Localidade_Source
	(
		uni_id
		, uni_nome
		, end_id
		, numero
		, complemento
	)
	ON (Localidade_Target.uni_id = Localidade_Source.uni_id
		AND Localidade_Target.end_id =  Localidade_Source.end_id
		AND Localidade_Target.loc_situacao = 4)
	---- UPDATE
	--WHEN MATCHED THEN
	--	 UPDATE SET
	--			loc_descricao = 'Prédio central de ' + Localidade_Source.uni_nome
	--			, loc_numero = Localidade_Source.numero
	--			, loc_complemento = Localidade_Source.complemento
	--			, loc_situacao = 4
	--			, loc_dataAlteracao = GETDATE()
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
			(
				uni_id
				, end_id
				, loc_nome
				, loc_descricao
				, loc_numero
				, loc_complemento
				, loc_situacao	
			)
		VALUES
			(
				-- uni_id
				Localidade_Source.uni_id
				-- end_id
				, Localidade_Source.end_id
				-- loc_nome
				, 'Prédio central'
				-- loc_descricao
				, 'Prédio central de ' + Localidade_Source.uni_nome
				-- loc_numero
				, Localidade_Source.numero
				-- loc_complemento
				, Localidade_Source.complemento
				-- loc_situacao (interna do sistema)
				, 4 
			);		
		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Sincronizacao_Escola_To_Unidade_Step2]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================
-- Author:		Aline Dornelas
-- Create date: 
-- Description:	Importação de Escolas
--				da BaseCieProdesp para CoreSSO e ConPat
--				(Etapa 2 - SYS_UnidadeAdministrativaContato)
-- =============================================================
CREATE PROCEDURE [dbo].[NEW_Sincronizacao_Escola_To_Unidade_Step2]
AS BEGIN

-- SYS_UnidadeAdministrativaContato (TELEFONE)
DECLARE @TIPO_MEIO_CONTATO_TEL UNIQUEIDENTIFIER = dbo.FN_GetValorParemetrosAtivo('TIPO_MEIO_CONTATO_TEL');

MERGE dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS UAContato_Target
	USING
	(
		SELECT 
			UA.ent_id
			, UA.uad_id
			, T.ID_TELEFONE
			, '(' + T.ID_DDD + ') ' + T.ID_TELEFONE
		FROM 
			dbo.Synonym_Escola_CIE AS E WITH(NOLOCK)
		INNER JOIN dbo.Synonym_Telefone_CIE AS T WITH(NOLOCK)
			ON E.ID_ESCOLA = T.ID_ESCOLA
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON E.ID_ESCOLA = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		WHERE
			CD_SITUACAO = 1
			AND (CD_REDE = 1 OR CD_REDE = 5)
			AND ID_TELEFONE COLLATE SQL_Latin1_General_CP1_CI_AS IS NOT NULL
			AND RTRIM(ID_TELEFONE) COLLATE SQL_Latin1_General_CP1_CI_AS <> ''
	) 
	AS UAContato_Source
	(
		ent_id
		, uad_id
		, telefone
		, contato
	)
	ON (UAContato_Target.uad_id = UAContato_Source.uad_id 
		AND UAContato_Target.ent_id = UAContato_Source.ent_id
		AND UAContato_Target.tmc_id = @TIPO_MEIO_CONTATO_TEL)
	-- INSERT
	WHEN NOT MATCHED THEN   
		INSERT
		(
			ent_id
			, uad_id
			, tmc_id
			, uac_contato
		)
		VALUES
		(
			-- ent_id
			UAContato_Source.ent_id
			-- uad_id
			, UAContato_Source.uad_id
			-- tmc_id
			, @TIPO_MEIO_CONTATO_TEL
			-- uac_contato
			, UAContato_Source.contato
		);
		
		
-- SYS_UnidadeAdministrativaContato (FAX)
DECLARE @TIPO_MEIO_CONTATO_FAX UNIQUEIDENTIFIER = dbo.FN_GetValorParemetrosAtivo('TIPO_MEIO_CONTATO_FAX');

MERGE dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS UAContato_Target
	USING
	(
		SELECT 
			UA.ent_id
			, UA.uad_id
			, T.ID_FAX
			, '(' + T.ID_DDD + ') ' + T.ID_FAX
		FROM 
			dbo.Synonym_Escola_CIE AS E WITH(NOLOCK)
		INNER JOIN dbo.Synonym_Telefone_CIE AS T WITH(NOLOCK)
			ON E.ID_ESCOLA = T.ID_ESCOLA
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON E.ID_ESCOLA = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		WHERE
			CD_SITUACAO = 1
			AND (CD_REDE = 1 OR CD_REDE = 5)
			AND ID_FAX COLLATE SQL_Latin1_General_CP1_CI_AS IS NOT NULL
			AND RTRIM(ID_FAX) COLLATE SQL_Latin1_General_CP1_CI_AS <> ''
	) 
	AS UAContato_Source
	(
		ent_id
		, uad_id
		, fax
		, contato
	)
	ON (UAContato_Target.uad_id = UAContato_Source.uad_id 
		AND UAContato_Target.ent_id = UAContato_Source.ent_id
		AND UAContato_Target.tmc_id = @TIPO_MEIO_CONTATO_FAX)
	-- INSERT
	WHEN NOT MATCHED THEN
	   INSERT
		(
			ent_id
			, uad_id
			, tmc_id
			, uac_contato
		)
		VALUES
		(
			-- ent_id
			UAContato_Source.ent_id
			-- uad_id
			, UAContato_Source.uad_id
			-- tmc_id
			, @TIPO_MEIO_CONTATO_FAX
			-- uac_contato
			, UAContato_Source.contato
		);
		
		
-- SYS_UnidadeAdministrativaContato (EMAIL)
DECLARE @TIPO_MEIO_CONTATO_EMAIL UNIQUEIDENTIFIER = dbo.FN_GetValorParemetrosAtivo('TIPO_MEIO_CONTATO_EMAIL');

MERGE dbo.Synonym_SYS_UnidadeAdministrativaContato_SSO AS UAContato_Target
	USING
	(
		SELECT 
			UA.ent_id
			, UA.uad_id
			, E.ID_EMAIL
		FROM 
			dbo.Synonym_Escola_CIE AS E WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH(NOLOCK)
			ON E.ID_ESCOLA = UA.uad_codigo COLLATE SQL_Latin1_General_CP1_CI_AS
		WHERE
			CD_SITUACAO = 1
			AND (CD_REDE = 1 OR CD_REDE = 5)
	) 
	AS UAContato_Source
	(
		ent_id
		, uad_id
		, contato
	)
	ON (UAContato_Target.uad_id = UAContato_Source.uad_id 
		AND UAContato_Target.ent_id = UAContato_Source.ent_id
		AND UAContato_Target.tmc_id = @TIPO_MEIO_CONTATO_EMAIL)
	-- INSERT
	WHEN NOT MATCHED AND UAContato_Source.contato COLLATE SQL_Latin1_General_CP1_CI_AS IS NOT NULL 
					 AND RTRIM(UAContato_Source.contato) <> '' THEN
	   INSERT
		(
			ent_id
			, uad_id
			, tmc_id
			, uac_contato
		)
		VALUES
		(
			-- ent_id
			UAContato_Source.ent_id
			-- uad_id
			, UAContato_Source.uad_id
			-- tmc_id
			, @TIPO_MEIO_CONTATO_EMAIL
			-- uac_contato
			, UAContato_Source.contato
		);
		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Sincronizacao_Municipio_To_END_Cidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================
-- Author:		Aline Dornelas
-- Create date: 
-- Description:	Importação de Municipios
--				da BaseCieProdesp para CoreSSo e ConPat
-- =============================================================
CREATE PROCEDURE [dbo].[NEW_Sincronizacao_Municipio_To_END_Cidade]
AS BEGIN

-- CidadeIntegracaoSistemas
MERGE CidadeIntegracaoSistemas AS Cidade_Target
	USING
	(
		SELECT
			cid_id
			, ID_MUNICIPIO
		FROM
			dbo.Synonym_Municipio_CIE AS M WITH(NOLOCK) 
			INNER JOIN dbo.Synonym_END_Cidade_SSO AS C WITH(NOLOCK)
			ON dbo.FN_RemoverAcentuacao(M.NM_MUNICIPIO) = dbo.FN_RemoverAcentuacao(C.cid_nome)
		WHERE
			C.unf_id = dbo.FN_GetValorParemetrosAtivo('UNIDADE_FEDERATIVA_SP')
	)
	AS Cidade_Source
	(
		cid_id
		, codigo
	)
	ON (Cidade_Target.cid_id = Cidade_Source.cid_id)
	-- UPDATE
    WHEN MATCHED THEN
		UPDATE SET
			cis_origem = dbo.FN_GetValorParemetrosAtivo('SISTEMA_INTEGRACAO_BASECIEPRODESP')
			, cis_cidIdExterno = Cidade_Source.codigo
	-- INSERT
	WHEN NOT MATCHED THEN   
		INSERT
		(
			cid_id
			, cis_origem
			, cis_cidIdExterno
		)
		VALUES
	    (
			-- cid_id
			Cidade_Source.cid_id
			-- cis_origem
			, dbo.FN_GetValorParemetrosAtivo('SISTEMA_INTEGRACAO_BASECIEPRODESP')
			-- cis_cidIdExterno
			, Cidade_Source.codigo
	    );		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Sincronizacao_TipoDependencia]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================
-- Author:		Aline Dornelas
-- Create date: 
-- Description:	Importação de TipoDependencia
--				da BaseCieProdesp para ConPat
-- =============================================================
CREATE PROCEDURE [dbo].[NEW_Sincronizacao_TipoDependencia]
AS BEGIN

-- TipoDependencia
MERGE TipoDependencia AS TipoDependencia_Target
	USING
	(
		SELECT
			DESC_TIPODEPENDENCIA
		FROM
			BaseCieProdesp..TipoDependencia WITH(NOLOCK) 
	)
	AS TipoDependencia_Source
	(
		tde_descricao
	)
	ON (TipoDependencia_Source.tde_descricao IS NULL)
	-- INSERT
	WHEN NOT MATCHED THEN
		INSERT
		(
			tde_nome
		)
		VALUES
	    (
			-- tde_nome
			TipoDependencia_Source.tde_descricao
	    );		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_StatusConservacao_SelectBy_Chave]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================  
-- Author:  Luana Piva  
-- Create date: 06/11/2013 18:10  
-- Description: Utilizado para buscar o id do status de conservação de acordo com parâmetro(nome)  
-- ========================================================================  
CREATE PROCEDURE [dbo].[NEW_StatusConservacao_SelectBy_Chave]  
  @stc_nome VARCHAR(100)   
  
AS  
BEGIN  
if @stc_nome =  'INSERVIVEL' 
begin 
set @stc_nome =  'MAU' 
end

 SELECT   
  stc_id  
    
 FROM  
  StatusConservacao WITH (NOLOCK)    
 WHERE  
  stc_situacao <> 3  
  AND (UPPER(stc_nome) = UPPER(@stc_nome) )  
    
 ORDER BY  
  stc_nome     
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_StatusConservacao_SelectBy_Nome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Fábio N.
-- Create date: 09/08/2010 18:10
-- Description:	utilizado na busca de nome de grupo de bense, retorna quantidade
--				dos grupos de bens que não foram excluídos logicamente,
--				filtrados por:
--					nome, id
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_StatusConservacao_SelectBy_Nome]
	@stc_nome VARCHAR(100)	
	,@stc_descricao VARCHAR(100)	
	,@stc_id_alteracao int
	
AS
BEGIN
if @stc_nome =  'INSERVIVEL' 
begin 
set @stc_nome =  'MAU' 
end

	SELECT 
		stc_id
		,stc_nome
	FROM
		StatusConservacao WITH (NOLOCK)		
	WHERE
		stc_situacao <> 3
		AND (UPPER(stc_nome) = UPPER(@stc_nome)	)
		AND ((@stc_id_alteracao is null) or (stc_id <> @stc_id_alteracao))
	ORDER BY
		stc_nome
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_StatusConservacao_TodosAtivos]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_StatusConservacao_TodosAtivos]
	
AS
BEGIN
select
		*
from 
	StatusConservacao With(nolock)
where
	StatusConservacao.stc_situacao <> 3
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Synonym_SYS_UnidadeAdministrativa_SelectByNome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Natália Nacamura
-- Create date: 18/03/2013
-- Description:	Busca unidade do Core pelo uad_nome
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Synonym_SYS_UnidadeAdministrativa_SelectByNome]
	@ent_id UNIQUEIDENTIFIER,
	@uad_nome VARCHAR(200)
AS
BEGIN
	
	SELECT ent_id, uad_id, tua_id, uad_codigo, uad_nome, uad_sigla, uad_idSuperior
		, uad_situacao, uad_dataCriacao, uad_dataAlteracao, uad_integridade, uad_codigoIntegracao
	FROM dbo.Synonym_SYS_UnidadeAdministrativa_SSO WITH(NOLOCK)
	WHERE 
		uad_situacao <> 3
		AND uad_nome = @uad_nome
		AND ent_id = @ent_id
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_CamposTela_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Hethini ribeiro
-- Create date: 02/09/2013
-- Description:	retorna todos os campos da tela
-- ==================================================================

CREATE PROCEDURE [dbo].[NEW_SYS_CamposTela_SELECT]
	@tel_id int
AS
BEGIN
	SELECT 
		pat_id
		,pat_descricao
		,pat_status

	FROM 
		[SYS_ParametrosTela] WITH(NOLOCK) 
	where tel_id = @tel_id
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Sys_ConfigEtiqueta_SelectAll]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Ivan Roberto Pimentel
-- Create date: 07/01/2011
-- Description:
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_Sys_ConfigEtiqueta_SelectAll]
	@uni_id int

AS
BEGIN
	
	SELECT
		uni_id
		, dbo.FN_GetUniNome(uni_id) as uniNome
		, cfe_macTerminal
	FROM
		SYS_ConfigEtiqueta with(nolock)
	WHERE
		 (@uni_id IS NULL OR uni_id = @uni_id)
			
	SELECT @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Sys_ConfigEtiqueta_SelectbyMac]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*************************************************************/
CREATE PROCEDURE  [dbo].[NEW_Sys_ConfigEtiqueta_SelectbyMac]
	@macTerminal nvarchar(50)
AS
BEGIN
	SELECT
		cfe_macTerminal
		, uni_id
		, cfe_enderecoImpressora
		, cfe_etiquetaQtdeLinha
		, cfe_etiquetaAltura
		, cfe_etiquetaLargura
		, cfe_etiquetaMargEsq
		, cfe_etiquetaDistancia
		, cfe_etiquetaEspacoLinha
		, cfe_etiquetaMsg
		, cfe_bufferImpressora
		, pae_id
		, cfe_densidadeImpressora
	FROM
		SYS_ConfigEtiqueta with(nolock)
	WHERE
		 (@macTerminal IS NULL OR cfe_macTerminal = @macTerminal)
			
	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Configuracao_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[NEW_SYS_Configuracao_LOAD]
AS
BEGIN
	SELECT	Top 1
	   [cfg_id]
      ,[cfg_titulo]
      ,[cfg_paginacao]
      ,[cfg_emailHost]
      ,[cfg_emailSuporte]
      ,[cfg_paginaInicio]
      ,[cfg_paginaErro]
      ,[cfg_paginaExpira]
      ,[cfg_paginaLogOff]
      ,[cfg_bdProvider]
      ,[cfg_diretorioVirtual]
      ,[cfg_diretorioFisico]
      ,[cfg_diretorioArquivo]
      ,[cfg_extensaoArquivo]
      ,[cfg_tamanhoMaxArquivo]
      ,[cfg_servidorRelatorio]
      ,[cfg_usuarioRelatorio]
      ,[cfg_senhaRelatorio]
      ,[cfg_dominioRelatorio]
      ,[cfg_pastaRelatorio]
      ,[cfg_wsSiafemUrl]
      ,[cfg_wsSiafemUser]
      ,[cfg_wsSiafemPwd]
      ,[cfg_wsSiafemUsarProxy]
      ,[cfg_wsSiafemProxyIP]
      ,[cfg_wsSiafemProxyPorta]
      ,[cfg_wsSiafemUsarAutenticacao]
      ,[cfg_wsSiafemProxyUser]
      ,[cfg_wsSiafemProxyPwd]
      ,[cfg_valorMinimoPatrimonio]
      ,[cfg_stcIdImportacao]
      ,[cfg_mascaraEtiqueta]
      ,[cfg_mascaraGPB]
      ,[cfg_pastaDownload]
      ,[cfg_diretorioVirtualDownload]
      ,[cfg_cnpjFornLegado]
       ,[cfg_autenticacaoSMTP]
      ,[cfg_userSMTP]
      ,[cfg_senhaSMTP]
      ,[cfg_utilizaCODMAT]
      ,[cfg_validaLoginPorCPF]
	  ,[cfg_naoGerarMovimentRecebEstoque] 
	  ,[cfg_informarDocBaixa] 
	  ,[cfg_naoUtilizarSIAFEM] 
	  ,[cfg_nomeEmpresa]
	  ,[cfg_nomeEntidade]
	  , cfg_gerarRegPatrimonialBemAutomatico 
	  , cfg_regPatriomonialAutomaticoAno 
	  , cfg_regPatriomonialAutomaticoUnidade 
	  , cfg_regPatriomonialAutomaticoUGE 
	  , cfg_editarCIE
	  , cfg_sistemID

 	FROM
 		SYS_Configuracao WITH(NoLock)
	ORDER BY
		cfg_id DESC
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Grupo_Selec_All_Situacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_SYS_Grupo_Selec_All_Situacao]
	@gru_situacao int = null
AS
BEGIN
	SELECT 
		gru_id
		, gru_nome
		, v.vis_nome
		, CONVERT(VARCHAR(36), gru_id) + ';' + CONVERT(VARCHAR, v.vis_id) AS gru_vis_id 
		, sis_nome = 'Controle Patrimonial'
		, gru_situacao
		, gru_situacaoNome =	case gru_situacao
						when 1 then 'Ativo'
						when 2 then 'Bloqueado'
						when 3 then 'Excluído'
						when 4 then 'Padrão do Sistema'
					end
	FROM
		CoreSSO..SYS_Grupo		g WITH(NOLOCK)
		INNER JOIN CoreSSO..SYS_Visao	v WITH(NOLOCK)
		on g.vis_id = v.vis_id
	WHERE
		1 = 1
		and (@gru_situacao is null or (gru_situacao in (@gru_situacao,4)))
	ORDER BY
		gru_nome
		
	SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Grupo_SelectBy_vis_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================  
-- Author:  Aline Dornelas  
-- Create date: 29/10/2010 16:34  
-- Description: Consulta de grupos filtrando pela visão  
-- ===========================================================================  
CREATE PROCEDURE [dbo].[NEW_SYS_Grupo_SelectBy_vis_id]  
 @vis_id INT  
--WITH RECOMPILE  
AS  
BEGIN  
   
 ----- VISÃO Administração -----  
 IF(@vis_id = dbo.FN_GetValorParemetrosAtivo('VISAO_ADMINISTRACAO'))  
 BEGIN  
  SELECT   
    gru_id  
    , gru_nome  
  FROM  
   VW_ConPatGrupo WITH(NOLOCK)  
  WHERE  
   gru_situacao IN (1, 4)  
    
  SELECT @@ROWCOUNT  
 END  
 ----- VISÃO Gestão -----  
 ELSE IF(@vis_id = dbo.FN_GetValorParemetrosAtivo('VISAO_GESTAO'))  
 BEGIN  
  SELECT   
    gru_id  
    , gru_nome  
  FROM  
   VW_ConPatGrupo WITH(NOLOCK)  
  WHERE  
   vis_id >= dbo.FN_GetValorParemetrosAtivo('VISAO_GESTAO')  
   AND gru_situacao IN (1, 4)  
     
  SELECT @@ROWCOUNT  
 END  
 ----- VISÃO Unidade Administrativa -----  
 ELSE  
 BEGIN  
  SELECT   
    gru_id  
    , gru_nome  
  FROM  
   VW_ConPatGrupo WITH(NOLOCK)  
  WHERE  
   vis_id = @vis_id  
   AND gru_situacao IN (1, 4)  
     
  SELECT @@ROWCOUNT  
 END  
     
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_GrupoUsuario_SelectBy_usu_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ===========================================================================
-- Author:		Rafael Soarde Matias
-- Create date: 10/06/2014 09:20
-- Description:	Consulta de grupos filtrando pelo id do usuário
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_SYS_GrupoUsuario_SelectBy_usu_id]
	@usu_id uniqueidentifier
AS
BEGIN
	
	SELECT 
		G.gru_nome 
		, G.gru_id
		, UG.usg_situacao
	FROM dbo.Synonym_SYS_UsuarioGrupo_SSO AS UG
	INNER JOIN dbo.Synonym_SYS_Grupo_SSO AS G
		ON G.gru_id = UG.gru_id

		WHERE UG.usu_id = @usu_id
		AND UG.usg_situacao <> 3
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Parametros_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_SYS_Parametros_SelectBy_All]
	
AS
BEGIN

	SELECT
		par_id,
		par_chave,
		par_valor,
	    par_descricao,
	    par_obrigatorio,
	    par_vigenciaInicio,
	    par_vigenciaFim,
	    par_situacao	
	from 
		SYS_Parametros WITH(NOLOCK)	
	where 
		SYS_Parametros.par_situacao <> 3
	order by 
		par_chave
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Parametros_SelectBy_Chave]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_SYS_Parametros_SelectBy_Chave]
	@par_id int,
	@par_chave varchar(100)
AS
BEGIN
	select 
		* 
	from 
		SYS_Parametros WITH(NoLock)
	where 
		SYS_Parametros.par_chave = @par_chave
		and (par_id = 0 or par_id <> @par_id)
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Parametros_SelectByChave]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Wellington Santana	
-- Create date: 21/01/2014
-- Description:	Select par_id,par_valor 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_SYS_Parametros_SelectByChave]
	@par_chave VARCHAR(100)
AS
BEGIN
	
	SELECT 
			par_valor
	FROM
			SYS_Parametros WITH ( NOLOCK )
	WHERE
			@par_chave = par_chave
			AND par_situacao <> 3
			
	RETURN @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Parametros_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[NEW_SYS_Parametros_UPDATE] 
	@par_id int,
	@par_valor varchar(1000),
	@par_descricao varchar(max),
	@par_obrigatorio bit,
	@par_vigenciaInicio datetime,
	@par_vigenciaFim datetime,
	@par_situacao TinyInt,
	@par_dataAlteracao datetime
	
AS
BEGIN
	update SYS_Parametros
	
	set
		par_valor = @par_valor,
		par_descricao = @par_descricao,
		par_obrigatorio = @par_obrigatorio,
		par_vigenciaInicio = @par_vigenciaInicio,
		par_vigenciaFim = @par_vigenciaFim,
		par_situacao = @par_situacao,
		par_dataAlteracao = @par_dataAlteracao
		
	where par_id = @par_id		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_ParametrosEtiqueta_SelectByChave]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Wellington Santana	
-- Create date: 29/04/2014
-- Description:	Select pae_id pela pae_chave
-- =============================================
CREATE PROCEDURE [dbo].[NEW_SYS_ParametrosEtiqueta_SelectByChave]
	@pae_chave VARCHAR(200)
AS
BEGIN
	
	SELECT 
			pae_id
	FROM
			dbo.SYS_ParametrosEtiqueta WITH ( NOLOCK )
	WHERE
			pae_chave = @pae_chave
			AND pae_status <> 3
			
	RETURN @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_ParametrosTela_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Hethini ribeiro
-- Create date: 02/09/2013
-- Description:	retorna todos os campos relacionados ao id da tela
-- ==================================================================

create PROCEDURE [dbo].[NEW_SYS_ParametrosTela_SELECT]
	@tel_id AS INTEGER
AS
BEGIN
	SELECT 
		pat_id
		,pat_descricao
		, pat_status

	FROM 
		[SYS_ParametrosTela] WITH(NOLOCK) 
	where tel_id = @tel_id
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_ParametrosTela_SelectBy_Chave]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Luana Piva
-- Create date: 08/07/2014
-- Description:	Retorna status do parâmetro de acordo com a chave
-- ==================================================================

CREATE PROCEDURE [dbo].[NEW_SYS_ParametrosTela_SelectBy_Chave]
	@tel_id AS INTEGER,
	@paramVinculo AS VARCHAR(50)
AS
BEGIN
	SELECT 
		pat_status		

	FROM 
		[SYS_ParametrosTela] WITH(NOLOCK) 
	where tel_id = @tel_id
		and pat_chave like @paramVinculo		
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Tela_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Hethini ribeiro
-- Create date: 02/09/2013
-- Description:	retorna todas as telas de acordo com o tipo
-- ==================================================================

CREATE PROCEDURE [dbo].[NEW_SYS_Tela_SELECT]
	@tte_id int = 2
as	
BEGIN
	SELECT 	
		tel_descricao,			
		SYS_Tela.tel_id
	FROM 
		SYS_Tela WITH(NOLOCK) 
	where
		exists(select * from  SYS_ParametrosTela where SYS_Tela.tel_id = SYS_ParametrosTela.tel_id)
		and tte_id = @tte_id
	order by tel_descricao
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_TipoEntidade_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Figueiredo
-- Create date: 29/10/2010
-- Description:	Stored procedure que retorna os tipos de entidade filtrados por ten_id,ten_nome e/ou ten_situação
-- =============================================
CREATE PROCEDURE [dbo].[NEW_SYS_TipoEntidade_SelectBy_All]
	@ten_id uniqueidentifier
	,@ten_nome VARCHAR(100)	
	,@ten_situacao TINYINT
AS
BEGIN
	SELECT 
		ten_id
		,ten_nome
		, CASE ten_situacao 
			WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
			WHEN 4 THEN 'Padrao do Sistema'			
		  END AS ten_situacao
	FROM
		Synonym_SYS_TipoEntidade_SSO WITH (NOLOCK)	
	WHERE
		ten_situacao <> 3
		AND (@ten_id is null or ten_id = @ten_id)		
		AND (@ten_nome is null or ten_nome LIKE '%' + @ten_nome + '%')		
		AND (@ten_situacao is null or ten_situacao = @ten_situacao)				
	ORDER BY
		ten_nome
		
	SELECT @@ROWCOUNT				
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_TipoTela_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Hethini ribeiro
-- Create date: 02/09/2013
-- Description:	retorna todos os tipos de tela
-- ==================================================================

CREATE PROCEDURE [dbo].[NEW_SYS_TipoTela_SELECT]
AS
BEGIN
	SELECT 
		tte_id
		,tte_descricao

	FROM 
		[TipoTela] WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_TipoUnidadeAdministrativa_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Lukas Figueiredo
-- Create date: 29/10/10
-- Description:	Stored procedure que retorna uma unidade administrativa filtrada por tua_id,tua_nome e tua_situacao
-- =============================================
CREATE PROCEDURE [dbo].[NEW_SYS_TipoUnidadeAdministrativa_SelectBy_All]
	-- Add the parameters for the stored procedure here
	@tua_id uniqueidentifier
	,@tua_nome VARCHAR(100)	
	,@tua_situacao TINYINT
AS
BEGIN
	SELECT 
		tua_id
		,tua_nome
		,tua_situacao
		,
		CASE tua_situacao
		WHEN 1 THEN 'Ativo'
			WHEN 2 THEN 'Bloqueado'
			WHEN 4 THEN 'Padrao do Sistema'
		END AS tua_situacao_nome
	FROM
		dbo.Synonym_SYS_TipoUnidadeAdministrativa_SSO as tua WITH (NOLOCK)	
	WHERE
		tua_situacao <> 3
		AND (@tua_id is null or tua_id = @tua_id)		
		AND (@tua_nome is null or tua_nome LIKE '%' + @tua_nome + '%')		
		AND (@tua_situacao is null or tua_situacao = @tua_situacao)				
	ORDER BY
		tua_nome
		
	SELECT @@ROWCOUNT					
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Usuario_LOADBy_usu_email]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 03/11/2010 09:30
-- Description:	Carrega os dados do usuário através do email.
-- ==========================================================
CREATE PROCEDURE [dbo].[NEW_SYS_Usuario_LOADBy_usu_email]
	 @usu_email VARCHAR(200)
AS
BEGIN
	SELECT TOP 1
		usu_id
		, usu_login
		, usu_senha
		, usu_email		
		, usu_situacao
		, usu_dataCriacao
		, usu_dataAlteracao
		, pes_id
		, ent_id
	FROM
		VW_ConPatUsuario WITH (NOLOCK)
	WHERE
		 usu_email = @usu_email
		AND usu_situacao <> 3
		
	SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Usuario_LOADBy_usu_login]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================
-- Author:		João Victor Rossetti Vieira
-- Create date: 18/08/2010 09:30
-- Description:	Carrega os dados do usuário através do login.
-- ==========================================================
CREATE PROCEDURE [dbo].[NEW_SYS_Usuario_LOADBy_usu_login]
	 @usu_login VARCHAR(100)
AS
BEGIN
	SELECT TOP 1
		usu_id
		, usu_login
		, usu_senha
		, usu_email		
		, usu_situacao
		, usu_dataCriacao
		, usu_dataAlteracao
		, pes_id
		, ent_id
	FROM
		VW_ConPatUsuario WITH (NOLOCK)
	WHERE
		 usu_login = @usu_login
		AND usu_situacao <> 3
		
	SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Usuario_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext NEW_SYS_Usuario_SelectBy_All
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- ===========================================================================
-- Author:		Aline Dornelas
-- Create date: 11/08/2010 11:25
-- Description:	Consulta de usuários filtrando por 
--				UA do usuário logado (para filtrar os usuários 
--				apenas da hierarquia da UA do usuário logado),
--			    login, email, situacao e nome da Pessoa
--
-- Author:		Rafael Soarde Matias
-- Edit date:	09/06/2014 11:00
-- Description:	Retirado o filtro obrigatório do UsuarioGrupoUA de usuário logado
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_SYS_Usuario_SelectBy_All]
	@uni_id INT,
	@gru_id UNIQUEIDENTIFIER,
	@usu_login VARCHAR(100),
	@usu_email VARCHAR(200),
	@usu_bloqueado TINYINT,
	@pes_nome VARCHAR(200)
AS
BEGIN
	-- Verifica se o usuário é administrador do sistema
	IF ((@uni_id = 2) AND (upper(@gru_id) = 'CAFEBE0B-8581-E011-8174-B8AC6FB2D6C0'))
	BEGIN
			SELECT
				USU.usu_id
				, usu_login
				, usu_email
				, pes_nome
				, pes_nome_abreviado
				, usu_situacao
				, CASE usu_situacao
					WHEN 1 THEN 'Ativo'
					WHEN 2 THEN 'Bloqueado'
					WHEN 4 THEN 'Padrão do Sistema'
					WHEN 5 THEN 'Senha Expirada'
				  END AS usu_situacaoNome
			FROM
				VW_ConPatUsuario AS USU WITH(NOLOCK)
			LEFT JOIN
				dbo.Synonym_PES_Pessoa_SSO AS PES WITH(NOLOCK)
				ON USU.pes_id = PES.pes_id
			WHERE
				usu_situacao <> 3
				AND ((@usu_login IS NULL) OR (usu_login LIKE '%' + @usu_login + '%'))
				AND ((@usu_email IS NULL) OR (usu_email LIKE '%' + @usu_email + '%'))
				AND ((@usu_bloqueado IS NULL)
					OR ((@usu_bloqueado = 1) AND (usu_situacao IN (1,4)))
					OR ((@usu_bloqueado = 2) AND (usu_situacao IN (2,5))))
				AND (@pes_nome IS NULL OR (pes_nome LIKE '%' + @pes_nome + '%'))
			ORDER BY	
				pes_nome
	end
	else 
	begin
	WITH tbUniUsu AS 
	 (
		SELECT ent_id, uad_id FROM  [dbo].[FN_GetUnidadeEFilhasImediatas](@uni_id)
	 )
    , UnidadeUsuario AS
		(
		  SELECT syn.usu_id 
		  FROM dbo.Synonym_SYS_UsuarioGrupoUA_SSO syn 
			   INNER JOIN tbUniUsu fn1 ON fn1.ent_id = syn.ent_id AND fn1.uad_id = syn.uad_id
		)    
 
      --  select * from [dbo].[FN_GetUnidadeEFilhas](34)

		

      SELECT
        USU.usu_id
        , usu_login
        , usu_email
        , pes_nome
        , pes_nome_abreviado
        , usu_situacao
        , CASE usu_situacao 
          WHEN 1 THEN 'Ativo'
          WHEN 2 THEN 'Bloqueado'
          WHEN 4 THEN 'Padrão do Sistema'
          WHEN 5 THEN 'Senha Expirada'
          END AS usu_situacaoNome        
      FROM dbo.VW_ConPatUsuario  USU 
           LEFT JOIN [CoreSSO].dbo.[PES_Pessoa]  PES ON USU.pes_id = PES.pes_id
      WHERE
        usu_situacao <> 3
        AND ((@usu_login IS NULL) OR (usu_login LIKE '%' + @usu_login + '%'))
        AND ((@usu_email IS NULL) OR (usu_email LIKE '%' + @usu_email + '%'))
        AND ((@usu_bloqueado IS NULL) 
          OR ((@usu_bloqueado = 1) AND (usu_situacao IN (1,4)))
          OR ((@usu_bloqueado = 2) AND (usu_situacao IN (2,5)))			)
        AND (@pes_nome IS NULL OR (pes_nome LIKE '%' + @pes_nome + '%'))			
        AND (  EXISTS (Select usu_id from UnidadeUsuario UU WHERE UU.usu_id = USU.usu_id))
                                
      ORDER BY	
        pes_nome        	

	end
	SELECT @@ROWCOUNT	
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Usuario_SelectBy_RelUnidadeRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[NEW_SYS_Usuario_SelectBy_RelUnidadeRS]
	@uniges_id int,
	@uniguarda_id int,
	@login varchar(100),
	@email varchar(100),
	@nome varchar(100),
	@grupo_id varchar(36)
AS
BEGIN

	WITH

	tbUnidades AS (
	
		SELECT uni_id, uad_id
		FROM
			dbo.FN_GetUnidadeEFilhas(@uniges_id)		

	)

	SELECT
			up.pes_nome,
			up.pes_dataCriacao,
			uadGua.uad_nome,
			uadGua.uad_id,
			gru.gru_nome,
			u.usu_login,
			u.usu_email,
			CASE usu_situacao
				WHEN 1 THEN 'Ativo'
				WHEN 2 THEN 'Bloqueado'	
				WHEN 3 THEN 'Excluído'	
				WHEN 4 THEN 'Padrão do Sistema'	
				WHEN 5 THEN 'Senha Expirada'	
			END as usu_situacao	
	FROM 
		VW_ConPatUsuario AS u WITH(NoLock)
		LEFT JOIN
			Synonym_SYS_UsuarioGrupo_SSO as ugu
			ON ugu.usu_id = u.usu_id
				LEFT JOIN VW_ConPatGrupo gru WITH(NOLOCK)	
			ON ugu.gru_id = gru.gru_id
		LEFT JOIN 
			dbo.Synonym_SYS_UsuarioGrupoUA_SSO AS ugua WITH(NoLock)
			ON u.usu_id = ugua.usu_id
			AND ugua.gru_id = gru.gru_id
		LEFT JOIN tbUnidades AS unGua	
			ON unGua.uad_id = ugua.uad_id		
		LEFT JOIN dbo.VW_UnidadeAdministrativa AS uadGua WITH(NoLock)
			ON unGua.uad_id = uadGua.uad_id
		LEFT JOIN 
			dbo.VW_ConPatUsuarioPessoa AS up 
			ON up.pes_id = u.pes_id
	WHERE 
	    ((@uniguarda_id = 0)     OR (unGua.uni_id = @uniguarda_id))
		AND ((@login IS NULL)         OR (UPPER(u.usu_login) LIKE '%' + UPPER(@login) + '%'))
		AND ((@email IS NULL)         OR (UPPER(u.usu_email) LIKE '%' + UPPER(@email) + '%'))
		AND ((@nome IS NULL)          OR (UPPER(up.pes_nome) LIKE '%' + UPPER(@nome)  + '%'
											COLLATE Latin1_General_CI_AI)) --ignora acentuacao
		AND ((@grupo_id IS NULL)      OR (CONVERT(varchar(36),gru.gru_id) = @grupo_id))
		
	RETURN @@ROWCOUNT		
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Usuario_SelectBy_RelUnidadeSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[NEW_SYS_Usuario_SelectBy_RelUnidadeSP]
	@uniges_id int,
	@uniguarda_id int,
	@login varchar(100),
	@email varchar(100),
	@nome varchar(100),
	@grupo_id varchar(36)
AS
BEGIN

	WITH

	tbUnidades AS (
	
		SELECT uni_id, uad_id
		FROM
			dbo.FN_GetUnidadeEFilhas(@uniges_id)		

	)

	SELECT
			up.pes_nome,
			up.pes_dataCriacao,
			uadGua.uad_nome,
			uadGua.uad_id,
			gru.gru_nome,
			u.usu_login,
			u.usu_email,
			CASE usu_situacao
				WHEN 1 THEN 'Ativo'
				WHEN 2 THEN 'Bloqueado'	
				WHEN 3 THEN 'Excluído'	
				WHEN 4 THEN 'Padrão do Sistema'	
				WHEN 5 THEN 'Senha Expirada'	
			END as usu_situacao	
	FROM 
		VW_ConPatUsuario AS u WITH(NoLock)
		LEFT JOIN
			Synonym_SYS_UsuarioGrupo_SSO as ugu
			ON ugu.usu_id = u.usu_id
				LEFT JOIN VW_ConPatGrupo gru WITH(NOLOCK)	
			ON ugu.gru_id = gru.gru_id
		LEFT JOIN 
			dbo.Synonym_SYS_UsuarioGrupoUA_SSO AS ugua WITH(NoLock)
			ON u.usu_id = ugua.usu_id
			AND ugua.gru_id = gru.gru_id
		LEFT JOIN tbUnidades AS unGua	
			ON unGua.uad_id = ugua.uad_id		
		LEFT JOIN dbo.VW_UnidadeAdministrativa AS uadGua WITH(NoLock)
			ON unGua.uad_id = uadGua.uad_id
		LEFT JOIN 
			dbo.VW_ConPatUsuarioPessoa AS up 
			ON up.pes_id = u.pes_id
	WHERE 
	    ((@uniguarda_id = 0)     OR (unGua.uni_id = @uniguarda_id))
		AND ((@login IS NULL)         OR (UPPER(u.usu_login) LIKE '%' + UPPER(@login) + '%'))
		AND ((@email IS NULL)         OR (UPPER(u.usu_email) LIKE '%' + UPPER(@email) + '%'))
		AND ((@nome IS NULL)          OR (UPPER(up.pes_nome) LIKE '%' + UPPER(@nome)  + '%'
											COLLATE Latin1_General_CI_AI)) --ignora acentuacao
		AND ((@grupo_id IS NULL)      OR (CONVERT(varchar(36),gru.gru_id) = @grupo_id))
		
	RETURN @@ROWCOUNT		
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Usuario_SelectBy_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		João Victor Rossetti Vieira	
-- Create date: 23/08/2010 14:40
-- Description:	Consulta de usuários filtrando pelo
--				id da unidade
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_SYS_Usuario_SelectBy_uni_id]
	@uni_id INT
AS
BEGIN
	SELECT 
		up.pes_id,
		pes_nome 
	FROM 
		VW_ConPatUsuario AS u WITH(NoLock)
	
	INNER JOIN 
		dbo.VW_ConPatUsuarioPessoa AS up WITH(NoLock)
		ON up.pes_id = u.pes_id
	WHERE 
	
		exists
		(select * from 
			Synonym_SYS_UsuarioGrupoUA_SSO AS ugua WITH(NoLock)
			INNER JOIN 
				dbo.Unidade AS un WITH(NoLock)
					ON ugua.uad_id = un.uad_id 
		where 
			u.usu_id = ugua.usu_id
			AND un.uni_id = @uni_id
		)
	
	RETURN @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Usuario_SelectBy_usu_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===========================================================================
-- Author:		Ivan Roberto Pimentel
-- Create date: 25/01/2010 15:32
-- Description:	Consulta de usuários filtrando pelo
--				id do usuario

-- Author:		Wellington Santana
-- Create date: 10/06/2014 15:38
-- Description:	Procedure alterado, para trazer somente o pes_nome do usuário logado	
-- ===========================================================================
CREATE PROCEDURE [dbo].[NEW_SYS_Usuario_SelectBy_usu_id]
	@usu_id uniqueidentifier
AS
BEGIN
	SELECT 
		up.pes_nome
	FROM 
		VW_ConPatUsuario AS u WITH(NoLock)
	--INNER JOIN 
	--	dbo.Synonym_SYS_UsuarioGrupoUA_SSO AS ugua WITH(NoLock)
	--	ON u.usu_id = ugua.usu_id
	--INNER JOIN 
	--	dbo.Unidade AS un WITH(NoLock)
	--	ON ugua.uad_id = un.uad_id 
	INNER JOIN 
		dbo.VW_ConPatUsuarioPessoa AS up WITH(NoLock)
		ON up.pes_id = u.pes_id
	WHERE 
		u.usu_id = @usu_id
	
	RETURN @@ROWCOUNT		
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_Usuario_SelectByCpf]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =================================================================
-- Author:		Rafael Soarde Matias
-- Create date: 06/06/2014
-- Description:	Verifica se existe um login cadastrado já com o CPF
-- ==================================================================

CREATE PROCEDURE [dbo].[NEW_SYS_Usuario_SelectByCpf]
(
	@cpf nvarchar(50)
)
AS
BEGIN
	SELECT TOP 1
		usu.usu_login

	FROM
		dbo.Synonym_PES_PessoaDocumento_SSO AS pes_doc WITH(NOLOCK)
		INNER JOIN dbo.Synonym_SYS_Usuario_SSO AS usu WITH(NOLOCK)
		ON usu.pes_id = pes_doc.pes_id
	WHERE psd_numero = @cpf
	
	SELECT @@ROWCOUNT
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_UsuarioGrupo_SelectBy_Grupo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		JORGE FREITAS
-- Description:	busca usuário por grupo de usuario
-- =============================================
CREATE PROCEDURE [dbo].[NEW_SYS_UsuarioGrupo_SelectBy_Grupo]
	@gru_id UNIQUEIDENTIFIER

AS
BEGIN
	SELECT 
		* 
	FROM 
		dbo.Synonym_SYS_UsuarioGrupo_SSO AS UG
	WHERE 
		UG.gru_id = @gru_id 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_SYS_UsuarioGrupoUA_SelectBy_usuId]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Debora Cavaglieri
-- Create date: 
-- Description:	Busca todos os grupos e unidades ligadas no usuário

-- Alterado:	Allex Rocha
-- Date:		01/12/2014
--				Inserção do cod_uge
-- =============================================
CREATE PROCEDURE [dbo].[NEW_SYS_UsuarioGrupoUA_SelectBy_usuId]
 @usu_id UNIQUEIDENTIFIER
 , @sis_id int

AS
BEGIN
	SELECT *
	FROM
	(
	--unidade
	SELECT DISTINCT 
		grupoUA.gru_id
		, UniAdm.uni_id
	    , UniAdm.uad_codigo AS codigo
		, UniAdm.uad_nome AS nome
		, Grupo.gru_nome
		, UniAdm.UNI_CODIGOUGE AS cod_uge
	FROM 
		dbo.Synonym_SYS_UsuarioGrupoUA_SSO AS grupoUA
	INNER JOIN 
		VW_UnidadeAdministrativa AS UniAdm  
		on UniAdm.uad_id = grupoUA.uad_id
	INNER JOIN
		VW_ConPatGrupo AS Grupo
		ON Grupo.gru_id = grupoUA.gru_id
	WHERE 
		grupoUA.usu_id = @usu_id
	
	UNION ALL
	--entidade
	SELECT DISTINCT
		Grupo.gru_id
		, Entidade.uni_id
	    , Entidade.ent_codigo AS codigo
		, Entidade.ent_razaoSocial AS nome
		, Grupo.gru_nome
		, '' AS cod_uge
	FROM 
		VW_ConPatGrupo AS Grupo
	INNER JOIN
		 dbo.Synonym_SYS_UsuarioGrupo_SSO AS grupoUsu
		 ON grupoUsu.gru_id = Grupo.gru_id
	INNER JOIN
		VW_ConPatUsuario as Usu
		ON Usu.usu_id = grupoUsu.usu_id
	LEFT JOIN 
		VW_UnidadeEntidade AS Entidade  
		on Entidade.ent_id = usu.ent_id 		  
	WHERE 		
		grupoUsu.usu_id = @usu_id
		AND Grupo.sis_id = @sis_id
		AND NOT EXISTS
		(SELECT *
			FROM dbo.Synonym_SYS_UsuarioGrupoUA_SSO AS grupoUA
			WHERE grupoUA.usu_id = @usu_id)
	) tb
	order by 
		CASE WHEN codigo is null THEN 0 ELSE 1 END
		, gru_nome
		, nome;
END
GO
/****** Object:  StoredProcedure [dbo].[NEW_Tela_ParametrizarTela]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Christian Freitas
-- Create date: 30/08/2013
-- Description:	Faz parametrização das telas
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Tela_ParametrizarTela]
	
	@tel_id int
	
AS
BEGIN
	
	SELECT pat_chave, 
		   pat_status
	
	FROM SYS_ParametrosTela
	
	WHERE
		tel_id = @tel_id
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_TempVinculosGrupoBens_Import]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
-- ===================================================================================
-- Author:		Luana Piva
-- Create date: 12/02/2014
-- Description:Importa dados da planilha para tabela temporária
-- ===================================================================================

CREATE PROCEDURE [dbo].[NEW_TempVinculosGrupoBens_Import]
@PathFileName varchar(300)
AS 
BEGIN
	--Monta instrução do Bulk Insert
	DECLARE @SQL varchar(max)
	
	BEGIN 
	 SET @SQL = "BULK INSERT TempVinculosGrupoBens FROM '"+@PathFileName+"' WITH (CODEPAGE='ACP', FIRSTROW=2, FIELDTERMINATOR=';') "
	END

	--Executa a instrução BULK INSERT
	EXEC (@SQL)

End

GO
/****** Object:  StoredProcedure [dbo].[NEW_TipoDependencia_SelectAll]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_TipoDependencia_SelectAll]
@visibilidade int
AS
BEGIN
	if(@visibilidade<>-1)
	begin
		select *
		from TipoDependencia with(nolock)
		where TipoDependencia.tde_situacao<>3 and TipoDependencia.tde_situacao=@visibilidade
	end
	else
	begin
		select *
		from TipoDependencia with(nolock)
		where TipoDependencia.tde_situacao<>3
	end
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_TipoDependencia_SelectBy_localidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Fabio N
-- Create date: 10/08/2010 16:40
-- Description:	Retorna os TipoDeDependencia de uma localidade específica
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_TipoDependencia_SelectBy_localidade]
	@localidade int	

	
AS
BEGIN
	SELECT 
		Dependencia.tde_id
		,tde_nome
	FROM
		TipoDependencia WITH (NOLOCK)	
	inner join Dependencia WITH(NoLock)
		on Dependencia.tde_id = TipoDependencia.tde_id	
	WHERE
		tde_situacao <> 3
		AND (@localidade is null or Dependencia.loc_id = @localidade)
	GROUP BY Dependencia.tde_id,
				tde_nome
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_TipoDependencia_SelectBy_Nome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Fabio N
-- Create date: 10/08/2010 16:40
-- Description:	utilizado na busca de nome de tipos de movimentação, retorna quantidade
--				dos tipos de movimentação que não foram excluídos logicamente,
--				filtrados por:
--					nome, id
-- ========================================================================
create PROCEDURE [dbo].[NEW_TipoDependencia_SelectBy_Nome]
	@tde_nome VARCHAR(100)	
	,@tde_id_alteracao int
	
AS
BEGIN
	SELECT 
		tde_id
		,tde_nome
	FROM
		TipoDependencia WITH (NOLOCK)		
	WHERE
		tde_situacao <> 3
		AND UPPER(tde_nome) = UPPER(@tde_nome)	
		AND ((@tde_id_alteracao is null) or (tde_id <> @tde_id_alteracao))
	ORDER BY
		tde_nome
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_TipoDependencia_SelectBy_situacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Fabio N
-- Create date: 10/08/2010 16:40
-- Description:	Retorna os TipoDeDependencia de acordo com sua situação
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_TipoDependencia_SelectBy_situacao]
	@situacao int	

	
AS
BEGIN
	SELECT 
		tde_id
		,tde_nome
	FROM
		TipoDependencia WITH (NOLOCK)	
		
	WHERE
		(@situacao is null or TipoDependencia.tde_situacao= @situacao)
	GROUP BY tde_id,tde_nome
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_TipoMovimentacao_Select_Combo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_TipoMovimentacao_Select_Combo]
	@tpm_id int
	,@tpm_nome VARCHAR(100)
	,@tpm_situacao int
	,@tpm_operacao int
AS
BEGIN
	SELECT
		tpm.tpm_id
		, tpm.tpm_nome
		, tpm.tpm_operacao
		, tpm.tpm_situacao
		, tpm.tpm_dataAlteracao
		, tpm.tpm_situacao
 	FROM
 		TipoMovimentacao tpm WITH (NOLOCK)
	WHERE
		(@tpm_situacao IS NULL OR tpm_situacao = @tpm_situacao) AND
		--tpm_situacao = 1 and
		(@tpm_id IS NULL OR tpm_id  = @tpm_id) AND
		(@tpm_nome IS NULL OR tpm_nome LIKE '%' + @tpm_nome + '%') AND
		(@tpm_operacao IS NULL OR tpm_operacao = @tpm_operacao)
	ORDER BY
		tpm_nome
	
	SELECT @@ROWCOUNT
END




GO
/****** Object:  StoredProcedure [dbo].[NEW_TipoMovimentacao_Select_Operacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================================
-- Author:		JORGE FREITAS
-- Create date: 29/10/2010
-- Description:	Retorna tipo de movimentacao filtrado por operacao
-- ==========================================================================================
CREATE PROCEDURE [dbo].[NEW_TipoMovimentacao_Select_Operacao]
	@tpm_operacao TINYINT
	,@tpm_situacao TINYINT
AS
BEGIN
	SELECT
		tpm_id  
		, tpm_nome 
		, tpm_operacao
		, tpm_situacao 
		
 	FROM
 		TipoMovimentacao WITH (NOLOCK)
	WHERE 
		tpm_operacao = @tpm_operacao
		AND (@tpm_situacao is null or tpm_situacao  = @tpm_situacao )	
	ORDER BY 
		tpm_nome		
		
	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_TipoMovimentacao_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_TipoMovimentacao_SelectBy_All]
	
AS
BEGIN
	SELECT 
		tpm_id
		,tpm_nome
		,tpm_nomeAbr
		,tpm_descricao
		,tpm_operacao
		,tpm_situacao
		,tpm_dataCriacao
		,tpm_dataAlteracao
	FROM 
		TipoMovimentacao WITH(NOLOCK)
	WHERE
		tpm_situacao <> 3
	ORDER BY 
		tpm_nome ASC 
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_TipoMovimentacao_SelectBy_Nome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================
-- Author:		Jean
-- Create date: 10/08/2010 16:40
-- Description:	utilizado na busca de nome de tipos de movimentação, retorna quantidade
--				dos tipos de movimentação que não foram excluídos logicamente,
--				filtrados por:
--					nome, id
-- ========================================================================
CREATE PROCEDURE [dbo].[NEW_TipoMovimentacao_SelectBy_Nome]	
	@tpm_nome VARCHAR(100)	
	,@tpm_id_alteracao int
	
AS
BEGIN
	SELECT 
		tpm_id
		,tpm_id
	FROM
		TipoMovimentacao WITH (NOLOCK)		
	WHERE
		tpm_situacao <> 3
		AND UPPER(tpm_nome) = UPPER(@tpm_nome)	
		AND ((@tpm_id_alteracao is null) or (tpm_id <> @tpm_id_alteracao))
	ORDER BY
		tpm_nome
			
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_TipoMovimentacao_VinculoMovimentacao]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================================
-- Author:		Christian Freitas
-- Create date: 25/07/2013
-- Description:	Verifica se há alguma movimentação com o tipo de movimentação passado			 
-- ==========================================================================================
CREATE PROCEDURE [dbo].[NEW_TipoMovimentacao_VinculoMovimentacao]

	@tpm_id int
	
AS
BEGIN
	SELECT
		mov.tpm_id  
		
 	FROM
 		MovimentacaoBem mov WITH (NOLOCK)
	WHERE 
		mov.mov_situacao <> 3 AND
		@tpm_id  IS NULL OR mov.tpm_id  = @tpm_id  
		
	SELECT @@ROWCOUNT	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_CodigoUGE_CIE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================================      
-- Author:  JORGE FREITAS      
-- Create date: 18/11/2010 10:00      
-- Description: Busca unidade por UGE ou CIE       
-- =========================================================================      
CREATE PROCEDURE [dbo].[NEW_Unidade_CodigoUGE_CIE]      
 @uad_nome VARCHAR(200)      
 , @uad_codigoCIE VARCHAR(20)      
 , @uni_codigoUGE VARCHAR(10)      
 , @uni_id INT      
 , @gestoras TINYINT       
--WITH RECOMPILE      
AS      
BEGIN      
 SELECT ua.uni_id, ua.uad_codigo, ua.uni_codigoUGE, ua.uad_nome       
 FROM       
  dbo.VW_UnidadeAdministrativa AS UA With (NoLock)      
 WHERE      
  (@uad_nome IS NULL OR ua.uad_nome LIKE '%' + @uad_nome + '%')      
  AND (@uad_codigoCIE IS NULL OR ua.uad_codigo = @uad_codigoCIE)      
  AND (@uni_codigoUGE IS NULL OR ua.uni_codigoUGE = @uni_codigoUGE)      
  AND (@uni_id IS NULL OR ua.uni_id = @uni_id)      
  AND (@gestoras = 0 OR ua.uni_codigoUGE IS NOT NULL )      
        
 SELECT @@ROWCOUNT      
       
END 
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_CodigoUGE_CIE_Autocomplete]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================================  
-- Author:  JORGE FREITAS  
-- Create date: 18/11/2010 10:00  
-- Description: Busca unidade por UGE ou CIE usado no autocomplete  
-- =========================================================================  
CREATE PROCEDURE [dbo].[NEW_Unidade_CodigoUGE_CIE_Autocomplete]  
 @uad_nome VARCHAR(200)  
 , @uad_codigoCIE VARCHAR(20)  
 , @uni_codigoUGE VARCHAR(10)  
--WITH RECOMPILE   
AS  
BEGIN  
 SELECT ua.uni_id, ua.uad_codigo, ua.uni_codigoUGE, ua.uad_nome   
 FROM   
  dbo.VW_UnidadeAdministrativa AS UA  with (nolock)
 WHERE  
  (@uad_nome IS NULL OR ua.uad_nome LIKE '%' + @uad_nome + '%')  
  AND (@uad_codigoCIE IS NULL OR ua.uad_codigo LIKE '%' + @uad_codigoCIE + '%')  
  AND (@uni_codigoUGE IS NULL OR ua.uni_codigoUGE LIKE '%' + @uni_codigoUGE + '%')  
  
 ORDER BY ua.uni_codigoUGE, ua.uad_codigo  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_Entidade_Select]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================  
-- Author:  Christian Freitas  
-- Create date: 20/09/2013  
-- Description: Pesquisa de entidade  
-- ========================================================================  
CREATE PROCEDURE [dbo].[NEW_Unidade_Entidade_Select]   
 @ten_id uniqueidentifier  
 ,@ent_razaoSocial VARCHAR(200)  
 ,@ent_nomeFantasia VARCHAR(200)  
 ,@ent_CNPJ VARCHAR(14)   
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT DISTINCT  
  UNI.ent_id  
  ,ent_razaoSocial  
  ,ent_nomeFantasia  
  ,ent_CNPJ  
  ,ten_nome  
    
  ,CASE ent_situacao  
   WHEN 1 THEN 'Ativo'  
   WHEN 2 THEN 'Bloqueado'  
   WHEN 4 THEN 'Padrão do Sistema'  
   ELSE 'Bloqueado'  
   END AS ent_situacao  
      
   ,ent_situacao AS situacao  
      
 FROM  
  Unidade AS UNI WITH (NOLOCK)  
  INNER JOIN dbo.Synonym_SYS_Entidade_SSO AS E WITH (NOLOCK)  
   ON E.ent_id = UNI.ent_id  
  INNER JOIN dbo.Synonym_SYS_TipoEntidade_SSO TIPO WITH (NOLOCK)  
   ON e.ten_id = TIPO.ten_id  
     
 WHERE  
  ent_situacao <> 3   
  AND (@ent_razaoSocial is null or ent_razaoSocial LIKE '%' + @ent_razaoSocial + '%')  
  AND (@ent_nomeFantasia is null or ent_nomeFantasia LIKE '%' + @ent_nomeFantasia + '%')    
  AND (@ent_CNPJ is null or ent_CNPJ LIKE '%' + @ent_CNPJ + '%')   
           
 ORDER BY  
  ent_razaosocial  
    
 SELECT @@ROWCOUNT    
END  
GO
/****** Object:  StoredProcedure [dbo].[New_unidade_entidade_select_todas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[New_unidade_entidade_select_todas] 
@nome      VARCHAR(200) = null, 
@codigoCIE VARCHAR(20)= null, 
@codigoUGE VARCHAR(10)= null,
@tipo UNIQUEIDENTIFIER= null, 
@entidade  BIT= null,
@uniID     INT= null 

WITH recompile 
AS 
  BEGIN 
      SELECT dbo.unidade.uni_id        AS uni_id, 
             ue.ent_razaosocial        AS nome, 
             CASE ue.ent_situacao 
               WHEN 1 THEN 'Ativo' 
               WHEN 2 THEN 'Bloqueado' 
               WHEN 5 THEN 'Municipalizada' 
               ELSE 'Padrao do sistema' 
             END                       AS situacao, 
             tipo.ten_nome             AS tipo, 
             tipo.ten_id, 
             ue.ent_sigla              AS sigla, 
             dbo.unidade.uni_codigouge AS codigoUGE, 
             NULL                      AS codigoCIE, 
             1                         AS tabela, 
             ue.ent_id                 AS id, 
             0                         AS uniGestora 
      FROM   unidade WITH(nolock) 
             INNER JOIN dbo.vw_unidadeentidade AS ue WITH(nolock) 
                     ON dbo.unidade.ent_id = ue.ent_id 
             INNER JOIN synonym_sys_tipoentidade_sso AS tipo WITH(nolock) 
                     ON tipo.ten_id = ue.ten_id 
      WHERE  unidade.uad_id IS NULL 
             AND ue.ent_situacao <> 3 
             AND ( ue.ent_nomefantasia LIKE '%' + @nome + '%' 
                    OR @nome IS NULL ) 
             AND ( dbo.unidade.uni_codigouge LIKE '%' + @codigoUGE + '%' 
                    OR @codigoUGE IS NULL ) 
             AND ( @codigoCIE IS NULL ) 
             AND ( @tipo IS NULL ) 
             AND ( @entidade = 1 ) 
      UNION 
      SELECT unidade.uni_id            AS uni_id, 
             ua.uad_nome               AS nome, 
             CASE unidade.uni_situacao 
               WHEN 1 THEN 'Ativo' 
               WHEN 2 THEN 'Bloqueado' 
               WHEN 5 THEN 'Municipalizada' 
               ELSE 'Padrao do sistema' 
             END                       AS situacao, 
             tipo.tua_nome             AS tipo, 
             tipo.tua_id, 
             ua.uad_sigla, 
             dbo.unidade.uni_codigouge AS codigoUGE, 
             ua.uad_codigo             AS codigoCIE, 
             2, 
             ua.uad_id                 AS id, 
             Isnull(uge_situacao, 0)   AS uniGestora 
      FROM   unidade WITH(nolock) 
             INNER JOIN dbo.vw_unidadeadministrativa AS ua WITH(nolock) 
                     ON dbo.unidade.uad_id = ua.uad_id 
             INNER JOIN synonym_sys_tipounidadeadministrativa_sso AS tipo WITH( 
                        nolock) 
                     ON tipo.tua_id = ua.tua_id 
             LEFT JOIN vw_unidadegestora AS UG 
                    ON UG.uni_id = ua.uni_id 
      WHERE  unidade.uni_situacao <> 3 
             AND ( ua.uad_nome LIKE '%' + @nome + '%' 
                    OR @nome IS NULL ) 
             AND ( ua.uad_codigo LIKE '%' + @codigoCIE + '%' 
                    OR @codigoCIE IS NULL ) 
             AND ( dbo.unidade.uni_codigouge LIKE '%' + @codigoUGE + '%' 
                    OR @codigoUGE IS NULL ) 
             AND ( @tipo = tipo.tua_id 
                    OR @tipo IS NULL ) 
             AND ( @entidade = 0 ) 
             AND ( @uniID IS NULL 
                    OR unidade.uni_id IN (SELECT uni_id 
                                          FROM 
                 dbo.Fn_getunidadeefilhas(@uniID)) ) 
			--AND (unidade.uni_id = @uniID)
			 

      ORDER  BY nome 

      SELECT @@ROWCOUNT 
  END 
GO
/****** Object:  StoredProcedure [dbo].[New_unidade_entidade_select_uni]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[New_unidade_entidade_select_uni] 
@nome      VARCHAR(200), 
@codigoCIE VARCHAR(20), 
@codigoUGE VARCHAR(10),
@tipo UNIQUEIDENTIFIER, 
@entidade  BIT,
@uniID     INT 

WITH recompile 
AS 
  BEGIN 
      SELECT dbo.unidade.uni_id        AS uni_id, 
             ue.ent_razaosocial        AS nome, 
             CASE ue.ent_situacao 
               WHEN 1 THEN 'Ativo' 
               WHEN 2 THEN 'Bloqueado' 
               WHEN 5 THEN 'Municipalizada' 
               ELSE 'Padrao do sistema' 
             END                       AS situacao, 
             tipo.ten_nome             AS tipo, 
             tipo.ten_id, 
             ue.ent_sigla              AS sigla, 
             dbo.unidade.uni_codigouge AS codigoUGE, 
             NULL                      AS codigoCIE, 
             1                         AS tabela, 
             ue.ent_id                 AS id, 
             0                         AS uniGestora 
      FROM   unidade WITH(nolock) 
             INNER JOIN dbo.vw_unidadeentidade AS ue WITH(nolock) 
                     ON dbo.unidade.ent_id = ue.ent_id 
             INNER JOIN synonym_sys_tipoentidade_sso AS tipo WITH(nolock) 
                     ON tipo.ten_id = ue.ten_id 
      WHERE  unidade.uad_id IS NULL 
             AND ue.ent_situacao <> 3 
             AND ( ue.ent_nomefantasia LIKE '%' + @nome + '%' 
                    OR @nome IS NULL ) 
             AND ( dbo.unidade.uni_codigouge LIKE '%' + @codigoUGE + '%' 
                    OR @codigoUGE IS NULL ) 
             AND ( @codigoCIE IS NULL ) 
             AND ( @tipo IS NULL ) 
             AND ( @entidade = 1 ) 
      UNION 
      SELECT unidade.uni_id            AS uni_id, 
             ua.uad_nome               AS nome, 
             CASE unidade.uni_situacao 
               WHEN 1 THEN 'Ativo' 
               WHEN 2 THEN 'Bloqueado' 
               WHEN 5 THEN 'Municipalizada' 
               ELSE 'Padrao do sistema' 
             END                       AS situacao, 
             tipo.tua_nome             AS tipo, 
             tipo.tua_id, 
             ua.uad_sigla, 
             dbo.unidade.uni_codigouge AS codigoUGE, 
             ua.uad_codigo             AS codigoCIE, 
             2, 
             ua.uad_id                 AS id, 
             Isnull(uge_situacao, 0)   AS uniGestora 
      FROM   unidade WITH(nolock) 
             INNER JOIN dbo.vw_unidadeadministrativa AS ua WITH(nolock) 
                     ON dbo.unidade.uad_id = ua.uad_id 
             INNER JOIN synonym_sys_tipounidadeadministrativa_sso AS tipo WITH( 
                        nolock) 
                     ON tipo.tua_id = ua.tua_id 
             LEFT JOIN vw_unidadegestora AS UG 
                    ON UG.uni_id = ua.uni_id 
      WHERE  unidade.uni_situacao <> 3 
             AND ( ua.uad_nome LIKE '%' + @nome + '%' 
                    OR @nome IS NULL ) 
             AND ( ua.uad_codigo LIKE '%' + @codigoCIE + '%' 
                    OR @codigoCIE IS NULL ) 
             AND ( dbo.unidade.uni_codigouge LIKE '%' + @codigoUGE + '%' 
                    OR @codigoUGE IS NULL ) 
             AND ( @tipo = tipo.tua_id 
                    OR @tipo IS NULL ) 
             AND ( @entidade = 0 ) 
             AND ( @uniID IS NULL 
                    OR unidade.uni_id IN (SELECT uni_id 
                                          FROM 
                 dbo.Fn_getunidadeefilhas(@uniID)) ) 
			AND (unidade.uni_id = @uniID)
			 

      ORDER  BY nome 

      SELECT @@ROWCOUNT 
  END 
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_Entidade_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================  
-- Author:  Jean Costa  
-- Create date: 24/08/2010 17:35  
-- Description: utilizado na busca de Unidades, retorna as unidades  
--              que não foram excluídas logicamente,  
--    filtrados por:  
--     tipo de entidade,        
--                  razão social, nome fantasia, cnpj  
-- ========================================================================  
CREATE PROCEDURE [dbo].[NEW_Unidade_Entidade_SelectBy_All]   
 @ten_id uniqueidentifier  
 ,@ent_razaoSocial VARCHAR(200)  
 ,@ent_nomeFantasia VARCHAR(200)  
 ,@ent_CNPJ VARCHAR(14)   
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT  
  UNI.uni_id   
  ,UNI.ent_id  
  ,ue.ten_id  
  ,ent_razaoSocial  
  ,ent_nomeFantasia  
  ,ent_CNPJ  
  ,ten_nome  
  /*,CASE uni_situacao   
   WHEN 1 THEN 'Não'  
   WHEN 2 THEN 'Sim'     
    END AS uni_situacao*/  
  ,CASE ent_situacao  
   WHEN 1 THEN 'Ativo'  
   WHEN 2 THEN 'Bloqueado'  
   WHEN 4 THEN 'Padrão do Sistema'  
   ELSE 'Bloqueado'  
    END AS ent_situacao  
    ,ent_situacao AS situacao  
 FROM  
  Unidade AS UNI WITH (NOLOCK)  
  INNER JOIN dbo.VW_UnidadeEntidade AS ue ON UNI.ent_id = ue.ent_id  
  INNER JOIN dbo.Synonym_SYS_TipoEntidade_SSO TIPO WITH (NOLOCK)  
   ON ue.ten_id = TIPO.ten_id    
 WHERE  
  ent_situacao <> 3  
  AND UNI.uad_id IS NULL        
  AND (ue.ten_id = @ten_id OR @ten_id IS NULL)      
  AND (@ent_razaoSocial is null or ent_razaoSocial LIKE '%' + @ent_razaoSocial + '%')  
  AND (@ent_nomeFantasia is null or ent_nomeFantasia LIKE '%' + @ent_nomeFantasia + '%')    
  AND (@ent_CNPJ is null or ent_CNPJ LIKE '%' + @ent_CNPJ + '%')          
 ORDER BY  
  ent_razaosocial  
    
 SELECT @@ROWCOUNT    
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_LoadBy_usu_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================================  
-- Author:  Aline Dornelas  
-- Create date: 12/08/2010 10:00  
-- Description: Consulta de unidades filtrando por entidade, tipo de UA,   
--    UA do usuário logado (para filtrar   
--    as UAs apenas da hierarquia da UA do usuário logado),   
--    nome da UA e código da UA  
--  
-- ALTERAÇÃO: Busca Unidades q sejam somente entidades.  
-- =========================================================================  
CREATE PROCEDURE [dbo].[NEW_Unidade_LoadBy_usu_id]  
 @usu_id uniqueidentifier  
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT   
  uni.*  
  ,en.*           
 FROM   
  VW_ConPatUsuario AS usu WITH(NoLock)  
 INNER JOIN   
  dbo.Synonym_SYS_UsuarioGrupoUA_SSO AS ugua WITH(NoLock)   
  ON usu.usu_id = ugua.usu_id  
 INNER JOIN   
  Unidade AS uni WITH(NoLock)  
  ON uni.uad_id = ugua.uad_id  
 INNER JOIN   
  VW_UnidadeEntidade AS en WITH(NoLock)  
  ON en.ent_id = uni.ent_id  
 WHERE   
  usu.usu_id = @usu_id  
   
 UNION ALL  
   
 SELECT   
  uni.*  
  ,en.*            
 FROM   
  VW_ConPatUsuario AS usu WITH(NoLock)   
 INNER JOIN   
  Unidade AS uni WITH(NoLock)  
  ON uni.ent_id = usu.ent_id   
 INNER JOIN   
  VW_UnidadeEntidade AS en WITH(NoLock)  
  ON en.ent_id = uni.ent_id  
 WHERE   
  usu.usu_id = @usu_id  
  AND uni.uad_id IS NULL   
  AND NOT EXISTS (Select * from dbo.Synonym_SYS_UsuarioGrupoUA_SSO WITH(NoLock) WHERE usu_id = usu.usu_id)    
      
SELECT @@ROWCOUNT   
  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================================  
-- Author:  Aline Dornelas  
-- Create date: 12/08/2010 10:00  
-- Description: Consulta de unidades filtrando por entidade, tipo de UA,   
--    UA (para filtrar as UAs apenas da hierarquia),   
--    nome da UA e código da UA  
-- =========================================================================  
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectBy_All]  
 @funcao INT,  
 @uni_id INT,  
 @ent_id uniqueidentifier,  
 @tua_id uniqueidentifier,  
 @uad_nome VARCHAR(200),  
 @uni_codigoUGE VARCHAR(20),  
 @uad_codigo VARCHAR(20),  
 @completo BIT,  
 @uni_situacao int  
--WITH RECOMPILE  
AS  
BEGIN  
  
 ----- FUNÇÃO GESTORA -----  
 IF(@funcao = 1)  
 BEGIN  
   
  SELECT  
   uad.uni_id  
   , uad.ent_id  
   , uad.uad_id  
   , uad.uni_codigoUGE  
   , uad_codigo  
   , uni_tipo  
   , uni_nome AS uad_nome  
   , CASE u.uni_situacao  
    WHEN 1 THEN 'Ativo'  
    WHEN 2 THEN 'Bloqueado'   
    WHEN 5 THEN 'Municipalizada'       
     END AS uni_situacao  
   -- nome do tipo de unidade administrativa , caso exista.  
   , CASE WHEN uad.uad_id IS NOT NULL  
    THEN (SELECT tua_nome FROM dbo.Synonym_SYS_TipoUnidadeAdministrativa_SSO WITH (NOLOCK) WHERE tua_id = uni_tipo)   
    ELSE ''  
    END AS uni_tiponome  
   -- nome da unidade administrativa superior, caso exista.  
   ,CASE WHEN uad.uad_id IS NULL  
    THEN (SELECT ent_razaoSOcial FROM VW_UnidadeEntidade E WITH (NOLOCK) WHERE E.ent_id = uni_idSuperior)  
    ELSE   
     CASE WHEN uni_idSuperior IS NOT NULl  
      THEN (SELECT uad_nome FROM VW_UnidadeAdministrativa A  WITH (NOLOCK) WHERE A.ent_id = ent_id AND  A.uad_id = uni_idSuperior)  
      ELSE (SELECT ent_razaoSOcial FROM VW_UnidadeEntidade E WITH (NOLOCK) WHERE E.ent_id = uad.ent_id)  
       END   
     END AS uad_nomeSup  
  FROM  
   VW_UnidadeGestora uad WITH (NOLOCK)  
   inner join Unidade u WITH(NOLOCK)  
   ON u.uad_id = uad.uad_id  
     
  WHERE    
   ((@uni_situacao IS NULL AND u.uni_situacao <> 3) OR (u.uni_situacao = @uni_situacao))   
   AND ((@ent_id IS NULL) OR (uad.ent_id = @ent_id))   
   AND ((@tua_id IS NULL) OR (CASE WHEN uad.uad_id IS NOT NULL THEN uni_tipo END = @tua_id))  
   AND ((@uad_nome IS NULL) OR (uni_nome LIKE '%' + @uad_nome + '%'))  
   AND ((@uni_codigoUGE IS NULL) OR (uad.uni_codigoUGE LIKE '%' + @uni_codigoUGE + '%'))  
   AND ((@uad_codigo IS NULL) OR uad_codigo LIKE '%' + @uad_codigo + '%')  
   AND ((@uni_id IS NULL) OR (  
          -- @completo 0 => hierarquia imediata | 1 => hierarquia completa  
          (@completo = 0 AND uad.uni_id IN (SELECT uni_id FROM dbo.FN_GetUnidadesHierarquiaImediata(@uni_id)))  
          OR  
          (@completo = 1 AND uad.uni_id IN (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id)))  
              )  
    )  
   and uad.uad_id is not null  
  ORDER BY   
   uni_nome  
     
  SELECT @@ROWCOUNT   
 END  
   
 ----- FUNÇÃO GUARDA / FUNÇÃO GESTORA -----   
 ELSE  
 BEGIN  
  
 SELECT   
  Unidade.uni_id  
  , Ent.ent_id  
  , UniAdm.uad_id  
  , Unidade.uni_codigoUGE   
  , UniAdm.uad_codigo    
  , TipoUnidade.tua_id AS uni_tipo  
  -- nome do tipo de unidade administrativa , caso exista.  
   , CASE WHEN Unidade.uad_id IS NOT NULL  
    THEN (SELECT tua_nome FROM dbo.Synonym_SYS_TipoUnidadeAdministrativa_SSO WITH (NOLOCK) WHERE tua_id = TipoUnidade.tua_id)   
    ELSE 'Entidade'  
    END AS uni_tiponome  
  -- nome da unidade administrativa superior, caso exista.  
  ,CASE WHEN Unidade.uad_id IS NULL  
   THEN (SELECT ent_razaoSOcial FROM VW_UnidadeEntidade E WITH (NOLOCK) WHERE E.ent_id = Ent.ent_idSuperior)  
   ELSE   
   CASE WHEN UniAdm.uad_idSuperior IS NOT NULL  
     THEN (SELECT uad_nome FROM VW_UnidadeAdministrativa A  WITH (NOLOCK) WHERE A.ent_id = UniAdm.ent_id AND  A.uad_id = UniAdm.uad_idSuperior)  
     ELSE (SELECT ent_razaoSOcial FROM VW_UnidadeEntidade E WITH (NOLOCK) WHERE E.ent_id = UniAdm.ent_id)  
      END   
        
   END AS uad_nomeSup  
  , CASE uni_situacao  
   WHEN 1 THEN 'Ativo'  
   WHEN 2 THEN 'Bloqueado'  
   WHEN 5 THEN 'Municipalizada'     
    END AS uni_situacao  
  , CASE WHEN Unidade.uad_id IS NULL  
     THEN  Ent.ent_razaoSocial  
     ELSE  UniAdm.uad_nome    
        END as uad_nome  
   FROM  
   Unidade WITH (NOLOCK)  
  INNER JOIN UnidadeGuarda WITH (NOLOCK)  
   ON UnidadeGuarda.uni_id = Unidade.uni_id  
  LEFT JOIN VW_UnidadeAdministrativa as UniAdm WITH (NOLOCK)  
   ON Unidade.uad_id = UniAdm.uad_id  
      AND Unidade.ent_id = UniAdm.ent_id  
  LEFT JOIN VW_UnidadeEntidade as Ent WITH (NOLOCK)  
   ON Ent.ent_id = Unidade.ent_id  
     LEFT JOIN dbo.Synonym_SYS_TipoUnidadeAdministrativa_SSO as TipoUnidade WITH (NOLOCK)  
   ON UniAdm.tua_id = TipoUnidade.tua_id   
 WHERE  
  (( @uni_situacao IS NULL AND Unidade.uni_situacao <> 3) OR (uni_situacao = @uni_situacao))  
  AND ((@ent_id IS NULL) OR (Unidade.ent_id = @ent_id))    
  AND ((@tua_id IS NULL) OR (UniAdm.tua_id = @tua_id))  
  AND ((@uad_nome IS NULL) OR (CASE WHEN Unidade.uad_id IS NOT NULL THEN UniAdm.uad_nome ELSE Ent.ent_razaoSocial END) LIKE '%' + @uad_nome + '%')  
  AND ((@uni_codigoUGE IS NULL) OR (Unidade.uni_codigoUGE LIKE '%' + @uni_codigoUGE + '%'))  
  AND ((@uad_codigo IS NULL) OR UniAdm.uad_codigo LIKE '%' + @uad_codigo + '%')  
  AND ((@uni_id IS NULL) OR (  
          -- @completo 0 => hierarquia imediata | 1 => hierarquia completa  
          (@completo = 0 AND Unidade.uni_id IN (SELECT uni_id FROM dbo.FN_GetUnidadesHierarquiaImediata(@uni_id)))  
          OR  
          (@completo = 1 AND Unidade.uni_id IN (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id)))  
                
             )  
      )  
     and UniAdm.uad_id is not null           
 ORDER BY  
  uad_nome  
     
  SELECT @@ROWCOUNT  
     
 END   
       
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectBy_BuscaUaFilhas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[NEW_Unidade_SelectBy_BuscaUaFilhas]  
 @tua_id uniqueidentifier  
 , @ent_id uniqueidentifier  
 , @uad_nome VARCHAR(200)  
 , @uni_codigoUGE VARCHAR(10)  
 , @uad_codigo VARCHAR(20)  
 , @uad_idSuperior uniqueidentifier  
 , @funcao INT  
--WITH RECOMPILE   
AS  
BEGIN  
 SELECT  
  UNI.uni_id  
  , UA.ent_id  
  , ENT.ent_razaoSocial  
  , UA.uad_id  
  , Uni.uni_codigoUGE  
  , UA.uad_codigo  
  , UA.uad_nome  
  , UNI.uni_situacao --busca situacao da tabela do conpat  
  , TUA.tua_id  
  , TUA.tua_nome    
  ,CASE uge_situacao   
   WHEN 1 THEN 'Sim'  
   ELSE 'Não'  
    END AS uge_situacao  
 FROM  
  Unidade UNI WITH (NOLOCK)  
  INNER JOIN UnidadeGuarda AS UG WITH (NOLOCK)  
   ON UNI.uni_id = UG.uni_id  
  LEFT JOIN UnidadeGestora AS UGES WITH (NOLOCK)  
   ON UNI.uni_id = UGES.uni_id AND UGES.uge_situacao = 1  
  INNER JOIN dbo.Synonym_SYS_UnidadeAdministrativa_SSO AS UA WITH (NOLOCK)  
   ON UNI.uad_id = UA.uad_id  
  INNER JOIN dbo.Synonym_SYS_Entidade_SSO AS ENT WITH (NOLOCK)  
   ON ENT.ent_id = UNI.ent_id  
  INNER JOIN dbo.Synonym_SYS_TipoUnidadeAdministrativa_SSO AS TUA WITH (NOLOCK)  
   ON UA.tua_id = TUA.tua_id   
 WHERE  
  UNI.uni_situacao <> 3    
  AND ((@uad_idSuperior IS NULL AND UA.uad_idSuperior is null) OR (UA.uad_idSuperior = @uad_idSuperior))   
  AND ((@tua_id IS NULL) OR (UA.tua_id = @tua_id))  
  AND ((@ent_id IS NULL) OR (UA.ent_id = @ent_id))  
  AND ((@uad_nome IS NULL) OR (UA.uad_nome LIKE '%' + @uad_nome + '%'))  
  AND ((@uni_codigoUGE IS NULL) OR (UNI.uni_codigoUGE LIKE '%' + @uni_codigoUGE + '%'))    
  AND ((@uad_codigo IS NULL) OR (UA.uad_codigo LIKE '%' + @uad_codigo + '%'))    
  AND (  
    (@funcao = 0)  
    OR   
    (@funcao = 1 AND EXISTS (SELECT * FROM UnidadeGestora AS UGESAUX WITH (NOLOCK) WHERE UNI.uni_id = UGESAUX.uni_id AND UGESAUX.uge_situacao = 1))  
    OR  
    (@funcao = 2 AND NOT EXISTS (SELECT * FROM UnidadeGestora AS UGESAUX WITH (NOLOCK) WHERE UNI.uni_id = UGESAUX.uni_id AND UGESAUX.uge_situacao = 1))  
   )  
 ORDER BY   
  UA.uad_nome  
    
  SELECT @@ROWCOUNT  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectBy_BuscaUaFilhasImediatas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  JORGE FREITAS  
-- Create date: 18/10/2010  
-- Description: SELECIONA UNIDADES E DETALHES DE CADA UNIDADE  
--    PELA HIERARQUIA IMEDIATA INFERIOR, nao gestoras  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectBy_BuscaUaFilhasImediatas]  
 @uni_id int  
 ,@nome varchar(200)  
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT   
  fn1.uni_id ,   
  CASE  WHEN  fn1.uad_id is null  
      THEN en1.ent_codigo  
   ELSE ua1.uad_codigo  
    END AS codigo,  
        
  CASE WHEN fn1.uad_id is null   
      THEN en1.ent_razaoSocial   
      ELSE ua1.uad_nome   
  END AS nome,  
    
  CASE WHEN fn1.uad_id is null   
      THEN en1.ent_sigla   
   ELSE ua1.uad_sigla   
    END AS sigla  
    , fn1.uni_situacao  
 FROM dbo.FN_GetUnidadesHierarquiaImediata(@uni_id) fn1   
 inner join   
  VW_UnidadeEntidade AS en1 with (nolock) on  
  en1.ent_id = fn1.ent_id   
 left join   
  VW_UnidadeAdministrativa AS ua1 with (nolock) on   
  (ua1.ent_id = fn1.ent_id and ua1.uad_id = fn1.uad_id)  
 where   
  (fn1.uni_situacao = 1 or fn1.uni_situacao = 5) and  
  (fn1.uad_id is null or ua1.uad_id is not null) and   
  (@nome is null or   
   (en1.ent_razaoSocial like '%' + @nome + '%' and fn1.uad_id is null) or  
   (ua1.uad_nome like '%' + @nome + '%' and fn1.uad_id is not null))  
  AND  
  (fn1.uni_id = @uni_id OR fn1.uni_id NOT IN (SELECT uni_id FROM dbo.UnidadeGestora with (nolock)))  
 order by nome  
    
 select @@ROWCOUNT  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectBy_BuscaUaFilhasImediatasEntidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Fabio Nazima  
  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectBy_BuscaUaFilhasImediatasEntidade]  
 @uad_id uniqueidentifier  
--WITH RECOMPILE  
AS  
BEGIN  
  
 SELECT    
  VW_UnidadeGestora.uni_id  
 FROM   
  VW_UnidadeGestora   with (nolock)
 INNER JOIN   
  VW_UnidadeAdministrativa  with (nolock)
  on  VW_UnidadeGestora.ent_id = VW_UnidadeAdministrativa.ent_id   
  AND VW_UnidadeGestora.uad_id= VW_UnidadeAdministrativa.uad_id  
 where   
  VW_UnidadeAdministrativa.uad_idSuperior=@uad_id  
  
   
 SELECT @@ROWCOUNT  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectBy_BuscaUaFilhasImediatasGestoras]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Debora Cavaglieri  
-- Create date: 11/11/2010  
-- Description: SELECIONA UNIDADES E DETALHES DE CADA UNIDADE  
--    PELA HIERARQUIA IMEDIATA INFERIOR  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectBy_BuscaUaFilhasImediatasGestoras]  
 @uni_id int  
 ,@nome varchar(200)  
   
--WITH RECOMPILE  
AS  
BEGIN  
  
WITH UniSelecionada AS(  
 SELECT   
  *  
 FROM   
  Unidade with(NoLock)  
 WHERE   
  Unidade.uni_id = @uni_id   
  
)   
--Caso seja Entidade  
 SELECT   
  Uni.uni_id ,   
  CASE  WHEN  Uni.uad_id is null  
      THEN en1.ent_codigo  
   ELSE ua1.uad_codigo  
    END AS codigo,  
        
  CASE WHEN Uni.uad_id is null   
      THEN en1.ent_razaoSocial   
      ELSE ua1.uad_nome   
  END AS nome,  
    
  CASE WHEN Uni.uad_id is null   
      THEN en1.ent_sigla   
   ELSE ua1.uad_sigla   
    END AS sigla,  
    
  CASE WHEN Uni.uad_id is null   
      THEN ISNULL(en1.ent_codigo + ' - ', '') + en1.ent_razaoSocial   
      ELSE ISNULL(ua1.uad_codigo + ' - ', '') + ua1.uad_nome   
  END AS codNome  
 FROM   
  UniSelecionada  
 INNER JOIN   
  Unidade as Uni with(NoLock)   
  ON UniSelecionada.ent_id = Uni.ent_id     
 LEFT JOIN   
  VW_UnidadeEntidade AS en1  with (nolock) 
  ON en1.ent_id = Uni.ent_id   
  AND Uni.uad_id IS NULL   
  AND en1.ent_idSuperior = UniSelecionada.ent_id     
 INNER JOIN   
  VW_UnidadeAdministrativa AS ua1  with (nolock)  
  on(ua1.ent_id = Uni.ent_id   
     and ua1.uad_id = Uni.uad_id)  
  AND ua1.ent_id = UniSelecionada.ent_id   
  AND ua1.uad_idSuperior IS NULL  
 WHERE   
  Uni.uni_situacao = 1   
  AND UniSelecionada.uad_id IS NULL  
  AND( @nome is null    
   or(en1.ent_razaoSocial like '%' + @nome + '%' and Uni.uad_id is null  )   
   or(ua1.uad_nome like '%' + @nome + '%' and Uni.uad_id is not null  )   
   )  
   
 UNION ALL  
 --Caso seja Unidade Adminstrativa  
 SELECT   
  Uni.uni_id ,   
     ua1.uad_codigo AS codigo,  
  ua1.uad_nome AS nome,  
  ua1.uad_sigla AS sigla,    
  ISNULL(ua1.uad_codigo + ' - ', '') + ua1.uad_nome AS codNome  
    
 FROM   
  UniSelecionada  
 INNER JOIN   
  Unidade as Uni with(NoLock)   
  ON UniSelecionada.ent_id = Uni.ent_id       
 INNER JOIN   
  VW_UnidadeAdministrativa AS ua1    with (nolock)
  on(ua1.ent_id = Uni.ent_id   
     and ua1.uad_id = Uni.uad_id)  
  AND ua1.uad_idSuperior = UniSelecionada.uad_id    
 where   
  Uni.uni_situacao IN (1,5 )  
  AND NOT UniSelecionada.uad_id IS NULL    
  AND( @nome is null    
   or(ua1.uad_nome like '%' + @nome + '%' and Uni.uad_id is not null  )   
   )  
     
 UNION ALL   
 --Retornar a propria Unidade  
 SELECT   
  UniSelecionada.uni_id ,   
  CASE  WHEN  UniSelecionada.uad_id is null  
      THEN en1.ent_codigo  
   ELSE ua1.uad_codigo  
    END AS codigo,  
        
  CASE WHEN UniSelecionada.uad_id is null   
      THEN en1.ent_razaoSocial   
      ELSE ua1.uad_nome   
  END AS nome,  
    
  CASE WHEN UniSelecionada.uad_id is null   
      THEN en1.ent_sigla   
   ELSE ua1.uad_sigla   
    END AS sigla,  
      
 CASE WHEN UniSelecionada.uad_id is null   
      THEN ISNULL(en1.ent_codigo + ' - ', '')  + en1.ent_razaoSocial   
      ELSE ISNULL(ua1.uad_codigo + ' - ', '')  + ua1.uad_nome   
  END AS codNome  
 FROM   
  UniSelecionada  
 LEFT JOIN   
  VW_UnidadeEntidade AS en1   with (nolock)
  ON en1.ent_id = UniSelecionada.ent_id   
  AND UniSelecionada.uad_id IS NULL  
 LEFT JOIN   
  VW_UnidadeAdministrativa AS ua1    with (nolock)
  on(ua1.ent_id = UniSelecionada.ent_id   
     and ua1.uad_id = UniSelecionada.uad_id)   
 ORDER BY Nome  
   
 SELECT @@ROWCOUNT  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectBy_BuscaUaFilhasUni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectBy_BuscaUaFilhasUni_id]  
 @uni_id int  
--WITH RECOMPILE   
AS  
BEGIN  
 SELECT  
  uni_id  
 FROM  
  dbo.FN_GetUnidadeEFilhas(@uni_id)   
 where  
  uni_id <> @uni_id   
  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectBy_GestoraOrGuarda]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectBy_GestoraOrGuarda]
	@funcao INT,
	@uni_id INT
	
AS
BEGIN
	----- FUNÇÃO GESTORA -----
	IF(@funcao = 1)
	BEGIN
	
		SELECT 
			* 
		FROM 
			UnidadeGestora 
		WHERE 
			uni_id = @uni_id
		and uge_situacao not in(3)
		
		SELECT @@ROWCOUNT	
	END
	----- FUNÇÃO GUARDA ---
--
	ELSE IF(@funcao = 2)
	BEGIN
	
		SELECT 
			* 
		FROM 
			UnidadeGuarda 
		WHERE 
			uni_id = @uni_id
		AND NOT EXISTS (SELECT * FROM UnidadeGestora WHERE uni_id = @uni_id)
	
		SELECT @@ROWCOUNT	
	END
END



GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectBy_internet]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================================
-- Author:		Aline Dornelas
-- Create date: 12/08/2010 10:00
-- Description:	Consulta de unidades filtrando por entidade, tipo de UA, 
--				UA do usuário logado (para filtrar 
--				as UAs apenas da hierarquia da UA do usuário logado), 
--				nome da UA e código da UA
-- =========================================================================
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectBy_internet]
	@funcao INT,
	@uni_id INT,
	@ent_id uniqueidentifier,
	@tua_id uniqueidentifier,
	@uad_nome VARCHAR(200),
	@uad_codigo VARCHAR(20),
	@uni_internet bit
AS
BEGIN
	----- FUNÇÃO GESTORA -----
	IF(@funcao=1)
	BEGIN
		SELECT
			U.uni_id
			, Ent.ent_id
			, Ent.ent_razaoSocial
			, UniAdm.uad_id
			, UniAdm.uad_codigo
			, UniAdm.uad_nome
			, TipoUnidade.tua_id
			, TipoUnidade.tua_nome		
			, (SELECT uad_nome FROM VW_UnidadeAdministrativa A  WITH (NOLOCK) WHERE A.ent_id = UniAdm.ent_id AND  A.uad_id = UniAdm.uad_idSuperior) AS uad_nomeSup
			, CASE U.uni_situacao
				WHEN 1 THEN 'Inativo'
				WHEN 2 THEN 'Ativo'			
			  END AS uni_situacao
		FROM
			Unidade U WITH (NOLOCK)
		INNER JOIN UnidadeGestora WITH (NOLOCK)
			ON UnidadeGestora.uni_id = U.uni_id
		INNER JOIN VW_UnidadeAdministrativa as UniAdm WITH (NOLOCK)
			ON U.uad_id = UniAdm.uad_id
			   AND U.ent_id = UniAdm.ent_id
		INNER JOIN VW_UnidadeEntidade as Ent WITH (NOLOCK)
			ON Ent.ent_id = U.ent_id
		INNER JOIN dbo.Synonym_SYS_TipoUnidadeAdministrativa_SSO as TipoUnidade WITH (NOLOCK)
			ON UniAdm.tua_id = TipoUnidade.tua_id	
		WHERE
			U.uni_situacao <> 3		
			AND ((@tua_id IS NULL) OR (UniAdm.tua_id = @tua_id))
			AND ((@ent_id IS NULL) OR (UniAdm.ent_id = @ent_id))
			AND ((@uad_nome IS NULL) OR (UniAdm.uad_nome LIKE '%' + @uad_nome + '%'))
			AND ((@uad_codigo IS NULL) OR (UniAdm.uad_codigo LIKE '%' + @uad_codigo + '%'))
			AND ((@uni_internet IS NULL) OR (uni_internet = @uni_internet))
			AND ((@uni_id IS NULL) OR (U.uni_id  IN (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id))))
			
		ORDER BY 
			UniAdm.uad_nome
			
		SELECT @@ROWCOUNT	
	END
	
	----- FUNÇÃO GUARDA ----- 
	IF (@funcao=2)
	BEGIN
	
		SELECT
			U.uni_id
			, Ent.ent_id
			, Ent.ent_razaoSocial
			, UniAdm.uad_id
			, UniAdm.uad_codigo
			, UniAdm.uad_nome
			, TipoUnidade.tua_id
			, TipoUnidade.tua_nome		
			, (SELECT uad_nome FROM VW_UnidadeAdministrativa A  WITH (NOLOCK) WHERE A.ent_id = UniAdm.ent_id AND  A.uad_id = UniAdm.uad_idSuperior) AS uad_nomeSup
			, CASE U.uni_situacao
				WHEN 1 THEN 'Inativo'
				WHEN 2 THEN 'Ativo'			
			  END AS uni_situacao
		FROM
			Unidade U WITH (NOLOCK)
		INNER JOIN UnidadeGuarda WITH (NOLOCK)
			ON UnidadeGuarda.uni_id = U.uni_id
		INNER JOIN VW_UnidadeAdministrativa as UniAdm WITH (NOLOCK)
			ON U.uad_id = UniAdm.uad_id
			   AND U.ent_id = UniAdm.ent_id
		INNER JOIN VW_UnidadeEntidade as Ent WITH (NOLOCK)
			ON Ent.ent_id = U.ent_id
		INNER JOIN dbo.Synonym_SYS_TipoUnidadeAdministrativa_SSO as TipoUnidade WITH (NOLOCK)
			ON UniAdm.tua_id = TipoUnidade.tua_id	
		WHERE
			U.uni_situacao <> 3		
			AND ((@tua_id IS NULL) OR (UniAdm.tua_id = @tua_id))
			AND ((@ent_id IS NULL) OR (UniAdm.ent_id = @ent_id))
			AND ((@uni_internet IS NULL) OR (uni_internet = @uni_internet))
			AND ((@uad_nome IS NULL) OR (UniAdm.uad_nome LIKE '%' + @uad_nome + '%'))
			AND ((@uad_codigo IS NULL) OR (UniAdm.uad_codigo LIKE '%' + @uad_codigo + '%'))
			AND ((@uni_id IS NULL) OR (U.uni_id IN (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id))))
		ORDER BY 
			UniAdm.uad_nome
			
		SELECT @@ROWCOUNT
			
	END
	
	-- TODAS (GESTORA E GUARDA)
	IF (@funcao IS NULL)
	BEGIN
		SELECT
			U.uni_id
			, Ent.ent_id
			, Ent.ent_razaoSocial
			, UniAdm.uad_id
			, UniAdm.uad_codigo
			, UniAdm.uad_nome
			, TipoUnidade.tua_id
			, TipoUnidade.tua_nome		
			, (SELECT uad_nome FROM VW_UnidadeAdministrativa A  WITH (NOLOCK) WHERE A.ent_id = UniAdm.ent_id AND  A.uad_id = UniAdm.uad_idSuperior) AS uad_nomeSup
			, CASE U.uni_situacao
				WHEN 1 THEN 'Inativo'
				WHEN 2 THEN 'Ativo'			
			  END AS uad_situacao
		FROM
			Unidade U WITH (NOLOCK)
		INNER JOIN VW_UnidadeAdministrativa as UniAdm WITH (NOLOCK)
			ON U.uad_id = UniAdm.uad_id
			   AND U.ent_id = UniAdm.ent_id
		INNER JOIN VW_UnidadeEntidade as Ent WITH (NOLOCK)
			ON Ent.ent_id = U.ent_id
		INNER JOIN dbo.Synonym_SYS_TipoUnidadeAdministrativa_SSO as TipoUnidade WITH (NOLOCK)
			ON UniAdm.tua_id = TipoUnidade.tua_id	
		WHERE
			U.uni_situacao <> 3		
			AND ((@tua_id IS NULL) OR (UniAdm.tua_id = @tua_id))
			AND ((@ent_id IS NULL) OR (UniAdm.ent_id = @ent_id))
			AND ((@uni_internet IS NULL) OR (uni_internet = @uni_internet))
			AND ((@uad_nome IS NULL) OR (UniAdm.uad_nome LIKE '%' + @uad_nome + '%'))
			AND ((@uad_codigo IS NULL) OR (UniAdm.uad_codigo LIKE '%' + @uad_codigo + '%'))
			AND ((@uni_id IS NULL) OR (U.uni_id IN (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id))))
		ORDER BY 
			UniAdm.uad_nome
			
		SELECT @@ROWCOUNT	
	END		
					
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectBy_uadId]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Fabio Akira >
-- Create date: <27/08/2010>
-- obs: Retorna a unidade através do UAD_id fornecido
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectBy_uadId]
@uad_id uniqueidentifier
AS
BEGIN
	SELECT 
		Unidade.uni_id 	
	FROM 
		Unidade  with(NoLock)
	WHERE Unidade.uad_id = @uad_id

	UNION ALL
	
	SELECT 
		Unidade.uni_id 	
	FROM 
		Unidade  with(NoLock)
	WHERE 
		Unidade.ent_id = @uad_id
		AND Unidade.uad_id IS NULL
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectBy_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectBy_uni_id]
	@uni_id INT
AS
BEGIN
	
	SELECT
		UA.uni_id, 
		CASE WHEN UA.uad_id IS NOT NULL
		  THEN UA.uad_nome 
		  ELSE  ENT.ent_razaoSocial  
 	    END AS uni_nome,
 	     	    
 	    CASE  WHEN  UA.uad_id is null
		    THEN ENT.ent_codigo
			ELSE UA.uad_codigo
		  END AS codigo
		  
	FROM  VW_UnidadeAdministrativa AS UA WITH (NOLOCK) 
		INNER JOIN Unidade uni WITH(NOLOCK)
			ON UA.uad_id = uni.uad_id
		LEFT JOIN VW_UnidadeEntidade AS ENT WITH (NOLOCK)
			ON ENT.ent_id = UA.ent_id
	WHERE
		uni.uni_situacao <> 3
		AND (UA.uni_id = @uni_id OR @uni_id IS NULL)	
	ORDER BY
		uni_nome
		
END


GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectByNome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Natália Nacamura
-- Create date: 18/03/2013
-- Description:	Retorna as unidades administrativas cadastradas 
--				com mesma descrição, para não cadastrar nova unidade repetida
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectByNome]
	@uad_nome VARCHAR(200),
	@uad_id UNIQUEIDENTIFIER
AS
BEGIN
	
	SELECT Uni.uni_id, Uni.ent_id, Uni.uad_id, Uni.uni_codigoUO, Uni.uni_codigoUGE
		, Uni.uni_coletor, Uni.uni_justificativaColetor, Uni.uni_internet, Uni.uni_UA
		, Uni.uni_situacao, Uni.uni_dataCriacao, Uni.uni_dateAlteracao
	FROM Unidade AS Uni WITH(NOLOCK)
	INNER JOIN VW_UnidadeAdministrativa AS CoreUad WITH(NOLOCK) 
		ON CoreUad.uad_id = Uni.uad_id
	WHERE
		Uni.uni_situacao <> 3
		AND CoreUad.uad_nome = @uad_nome
		AND (@uad_id IS NULL OR Uni.uad_id <> @uad_id)
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectbyUad_cod]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[NEW_Unidade_SelectbyUad_cod]
	@uad_cod varchar(max)

AS
BEGIN
	
		SELECT
			*
		FROM 
			dbo.VW_UnidadeGestora
		WHERE
			uad_codigo=@uad_cod
					
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectNome]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<JORGE FREITAS>
-- Create date: <17/08/2010>
-- Description:	<Seleção de UNIDADE uni_id + uni_nome >
-- obs: O uni_nome pode ser da SYS_UnidadeAdministrativa caso uad_id nao seja nulo
--      ou da [SYS_Entidade] caso uad_id nulo e ent_id nao nulo 
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectNome] 
AS
BEGIN
	SELECT 
	  UN1.uni_id 	
	  ,(CASE WHEN CoreUad.uad_nome IS NOT null 
		  THEN CoreUad.uad_nome 
		  ELSE  CoreEnt.ent_razaoSocial  
 	      END) as uni_nome
	FROM Unidade AS UN1 with(NoLock)
		left join VW_UnidadeAdministrativa AS CoreUad with(NoLock) 
			ON CoreUad.uad_id = UN1.uad_id 			
		left join VW_UnidadeEntidade AS CoreEnt with(NoLock)
			ON CoreEnt.ent_id = UN1.ent_id
	Order by uni_nome 	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectNomebyUniIDRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================================
-- Author:		Fabio N
-- Create date: 12/08/2010 10:00
-- Description:Seleciona o nome da unidade pelo uni_id
-- =========================================================================
create PROCEDURE [dbo].[NEW_Unidade_SelectNomebyUniIDRS]
	@uni_id INT


AS
BEGIN
select dbo.FN_GetUniNome(@uni_id) as nome
					
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectNomebyUniIDSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================================
-- Author:		Fabio N
-- Create date: 12/08/2010 10:00
-- Description:Seleciona o nome da unidade pelo uni_id
-- =========================================================================
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectNomebyUniIDSP]
	@uni_id INT


AS
BEGIN
select dbo.FN_GetUniNome(@uni_id) as nome
					
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectUnidade]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Christian Freitas
-- Create date: 26/07/2013
-- Description:	Seleciona todos as unidades ativas para modal de consulta
-- =============================================
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectUnidade]
	
	@uni_id INT,
	@tua_id uniqueidentifier,
	@uad_nome VARCHAR(200),
	@uni_codigoUGE VARCHAR(20),
	@uad_codigo VARCHAR(20),
	@uni_situacao int
	
AS
BEGIN
	
	
	SELECT 
		uad.uni_id, 
		uad.ent_id, 
		uad.uad_id, 
		vua.uad_codigo,
		uad.uni_codigoUGE,
		cua.uad_nome,
		-- Nome da unidade administrativa superior
		(SELECT cua2.uad_nome
			FROM Synonym_SYS_UnidadeAdministrativa_SSO  AS cua2
			WHERE cua2.uad_id = cua.uad_id) as uad_nomeSup, 
		-- Nome da tipo de unidade administrativa
		tua.tua_nome as uni_tiponome,
		uad.uni_situacao	
	FROM 
		Unidade uad	WITH(NOLOCK)
		LEFT JOIN Synonym_SYS_UnidadeAdministrativa_SSO as cua WITH(NOLOCK)
			ON cua.uad_id =  uad.uad_id
		LEFT JOIN Synonym_SYS_TipoUnidadeAdministrativa_SSO AS tua WITH(NOLOCK)
			ON tua.tua_id = cua.tua_id
		LEFT JOIN VW_UnidadeAdministrativa vua WITH(NOLOCK)
			ON uad.uad_id = vua.uad_id
	WHERE 
		uad.uni_situacao <> 3 AND
		@uni_id IS NULL OR uad.uni_id = @uni_id AND
		@tua_id IS NULL OR tua.tua_id = @tua_id AND
		@uad_nome IS NULL OR cua.uad_nome LIKE '%'+@uad_nome+'%' AND
		@uni_codigoUGE IS NULL OR uad.uni_codigoUGE = @uni_codigoUGE AND
		@uad_codigo IS NULL OR vua.uad_codigo = @uad_codigo AND
		@uni_situacao IS NULL OR uad.uni_situacao = @uni_situacao
	
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_SelectUnidadeGestoraouGuarda]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Debora Cavaglieri  
-- Create date: 08/11/2010  
-- Description: 1-Gestora e Guarda   
--    2-Gestora (com código UGE)  
--    3-Guarda  
-- =============================================  
  
  
CREATE PROCEDURE [dbo].[NEW_Unidade_SelectUnidadeGestoraouGuarda]  
  @tipoUnidade int  
 ,@uni_id int  
--WITH RECOMPILE  
AS  
BEGIN  
  
 if(@tipoUnidade=1)  
  begin  
   SELECT   
    UniAdm.uni_id,  
    UniAdm.ent_id,  
    UniAdm.uad_nome as [nome]  
   FROM   
    VW_UnidadeAdministrativa as UniAdm  WITH(NOLOCK)  
    INNER JOIN Unidade uni WITH(NOLOCK)  
    ON uni.uad_id = UniAdm.uad_id  
       
   where   
    uni.uni_situacao=1  
    AND (@uni_id IS NULL OR (UniAdm.uni_id IN (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id))))  
   order by nome  
  
   end  
    
 if(@tipoUnidade=2)  
  
  begin  
   SELECT   
    UniAdm.uni_id,  
    UniAdm.ent_id,  
    UniAdm.uni_nome as nome  
   FROM   
    VW_UnidadeGestora as UniAdm  WITH(NOLOCK)  
    INNER JOIN Unidade uni WITH(NOLOCK)  
    ON uni.uad_id = UniAdm.uad_id  
      
   where   
    uni.uni_situacao=1  
    AND NOT UniAdm.uni_codigoUGE IS NULL   
    AND (@uni_id IS NULL OR (UniAdm.uni_id IN (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id))))  
   order by nome  
   end  
    
  if(@tipoUnidade=3)  
  begin  
   SELECT   
    UniAdm.uni_id,  
    UniAdm.ent_id,  
    UniAdm.uad_nome as [nome]  
   FROM   
    VW_UnidadeAdministrativa as UniAdm  WITH(NOLOCK)  
   inner join UnidadeGuarda with(nolock)  
    on UnidadeGuarda.uni_id = UniAdm.uni_id  
    INNER JOIN Unidade uni WITH(NOLOCK)  
    ON uni.uad_id = UniAdm.uad_id  
      
   where   
    uni.uni_situacao=1  
    AND (@uni_id IS NULL OR (UniAdm.uni_id IN (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhas(@uni_id))))  
   order by nome  
   end  
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_Unidade_VerificaUGEExistente]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================================
-- Author:		Gabriel Malinosqui
-- Create date: 15/04/2014
-- Description:	Retorna todas as Unidades filtradas pela UGE
-- ===========================================================================

CREATE PROCEDURE [dbo].[NEW_Unidade_VerificaUGEExistente]
	@UGE varchar(10)
	
AS
BEGIN

	SELECT 
		uni_codigoUGE FROM Unidade WITH (nolock) 
	WHERE 
		uni_codigoUGE = @UGE
		OR uni_codigoUGE like '%' + @UGE   
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_UnidadeGestora_Select_codigoUGE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_UnidadeGestora_Select_codigoUGE]  
@uni_id INT  
AS  

BEGIN  
	select   
		UA.uni_codigoUGE  
		,UG.uni_id  
		,UG.uge_ultimaImportacao    
	from 
		UnidadeGestora				UG With(NoLock)  
		inner join VW_UnidadeAdministrativa	UA with (nolock)
		on UA.uni_id = UG.uni_id  
	where   
		UG.uge_situacao = 1  
		AND UG.uge_importaSIAFEM = 1  
		AND (@uni_id IS NULL OR UA.uni_id = @uni_id)  
    
 SELECT @@ROWCOUNT    
END 


GO
/****** Object:  StoredProcedure [dbo].[NEW_UnidadeGestora_SelectBy_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Jorge Freitas >  
-- Create date: <03/09/2010>  
-- Description: <Retorna as unidades gestoras superiores  >  
-- =============================================  
CREATE PROCEDURE [dbo].[NEW_UnidadeGestora_SelectBy_uni_id]  
 @uni_id int  
--WITH RECOMPILE  
AS  
BEGIN  
 SELECT    
  uni_id 
		, ent_id 
		, uad_id 
		, uni_idgestora 
		, uni_nomegestora 
		, ent_gestora 
		, uad_gestora 
		, uad_superior 
		, tua_id   
 FROM dbo.FN_GetUnidadesSuperiores(@uni_id )  
   
 SELECT @@ROWCOUNT  
   
END  
GO
/****** Object:  StoredProcedure [dbo].[NEW_UnidadeGestora_SelectBy_UnidadeGuarda]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[NEW_UnidadeGestora_SelectBy_UnidadeGuarda]  
 @uni_id int  
--WITH RECOMPILE  
AS  
BEGIN  
  
 SELECT  
  UAD.uni_id  
  , UAD.uad_id  
  , UAD.uad_nome  
 FROM   
  --Unidade UNI WITH(NOLOCK)  
 --INNER JOIN  
  VW_UnidadeAdministrativa UAD WITH(NOLOCK)  
  --ON UNI.ent_id = UAD.ent_id AND UNI.uad_id = UAD.uad_id    
 WHERE  
  UAD.uni_id = (  
     CASE WHEN @uni_id IN (SELECT uni_id FROM UnidadeGestora  WITH(NOLOCK) where uge_situacao not in (3))  
     THEN    @uni_id  
     ELSE (   
       SELECT   
        UNI.uni_id  
       FROM   
        Unidade UNI    WITH(NOLOCK) 
       INNER JOIN   
        UnidadeGestora  UGE   WITH(NOLOCK) 
        ON UNI.uni_id = UGE.uni_id  
       WHERE   
        UNI.uad_id = (  
            SELECT   
             UAD.uad_idSuperior  
            FROM  
             VW_UnidadeAdministrativa UAD WITH(NOLOCK)  
            WHERE   
             UAD.uni_id = @uni_id  
             )    
         )  
     END)  
END 


GO
/****** Object:  StoredProcedure [dbo].[NEW_UpdateBplLogBybpl_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Wellington Santana
-- Create date: 11/07/2014
-- Description:	da um Update no campo bpl_log da tabela BemPatrimonialLegado
-- =============================================
CREATE PROCEDURE [dbo].[NEW_UpdateBplLogBybpl_id]
	@bpl_id int
AS
BEGIN
	UPDATE 
		BemPatrimonialLegado 
	SET 
		bpl_log = null 
		
	WHERE
		 bpl_id = @bpl_id
	
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Vinculo_GrupoBens_SelectBy_All]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================
-- Author:		Wellington Santana
-- Create date: 25/02/2014
-- Description:	Adicionado ORDER BY grp_descricao asc
-- =========================================================
CREATE PROCEDURE [dbo].[NEW_Vinculo_GrupoBens_SelectBy_All]

@ceg_cod_especie varchar(50)
	
AS
BEGIN
	SELECT 
		grp.grp_id		
		,grp_descricao
		,grp_nome
		,grp_situacao
		,grp_dataCriacao
		,grp_dataAlteracao
		,ceg.ceg_codigo_especie		

	FROM 
		GrupoBens grp WITH(NOLOCK)
		inner join Cod_Especie_GrupoBens ceg with(nolock)
		on ceg.grp_id = grp.grp_id
		and ceg.ceg_situacao = 1
		
	WHERE
		@ceg_cod_especie is null or ceg.ceg_codigo_especie = @ceg_cod_especie
		
		ORDER BY grp_descricao asc
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_Vinculo_GrupoBens_SelectBy_Cod_Especie]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =========================================================
-- Author:		Gabriel Malinosqui
-- Create date: 07/04/2014
-- Description:	Traz vinculos ativos
-- =========================================================
CREATE PROCEDURE [dbo].[NEW_Vinculo_GrupoBens_SelectBy_Cod_Especie]

@ceg_cod_especie varchar(50)
	
AS
BEGIN
	SELECT 
		grp.grp_id		
		,grp_descricao
		,grp_nome
		,grp_situacao
		,grp_dataCriacao
		,grp_dataAlteracao
		,ceg.ceg_codigo_especie		

	FROM 
		GrupoBens grp WITH(NOLOCK)
		inner join Cod_Especie_GrupoBens ceg with(nolock)
		on ceg.grp_id = grp.grp_id
		and ceg.ceg_situacao = 1
		
	WHERE
		@ceg_cod_especie is null or ceg.ceg_codigo_especie = @ceg_cod_especie
		AND grp_situacao = 1
		
		ORDER BY grp_descricao asc
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_WorkflowsAbertosFilhasGuardas]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext NEW_WorkflowsAbertosFilhasGuardassp
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================
-- Author:		Henrique Aparecido
-- Create date: 09/04/2015
-- Description:	Retorna todos os workflows abertos--				
	-- 1           Impressão de Etiqueta Patrimonial 
	-- 2           Reimpressão de Etiqueta Patrimonial 
	-- 3           Envio de Bens  
	-- 4           Envio de Bens em Remessa 
-- ===============================================
--  exec dbo.NEW_WorkflowsAbertosFilhasGuardas 0,3 
CREATE PROCEDURE [dbo].[NEW_WorkflowsAbertosFilhasGuardas]
	@uni_id INT
   ,@wrk_id INT 	
AS
BEGIn

if @uni_id != 0
begin
	SELECT 
		  dbo.FN_GetUniNome(bi.bit_uniGestora) AS nomeGestora
		, dbo.FN_GetUniNome(bi.bit_uniGuarda) AS nomeUnidade		
		, stp.stp_nome AS nomeWorkflow
		, COUNT (pw.wrk_nome) as qtd
		
	FROM PatrimonioWfStatus pws WITH(NOLOCK)
	INNER JOIN PatrimonioWorkflow pw 
		ON pws.wrk_id = pw.wrk_id
		
	INNER JOIN 
BemItemWfStatus biws WITH(NOLOCK)
		ON biws.wrk_id = pw.wrk_id
		and biws.stp_id=pws.stp_id
		
	INNER JOIN StatusPatrimonio stp WITH(NOLOCK)
		ON 	stp.stp_id = biws.stp_id	
		
	INNER JOIN BemItem bi WITH(NOLOCK)
		ON (biws.bit_id = bi.bit_id
		and biws.bem_id = bi.bem_id)
		
	INNER JOIN dbo.BemItemWorkflow bwf WITH(NOLOCK)
		ON bwf.bem_id = bi.bem_id
		AND bwf.bit_id = bi.bit_id
		AND bwf.biw_id = biws.biw_id
		AND bwf.wrk_id = biws.wrk_id
	
	WHERE 		
		  biws.bws_situacao = 1
		  AND EXISTS (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhasImediatasGestoras(@uni_id) where uni_id = bi.bit_uniGuarda)		
		  AND (@wrk_id IS NULL OR pws.wrk_id = @wrk_id)
		  AND bwf.biw_situacao = 1
	      
	GROUP BY
	      bi.bit_uniGestora
		, bi.bit_uniGuarda
		, stp.stp_nome
		
	ORDER BY
		  nomeGestora
		, nomeUnidade ASC
		, bi.bit_uniGuarda ASC
end
else
begin
	SELECT 
		  dbo.FN_GetUniNome(bi.bit_uniGestora) AS nomeGestora
		, dbo.FN_GetUniNome(bi.bit_uniGuarda) AS nomeUnidade		
		, stp.stp_nome AS nomeWorkflow
		, COUNT (pw.wrk_nome) as qtd
		
	FROM PatrimonioWfStatus pws WITH(NOLOCK)
	INNER JOIN PatrimonioWorkflow pw 
		ON pws.wrk_id = pw.wrk_id
		
	INNER JOIN 
BemItemWfStatus biws WITH(NOLOCK)
		ON biws.wrk_id = pw.wrk_id
		and biws.stp_id=pws.stp_id
		
	INNER JOIN StatusPatrimonio stp WITH(NOLOCK)
		ON 	stp.stp_id = biws.stp_id	
		
	INNER JOIN BemItem bi WITH(NOLOCK)
		ON (biws.bit_id = bi.bit_id
		and biws.bem_id = bi.bem_id)
		
	INNER JOIN dbo.BemItemWorkflow bwf WITH(NOLOCK)
		ON bwf.bem_id = bi.bem_id
		AND bwf.bit_id = bi.bit_id
		AND bwf.biw_id = biws.biw_id
		AND bwf.wrk_id = biws.wrk_id
	
	WHERE 		
		  biws.bws_situacao = 1		 
		-- and EXISTS (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhasImediatasGestoras(bi.bit_uniGestora) where uni_id = bi.bit_uniGuarda)
		  AND (@wrk_id IS NULL OR pws.wrk_id = @wrk_id)
		  AND bwf.biw_situacao = 1
	      
	GROUP BY
	      bi.bit_uniGestora
		, bi.bit_uniGuarda
		, stp.stp_nome
		
	ORDER BY
		  nomeGestora
		, nomeUnidade ASC
		, bi.bit_uniGuarda ASC
end
end




GO
/****** Object:  StoredProcedure [dbo].[NEW_WorkflowsAbertosFilhasGuardasRS]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Renan CLaro Pereira
-- Create date: 08/12/2010
-- Description:	Retorna todos os workflows abertos
--				para as unidades filhas não gestoras
-- ===============================================

create PROCEDURE [dbo].[NEW_WorkflowsAbertosFilhasGuardasRS] 
	@uni_id INT
	,@wrk_id INT
AS
BEGIn
	SELECT 
		(SELECT dbo.FN_GetUniNome(bi.bit_uniGuarda)) AS nomeUnidade
		, pw.wrk_nome AS nomeWorkflow
		, COUNT (pw.wrk_nome) as qtd
		
	FROM PatrimonioWfStatus pws		
	INNER JOIN PatrimonioWorkflow pw 
		ON pws.wrk_id = pw.wrk_id
	INNER JOIN BemItemWfStatus biws 
		ON biws.wrk_id = pw.wrk_id and biws.stp_id=pws.stp_id
	INNER JOIN BemItem bi 
		ON (biws.bit_id = bi.bit_id and biws.bem_id = bi.bem_id)
	
	WHERE pws.wfs_uniGuarda = 1
		  AND biws.bws_situacao = 1
		  AND bi.bit_uniGuarda IN (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhasImediatasGestoras(@uni_id))
		  AND (@wrk_id IS NULL OR pws.wrk_id = @wrk_id)
	
	GROUP BY
		bi.bit_uniGuarda
		, pw.wrk_nome
	ORDER BY
		nomeUnidade ASC
		, bi.bit_uniGuarda ASC
END

GO
/****** Object:  StoredProcedure [dbo].[NEW_WorkflowsAbertosFilhasGuardasSP]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ============================================= 
-- Author:  Renan CLaro Pereira -- Create date: 08/12/2010 
-- Description: Retorna todos os workflows abertos 
--    para as unidades filhas não gestoras 
-- Alteração: Luana Piva -- Data: 26/03/2014 
-- Descrição: otimização = troca de "IN" para "EXISTS"; Buscar nome do status do patrimonio ao invés do wf. 
-- ===============================================  
CREATE PROCEDURE [dbo].[NEW_WorkflowsAbertosFilhasGuardasSP]   
--declare
@uni_id INT -- = 42  
,@wrk_id INT-- = 1
AS 
BEGIn  
SELECT    
(SELECT dbo.FN_GetUniNome(bi.bit_uniGuarda)) AS nomeUnidade     
, stp.stp_nome AS nomeWorkflow  --,pws.wrk_id 
, COUNT (pw.wrk_nome) as qtd     
FROM PatrimonioWfStatus pws WITH(NOLOCK)  
INNER JOIN PatrimonioWorkflow pw    ON pws.wrk_id = pw.wrk_id     
INNER JOIN BemItemWfStatus biws WITH(NOLOCK)   ON biws.wrk_id = pw.wrk_id   
and biws.stp_id=pws.stp_id     
INNER JOIN StatusPatrimonio stp WITH(NOLOCK)   ON  stp.stp_id = biws.stp_id      
INNER JOIN BemItem bi WITH(NOLOCK)   ON (biws.bit_id = bi.bit_id   
and biws.bem_id = bi.bem_id)     
INNER JOIN dbo.BemItemWorkflow bwf WITH(NOLOCK)  
  ON bwf.bem_id = bi.bem_id  
  AND bwf.bit_id = bi.bit_id  
  AND bwf.biw_id = biws.biw_id  
  AND bwf.wrk_id = biws.wrk_id    
  WHERE        biws.bws_situacao = 1     
  AND EXISTS (SELECT uni_id FROM dbo.FN_GetUnidadeEFilhasImediatasGestoras(@uni_id) where uni_id = bi.bit_uniGuarda)     
  AND (@wrk_id IS NULL OR pws.wrk_id = @wrk_id)    
   AND bwf.biw_situacao = 1   
   AND BI.bit_status not in(3,5)  
   --  AND ((PWS.wfs_uniGestora = 1)   
   --OR (BI.bit_uniGuarda = BI.bit_uniGestora AND PWS.wfs_uniGuarda = 1))  
   GROUP BY   bi.bit_uniGuarda   , stp.stp_nome    --,pws.wrk_id 
	ORDER BY   nomeUnidade ASC   , bi.bit_uniGuarda ASC
	
END  
GO
/****** Object:  StoredProcedure [dbo].[New_Zera_WorkFlow_Etq]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Objetivo :	Gerar o Relatorio Etiqueta conforme Task #1663, Task #3249
	
	Autor	 :	Juscilan Moreto		June,2016
	
	Alteracao:	
	
	Testes	 : 

				New_Zera_WorkFlow_Etq '2011.290.0000003'
				New_Zera_WorkFlow_Etq '2016.326.0000508'

	sp_helptext New_Zera_WorkFlow_Etq

*/

create procedure [dbo].[New_Zera_WorkFlow_Etq]
	 @bit_registroPat varchar(max) = '' 
as


begin

	update 
		BemItemWorkflow 
	set	
		biw_situacao = 2 
	where
		1 = 1 

	and  bem_id in (

		select 
			bi.bem_id
		from
			BemItem bi with(nolock)
			inner join BemItemWfStatus bwi  with(nolock)
			on bi.bem_id = bwi.bem_id
			and bi.bit_id = bwi.bit_id
		where
			1 = 1
			and bit_registroPat in (@bit_registroPat)
	) 
	and  bit_id in (

		select 
			bi.bit_id
		from
			BemItem bi with(nolock)
			inner join BemItemWfStatus bwi  with(nolock)
			on bi.bem_id = bwi.bem_id
			and bi.bit_id = bwi.bit_id
		where
			1 = 1
			and bit_registroPat in (@bit_registroPat)

	)  
	and  (wrk_id = 1 or wrk_id = 2)



	update 
		BemItemWfStatus 
	set	
		bws_situacao = 2 
	where
		1 = 1 

	and  bem_id in (

		select 
			bi.bem_id
		from
			BemItem bi with(nolock)
			inner join BemItemWfStatus bwi  with(nolock)
			on bi.bem_id = bwi.bem_id
			and bi.bit_id = bwi.bit_id
		where
			1 = 1
			and bit_registroPat in (@bit_registroPat)
	) 
	and  bit_id in (

		select 
			bi.bit_id
		from
			BemItem bi with(nolock)
			inner join BemItemWfStatus bwi  with(nolock)
			on bi.bem_id = bwi.bem_id
			and bi.bit_id = bwi.bit_id
		where
			1 = 1
			and bit_registroPat in (@bit_registroPat)

	)  
	and  (wrk_id = 1 or wrk_id = 2)


	
	select @@ROWCOUNT
end

	


GO
/****** Object:  StoredProcedure [dbo].[pFilaRobo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[pFilaRobo] 
(
	 @uni_id int		
	,@per_mes varchar(2)	
	,@per_ano varchar(4)	
)
as
begin

	/*
	declare

		 @uni_id int		= 94
		,@per_mes varchar(2)	= '09'
		,@per_ano varchar(4)	= '2016'
	*/

	select 
		TOP 10
		DESCRICAO_EXPORTACAO
		,STATUS_EXPORTACAO
		,mov_dataAlteracao
		,mov_nl
		,bem_id
		,bit_id
		,uni_id
		,per_mes
		,per_ano

	from 
		MovimentacaoBem with(nolock) 
	where
		1 = 1
	
	and	uni_id	= @uni_id
	and	per_mes = @per_mes
	and	per_ano = @per_ano

	order by 
		mov_dataAlteracao desc

end

GO
/****** Object:  StoredProcedure [dbo].[pFilaTop5]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[pFilaTop5]
as 
select 
	TOP 5
	DESCRICAO_EXPORTACAO
	,STATUS_EXPORTACAO
	,mov_dataAlteracao
	,mov_nl
	,uni_id
	,bem_id
	,bit_id
	,per_ano
	,per_mes
from 
	MovimentacaoBem with(nolock) 
where
	1 = 1
and	mov_nl like '%NL%' 
order by 
	mov_dataAlteracao desc
GO
/****** Object:  StoredProcedure [dbo].[PRC_TESTE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[PRC_TESTE]

 as 
 declare
      @uni_id INT = 2
	, @per_mes CHAR(2) = '08'
	, @per_ano CHAR(4) = '2015'
	, @eventoDebito INT = null
	, @eventoCredito INT = null
	, @tpm_operacao INT = null
	, @bid_numeroDoc VARCHAR(50) = null
	, @mov_observacao VARCHAR(MAX) = null
	, @cco_codigoDebito varchar(20) = '123110802'
	, @cco_codigoCredito varchar(20) = '123110802'
	, @uni_destino INT = null
	, @mov_gpb VARCHAR(20) = null
    , @cod_siafem VARCHAR(30) = null
	, @cod_siafem_old VARCHAR(30) = null
	, @cmdsql As NVARCHAR(4000) = null


SET @cmdsql = ( N' SELECT  M.* FROM
							dbo.MovimentacaoBem M WITH(NoLock)							
							INNER JOIN ParametroContabil PC WITH(NoLock)
								ON  M.cco_codigoDebito = PC.cco_codigoDebito
									AND M.cco_codigoCredito = PC.cco_codigoCredito
									AND M.grp_id = PC.grp_id
									AND M.tpm_id = PC.tpm_id	
							INNER JOIN TipoMovimentacao TM WITH(NoLock)
								ON M.tpm_id = TM.tpm_id '															
								+ CASE WHEN @tpm_operacao IS not NULL THEN
								N' and TM.tpm_operacao = ' +  CAST(@tpm_operacao AS VARCHAR(10))  ELSE N'' END
									+ N'
							LEFT JOIN BemItemDocumento BIC  WITH(NoLock) 
								ON BIC.bem_id = M.bem_id
								AND BIC.bit_id = M.bit_id
								AND BIC.bid_tipoDoc = 4			
		WHERE
				M.mov_nl is null
			    AND	M.cod_siafem is not null	
			    AND	M.mov_situacao in (1,4)
			    AND M.uni_id = ' +  CAST(@uni_id AS VARCHAR(10))
		    + N' AND M.per_mes = ' + ''''+ @per_mes + ''''
			+ N' AND M.per_ano = ' + ''''+ @per_ano + ''''
			
			+ CASE WHEN @eventoDebito IS NOT NULL THEN
								N' and PC.pco_evento = ' + Cast( @eventoDebito AS VARCHAR(100))  ELSE N'' END
			+ CASE WHEN @eventoCredito IS NOT NULL THEN
								N' AND PC.pco_eventoCredito = ' +  Cast( @eventoCredito AS VARCHAR(100)) ELSE N'' END
			+ CASE WHEN @bid_numeroDoc IS NOT NULL THEN
								N' AND	BIC.bid_numeroDoc = ' + '''' +  @bid_numeroDoc + '''' ELSE N'' END
			+ CASE WHEN @mov_observacao IS NOT NULL THEN
								N' AND	M.mov_observacao = ' + '''' + @mov_observacao + '''' ELSE N'' END
			+ N' AND M.cco_codigoDebito = ' + '''' + @cco_codigoDebito	+ ''''		
			+ N' AND M.cco_codigoCredito = ' + '''' + @cco_codigoCredito + ''''
			+ CASE WHEN @uni_destino IS NOT NULL THEN
								N' AND M.mov_unidadeDestino = ' +   CAST(@uni_destino AS  VARCHAR(10)) ELSE N'' END
			+ N' AND (TM.tpm_operacao NOT IN (2,6) OR (
				 ((SELECT TOP 1 uni_id from dbo.FN_GetUnidadesSuperiores(M.mov_unidadeDestino) ) <> M.uni_id)
				OR (M.tpm_id = 1) ))' -- CAST((SELECT top 1 PA.par_valor FROM SYS_Parametros AS PA WITH(NoLock) WHERE PA.par_chave = 'MOVIMENTO_RECEBIMENTO') AS INT))
			+ CASE WHEN @mov_gpb IS NOT NULL THEN
								N' AND M.mov_GPB = ' + '''' +  @mov_gpb + ''''  ELSE N'' END		
)

begin

 EXEC sp_executesql @cmdsql
--select @cmdsql
end
--select * from dbo.MovimentacaoBem M WITH(NoLock) 
--where 		
--M.mov_nl is null
--			    AND	M.cod_siafem is null	
--			    AND	M.mov_situacao in (1,4)
--			    AND M.uni_id = 2
--		  AND M.per_mes = '08'
--			AND M.per_ano = '2015'	

--   exec PRC_TESTE
GO
/****** Object:  StoredProcedure [dbo].[pStaging]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE proc [dbo].[pStaging]  
as  
  
begin  
 select --top 10  
  *   
 from (  
  (  
  select   
    
   uni_nome = dbo.FN_GetUniNome(uni_id)  
   ,uni_id  
   ,per_mes  
   ,per_ano  
   ,per_status = case status_exportacao  
       when 1 then 'Aguardando'  
       when 2 then 'Enviando'  
      end  
   ,data_alteracao  
   ,nomerobo  
  from   
   ExecutarRoboSiafem with (nolock)   
  where   
   status_exportacao in (1,2)   
  )  
   
  union   
  
  (  
  select   
   uni_nome = dbo.FN_GetUniNome(uni_id)  
   ,uni_id  
   ,per_mes  
   ,per_ano  
   ,per_status = case status_exportacao  
       when 4 then 'Erro_no_Envio'  
       when 5 then 'Erro_parcial'  
       when 6 then 'Erro_Total'  
       when 7 then 'Erro_no_Update'  
       when 8 then 'Erro_no_LoginSiafem'  
       when 9 then 'Erro_no_Documento'  
       when 10 then 'Erro_periodo_encerrado'  
      end  
   ,data_alteracao  
   ,nomerobo  
  from   
   ExecutarRoboSiafem with (nolock)   
  where   
   status_exportacao >=  4  
  )  
 )as result  
  
 order by   
  result.per_status  
  ,result.data_alteracao desc  
  
end  
  
  
GO
/****** Object:  StoredProcedure [dbo].[REL_SemNumeroPatrimonial]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext REL_SemNumeroPatrimonial
--exec REL_SemNumeroPatrimonial 2015

CREATE procedure [dbo].[REL_SemNumeroPatrimonial]
(@ANO int)
as
begin
select bp.Bem_descricao, bp.bem_id, bi.bit_id,
 [dbo].[FN_GetFornecedorNome](bp.for_id) as fornecedor ,
  bi.bit_uniGestora, bi.bit_valorOrigem ,'' as uni_codigouge, 
  Nome_uge= (select uad_nome from [dbo].[FN_GetUnidadeGestoraImediata] (bi.bit_uniGuarda)), 
  bi.bit_uniGuarda,
  [dbo].[FN_GetUniNome] (bi.bit_uniGuarda) as Nome_Guarda,
 
  bi.bit_dataCriacao
from  BemItem as bi
inner join BemPatrimonial as bp
on bi.bem_id = bp.bem_id
--left join [dbo].[VW_UnidadeGestora]  as u
--on u.uni_id = bi.bit_uniGestora
where 
bi.bit_status <> 3

		AND bi.bit_registroPat IS NULL 		
		AND	NOT EXISTS
			(
				SELECT 
					bem_id
					, bit_id
				FROM 
					BemItemWfStatus	WITH(NoLock)				
				WHERE 
					bi.bem_id = BemItemWfStatus.bem_id 
					AND bi.bit_id = BemItemWfStatus.bit_id 
					AND (wrk_id = 3 OR wrk_id = 4)  -- wf de recebimento
					AND bws_situacao = 1 -- pendente
			)
and bi.bit_uniGestora > 0 and bi.bit_uniGuarda > 0
and
@ANO
 = DATEPART ( YEAR ,bit_dataCriacao) 
end
GO
/****** Object:  StoredProcedure [dbo].[sp_atualizar_incorporacoes]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
	Objetivo:	Manutenção tabela tbl_temp_incorporacoes

	Autor:		Juscilan	- 16/11/2015 08:36:28

	Alteracao:	Autor	- aaaa/mm/dd - Descricao
	
	Teste: EXEC sp_atualizar_incorporacoes 3970,'2015.265.0001270','OK'

*/

create procedure [dbo].[sp_atualizar_incorporacoes](@bit_uniGuarda INT, @bit_registroPat VARCHAR(20),@BIT_STATUS VARCHAR(200))

AS
BEGIN
	UPDATE Incorporacoes SET bit_status = @BIT_STATUS WHERE  bit_uniGuarda = @bit_uniGuarda AND bit_registroPat =@bit_registroPat
END



GO
/****** Object:  StoredProcedure [dbo].[sp_selecionar_incorporacoes]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Objetivo:	Seleção tabela Incorporacoes

	Autor:		Juscilan	- 16/11/2015 08:36:28

	Alteracao:	Autor	- aaaa/mm/dd - Descricao
	
	Teste: 
			exec sp_selecionar_incorporacoes
					
*/

create procedure [dbo].[sp_selecionar_incorporacoes]
AS
BEGIN
	SELECT * FROM Incorporacoes WITH(NOLOCK) WHERE BIT_STATUS IS NULL
END






/*
SELECT bit_unigestora, count(1) as qdte FROM tbl_temp_incorporacoes WITH(NOLOCK) group by bit_unigestora
SELECT top 1 * FROM tbl_temp_incorporacoes WITH(NOLOCK) 
BEGIN TRAN
UPDATE tbl_temp_incorporacoes SET BIT_STATUS = NULL WHERE BIT_REGISTROPAT = '2012.267.0004425'

ROLLBACK;
COMMIT;
*/

/*

2012.267.0004425 teste prod

080267 27 - 19488 
080272 32 - 19571

*/
GO
/****** Object:  StoredProcedure [dbo].[sph]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[sph] (
	@proc varchar(max)
)
as
	exec sp_helptext @proc
	
GO
/****** Object:  StoredProcedure [dbo].[STP_ApoliceSeguro_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ApoliceSeguro_DELETE]
	@aps_id BIGINT

AS
BEGIN
	DELETE FROM 
		ApoliceSeguro 
	WHERE 
		aps_id = @aps_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ApoliceSeguro_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ApoliceSeguro_INSERT]
	@seg_id Int
	, @uni_id Int
	, @aps_apolice VarChar (50)
	, @aps_descricao varchar(max)
	, @aps_valorApolice Money
	, @aps_valorSeguro Money
	, @aps_vigenciaInicio DateTime
	, @aps_vigenciaFim DateTime
	, @aps_situacao TinyInt
	, @aps_dataCriacao DateTime
	, @aps_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		ApoliceSeguro
		( 
			seg_id 
			, uni_id 
			, aps_apolice 
			, aps_descricao 
			, aps_valorApolice 
			, aps_valorSeguro 
			, aps_vigenciaInicio 
			, aps_vigenciaFim 
			, aps_situacao 
			, aps_dataCriacao 
			, aps_dataAlteracao 
 
		)
	VALUES
		( 
			@seg_id 
			, @uni_id 
			, @aps_apolice 
			, @aps_descricao 
			, @aps_valorApolice 
			, @aps_valorSeguro 
			, @aps_vigenciaInicio 
			, @aps_vigenciaFim 
			, @aps_situacao 
			, @aps_dataCriacao 
			, @aps_dataAlteracao 
 
		)
		
		SELECT cast(ISNULL(SCOPE_IDENTITY(),-1) as bigint )

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ApoliceSeguro_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ApoliceSeguro_LOAD]
	@aps_id BigInt
	
AS
BEGIN
	SELECT	Top 1
		 aps_id  
		, seg_id 
		, uni_id 
		, aps_apolice 
		, aps_descricao 
		, aps_valorApolice 
		, aps_valorSeguro 
		, aps_vigenciaInicio 
		, aps_vigenciaFim 
		, aps_situacao 
		, aps_dataCriacao 
		, aps_dataAlteracao 

 	FROM
 		ApoliceSeguro
	WHERE 
		aps_id = @aps_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ApoliceSeguro_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ApoliceSeguro_SELECT]
	
AS
BEGIN
	SELECT 
		aps_id
		,seg_id
		,uni_id
		,aps_apolice
		,aps_descricao
		,aps_valorApolice
		,aps_valorSeguro
		,aps_vigenciaInicio
		,aps_vigenciaFim
		,aps_situacao
		,aps_dataCriacao
		,aps_dataAlteracao

	FROM 
		ApoliceSeguro WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ApoliceSeguro_SELECTBY_seg_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ApoliceSeguro_SELECTBY_seg_id]
	@seg_id INT
AS
BEGIN
	SELECT
		aps_id
		,seg_id
		,uni_id
		,aps_apolice
		,aps_descricao
		,aps_valorApolice
		,aps_valorSeguro
		,aps_vigenciaInicio
		,aps_vigenciaFim
		,aps_situacao
		,aps_dataCriacao
		,aps_dataAlteracao

	FROM
		ApoliceSeguro WITH(NOLOCK)
	WHERE 
		seg_id = @seg_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ApoliceSeguro_SELECTBY_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ApoliceSeguro_SELECTBY_uni_id]
	@uni_id INT
AS
BEGIN
	SELECT
		aps_id
		,seg_id
		,uni_id
		,aps_apolice
		,aps_descricao
		,aps_valorApolice
		,aps_valorSeguro
		,aps_vigenciaInicio
		,aps_vigenciaFim
		,aps_situacao
		,aps_dataCriacao
		,aps_dataAlteracao

	FROM
		ApoliceSeguro WITH(NOLOCK)
	WHERE 
		uni_id = @uni_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ApoliceSeguro_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ApoliceSeguro_UPDATE]
	@aps_id BIGINT
	, @seg_id INT
	, @uni_id INT
	, @aps_apolice VARCHAR (50)
	, @aps_descricao VARCHAR (MAX)
	, @aps_valorApolice MONEY
	, @aps_valorSeguro MONEY
	, @aps_vigenciaInicio DATETIME
	, @aps_vigenciaFim DATETIME
	, @aps_situacao TINYINT
	, @aps_dataCriacao DATETIME
	, @aps_dataAlteracao DATETIME

AS
BEGIN
	UPDATE ApoliceSeguro 
	SET 
		seg_id = @seg_id 
		, uni_id = @uni_id 
		, aps_apolice = @aps_apolice 
		, aps_descricao = @aps_descricao 
		, aps_valorApolice = @aps_valorApolice 
		, aps_valorSeguro = @aps_valorSeguro 
		, aps_vigenciaInicio = @aps_vigenciaInicio 
		, aps_vigenciaFim = @aps_vigenciaFim 
		, aps_situacao = @aps_situacao 
		, aps_dataCriacao = @aps_dataCriacao 
		, aps_dataAlteracao = @aps_dataAlteracao 

	WHERE 
		aps_id = @aps_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Arquivo_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Arquivo_DELETE]
	@arq_id BIGINT

AS
BEGIN
	DELETE FROM 
		Arquivo 
	WHERE 
		arq_id = @arq_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Arquivo_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Arquivo_INSERT]
	@arq_nome VarChar (100)
	, @arq_typeMime VarChar (200)
	, @arq_tamanho Int

AS
BEGIN
	INSERT INTO 
		Arquivo
		( 
			arq_nome 
			, arq_typeMime 
			, arq_tamanho 
 
		)
	VALUES
		( 
			@arq_nome 
			, @arq_typeMime 
			, @arq_tamanho 
 
		)
		
		SELECT cast(ISNULL(SCOPE_IDENTITY(),-1) as bigint )

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Arquivo_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Arquivo_LOAD]
	@arq_id BigInt
	
AS
BEGIN
	SELECT	Top 1
		 arq_id  
		, arq_nome 
		, arq_typeMime 
		, arq_tamanho 

 	FROM
 		Arquivo
	WHERE 
		arq_id = @arq_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Arquivo_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Arquivo_SELECT]
	
AS
BEGIN
	SELECT 
		arq_id
		,arq_nome
		,arq_typeMime
		,arq_tamanho

	FROM 
		Arquivo WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Arquivo_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Arquivo_UPDATE]
	@arq_id BIGINT
	, @arq_nome VARCHAR (100)
	, @arq_typeMime VARCHAR (200)
	, @arq_tamanho INT

AS
BEGIN
	UPDATE Arquivo 
	SET 
		arq_nome = @arq_nome 
		, arq_typeMime = @arq_typeMime 
		, arq_tamanho = @arq_tamanho 

	WHERE 
		arq_id = @arq_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Aviso_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Aviso_DELETE]
	@avs_id INT

AS
BEGIN
	DELETE FROM 
		Aviso 
	WHERE 
		avs_id = @avs_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Aviso_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Aviso_INSERT]
	@avs_titulo VarChar (100)
	, @avs_texto VarChar (MAX)
	, @avs_dataInicial DateTime
	, @avs_dataFinal DateTime
	, @usu_id UniqueIdentifier
	, @avs_situacao TinyInt
	, @avs_dataCriacao DateTime
	, @avs_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		Aviso
		( 
			avs_titulo 
			, avs_texto 
			, avs_dataInicial 
			, avs_dataFinal 
			, usu_id 
			, avs_situacao 
			, avs_dataCriacao 
			, avs_dataAlteracao 
 
		)
	VALUES
		( 
			@avs_titulo 
			, @avs_texto 
			, @avs_dataInicial 
			, @avs_dataFinal 
			, @usu_id 
			, @avs_situacao 
			, @avs_dataCriacao 
			, @avs_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Aviso_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Aviso_LOAD]
	@avs_id Int
	
AS
BEGIN
	SELECT	Top 1
		 avs_id  
		, avs_titulo 
		, avs_texto 
		, avs_dataInicial 
		, avs_dataFinal 
		, usu_id 
		, avs_situacao 
		, avs_dataCriacao 
		, avs_dataAlteracao 

 	FROM
 		Aviso
	WHERE 
		avs_id = @avs_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Aviso_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Aviso_SELECT]
	
AS
BEGIN
	SELECT 
		avs_id
		,avs_titulo
		,avs_texto
		,avs_dataInicial
		,avs_dataFinal
		,usu_id
		,avs_situacao
		,avs_dataCriacao
		,avs_dataAlteracao

	FROM 
		Aviso WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Aviso_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Aviso_UPDATE]
	@avs_id INT
	, @avs_titulo VARCHAR (100)
	, @avs_texto VarChar (MAX)
	, @avs_dataInicial DATETIME
	, @avs_dataFinal DATETIME
	, @usu_id UNIQUEIDENTIFIER
	, @avs_situacao TINYINT
	, @avs_dataCriacao DATETIME
	, @avs_dataAlteracao DATETIME

AS
BEGIN
	UPDATE Aviso 
	SET 
		avs_titulo = @avs_titulo 
		, avs_texto = @avs_texto 
		, avs_dataInicial = @avs_dataInicial 
		, avs_dataFinal = @avs_dataFinal 
		, usu_id = @usu_id 
		, avs_situacao = @avs_situacao 
		, avs_dataCriacao = @avs_dataCriacao 
		, avs_dataAlteracao = @avs_dataAlteracao 

	WHERE 
		avs_id = @avs_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_AvisoDestinatario_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_AvisoDestinatario_DELETE]
	@avs_id INT
	, @avd_id INT

AS
BEGIN
	DELETE FROM 
		AvisoDestinatario 
	WHERE 
		avs_id = @avs_id 
		AND avd_id = @avd_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_AvisoDestinatario_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_AvisoDestinatario_INSERT]
	@avs_id Int
	, @uni_id Int
	, @avd_incluiDependente Bit
	, @avd_tipoUnidade UniqueIdentifier
	, @avd_situacao TinyInt
	, @avd_dataCriacao DateTime
	, @avd_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		AvisoDestinatario
		( 
			avs_id 
			, uni_id 
			, avd_incluiDependente 
			, avd_tipoUnidade 
			, avd_situacao 
			, avd_dataCriacao 
			, avd_dataAlteracao 
 
		)
	VALUES
		( 
			@avs_id 
			, @uni_id 
			, @avd_incluiDependente 
			, @avd_tipoUnidade 
			, @avd_situacao 
			, @avd_dataCriacao 
			, @avd_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_AvisoDestinatario_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_AvisoDestinatario_LOAD]
	@avs_id Int
	, @avd_id Int
	
AS
BEGIN
	SELECT	Top 1
		 avs_id  
		, avd_id 
		, uni_id 
		, avd_incluiDependente 
		, avd_tipoUnidade 
		, avd_situacao 
		, avd_dataCriacao 
		, avd_dataAlteracao 

 	FROM
 		AvisoDestinatario
	WHERE 
		avs_id = @avs_id
		AND avd_id = @avd_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_AvisoDestinatario_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_AvisoDestinatario_SELECT]
	
AS
BEGIN
	SELECT 
		avs_id
		,avd_id
		,uni_id
		,avd_incluiDependente
		,avd_tipoUnidade
		,avd_situacao
		,avd_dataCriacao
		,avd_dataAlteracao

	FROM 
		AvisoDestinatario WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_AvisoDestinatario_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_AvisoDestinatario_UPDATE]
	@avs_id INT
	, @avd_id INT
	, @uni_id INT
	, @avd_incluiDependente BIT
	, @avd_tipoUnidade UNIQUEIDENTIFIER
	, @avd_situacao TINYINT
	, @avd_dataCriacao DATETIME
	, @avd_dataAlteracao DATETIME

AS
BEGIN
	UPDATE AvisoDestinatario 
	SET 
		uni_id = @uni_id 
		, avd_incluiDependente = @avd_incluiDependente 
		, avd_tipoUnidade = @avd_tipoUnidade 
		, avd_situacao = @avd_situacao 
		, avd_dataCriacao = @avd_dataCriacao 
		, avd_dataAlteracao = @avd_dataAlteracao 

	WHERE 
		avs_id = @avs_id 
		AND avd_id = @avd_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemArquivo_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemArquivo_DELETE]
	@bem_id BIGINT
	, @arq_id BIGINT

AS
BEGIN
	DELETE FROM 
		BemArquivo 
	WHERE 
		bem_id = @bem_id 
		AND arq_id = @arq_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemArquivo_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemArquivo_INSERT]
	@bem_id BigInt
	, @arq_id BigInt
	, @bea_legenda VarChar (100)
	, @bea_observacao VarChar (2000)
	, @bea_tipo TinyInt
	, @bea_dataCriacao DateTime
	, @bea_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		BemArquivo
		( 
			bem_id 
			, arq_id 
			, bea_legenda 
			, bea_observacao 
			, bea_tipo 
			, bea_dataCriacao 
			, bea_dataAlteracao 
 
		)
	VALUES
		( 
			@bem_id 
			, @arq_id 
			, @bea_legenda 
			, @bea_observacao 
			, @bea_tipo 
			, @bea_dataCriacao 
			, @bea_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemArquivo_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemArquivo_LOAD]
	@bem_id BigInt
	, @arq_id BigInt
	
AS
BEGIN
	SELECT	Top 1
		 bem_id  
		, arq_id 
		, bea_legenda 
		, bea_observacao 
		, bea_tipo 
		, bea_dataCriacao 
		, bea_dataAlteracao 

 	FROM
 		BemArquivo
	WHERE 
		bem_id = @bem_id
		AND arq_id = @arq_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemArquivo_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemArquivo_SELECT]
	
AS
BEGIN
	SELECT 
		bem_id
		,arq_id
		,bea_legenda
		,bea_observacao
		,bea_tipo
		,bea_dataCriacao
		,bea_dataAlteracao

	FROM 
		BemArquivo WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemArquivo_SELECTBY_arq_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemArquivo_SELECTBY_arq_id]
	@arq_id BIGINT
AS
BEGIN
	SELECT
		bem_id
		,arq_id
		,bea_legenda
		,bea_observacao
		,bea_tipo
		,bea_dataCriacao
		,bea_dataAlteracao

	FROM
		BemArquivo WITH(NOLOCK)
	WHERE 
		arq_id = @arq_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemArquivo_SELECTBY_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemArquivo_SELECTBY_bem_id]
	@bem_id BIGINT
AS
BEGIN
	SELECT
		bem_id
		,arq_id
		,bea_legenda
		,bea_observacao
		,bea_tipo
		,bea_dataCriacao
		,bea_dataAlteracao

	FROM
		BemArquivo WITH(NOLOCK)
	WHERE 
		bem_id = @bem_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemArquivo_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemArquivo_UPDATE]
	@bem_id BIGINT
	, @arq_id BIGINT
	, @bea_legenda VARCHAR (100)
	, @bea_observacao VARCHAR (2000)
	, @bea_tipo TINYINT
	, @bea_dataCriacao DATETIME
	, @bea_dataAlteracao DATETIME

AS
BEGIN
	UPDATE BemArquivo 
	SET 
		bea_legenda = @bea_legenda 
		, bea_observacao = @bea_observacao 
		, bea_tipo = @bea_tipo 
		, bea_dataCriacao = @bea_dataCriacao 
		, bea_dataAlteracao = @bea_dataAlteracao 

	WHERE 
		bem_id = @bem_id 
		AND arq_id = @arq_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_DELETE]
	@bem_id BIGINT
	, @bit_id INT

AS
BEGIN
	DELETE FROM 
		BemItem 
	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_INSERT]
	@bem_id BigInt	
	, @stc_id Int
	, @loc_id Int
	, @dep_id Int
	, @aps_id BigInt
	, @fat_id Int
	, @bit_referencia VarChar (250)
	, @bit_uniGestora Int
	, @bit_uniGuarda Int
	, @bit_registroPat VarChar (20)
	, @bit_GPB VarChar (20)
	, @bit_GRB VarChar (20)
	, @bit_valorOrigem Money
	, @bit_valorLiquido Money
	, @bit_vidaUtil Int
	, @bit_cotas Int
	, @bit_dataDepInicio DateTime
	, @bit_dataDepFim DateTime
	, @bit_doctoBaixa VarChar (20)
	, @bit_dataBaixa DateTime
	, @bit_dataIncorporacao DateTime
	, @bit_contado Bit
	, @bit_dataInventario DateTime
	, @bit_status TinyInt
	, @bit_dataAlteracaoStatus DateTime
	, @bit_observacao varchar(max) 
	, @bit_dataFimGarantia DateTime
	, @bit_situacao TinyInt
	, @bit_dataCriacao DateTime
	, @bit_dataAlteracao DateTime
	, @bit_registroPatAnterior VarChar (20)
	, @bit_nroSerie VarChar (30)
	, @bit_marca VarChar (30)
	, @bit_modelo VarChar (30)
	, @bit_tipo VarChar (30)
	, @bit_placa VarChar (10)
	, @bit_chassi VarChar (50)
	, @bit_anoFabricacao VarChar (4)
	, @bit_quilometragem Int
	, @bit_potencia VarChar (10)
	, @bit_unidadePotencia VarChar (10)
	, @bit_cilindros VarChar (10)
	, @sp_id VarChar (5)
	, @tb_id VarChar (5)
	, @bit_codProgFinanc VarChar (100)
	, @bit_matriculaPessoa VarChar (100)
	, @bit_codEspecie VarChar (50)

AS
BEGIN
	INSERT INTO 
		BemItem
		( 
			bem_id 			
			, stc_id 
			, loc_id 
			, dep_id 
			, aps_id 
			, fat_id 
			, bit_referencia 
			, bit_uniGestora 
			, bit_uniGuarda 
			, bit_registroPat 
			, bit_GPB 
			, bit_GRB 
			, bit_valorOrigem 
			, bit_valorLiquido 
			, bit_vidaUtil 
			, bit_cotas 
			, bit_dataDepInicio 
			, bit_dataDepFim 
			, bit_doctoBaixa 
			, bit_dataBaixa 
			, bit_dataIncorporacao 
			, bit_contado 
			, bit_dataInventario 
			, bit_status 
			, bit_dataAlteracaoStatus 
			, bit_observacao 
			, bit_dataFimGarantia 
			, bit_situacao 
			, bit_dataCriacao 
			, bit_dataAlteracao 
			, bit_registroPatAnterior 
			, bit_nroSerie 
			, bit_marca 
			, bit_modelo 
			, bit_tipo 
			, bit_placa 
			, bit_chassi 
			, bit_anoFabricacao 
			, bit_quilometragem 
			, bit_potencia 
			, bit_unidadePotencia 
			, bit_cilindros 
			, sp_id 
			, tb_id 
			, bit_codProgFinanc 
			, bit_matriculaPessoa 
			, bit_codEspecie 
 
		)
	VALUES
		( 
			@bem_id 			
			, @stc_id 
			, @loc_id 
			, @dep_id 
			, @aps_id 
			, @fat_id 
			, @bit_referencia 
			, @bit_uniGestora 
			, @bit_uniGuarda 
			, @bit_registroPat 
			, @bit_GPB 
			, @bit_GRB 
			, @bit_valorOrigem 
			, @bit_valorLiquido 
			, @bit_vidaUtil 
			, @bit_cotas 
			, @bit_dataDepInicio 
			, @bit_dataDepFim 
			, @bit_doctoBaixa 
			, @bit_dataBaixa 
			, @bit_dataIncorporacao 
			, @bit_contado 
			, @bit_dataInventario 
			, @bit_status 
			, @bit_dataAlteracaoStatus 
			, @bit_observacao 
			, @bit_dataFimGarantia 
			, @bit_situacao 
			, @bit_dataCriacao 
			, @bit_dataAlteracao 
			, @bit_registroPatAnterior 
			, @bit_nroSerie 
			, @bit_marca 
			, @bit_modelo 
			, @bit_tipo 
			, @bit_placa 
			, @bit_chassi 
			, @bit_anoFabricacao 
			, @bit_quilometragem 
			, @bit_potencia 
			, @bit_unidadePotencia 
			, @bit_cilindros 
			, @sp_id 
			, @tb_id 
			, @bit_codProgFinanc 
			, @bit_matriculaPessoa 
			, @bit_codEspecie 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext STP_BemItem_LOAD

--alterado para não locar as consultas

CREATE PROCEDURE [dbo].[STP_BemItem_LOAD]
	@bem_id BigInt
	, @bit_id Int
	
AS
BEGIN
	SELECT	Top 1
		 bem_id  
		, bit_id 
		, stc_id 
		, loc_id 
		, dep_id 
		, aps_id 
		, fat_id 
		, bit_referencia 
		, bit_uniGestora 
		, bit_uniGuarda 
		, bit_registroPat 
		, bit_GPB 
		, bit_GRB 
		, bit_valorOrigem 
		, bit_valorLiquido 
		, bit_vidaUtil 
		, bit_cotas 
		, bit_dataDepInicio 
		, bit_dataDepFim 
		, bit_doctoBaixa 
		, bit_dataBaixa 
		, bit_dataIncorporacao 
		, bit_contado 
		, bit_dataInventario 
		, bit_status 
		, bit_dataAlteracaoStatus 
		, bit_observacao 
		, bit_dataFimGarantia 
		, bit_situacao 
		, bit_dataCriacao 
		, bit_dataAlteracao 
		, bit_registroPatAnterior 
		, bit_nroSerie 
		, bit_marca 
		, bit_modelo 
		, bit_tipo 
		, bit_placa 
		, bit_chassi 
		, bit_anoFabricacao 
		, bit_quilometragem 
		, bit_potencia 
		, bit_unidadePotencia 
		, bit_cilindros 
		, sp_id 
		, tb_id 
		, bit_codProgFinanc 
		, bit_matriculaPessoa 
		, bit_codEspecie 

 	FROM
 		BemItem with (nolock)
	WHERE 
		bem_id = @bem_id
		AND ((bit_id = @bit_id)OR(@bit_id is null))
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_SELECT]
	
AS
BEGIN
	SELECT 
		bem_id
		,bit_id
		,stc_id
		,loc_id
		,dep_id
		,aps_id
		,fat_id
		,bit_referencia
		,bit_uniGestora
		,bit_uniGuarda
		,bit_registroPat
		,bit_GPB
		,bit_GRB
		,bit_valorOrigem
		,bit_valorLiquido
		,bit_vidaUtil
		,bit_cotas
		,bit_dataDepInicio
		,bit_dataDepFim
		,bit_doctoBaixa
		,bit_dataBaixa
		,bit_dataIncorporacao
		,bit_contado
		,bit_dataInventario
		,bit_status
		,bit_dataAlteracaoStatus
		,bit_observacao
		,bit_dataFimGarantia
		,bit_situacao
		,bit_dataCriacao
		,bit_dataAlteracao
		,bit_registroPatAnterior
		,bit_nroSerie
		,bit_marca
		,bit_modelo
		,bit_tipo
		,bit_placa
		,bit_chassi
		,bit_anoFabricacao
		,bit_quilometragem
		,bit_potencia
		,bit_unidadePotencia
		,bit_cilindros
		,sp_id
		,tb_id
		,bit_codProgFinanc
		,bit_matriculaPessoa
		,bit_codEspecie

	FROM 
		BemItem WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_SELECTBY_aps_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_SELECTBY_aps_id]
	@aps_id BIGINT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,stc_id
		,loc_id
		,dep_id
		,aps_id
		,fat_id
		,bit_referencia
		,bit_uniGestora
		,bit_uniGuarda
		,bit_registroPat
		,bit_GPB
		,bit_GRB
		,bit_valorOrigem
		,bit_valorLiquido
		,bit_vidaUtil
		,bit_cotas
		,bit_dataDepInicio
		,bit_dataDepFim
		,bit_doctoBaixa
		,bit_dataBaixa
		,bit_dataIncorporacao
		,bit_contado
		,bit_dataInventario
		,bit_status
		,bit_dataAlteracaoStatus
		,bit_observacao
		,bit_dataFimGarantia
		,bit_situacao
		,bit_dataCriacao
		,bit_dataAlteracao
		,bit_registroPatAnterior
		,bit_nroSerie
		,bit_marca
		,bit_modelo
		,bit_tipo
		,bit_placa
		,bit_chassi
		,bit_anoFabricacao
		,bit_quilometragem
		,bit_potencia
		,bit_unidadePotencia
		,bit_cilindros
		,sp_id
		,tb_id
		,bit_codProgFinanc
		,bit_matriculaPessoa
		,bit_codEspecie

	FROM
		BemItem WITH(NOLOCK)
	WHERE 
		aps_id = @aps_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_SELECTBY_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_SELECTBY_bem_id]
	@bem_id BIGINT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,stc_id
		,loc_id
		,dep_id
		,aps_id
		,fat_id
		,bit_referencia
		,bit_uniGestora
		,bit_uniGuarda
		,bit_registroPat
		,bit_GPB
		,bit_GRB
		,bit_valorOrigem
		,bit_valorLiquido
		,bit_vidaUtil
		,bit_cotas
		,bit_dataDepInicio
		,bit_dataDepFim
		,bit_doctoBaixa
		,bit_dataBaixa
		,bit_dataIncorporacao
		,bit_contado
		,bit_dataInventario
		,bit_status
		,bit_dataAlteracaoStatus
		,bit_observacao
		,bit_dataFimGarantia
		,bit_situacao
		,bit_dataCriacao
		,bit_dataAlteracao
		,bit_registroPatAnterior
		,bit_nroSerie
		,bit_marca
		,bit_modelo
		,bit_tipo
		,bit_placa
		,bit_chassi
		,bit_anoFabricacao
		,bit_quilometragem
		,bit_potencia
		,bit_unidadePotencia
		,bit_cilindros
		,sp_id
		,tb_id
		,bit_codProgFinanc
		,bit_matriculaPessoa
		,bit_codEspecie

	FROM
		BemItem WITH(NOLOCK)
	WHERE 
		bem_id = @bem_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_SELECTBY_dep_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_SELECTBY_dep_id]
	@dep_id INT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,stc_id
		,loc_id
		,dep_id
		,aps_id
		,fat_id
		,bit_referencia
		,bit_uniGestora
		,bit_uniGuarda
		,bit_registroPat
		,bit_GPB
		,bit_GRB
		,bit_valorOrigem
		,bit_valorLiquido
		,bit_vidaUtil
		,bit_cotas
		,bit_dataDepInicio
		,bit_dataDepFim
		,bit_doctoBaixa
		,bit_dataBaixa
		,bit_dataIncorporacao
		,bit_contado
		,bit_dataInventario
		,bit_status
		,bit_dataAlteracaoStatus
		,bit_observacao
		,bit_dataFimGarantia
		,bit_situacao
		,bit_dataCriacao
		,bit_dataAlteracao
		,bit_registroPatAnterior
		,bit_nroSerie
		,bit_marca
		,bit_modelo
		,bit_tipo
		,bit_placa
		,bit_chassi
		,bit_anoFabricacao
		,bit_quilometragem
		,bit_potencia
		,bit_unidadePotencia
		,bit_cilindros
		,sp_id
		,tb_id
		,bit_codProgFinanc
		,bit_matriculaPessoa
		,bit_codEspecie

	FROM
		BemItem WITH(NOLOCK)
	WHERE 
		dep_id = @dep_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_SELECTBY_fat_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_SELECTBY_fat_id]
	@fat_id INT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,stc_id
		,loc_id
		,dep_id
		,aps_id
		,fat_id
		,bit_referencia
		,bit_uniGestora
		,bit_uniGuarda
		,bit_registroPat
		,bit_GPB
		,bit_GRB
		,bit_valorOrigem
		,bit_valorLiquido
		,bit_vidaUtil
		,bit_cotas
		,bit_dataDepInicio
		,bit_dataDepFim
		,bit_doctoBaixa
		,bit_dataBaixa
		,bit_dataIncorporacao
		,bit_contado
		,bit_dataInventario
		,bit_status
		,bit_dataAlteracaoStatus
		,bit_observacao
		,bit_dataFimGarantia
		,bit_situacao
		,bit_dataCriacao
		,bit_dataAlteracao
		,bit_registroPatAnterior
		,bit_nroSerie
		,bit_marca
		,bit_modelo
		,bit_tipo
		,bit_placa
		,bit_chassi
		,bit_anoFabricacao
		,bit_quilometragem
		,bit_potencia
		,bit_unidadePotencia
		,bit_cilindros
		,sp_id
		,tb_id
		,bit_codProgFinanc
		,bit_matriculaPessoa
		,bit_codEspecie

	FROM
		BemItem WITH(NOLOCK)
	WHERE 
		fat_id = @fat_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_SELECTBY_loc_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_SELECTBY_loc_id]
	@loc_id INT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,stc_id
		,loc_id
		,dep_id
		,aps_id
		,fat_id
		,bit_referencia
		,bit_uniGestora
		,bit_uniGuarda
		,bit_registroPat
		,bit_GPB
		,bit_GRB
		,bit_valorOrigem
		,bit_valorLiquido
		,bit_vidaUtil
		,bit_cotas
		,bit_dataDepInicio
		,bit_dataDepFim
		,bit_doctoBaixa
		,bit_dataBaixa
		,bit_dataIncorporacao
		,bit_contado
		,bit_dataInventario
		,bit_status
		,bit_dataAlteracaoStatus
		,bit_observacao
		,bit_dataFimGarantia
		,bit_situacao
		,bit_dataCriacao
		,bit_dataAlteracao
		,bit_registroPatAnterior
		,bit_nroSerie
		,bit_marca
		,bit_modelo
		,bit_tipo
		,bit_placa
		,bit_chassi
		,bit_anoFabricacao
		,bit_quilometragem
		,bit_potencia
		,bit_unidadePotencia
		,bit_cilindros
		,sp_id
		,tb_id
		,bit_codProgFinanc
		,bit_matriculaPessoa
		,bit_codEspecie

	FROM
		BemItem WITH(NOLOCK)
	WHERE 
		loc_id = @loc_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_SELECTBY_sp_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_SELECTBY_sp_id]
	@sp_id VARCHAR
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,stc_id
		,loc_id
		,dep_id
		,aps_id
		,fat_id
		,bit_referencia
		,bit_uniGestora
		,bit_uniGuarda
		,bit_registroPat
		,bit_GPB
		,bit_GRB
		,bit_valorOrigem
		,bit_valorLiquido
		,bit_vidaUtil
		,bit_cotas
		,bit_dataDepInicio
		,bit_dataDepFim
		,bit_doctoBaixa
		,bit_dataBaixa
		,bit_dataIncorporacao
		,bit_contado
		,bit_dataInventario
		,bit_status
		,bit_dataAlteracaoStatus
		,bit_observacao
		,bit_dataFimGarantia
		,bit_situacao
		,bit_dataCriacao
		,bit_dataAlteracao
		,bit_registroPatAnterior
		,bit_nroSerie
		,bit_marca
		,bit_modelo
		,bit_tipo
		,bit_placa
		,bit_chassi
		,bit_anoFabricacao
		,bit_quilometragem
		,bit_potencia
		,bit_unidadePotencia
		,bit_cilindros
		,sp_id
		,tb_id
		,bit_codProgFinanc
		,bit_matriculaPessoa
		,bit_codEspecie

	FROM
		BemItem WITH(NOLOCK)
	WHERE 
		sp_id = @sp_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_SELECTBY_stc_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_SELECTBY_stc_id]
	@stc_id INT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,stc_id
		,loc_id
		,dep_id
		,aps_id
		,fat_id
		,bit_referencia
		,bit_uniGestora
		,bit_uniGuarda
		,bit_registroPat
		,bit_GPB
		,bit_GRB
		,bit_valorOrigem
		,bit_valorLiquido
		,bit_vidaUtil
		,bit_cotas
		,bit_dataDepInicio
		,bit_dataDepFim
		,bit_doctoBaixa
		,bit_dataBaixa
		,bit_dataIncorporacao
		,bit_contado
		,bit_dataInventario
		,bit_status
		,bit_dataAlteracaoStatus
		,bit_observacao
		,bit_dataFimGarantia
		,bit_situacao
		,bit_dataCriacao
		,bit_dataAlteracao
		,bit_registroPatAnterior
		,bit_nroSerie
		,bit_marca
		,bit_modelo
		,bit_tipo
		,bit_placa
		,bit_chassi
		,bit_anoFabricacao
		,bit_quilometragem
		,bit_potencia
		,bit_unidadePotencia
		,bit_cilindros
		,sp_id
		,tb_id
		,bit_codProgFinanc
		,bit_matriculaPessoa
		,bit_codEspecie

	FROM
		BemItem WITH(NOLOCK)
	WHERE 
		stc_id = @stc_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_SELECTBY_tb_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_SELECTBY_tb_id]
	@tb_id VARCHAR
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,stc_id
		,loc_id
		,dep_id
		,aps_id
		,fat_id
		,bit_referencia
		,bit_uniGestora
		,bit_uniGuarda
		,bit_registroPat
		,bit_GPB
		,bit_GRB
		,bit_valorOrigem
		,bit_valorLiquido
		,bit_vidaUtil
		,bit_cotas
		,bit_dataDepInicio
		,bit_dataDepFim
		,bit_doctoBaixa
		,bit_dataBaixa
		,bit_dataIncorporacao
		,bit_contado
		,bit_dataInventario
		,bit_status
		,bit_dataAlteracaoStatus
		,bit_observacao
		,bit_dataFimGarantia
		,bit_situacao
		,bit_dataCriacao
		,bit_dataAlteracao
		,bit_registroPatAnterior
		,bit_nroSerie
		,bit_marca
		,bit_modelo
		,bit_tipo
		,bit_placa
		,bit_chassi
		,bit_anoFabricacao
		,bit_quilometragem
		,bit_potencia
		,bit_unidadePotencia
		,bit_cilindros
		,sp_id
		,tb_id
		,bit_codProgFinanc
		,bit_matriculaPessoa
		,bit_codEspecie

	FROM
		BemItem WITH(NOLOCK)
	WHERE 
		tb_id = @tb_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItem_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItem_UPDATE]
	@bem_id BIGINT
	,@bit_id INT	
	, @stc_id INT
	, @loc_id INT
	, @dep_id INT
	, @aps_id BIGINT
	, @fat_id INT
	, @bit_referencia VARCHAR (250)
	, @bit_uniGestora INT
	, @bit_uniGuarda INT
	, @bit_registroPat VARCHAR (20)
	, @bit_GPB VARCHAR (20)
	, @bit_GRB VARCHAR (20)
	, @bit_valorOrigem MONEY
	, @bit_valorLiquido MONEY
	, @bit_vidaUtil INT
	, @bit_cotas INT
	, @bit_dataDepInicio DATETIME
	, @bit_dataDepFim DATETIME
	, @bit_doctoBaixa VARCHAR (20)
	, @bit_dataBaixa DATETIME
	, @bit_dataIncorporacao DATETIME
	, @bit_contado BIT
	, @bit_dataInventario DATETIME
	, @bit_status TINYINT
	, @bit_dataAlteracaoStatus DATETIME
	, @bit_observacao varchar(max) 
	, @bit_dataFimGarantia DATETIME
	, @bit_situacao TINYINT
	, @bit_dataCriacao DATETIME
	, @bit_dataAlteracao DATETIME
	, @bit_registroPatAnterior VARCHAR (20)
	, @bit_nroSerie VARCHAR (30)
	, @bit_marca VARCHAR (30)
	, @bit_modelo VARCHAR (30)
	, @bit_tipo VARCHAR (30)
	, @bit_placa VARCHAR (10)
	, @bit_chassi VARCHAR (50)
	, @bit_anoFabricacao VARCHAR (4)
	, @bit_quilometragem INT
	, @bit_potencia VARCHAR (10)
	, @bit_unidadePotencia VARCHAR (10)
	, @bit_cilindros VARCHAR (10)
	, @sp_id VARCHAR (5)
	, @tb_id VARCHAR (5)
	, @bit_codProgFinanc VARCHAR (100)
	, @bit_matriculaPessoa VARCHAR (100)
	, @bit_codEspecie VARCHAR (50)

AS
BEGIN
	UPDATE BemItem 
	SET 
		stc_id = @stc_id 		
		, loc_id = @loc_id 
		, dep_id = @dep_id 
		, aps_id = @aps_id 
		, fat_id = @fat_id 
		, bit_referencia = @bit_referencia 
		, bit_uniGestora = @bit_uniGestora 
		, bit_uniGuarda = @bit_uniGuarda 
		, bit_registroPat = @bit_registroPat 
		, bit_GPB = @bit_GPB 
		, bit_GRB = @bit_GRB 
		, bit_valorOrigem = @bit_valorOrigem 
		, bit_valorLiquido = @bit_valorLiquido 
		, bit_vidaUtil = @bit_vidaUtil 
		, bit_cotas = @bit_cotas 
		, bit_dataDepInicio = @bit_dataDepInicio 
		, bit_dataDepFim = @bit_dataDepFim 
		, bit_doctoBaixa = @bit_doctoBaixa 
		, bit_dataBaixa = @bit_dataBaixa 
		, bit_dataIncorporacao = @bit_dataIncorporacao 
		, bit_contado = @bit_contado 
		, bit_dataInventario = @bit_dataInventario 
		, bit_status = @bit_status 
		, bit_dataAlteracaoStatus = @bit_dataAlteracaoStatus 
		, bit_observacao = @bit_observacao 
		, bit_dataFimGarantia = @bit_dataFimGarantia 
		, bit_situacao = @bit_situacao 
		, bit_dataCriacao = @bit_dataCriacao 
		, bit_dataAlteracao = @bit_dataAlteracao 
		, bit_registroPatAnterior = @bit_registroPatAnterior 
		, bit_nroSerie = @bit_nroSerie 
		, bit_marca = @bit_marca 
		, bit_modelo = @bit_modelo 
		, bit_tipo = @bit_tipo 
		, bit_placa = @bit_placa 
		, bit_chassi = @bit_chassi 
		, bit_anoFabricacao = @bit_anoFabricacao 
		, bit_quilometragem = @bit_quilometragem 
		, bit_potencia = @bit_potencia 
		, bit_unidadePotencia = @bit_unidadePotencia 
		, bit_cilindros = @bit_cilindros 
		, sp_id = @sp_id 
		, tb_id = @tb_id 
		, bit_codProgFinanc = @bit_codProgFinanc 
		, bit_matriculaPessoa = @bit_matriculaPessoa 
		, bit_codEspecie = @bit_codEspecie 

	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id		

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemArquivo_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemArquivo_DELETE]
	@bem_id BIGINT
	, @bit_id INT
	, @arq_id BIGINT

AS
BEGIN
	DELETE FROM 
		BemItemArquivo 
	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND arq_id = @arq_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemArquivo_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemArquivo_INSERT]
	@bem_id BigInt
	, @bit_id Int
	, @arq_id BigInt
	, @bia_legenda VarChar (100)
	, @bia_observacao VarChar (2000)
	, @bia_tipo TinyInt
	, @bia_dataCriacao DateTime
	, @bia_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		BemItemArquivo
		( 
			bem_id 
			, bit_id 
			, arq_id 
			, bia_legenda 
			, bia_observacao 
			, bia_tipo 
			, bia_dataCriacao 
			, bia_dataAlteracao 
 
		)
	VALUES
		( 
			@bem_id 
			, @bit_id 
			, @arq_id 
			, @bia_legenda 
			, @bia_observacao 
			, @bia_tipo 
			, @bia_dataCriacao 
			, @bia_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemArquivo_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemArquivo_LOAD]
	@bem_id BigInt
	, @bit_id Int
	, @arq_id BigInt
	
AS
BEGIN
	SELECT	Top 1
		 bem_id  
		, bit_id 
		, arq_id 
		, bia_legenda 
		, bia_observacao 
		, bia_tipo 
		, bia_dataCriacao 
		, bia_dataAlteracao 

 	FROM
 		BemItemArquivo
	WHERE 
		bem_id = @bem_id
		AND bit_id = @bit_id
		AND arq_id = @arq_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemArquivo_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemArquivo_SELECT]
	
AS
BEGIN
	SELECT 
		bem_id
		,bit_id
		,arq_id
		,bia_legenda
		,bia_observacao
		,bia_tipo
		,bia_dataCriacao
		,bia_dataAlteracao

	FROM 
		BemItemArquivo WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemArquivo_SELECTBY_arq_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemArquivo_SELECTBY_arq_id]
	@arq_id BIGINT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,arq_id
		,bia_legenda
		,bia_observacao
		,bia_tipo
		,bia_dataCriacao
		,bia_dataAlteracao

	FROM
		BemItemArquivo WITH(NOLOCK)
	WHERE 
		arq_id = @arq_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemArquivo_SELECTBY_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemArquivo_SELECTBY_bem_id]
	@bem_id BIGINT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,arq_id
		,bia_legenda
		,bia_observacao
		,bia_tipo
		,bia_dataCriacao
		,bia_dataAlteracao

	FROM
		BemItemArquivo WITH(NOLOCK)
	WHERE 
		bem_id = @bem_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemArquivo_SELECTBY_bit_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemArquivo_SELECTBY_bit_id]
	@bit_id INT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,arq_id
		,bia_legenda
		,bia_observacao
		,bia_tipo
		,bia_dataCriacao
		,bia_dataAlteracao

	FROM
		BemItemArquivo WITH(NOLOCK)
	WHERE 
		bit_id = @bit_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemArquivo_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemArquivo_UPDATE]
	@bem_id BIGINT
	, @bit_id INT
	, @arq_id BIGINT
	, @bia_legenda VARCHAR (100)
	, @bia_observacao VARCHAR (2000)
	, @bia_tipo TINYINT
	, @bia_dataCriacao DATETIME
	, @bia_dataAlteracao DATETIME

AS
BEGIN
	UPDATE BemItemArquivo 
	SET 
		bia_legenda = @bia_legenda 
		, bia_observacao = @bia_observacao 
		, bia_tipo = @bia_tipo 
		, bia_dataCriacao = @bia_dataCriacao 
		, bia_dataAlteracao = @bia_dataAlteracao 

	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND arq_id = @arq_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemComposto_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemComposto_DELETE]
	@bem_id BIGINT
	, @bit_id INT
	, @bic_id INT

AS
BEGIN
	DELETE FROM 
		BemItemComposto 
	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND bic_id = @bic_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemComposto_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemComposto_INSERT]
	@bem_id BigInt
	, @bit_id Int
	, @bic_id Int
	, @bem_idParent BigInt
	, @bit_idParent Int
	, @bic_descricao VarChar (1000)
	, @bic_dataCriacao DateTime
	, @bic_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		BemItemComposto
		( 
			bem_id 
			, bit_id 
			, bic_id 
			, bem_idParent 
			, bit_idParent 
			, bic_descricao 
			, bic_dataCriacao 
			, bic_dataAlteracao 
 
		)
	VALUES
		( 
			@bem_id 
			, @bit_id 
			, @bic_id 
			, @bem_idParent 
			, @bit_idParent 
			, @bic_descricao 
			, @bic_dataCriacao 
			, @bic_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemComposto_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemComposto_LOAD]
	@bem_id BigInt
	, @bit_id Int
	, @bic_id Int
	
AS
BEGIN
	SELECT	Top 1
		 bem_id  
		, bit_id 
		, bic_id 
		, bem_idParent 
		, bit_idParent 
		, bic_descricao 
		, bic_dataCriacao 
		, bic_dataAlteracao 

 	FROM
 		BemItemComposto
	WHERE 
		bem_id = @bem_id
		AND bit_id = @bit_id
		AND bic_id = @bic_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemComposto_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemComposto_SELECT]
	
AS
BEGIN
	SELECT 
		bem_id
		,bit_id
		,bic_id
		,bem_idParent
		,bit_idParent
		,bic_descricao
		,bic_dataCriacao
		,bic_dataAlteracao

	FROM 
		BemItemComposto WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemComposto_SELECTBY_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemComposto_SELECTBY_bem_id]
	@bem_id BIGINT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,bic_id
		,bem_idParent
		,bit_idParent
		,bic_descricao
		,bic_dataCriacao
		,bic_dataAlteracao

	FROM
		BemItemComposto WITH(NOLOCK)
	WHERE 
		bem_id = @bem_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemComposto_SELECTBY_bit_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemComposto_SELECTBY_bit_id]
	@bit_id INT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,bic_id
		,bem_idParent
		,bit_idParent
		,bic_descricao
		,bic_dataCriacao
		,bic_dataAlteracao

	FROM
		BemItemComposto WITH(NOLOCK)
	WHERE 
		bit_id = @bit_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemComposto_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemComposto_UPDATE]
	@bem_id BIGINT
	, @bit_id INT
	, @bic_id INT
	, @bem_idParent BIGINT
	, @bit_idParent INT
	, @bic_descricao VARCHAR (1000)
	, @bic_dataCriacao DATETIME
	, @bic_dataAlteracao DATETIME

AS
BEGIN
	UPDATE BemItemComposto 
	SET 
		bem_idParent = @bem_idParent 
		, bit_idParent = @bit_idParent 
		, bic_descricao = @bic_descricao 
		, bic_dataCriacao = @bic_dataCriacao 
		, bic_dataAlteracao = @bic_dataAlteracao 

	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND bic_id = @bic_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemDocumento_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItemDocumento_DELETE]
	@bem_id BIGINT
	, @bit_id INT
	, @bid_id BIGINT

AS
BEGIN
	DELETE FROM 
		BemItemDocumento 
	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND bid_id = @bid_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemDocumento_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItemDocumento_INSERT]
	@bem_id BigInt
	, @bit_id Int
	, @bid_tipoDoc Int
	, @bid_numeroDoc VarChar (50)
	, @bid_porcentagem Decimal
	, @bid_classificacao NVarChar (100)
	, @bid_observacao VarChar (200)
	, @bid_dataAlteracao DateTime
	, @bid_dataCriacao DateTime
	, @bid_serie VarChar (10)
	, @bid_dataEmissaoDoc DateTime

AS
BEGIN
	INSERT INTO 
		BemItemDocumento
		( 
			bem_id 
			, bit_id 
			, bid_tipoDoc 
			, bid_numeroDoc 
			, bid_porcentagem 
			, bid_classificacao 
			, bid_observacao 
			, bid_dataAlteracao 
			, bid_dataCriacao 
			, bid_serie 
			, bid_dataEmissaoDoc 
 
		)
	VALUES
		( 
			@bem_id 
			, @bit_id 
			, @bid_tipoDoc 
			, @bid_numeroDoc 
			, @bid_porcentagem 
			, @bid_classificacao 
			, @bid_observacao 
			, @bid_dataAlteracao 
			, @bid_dataCriacao 
			, @bid_serie 
			, @bid_dataEmissaoDoc 
 
		)
		
		SELECT cast(ISNULL(SCOPE_IDENTITY(),-1) as bigint )

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemDocumento_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemDocumento_LOAD]
	@bem_id BigInt
	, @bit_id Int
	, @bid_id BigInt
	
AS
BEGIN
	SELECT	Top 1
		 bem_id  
		, bit_id 
		, bid_id 
		, bid_tipoDoc 
		, bid_numeroDoc 
		, bid_porcentagem 
		, bid_classificacao 
		, bid_observacao 
		, bid_dataAlteracao 
		, bid_dataCriacao 
		, bid_serie 
		, bid_dataEmissaoDoc 

 	FROM
 		BemItemDocumento
	WHERE 
		bem_id = @bem_id
		AND bit_id = @bit_id
		AND bid_id = @bid_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemDocumento_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[STP_BemItemDocumento_SELECT]
	
AS
BEGIN
	SELECT 
		bem_id
		,bit_id
		,bid_id
		,bid_tipoDoc
		,bid_numeroDoc
		,bid_porcentagem
		,bid_classificacao
		,bid_observacao
		,bid_dataAlteracao
		,bid_dataCriacao
		,bid_serie
		,bid_dataEmissaoDoc

	FROM 
		BemItemDocumento WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemDocumento_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemItemDocumento_UPDATE]
	@bem_id BIGINT
	, @bit_id INT
	, @bid_id BIGINT
	, @bid_tipoDoc INT
	, @bid_numeroDoc VARCHAR (50)
	, @bid_porcentagem DECIMAL (5,2)
	, @bid_classificacao NVARCHAR (100)
	, @bid_observacao VARCHAR (200)
	, @bid_dataAlteracao DATETIME
	, @bid_dataCriacao DATETIME
	, @bid_serie VARCHAR (10)
	, @bid_dataEmissaoDoc DATETIME

AS
BEGIN
	UPDATE BemItemDocumento 
	SET 
		bid_tipoDoc = @bid_tipoDoc 
		, bid_numeroDoc = @bid_numeroDoc 
		, bid_porcentagem = @bid_porcentagem 
		, bid_classificacao = @bid_classificacao 
		, bid_observacao = @bid_observacao 
		, bid_dataAlteracao = @bid_dataAlteracao 
		, bid_dataCriacao = @bid_dataCriacao 
		, bid_serie = @bid_serie 
		, bid_dataEmissaoDoc = @bid_dataEmissaoDoc 

	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND bid_id = @bid_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWfStatus_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWfStatus_DELETE]
	@bem_id BIGINT
	, @bit_id INT
	, @biw_id INT
	, @bws_id INT

AS
BEGIN
	DELETE FROM 
		BemItemWfStatus 
	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND biw_id = @biw_id 
		AND bws_id = @bws_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWfStatus_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWfStatus_INSERT]
	  @bem_id BigInt
	, @bit_id Int
	, @biw_id Int	
	, @wrk_id Int
	, @stp_id Int
	, @usu_id UNIQUEIDENTIFIER
	, @bws_observacao VarChar (1000)
	, @bws_situacao TinyInt
	, @bws_dataCriacao DateTime
	, @bws_dataAlteracao DateTime

AS
if not exists (	
				select 
						1 
				from 
						BemItemWfStatus with(nolock)
				where 
						1 = 1 
						and	bem_id = @bem_id 
						and	bit_id= @bit_id 
						and biw_id = @biw_id 
						and wrk_id = @wrk_id 
						and stp_id = @stp_id 
						and bws_situacao = @bws_situacao
				
				)
	BEGIN
		INSERT INTO 
			BemItemWfStatus
			( 
				bem_id 
				, bit_id 
				, biw_id 			
				, wrk_id 
				, stp_id 
				, usu_id 
				, bws_observacao 
				, bws_situacao 
				, bws_dataCriacao 
				, bws_dataAlteracao 
 
			)
		VALUES
			( 
				@bem_id 
				, @bit_id 
				, @biw_id 			
				, @wrk_id 
				, @stp_id 
				, @usu_id 
				, @bws_observacao 
				, @bws_situacao 
				, @bws_dataCriacao 
				, @bws_dataAlteracao 
 
			)
		
		
	
	END

		SELECT ISNULL(SCOPE_IDENTITY(),-1)
GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWfStatus_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWfStatus_LOAD]
	@bem_id BigInt
	, @bit_id Int
	, @biw_id Int
	, @bws_id Int
	
AS
BEGIN
	SELECT	Top 1
		 bem_id  
		, bit_id 
		, biw_id 
		, bws_id 
		, wrk_id 
		, stp_id 
		, usu_id 
		, bws_observacao 
		, bws_situacao 
		, bws_dataCriacao 
		, bws_dataAlteracao 

 	FROM
 		BemItemWfStatus
	WHERE 
		bem_id = @bem_id
		AND bit_id = @bit_id
		AND biw_id = @biw_id
		AND bws_id = @bws_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWfStatus_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWfStatus_SELECT]
	
AS
BEGIN
	SELECT 
		bem_id
		,bit_id
		,biw_id
		,bws_id
		,wrk_id
		,stp_id
		,usu_id
		,bws_observacao
		,bws_situacao
		,bws_dataCriacao
		,bws_dataAlteracao

	FROM 
		BemItemWfStatus WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWfStatus_SELECTBY_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWfStatus_SELECTBY_bem_id]
	@bem_id BIGINT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,biw_id
		,bws_id
		,wrk_id
		,stp_id
		,usu_id
		,bws_observacao
		,bws_situacao
		,bws_dataCriacao
		,bws_dataAlteracao

	FROM
		BemItemWfStatus WITH(NOLOCK)
	WHERE 
		bem_id = @bem_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWfStatus_SELECTBY_bit_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWfStatus_SELECTBY_bit_id]
	@bit_id INT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,biw_id
		,bws_id
		,wrk_id
		,stp_id
		,usu_id
		,bws_observacao
		,bws_situacao
		,bws_dataCriacao
		,bws_dataAlteracao

	FROM
		BemItemWfStatus WITH(NOLOCK)
	WHERE 
		bit_id = @bit_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWfStatus_SELECTBY_biw_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWfStatus_SELECTBY_biw_id]
	@biw_id INT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,biw_id
		,bws_id
		,wrk_id
		,stp_id
		,usu_id
		,bws_observacao
		,bws_situacao
		,bws_dataCriacao
		,bws_dataAlteracao

	FROM
		BemItemWfStatus WITH(NOLOCK)
	WHERE 
		biw_id = @biw_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWfStatus_SELECTBY_stp_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWfStatus_SELECTBY_stp_id]
	@stp_id INT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,biw_id
		,bws_id
		,wrk_id
		,stp_id
		,usu_id
		,bws_observacao
		,bws_situacao
		,bws_dataCriacao
		,bws_dataAlteracao

	FROM
		BemItemWfStatus WITH(NOLOCK)
	WHERE 
		stp_id = @stp_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWfStatus_SELECTBY_wrk_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWfStatus_SELECTBY_wrk_id]
	@wrk_id INT
AS
BEGIN
	SELECT
		bem_id
		,bit_id
		,biw_id
		,bws_id
		,wrk_id
		,stp_id
		,usu_id
		,bws_observacao
		,bws_situacao
		,bws_dataCriacao
		,bws_dataAlteracao

	FROM
		BemItemWfStatus WITH(NOLOCK)
	WHERE 
		wrk_id = @wrk_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWfStatus_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWfStatus_UPDATE]
	@bem_id BIGINT
	,@bws_id INT
	, @bit_id INT
	, @biw_id INT	
	, @wrk_id INT
	, @stp_id INT
	, @usu_id UNIQUEIDENTIFIER
	, @bws_observacao VARCHAR (1000)
	, @bws_situacao TINYINT
	, @bws_dataCriacao DATETIME
	, @bws_dataAlteracao DATETIME

AS
BEGIN
	UPDATE BemItemWfStatus 
	SET 
		wrk_id = @wrk_id 
		, stp_id = @stp_id 
		, usu_id = @usu_id 
		, bws_observacao = @bws_observacao 
		, bws_situacao = @bws_situacao 
		, bws_dataCriacao = @bws_dataCriacao 
		, bws_dataAlteracao = @bws_dataAlteracao 

	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND biw_id = @biw_id 
		AND bws_id = @bws_id		

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWorkflow_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWorkflow_DELETE]
	@bem_id BIGINT
	, @bit_id INT
	, @biw_id INT

AS
BEGIN
	DELETE FROM 
		BemItemWorkflow 
	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND biw_id = @biw_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWorkflow_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWorkflow_INSERT]
	@bem_id BigInt
	, @bit_id Int
	, @wrk_id Int
	, @biw_situacao TinyInt
	, @biw_dataCriacao DateTime
	, @biw_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		BemItemWorkflow
		( 
			bem_id 
			, bit_id 
			, wrk_id 
			, biw_situacao 
			, biw_dataCriacao 
			, biw_dataAlteracao 
 
		)
	VALUES
		( 
			@bem_id 
			, @bit_id 
			, @wrk_id 
			, @biw_situacao 
			, @biw_dataCriacao 
			, @biw_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWorkflow_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWorkflow_LOAD]
	@bem_id BigInt
	, @bit_id Int
	, @biw_id Int
	
AS
BEGIN
	SELECT	Top 1
		 bem_id  
		, bit_id 
		, biw_id 
		, wrk_id 
		, biw_situacao 
		, biw_dataCriacao 
		, biw_dataAlteracao 

 	FROM
 		BemItemWorkflow
	WHERE 
		bem_id = @bem_id
		AND bit_id = @bit_id
		AND biw_id = @biw_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemItemWorkflow_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemItemWorkflow_UPDATE]
	@bem_id BIGINT
	, @bit_id INT
	, @biw_id INT
	, @wrk_id INT
	, @biw_situacao TINYINT
	, @biw_dataCriacao DATETIME
	, @biw_dataAlteracao DATETIME

AS
BEGIN
	UPDATE BemItemWorkflow 
	SET 
		wrk_id = @wrk_id 
		, biw_situacao = @biw_situacao 
		, biw_dataCriacao = @biw_dataCriacao 
		, biw_dataAlteracao = @biw_dataAlteracao 

	WHERE 
		bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND biw_id = @biw_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonial_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemPatrimonial_DELETE]
	@bem_id BIGINT

AS
BEGIN
	DELETE FROM 
		BemPatrimonial 
	WHERE 
		bem_id = @bem_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonial_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemPatrimonial_INSERT]
	@grp_id Int
	, @for_id Int
	, @bem_tipo TinyInt
	, @bem_legado Bit
	, @bem_cadmat VarChar (40)
	, @bem_descricao VarChar (1000)
	, @bem_ne Char (11)
	, @bem_processo VarChar (50)
	, @bem_contrProcessual VarChar (50)
	, @bem_doctoCompra VarChar (20)
	, @bem_qtdeInicial Int
	, @bem_dataEntrada DateTime
	, @bem_valorOrigem Money
	, @bem_origem TinyInt
	, @bem_observacao varchar(max)
	, @bem_dataCriacao DateTime
	, @bem_dataAlteracao DateTime
	, @bem_natureza int

AS
BEGIN
	INSERT INTO 
		BemPatrimonial
		( 
			grp_id 
			, for_id 
			, bem_tipo 
			, bem_legado 
			, bem_cadmat 
			, bem_descricao 
			, bem_ne 
			, bem_processo 
			, bem_contrProcessual 
			, bem_doctoCompra 
			, bem_qtdeInicial 
			, bem_dataEntrada 
			, bem_valorOrigem 
			, bem_origem 
			, bem_observacao 
			, bem_dataCriacao 
			, bem_dataAlteracao
			, bem_natureza 
 
		)
	VALUES
		( 
			@grp_id 
			, @for_id 
			, @bem_tipo 
			, @bem_legado 
			, @bem_cadmat 
			, @bem_descricao 
			, @bem_ne 
			, @bem_processo 
			, @bem_contrProcessual 
			, @bem_doctoCompra 
			, @bem_qtdeInicial 
			, @bem_dataEntrada 
			, @bem_valorOrigem 
			, @bem_origem 
			, @bem_observacao 
			, @bem_dataCriacao 
			, @bem_dataAlteracao 
			, @bem_natureza
 
		)
		
		SELECT cast(ISNULL(SCOPE_IDENTITY(),-1) as bigint )

	
	
END



GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonial_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemPatrimonial_LOAD]
	@bem_id BigInt
	
AS
BEGIN
	SELECT	Top 1
		 bem_id  
		, grp_id 
		, for_id 
		, bem_tipo 
		, bem_legado 
		, bem_cadmat 
		, bem_descricao 
		, bem_ne 
		, bem_processo 
		, bem_contrProcessual 
		, bem_doctoCompra 
		, bem_qtdeInicial 
		, bem_dataEntrada 
		, bem_valorOrigem 
		, bem_origem 
		, bem_observacao 
		, bem_dataCriacao 
		, bem_dataAlteracao
		, bem_natureza 

 	FROM
 		BemPatrimonial with(nolock)
	WHERE 
		bem_id = @bem_id
END



GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonial_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemPatrimonial_SELECT]
	
AS
BEGIN
	SELECT 
		bem_id
		,grp_id
		,for_id
		,bem_tipo
		,bem_legado
		,bem_cadmat
		,bem_descricao
		,bem_ne
		,bem_processo
		,bem_contrProcessual
		,bem_doctoCompra
		,bem_qtdeInicial
		,bem_dataEntrada
		,bem_valorOrigem
		,bem_origem
		,bem_observacao
		,bem_dataCriacao
		,bem_dataAlteracao

	FROM 
		BemPatrimonial WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonial_SELECTBY_for_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemPatrimonial_SELECTBY_for_id]
	@for_id INT
AS
BEGIN
	SELECT
		bem_id
		,grp_id
		,for_id
		,bem_tipo
		,bem_legado
		,bem_cadmat
		,bem_descricao
		,bem_ne
		,bem_processo
		,bem_contrProcessual
		,bem_doctoCompra
		,bem_qtdeInicial
		,bem_dataEntrada
		,bem_valorOrigem
		,bem_origem
		,bem_observacao
		,bem_dataCriacao
		,bem_dataAlteracao

	FROM
		BemPatrimonial WITH(NOLOCK)
	WHERE 
		for_id = @for_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonial_SELECTBY_grp_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemPatrimonial_SELECTBY_grp_id]
	@grp_id INT
AS
BEGIN
	SELECT
		bem_id
		,grp_id
		,for_id
		,bem_tipo
		,bem_legado
		,bem_cadmat
		,bem_descricao
		,bem_ne
		,bem_processo
		,bem_contrProcessual
		,bem_doctoCompra
		,bem_qtdeInicial
		,bem_dataEntrada
		,bem_valorOrigem
		,bem_origem
		,bem_observacao
		,bem_dataCriacao
		,bem_dataAlteracao

	FROM
		BemPatrimonial WITH(NOLOCK)
	WHERE 
		grp_id = @grp_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonial_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemPatrimonial_UPDATE]
	@bem_id BIGINT
	, @grp_id INT
	, @for_id INT
	, @bem_tipo TINYINT
	, @bem_legado BIT
	, @bem_cadmat VARCHAR (40)
	, @bem_descricao VARCHAR (1000)
	, @bem_ne CHAR (11)
	, @bem_processo VARCHAR (50)
	, @bem_contrProcessual VARCHAR (50)
	, @bem_doctoCompra VARCHAR (20)
	, @bem_qtdeInicial INT
	, @bem_dataEntrada DATETIME
	, @bem_valorOrigem MONEY
	, @bem_origem TINYINT
	, @bem_observacao varchar(max)
	, @bem_dataCriacao DATETIME
	, @bem_dataAlteracao DATETIME

AS
BEGIN
	UPDATE BemPatrimonial 
	SET 
		grp_id = @grp_id 
		, for_id = @for_id 
		, bem_tipo = @bem_tipo 
		, bem_legado = @bem_legado 
		, bem_cadmat = @bem_cadmat 
		, bem_descricao = @bem_descricao 
		, bem_ne = @bem_ne 
		, bem_processo = @bem_processo 
		, bem_contrProcessual = @bem_contrProcessual 
		, bem_doctoCompra = @bem_doctoCompra 
		, bem_qtdeInicial = @bem_qtdeInicial 
		, bem_dataEntrada = @bem_dataEntrada 
		, bem_valorOrigem = @bem_valorOrigem 
		, bem_origem = @bem_origem 
		, bem_observacao = @bem_observacao 
		, bem_dataCriacao = @bem_dataCriacao 
		, bem_dataAlteracao = @bem_dataAlteracao 

	WHERE 
		bem_id = @bem_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonialLegado_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemPatrimonialLegado_DELETE]
	@bpl_id INT

AS
BEGIN
	DELETE FROM 
		BemPatrimonialLegado 
	WHERE 
		bpl_id = @bpl_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonialLegado_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemPatrimonialLegado_INSERT]
	@bpl_registroPatrimonial VarChar (100)
	, @bpl_cadmat VarChar (40)
	, @bpl_material VarChar (500)
	, @bpl_numeroDoc1 VarChar (50)
	, @bpl_dataCriacaoDoc1 DateTime
	, @bpl_numeroDoc2 VarChar (100)
	, @bpl_dataCriacaoDoc2 DateTime
	, @bpl_numeroDoc3 VarChar (100)
	, @bpl_dataCriacaoDoc3 DateTime
	, @bpl_numeroDoc4 VarChar (100)
	, @bpl_dataCriacaoDoc4 DateTime
	, @bpl_numeroDoc5 VarChar (100)
	, @bpl_dataCriacaoDoc5 DateTime
	, @bpl_numeroDoc6 VarChar (100)
	, @bpl_dataCriacaoDoc6 DateTime
	, @bpl_cnpjFornecedor VarChar (14)
	, @bpl_razaoSocialFornecedor VarChar (200)
	, @bpl_valorUnitario Money
	, @bpl_valorTotal Money
	, @bpl_statusConservacao VarChar (50)
	, @bpl_statusUtilizacao VarChar (10)
	, @bpl_dependencia VarChar (100)
	, @bpl_observacao VARCHAR(MAX)
	, @bpl_situacao Int
	, @bpl_dataImportacao DateTime
	, @bpl_unidade Int
	, @bpl_grupoBem VarChar (100)
	, @bpl_dataTransferencia DateTime
	, @bpl_registroPatAnterior VarChar (100)
	, @bpl_tipoBem VarChar (5)
	, @bpl_tipoBemObservacao VARCHAR(MAX)
	, @bpl_serieDocumentoCompra VarChar (100)
	, @bpl_marca VARCHAR(MAX)
	, @bpl_modelo VARCHAR(MAX)
	, @bpl_codFornecedor VarChar (100)
	, @bpl_situacaoPatrimonial VarChar (5)
	, @bpl_codProgFinanc VarChar (100)
	, @bpl_matriculaPessoa VarChar (100)
	, @bpl_codEspecie VarChar (50)
	, @bpl_nroSerie VarChar (50)
	, @bpl_nro_placa_veic VarChar (250)
	, @bpl_nro_chassi_veic VarChar (250)
	, @bpl_tipo_veic VarChar (250)
	, @bpl_marca_veic VarChar (250)
	, @bpl_modelo_veic VarChar (250)
	, @bpl_potencia_veic VarChar (250)
	, @bpl_potencia_unidade VarChar (250)
	, @bpl_cilindro_veic VarChar (250)
	, @bpl_ano_fabr_veic VarChar (250)
	, @bpl_quilometragem_veic VarChar (250)
	, @bpl_tipo TinyInt
	, @bpl_quantidade Int
	, @bpl_log VARCHAR(MAX)

AS
BEGIN
	INSERT INTO 
		BemPatrimonialLegado
		( 
			bpl_registroPatrimonial 
			, bpl_cadmat 
			, bpl_material 
			, bpl_numeroDoc1 
			, bpl_dataCriacaoDoc1 
			, bpl_numeroDoc2 
			, bpl_dataCriacaoDoc2 
			, bpl_numeroDoc3 
			, bpl_dataCriacaoDoc3 
			, bpl_numeroDoc4 
			, bpl_dataCriacaoDoc4 
			, bpl_numeroDoc5 
			, bpl_dataCriacaoDoc5 
			, bpl_numeroDoc6 
			, bpl_dataCriacaoDoc6 
			, bpl_cnpjFornecedor 
			, bpl_razaoSocialFornecedor 
			, bpl_valorUnitario 
			, bpl_valorTotal 
			, bpl_statusConservacao 
			, bpl_statusUtilizacao 
			, bpl_dependencia 
			, bpl_observacao 
			, bpl_situacao 
			, bpl_dataImportacao 
			, bpl_unidade 
			, bpl_grupoBem 
			, bpl_dataTransferencia 
			, bpl_registroPatAnterior 
			, bpl_tipoBem 
			, bpl_tipoBemObservacao 
			, bpl_serieDocumentoCompra 
			, bpl_marca 
			, bpl_modelo 
			, bpl_codFornecedor 
			, bpl_situacaoPatrimonial 
			, bpl_codProgFinanc 
			, bpl_matriculaPessoa 
			, bpl_codEspecie 
			, bpl_nroSerie 
			, bpl_nro_placa_veic 
			, bpl_nro_chassi_veic 
			, bpl_tipo_veic 
			, bpl_marca_veic 
			, bpl_modelo_veic 
			, bpl_potencia_veic 
			, bpl_potencia_unidade 
			, bpl_cilindro_veic 
			, bpl_ano_fabr_veic 
			, bpl_quilometragem_veic 
			, bpl_tipo 
			, bpl_quantidade 
			, bpl_log 
 
		)
	VALUES
		( 
			@bpl_registroPatrimonial 
			, @bpl_cadmat 
			, @bpl_material 
			, @bpl_numeroDoc1 
			, @bpl_dataCriacaoDoc1 
			, @bpl_numeroDoc2 
			, @bpl_dataCriacaoDoc2 
			, @bpl_numeroDoc3 
			, @bpl_dataCriacaoDoc3 
			, @bpl_numeroDoc4 
			, @bpl_dataCriacaoDoc4 
			, @bpl_numeroDoc5 
			, @bpl_dataCriacaoDoc5 
			, @bpl_numeroDoc6 
			, @bpl_dataCriacaoDoc6 
			, @bpl_cnpjFornecedor 
			, @bpl_razaoSocialFornecedor 
			, @bpl_valorUnitario 
			, @bpl_valorTotal 
			, @bpl_statusConservacao 
			, @bpl_statusUtilizacao 
			, @bpl_dependencia 
			, @bpl_observacao 
			, @bpl_situacao 
			, @bpl_dataImportacao 
			, @bpl_unidade 
			, @bpl_grupoBem 
			, @bpl_dataTransferencia 
			, @bpl_registroPatAnterior 
			, @bpl_tipoBem 
			, @bpl_tipoBemObservacao 
			, @bpl_serieDocumentoCompra 
			, @bpl_marca 
			, @bpl_modelo 
			, @bpl_codFornecedor 
			, @bpl_situacaoPatrimonial 
			, @bpl_codProgFinanc 
			, @bpl_matriculaPessoa 
			, @bpl_codEspecie 
			, @bpl_nroSerie 
			, @bpl_nro_placa_veic 
			, @bpl_nro_chassi_veic 
			, @bpl_tipo_veic 
			, @bpl_marca_veic 
			, @bpl_modelo_veic 
			, @bpl_potencia_veic 
			, @bpl_potencia_unidade 
			, @bpl_cilindro_veic 
			, @bpl_ano_fabr_veic 
			, @bpl_quilometragem_veic 
			, @bpl_tipo 
			, @bpl_quantidade 
			, @bpl_log 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonialLegado_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BemPatrimonialLegado_LOAD]
	@bpl_id Int
	
AS
BEGIN
	SELECT	Top 1
		 bpl_registroPatrimonial  
		, bpl_cadmat 
		, bpl_material 
		, bpl_numeroDoc1 
		, bpl_dataCriacaoDoc1 
		, bpl_numeroDoc2 
		, bpl_dataCriacaoDoc2 
		, bpl_numeroDoc3 
		, bpl_dataCriacaoDoc3 
		, bpl_numeroDoc4 
		, bpl_dataCriacaoDoc4 
		, bpl_numeroDoc5 
		, bpl_dataCriacaoDoc5 
		, bpl_numeroDoc6 
		, bpl_dataCriacaoDoc6 
		, bpl_cnpjFornecedor 
		, bpl_razaoSocialFornecedor 
		, bpl_valorUnitario 
		, bpl_valorTotal 
		, bpl_statusConservacao 
		, bpl_statusUtilizacao 
		, bpl_dependencia 
		, bpl_observacao 
		, bpl_situacao 
		, bpl_dataImportacao 
		, bpl_unidade 
		, bpl_grupoBem 
		, bpl_id 
		, bpl_dataTransferencia 
		, bpl_registroPatAnterior 
		, bpl_tipoBem 
		, bpl_tipoBemObservacao 
		, bpl_serieDocumentoCompra 
		, bpl_marca 
		, bpl_modelo 
		, bpl_codFornecedor 
		, bpl_situacaoPatrimonial 
		, bpl_codProgFinanc 
		, bpl_matriculaPessoa 
		, bpl_codEspecie 
		, bpl_nroSerie 
		, bpl_nro_placa_veic 
		, bpl_nro_chassi_veic 
		, bpl_tipo_veic 
		, bpl_marca_veic 
		, bpl_modelo_veic 
		, bpl_potencia_veic 
		, bpl_potencia_unidade 
		, bpl_cilindro_veic 
		, bpl_ano_fabr_veic 
		, bpl_quilometragem_veic 
		, bpl_tipo 
		, bpl_quantidade 
		, bpl_log 

 	FROM
 		BemPatrimonialLegado
	WHERE 
		bpl_id = @bpl_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonialLegado_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemPatrimonialLegado_SELECT]
	
AS
BEGIN
	SELECT 
		bpl_registroPatrimonial
		,bpl_cadmat
		,bpl_material
		,bpl_numeroDoc1
		,bpl_dataCriacaoDoc1
		,bpl_numeroDoc2
		,bpl_dataCriacaoDoc2
		,bpl_numeroDoc3
		,bpl_dataCriacaoDoc3
		,bpl_numeroDoc4
		,bpl_dataCriacaoDoc4
		,bpl_numeroDoc5
		,bpl_dataCriacaoDoc5
		,bpl_numeroDoc6
		,bpl_dataCriacaoDoc6
		,bpl_cnpjFornecedor
		,bpl_razaoSocialFornecedor
		,bpl_valorUnitario
		,bpl_valorTotal
		,bpl_statusConservacao
		,bpl_statusUtilizacao
		,bpl_dependencia
		,bpl_observacao
		,bpl_situacao
		,bpl_dataImportacao
		,bpl_unidade
		,bpl_grupoBem
		,bpl_id
		,bpl_dataTransferencia
		,bpl_registroPatAnterior
		,bpl_tipoBem
		,bpl_tipoBemObservacao
		,bpl_serieDocumentoCompra
		,bpl_marca
		,bpl_modelo
		,bpl_codFornecedor
		,bpl_situacaoPatrimonial
		,bpl_codProgFinanc
		,bpl_matriculaPessoa
		,bpl_codEspecie
		,bpl_nroSerie
		,bpl_nro_placa_veic
		,bpl_nro_chassi_veic
		,bpl_tipo_veic
		,bpl_marca_veic
		,bpl_modelo_veic
		,bpl_potencia_veic
		,bpl_potencia_unidade
		,bpl_cilindro_veic
		,bpl_ano_fabr_veic
		,bpl_quilometragem_veic
		,bpl_tipo
		,bpl_quantidade
		,bpl_log

	FROM 
		BemPatrimonialLegado WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BemPatrimonialLegado_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BemPatrimonialLegado_UPDATE]
	@bpl_registroPatrimonial VARCHAR (100)
	, @bpl_cadmat VARCHAR (40)
	, @bpl_material VARCHAR (500)
	, @bpl_numeroDoc1 VARCHAR (50)
	, @bpl_dataCriacaoDoc1 DATETIME
	, @bpl_numeroDoc2 VARCHAR (100)
	, @bpl_dataCriacaoDoc2 DATETIME
	, @bpl_numeroDoc3 VARCHAR (100)
	, @bpl_dataCriacaoDoc3 DATETIME
	, @bpl_numeroDoc4 VARCHAR (100)
	, @bpl_dataCriacaoDoc4 DATETIME
	, @bpl_numeroDoc5 VARCHAR (100)
	, @bpl_dataCriacaoDoc5 DATETIME
	, @bpl_numeroDoc6 VARCHAR (100)
	, @bpl_dataCriacaoDoc6 DATETIME
	, @bpl_cnpjFornecedor VARCHAR (14)
	, @bpl_razaoSocialFornecedor VARCHAR (200)
	, @bpl_valorUnitario MONEY
	, @bpl_valorTotal MONEY
	, @bpl_statusConservacao VARCHAR (50)
	, @bpl_statusUtilizacao VARCHAR (10)
	, @bpl_dependencia VARCHAR (100)
	, @bpl_observacao VARCHAR(MAX)
	, @bpl_situacao INT
	, @bpl_dataImportacao DATETIME
	, @bpl_unidade INT
	, @bpl_grupoBem VARCHAR (100)
	, @bpl_id INT
	, @bpl_dataTransferencia DATETIME
	, @bpl_registroPatAnterior VARCHAR (100)
	, @bpl_tipoBem VARCHAR (5)
	, @bpl_tipoBemObservacao VARCHAR(MAX)
	, @bpl_serieDocumentoCompra VARCHAR (100)
	, @bpl_marca VARCHAR(MAX)
	, @bpl_modelo VARCHAR(MAX)
	, @bpl_codFornecedor VARCHAR (100)
	, @bpl_situacaoPatrimonial VARCHAR (5)
	, @bpl_codProgFinanc VARCHAR (100)
	, @bpl_matriculaPessoa VARCHAR (100)
	, @bpl_codEspecie VARCHAR (50)
	, @bpl_nroSerie VARCHAR (50)
	, @bpl_nro_placa_veic VARCHAR (250)
	, @bpl_nro_chassi_veic VARCHAR (250)
	, @bpl_tipo_veic VARCHAR (250)
	, @bpl_marca_veic VARCHAR (250)
	, @bpl_modelo_veic VARCHAR (250)
	, @bpl_potencia_veic VARCHAR (250)
	, @bpl_potencia_unidade VARCHAR (250)
	, @bpl_cilindro_veic VARCHAR (250)
	, @bpl_ano_fabr_veic VARCHAR (250)
	, @bpl_quilometragem_veic VARCHAR (250)
	, @bpl_tipo TINYINT
	, @bpl_quantidade INT
	, @bpl_log VARCHAR(MAX)

AS
BEGIN
	UPDATE BemPatrimonialLegado 
	SET 
		bpl_registroPatrimonial = @bpl_registroPatrimonial 
		, bpl_cadmat = @bpl_cadmat 
		, bpl_material = @bpl_material 
		, bpl_numeroDoc1 = @bpl_numeroDoc1 
		, bpl_dataCriacaoDoc1 = @bpl_dataCriacaoDoc1 
		, bpl_numeroDoc2 = @bpl_numeroDoc2 
		, bpl_dataCriacaoDoc2 = @bpl_dataCriacaoDoc2 
		, bpl_numeroDoc3 = @bpl_numeroDoc3 
		, bpl_dataCriacaoDoc3 = @bpl_dataCriacaoDoc3 
		, bpl_numeroDoc4 = @bpl_numeroDoc4 
		, bpl_dataCriacaoDoc4 = @bpl_dataCriacaoDoc4 
		, bpl_numeroDoc5 = @bpl_numeroDoc5 
		, bpl_dataCriacaoDoc5 = @bpl_dataCriacaoDoc5 
		, bpl_numeroDoc6 = @bpl_numeroDoc6 
		, bpl_dataCriacaoDoc6 = @bpl_dataCriacaoDoc6 
		, bpl_cnpjFornecedor = @bpl_cnpjFornecedor 
		, bpl_razaoSocialFornecedor = @bpl_razaoSocialFornecedor 
		, bpl_valorUnitario = @bpl_valorUnitario 
		, bpl_valorTotal = @bpl_valorTotal 
		, bpl_statusConservacao = @bpl_statusConservacao 
		, bpl_statusUtilizacao = @bpl_statusUtilizacao 
		, bpl_dependencia = @bpl_dependencia 
		, bpl_observacao = @bpl_observacao 
		, bpl_situacao = @bpl_situacao 
		, bpl_dataImportacao = @bpl_dataImportacao 
		, bpl_unidade = @bpl_unidade 
		, bpl_grupoBem = @bpl_grupoBem 
		, bpl_dataTransferencia = @bpl_dataTransferencia 
		, bpl_registroPatAnterior = @bpl_registroPatAnterior 
		, bpl_tipoBem = @bpl_tipoBem 
		, bpl_tipoBemObservacao = @bpl_tipoBemObservacao 
		, bpl_serieDocumentoCompra = @bpl_serieDocumentoCompra 
		, bpl_marca = @bpl_marca 
		, bpl_modelo = @bpl_modelo 
		, bpl_codFornecedor = @bpl_codFornecedor 
		, bpl_situacaoPatrimonial = @bpl_situacaoPatrimonial 
		, bpl_codProgFinanc = @bpl_codProgFinanc 
		, bpl_matriculaPessoa = @bpl_matriculaPessoa 
		, bpl_codEspecie = @bpl_codEspecie 
		, bpl_nroSerie = @bpl_nroSerie 
		, bpl_nro_placa_veic = @bpl_nro_placa_veic 
		, bpl_nro_chassi_veic = @bpl_nro_chassi_veic 
		, bpl_tipo_veic = @bpl_tipo_veic 
		, bpl_marca_veic = @bpl_marca_veic 
		, bpl_modelo_veic = @bpl_modelo_veic 
		, bpl_potencia_veic = @bpl_potencia_veic 
		, bpl_potencia_unidade = @bpl_potencia_unidade 
		, bpl_cilindro_veic = @bpl_cilindro_veic 
		, bpl_ano_fabr_veic = @bpl_ano_fabr_veic 
		, bpl_quilometragem_veic = @bpl_quilometragem_veic 
		, bpl_tipo = @bpl_tipo 
		, bpl_quantidade = @bpl_quantidade 
		, bpl_log = @bpl_log 

	WHERE 
		bpl_id = @bpl_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BensPatrimonialImportacao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BensPatrimonialImportacao_DELETE]
	
AS
BEGIN
	DELETE FROM 
		BensPatrimonialImportacao 
	
		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BensPatrimonialImportacao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BensPatrimonialImportacao_INSERT]
	@bpi_cadmat VarChar (40)
	, @bpi_origem TinyInt
	, @bpi_processo VarChar (50)
	, @bpi_item VarChar (250)
	, @bpi_qtde Int
	, @bpi_valorUnitario Money
	, @bpi_valorTotal Money
	, @bpi_ne Char (11)
	, @bpi_nePorcent Decimal
	, @bpi_documento VarChar (20)
	, @bpi_evento VarChar (20)
	, @bpi_naturazaDesp VarChar (20)
	, @bpi_dataEntrega DateTime
	, @bpi_uo VarChar (60)
	, @bpi_uge VarChar (60)
	, @bpi_ue VarChar (60)
	, @bpi_cnpjCpfFornecedor VarChar (14)
	, @bpi_fornecedor VarChar (100)
	, @bpi_codFornecedor VarChar (20)
	, @bpi_insEstFornecedor VarChar (20)
	, @bpi_endFornecedor VarChar (200)
	, @bpi_bairroFornecedor VarChar (100)
	, @bpi_numFornecedor VarChar (10)
	, @bpi_compFornecedor VarChar (100)
	, @bpi_cepFornecedor Char (8)
	, @bpi_codCidadeFornecedor VarChar (5)
	, @bpi_cidadeFornecedor VarChar (200)
	, @bpi_ufFornecedor Char (2)
	, @bpi_contatoFornecedor VarChar (100)
	, @bpi_fone1Fornecedor VarChar (20)
	, @bpi_fone2Fornecedor VarChar (20)
	, @bpi_emailFornecedor VarChar (200)
	, @bpi_situacao TinyInt
	, @bpi_dataImportacao DateTime
	, @bpi_observacao varchar(max) 
	, @bem_id BigInt
	, @bpi_id BigInt

AS
BEGIN
	INSERT INTO 
		BensPatrimonialImportacao
		( 
			bpi_cadmat 
			, bpi_origem 
			, bpi_processo 
			, bpi_item 
			, bpi_qtde 
			, bpi_valorUnitario 
			, bpi_valorTotal 
			, bpi_ne 
			, bpi_nePorcent 
			, bpi_documento 
			, bpi_evento 
			, bpi_naturazaDesp 
			, bpi_dataEntrega 
			, bpi_uo 
			, bpi_uge 
			, bpi_ue 
			, bpi_cnpjCpfFornecedor 
			, bpi_fornecedor 
			, bpi_codFornecedor 
			, bpi_insEstFornecedor 
			, bpi_endFornecedor 
			, bpi_bairroFornecedor 
			, bpi_numFornecedor 
			, bpi_compFornecedor 
			, bpi_cepFornecedor 
			, bpi_codCidadeFornecedor 
			, bpi_cidadeFornecedor 
			, bpi_ufFornecedor 
			, bpi_contatoFornecedor 
			, bpi_fone1Fornecedor 
			, bpi_fone2Fornecedor 
			, bpi_emailFornecedor 
			, bpi_situacao 
			, bpi_dataImportacao 
			, bpi_observacao 
			, bem_id 
			, bpi_id 
 
		)
	VALUES
		( 
			@bpi_cadmat 
			, @bpi_origem 
			, @bpi_processo 
			, @bpi_item 
			, @bpi_qtde 
			, @bpi_valorUnitario 
			, @bpi_valorTotal 
			, @bpi_ne 
			, @bpi_nePorcent 
			, @bpi_documento 
			, @bpi_evento 
			, @bpi_naturazaDesp 
			, @bpi_dataEntrega 
			, @bpi_uo 
			, @bpi_uge 
			, @bpi_ue 
			, @bpi_cnpjCpfFornecedor 
			, @bpi_fornecedor 
			, @bpi_codFornecedor 
			, @bpi_insEstFornecedor 
			, @bpi_endFornecedor 
			, @bpi_bairroFornecedor 
			, @bpi_numFornecedor 
			, @bpi_compFornecedor 
			, @bpi_cepFornecedor 
			, @bpi_codCidadeFornecedor 
			, @bpi_cidadeFornecedor 
			, @bpi_ufFornecedor 
			, @bpi_contatoFornecedor 
			, @bpi_fone1Fornecedor 
			, @bpi_fone2Fornecedor 
			, @bpi_emailFornecedor 
			, @bpi_situacao 
			, @bpi_dataImportacao 
			, @bpi_observacao 
			, @bem_id 
			, @bpi_id 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BensPatrimonialImportacao_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BensPatrimonialImportacao_LOAD]
		
AS
BEGIN
	SELECT	Top 1
		 bpi_cadmat  
		, bpi_origem 
		, bpi_processo 
		, bpi_item 
		, bpi_qtde 
		, bpi_valorUnitario 
		, bpi_valorTotal 
		, bpi_ne 
		, bpi_nePorcent 
		, bpi_documento 
		, bpi_evento 
		, bpi_naturazaDesp 
		, bpi_dataEntrega 
		, bpi_uo 
		, bpi_uge 
		, bpi_ue 
		, bpi_cnpjCpfFornecedor 
		, bpi_fornecedor 
		, bpi_codFornecedor 
		, bpi_insEstFornecedor 
		, bpi_endFornecedor 
		, bpi_bairroFornecedor 
		, bpi_numFornecedor 
		, bpi_compFornecedor 
		, bpi_cepFornecedor 
		, bpi_codCidadeFornecedor 
		, bpi_cidadeFornecedor 
		, bpi_ufFornecedor 
		, bpi_contatoFornecedor 
		, bpi_fone1Fornecedor 
		, bpi_fone2Fornecedor 
		, bpi_emailFornecedor 
		, bpi_situacao 
		, bpi_dataImportacao 
		, bpi_observacao 
		, bem_id 
		, bpi_id 

 	FROM
 		BensPatrimonialImportacao
	 

END

GO
/****** Object:  StoredProcedure [dbo].[STP_BensPatrimonialImportacao_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_BensPatrimonialImportacao_SELECT]
	
AS
BEGIN
	SELECT 
		bpi_cadmat
		,bpi_origem
		,bpi_processo
		,bpi_item
		,bpi_qtde
		,bpi_valorUnitario
		,bpi_valorTotal
		,bpi_ne
		,bpi_nePorcent
		,bpi_documento
		,bpi_evento
		,bpi_naturazaDesp
		,bpi_dataEntrega
		,bpi_uo
		,bpi_uge
		,bpi_ue
		,bpi_cnpjCpfFornecedor
		,bpi_fornecedor
		,bpi_codFornecedor
		,bpi_insEstFornecedor
		,bpi_endFornecedor
		,bpi_bairroFornecedor
		,bpi_numFornecedor
		,bpi_compFornecedor
		,bpi_cepFornecedor
		,bpi_codCidadeFornecedor
		,bpi_cidadeFornecedor
		,bpi_ufFornecedor
		,bpi_contatoFornecedor
		,bpi_fone1Fornecedor
		,bpi_fone2Fornecedor
		,bpi_emailFornecedor
		,bpi_situacao
		,bpi_dataImportacao
		,bpi_observacao
		,bem_id
		,bpi_id

	FROM 
		BensPatrimonialImportacao WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BensPatrimonialImportacao_SELECTBY_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BensPatrimonialImportacao_SELECTBY_bem_id]
	@bem_id BIGINT
AS
BEGIN
	SELECT
		bpi_cadmat
		,bpi_origem
		,bpi_processo
		,bpi_item
		,bpi_qtde
		,bpi_valorUnitario
		,bpi_valorTotal
		,bpi_ne
		,bpi_nePorcent
		,bpi_documento
		,bpi_evento
		,bpi_naturazaDesp
		,bpi_dataEntrega
		,bpi_uo
		,bpi_uge
		,bpi_ue
		,bpi_cnpjCpfFornecedor
		,bpi_fornecedor
		,bpi_codFornecedor
		,bpi_insEstFornecedor
		,bpi_endFornecedor
		,bpi_bairroFornecedor
		,bpi_numFornecedor
		,bpi_compFornecedor
		,bpi_cepFornecedor
		,bpi_codCidadeFornecedor
		,bpi_cidadeFornecedor
		,bpi_ufFornecedor
		,bpi_contatoFornecedor
		,bpi_fone1Fornecedor
		,bpi_fone2Fornecedor
		,bpi_emailFornecedor
		,bpi_situacao
		,bpi_dataImportacao
		,bpi_observacao
		,bem_id
		,bpi_id

	FROM
		BensPatrimonialImportacao WITH(NOLOCK)
	WHERE 
		bem_id = @bem_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_BensPatrimonialImportacao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_BensPatrimonialImportacao_UPDATE]
	@bpi_cadmat VARCHAR (40)
	, @bpi_origem TINYINT
	, @bpi_processo VARCHAR (50)
	, @bpi_item VARCHAR (250)
	, @bpi_qtde INT
	, @bpi_valorUnitario MONEY
	, @bpi_valorTotal MONEY
	, @bpi_ne CHAR (11)
	, @bpi_nePorcent DECIMAL (5,2)
	, @bpi_documento VARCHAR (20)
	, @bpi_evento VARCHAR (20)
	, @bpi_naturazaDesp VARCHAR (20)
	, @bpi_dataEntrega DATETIME
	, @bpi_uo VARCHAR (60)
	, @bpi_uge VARCHAR (60)
	, @bpi_ue VARCHAR (60)
	, @bpi_cnpjCpfFornecedor VARCHAR (14)
	, @bpi_fornecedor VARCHAR (100)
	, @bpi_codFornecedor VARCHAR (20)
	, @bpi_insEstFornecedor VARCHAR (20)
	, @bpi_endFornecedor VARCHAR (200)
	, @bpi_bairroFornecedor VARCHAR (100)
	, @bpi_numFornecedor VARCHAR (10)
	, @bpi_compFornecedor VARCHAR (100)
	, @bpi_cepFornecedor CHAR (8)
	, @bpi_codCidadeFornecedor VARCHAR (5)
	, @bpi_cidadeFornecedor VARCHAR (200)
	, @bpi_ufFornecedor CHAR (2)
	, @bpi_contatoFornecedor VARCHAR (100)
	, @bpi_fone1Fornecedor VARCHAR (20)
	, @bpi_fone2Fornecedor VARCHAR (20)
	, @bpi_emailFornecedor VARCHAR (200)
	, @bpi_situacao TINYINT
	, @bpi_dataImportacao DATETIME
	, @bpi_observacao varchar(max) 
	, @bem_id BIGINT
	, @bpi_id BIGINT

AS
BEGIN
	UPDATE BensPatrimonialImportacao 
	SET 
		bpi_cadmat = @bpi_cadmat 
		, bpi_origem = @bpi_origem 
		, bpi_processo = @bpi_processo 
		, bpi_item = @bpi_item 
		, bpi_qtde = @bpi_qtde 
		, bpi_valorUnitario = @bpi_valorUnitario 
		, bpi_valorTotal = @bpi_valorTotal 
		, bpi_ne = @bpi_ne 
		, bpi_nePorcent = @bpi_nePorcent 
		, bpi_documento = @bpi_documento 
		, bpi_evento = @bpi_evento 
		, bpi_naturazaDesp = @bpi_naturazaDesp 
		, bpi_dataEntrega = @bpi_dataEntrega 
		, bpi_uo = @bpi_uo 
		, bpi_uge = @bpi_uge 
		, bpi_ue = @bpi_ue 
		, bpi_cnpjCpfFornecedor = @bpi_cnpjCpfFornecedor 
		, bpi_fornecedor = @bpi_fornecedor 
		, bpi_codFornecedor = @bpi_codFornecedor 
		, bpi_insEstFornecedor = @bpi_insEstFornecedor 
		, bpi_endFornecedor = @bpi_endFornecedor 
		, bpi_bairroFornecedor = @bpi_bairroFornecedor 
		, bpi_numFornecedor = @bpi_numFornecedor 
		, bpi_compFornecedor = @bpi_compFornecedor 
		, bpi_cepFornecedor = @bpi_cepFornecedor 
		, bpi_codCidadeFornecedor = @bpi_codCidadeFornecedor 
		, bpi_cidadeFornecedor = @bpi_cidadeFornecedor 
		, bpi_ufFornecedor = @bpi_ufFornecedor 
		, bpi_contatoFornecedor = @bpi_contatoFornecedor 
		, bpi_fone1Fornecedor = @bpi_fone1Fornecedor 
		, bpi_fone2Fornecedor = @bpi_fone2Fornecedor 
		, bpi_emailFornecedor = @bpi_emailFornecedor 
		, bpi_situacao = @bpi_situacao 
		, bpi_dataImportacao = @bpi_dataImportacao 
		, bpi_observacao = @bpi_observacao 
		, bem_id = @bem_id 
		

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Cod_Especie_GrupoBens_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Cod_Especie_GrupoBens_DELETE]
	@ceg_codigo_especie VARCHAR(50)

AS
BEGIN
	DELETE FROM 
		Cod_Especie_GrupoBens 
	WHERE 
		ceg_codigo_especie = @ceg_codigo_especie 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Cod_Especie_GrupoBens_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Cod_Especie_GrupoBens_INSERT]
	@ceg_codigo_especie VarChar (50)
	, @grp_id Int
	, @ceg_situacao TinyInt
	, @ceg_dataAlteracao DateTime
	, @ceg_dataCriacao DateTime

AS
BEGIN
	INSERT INTO 
		Cod_Especie_GrupoBens
		( 
			ceg_codigo_especie 
			, grp_id 
			, ceg_situacao 
			, ceg_dataAlteracao 
			, ceg_dataCriacao 
 
		)
	VALUES
		( 
			@ceg_codigo_especie 
			, @grp_id 
			, @ceg_situacao 
			, @ceg_dataAlteracao 
			, @ceg_dataCriacao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Cod_Especie_GrupoBens_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Cod_Especie_GrupoBens_LOAD]
	@ceg_codigo_especie VarChar (50)
	
AS
BEGIN
	SELECT	Top 1
		 ceg_codigo_especie  
		, grp_id 
		, ceg_situacao 
		, ceg_dataAlteracao 
		, ceg_dataCriacao 

 	FROM
 		Cod_Especie_GrupoBens
	WHERE 
		ceg_codigo_especie = @ceg_codigo_especie
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Cod_Especie_GrupoBens_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Cod_Especie_GrupoBens_SELECT]
	
AS
BEGIN
	SELECT 
		ceg_codigo_especie
		,grp_id
		,ceg_situacao
		,ceg_dataAlteracao
		,ceg_dataCriacao

	FROM 
		Cod_Especie_GrupoBens WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Cod_Especie_GrupoBens_SELECTBY_grp_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Cod_Especie_GrupoBens_SELECTBY_grp_id]
	@grp_id INT
AS
BEGIN
	SELECT
		ceg_codigo_especie
		,grp_id
		,ceg_situacao
		,ceg_dataAlteracao
		,ceg_dataCriacao

	FROM
		Cod_Especie_GrupoBens WITH(NOLOCK)
	WHERE 
		grp_id = @grp_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Cod_Especie_GrupoBens_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Cod_Especie_GrupoBens_UPDATE]
	@ceg_codigo_especie VARCHAR (50)
	, @grp_id INT
	, @ceg_situacao TINYINT
	, @ceg_dataAlteracao DATETIME
	, @ceg_dataCriacao DATETIME

AS
BEGIN
	UPDATE Cod_Especie_GrupoBens 
	SET 
		grp_id = @grp_id 
		, ceg_situacao = @ceg_situacao 
		, ceg_dataAlteracao = @ceg_dataAlteracao 
		, ceg_dataCriacao = @ceg_dataCriacao 

	WHERE 
		ceg_codigo_especie = @ceg_codigo_especie 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ContasContabeis_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ContasContabeis_DELETE]
	@cco_codigo VARCHAR(20)

AS
BEGIN
	DELETE FROM 
		ContasContabeis 
	WHERE 
		cco_codigo = @cco_codigo 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ContasContabeis_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ContasContabeis_INSERT]
	@cco_codigo VarChar (20)
	, @cco_nome VarChar (100)
	, @cco_nomeAbr VarChar (30)
	, @cco_descricao VARCHAR(MAX)
	, @cco_codigoSup VarChar (20)
	, @cco_tipoConta TinyInt
	, @cco_situacao TinyInt
	, @cco_dataCriacao DateTime
	, @cco_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		ContasContabeis
		( 
			cco_codigo 
			, cco_nome 
			, cco_nomeAbr 
			, cco_descricao 
			, cco_codigoSup 
			, cco_tipoConta 
			, cco_situacao 
			, cco_dataCriacao 
			, cco_dataAlteracao 
 
		)
	VALUES
		( 
			@cco_codigo 
			, @cco_nome 
			, @cco_nomeAbr 
			, @cco_descricao 
			, @cco_codigoSup 
			, @cco_tipoConta 
			, @cco_situacao 
			, @cco_dataCriacao 
			, @cco_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ContasContabeis_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ContasContabeis_LOAD]
	@cco_codigo VarChar (20)
	
AS
BEGIN
	SELECT	Top 1
		 cco_codigo  
		, cco_nome 
		, cco_nomeAbr 
		, cco_descricao 
		, cco_codigoSup 
		, cco_tipoConta 
		, cco_situacao 
		, cco_dataCriacao 
		, cco_dataAlteracao 

 	FROM
 		ContasContabeis
	WHERE 
		cco_codigo = @cco_codigo
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ContasContabeis_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ContasContabeis_SELECT]
	
AS
BEGIN
	SELECT 
		cco_codigo
		,cco_nome
		,cco_nomeAbr
		,cco_descricao
		,cco_codigoSup
		,cco_tipoConta
		,cco_situacao
		,cco_dataCriacao
		,cco_dataAlteracao

	FROM 
		ContasContabeis WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ContasContabeis_SELECTBY_cco_codigo]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ContasContabeis_SELECTBY_cco_codigo]
	@cco_codigo VARCHAR(20)
AS
BEGIN
	SELECT
		cco_codigo
		,cco_nome
		,cco_nomeAbr
		,cco_descricao
		,cco_codigoSup
		,cco_tipoConta
		,cco_situacao
		,cco_dataCriacao
		,cco_dataAlteracao

	FROM
		ContasContabeis WITH(NOLOCK)
	WHERE 
		cco_codigo = @cco_codigo 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ContasContabeis_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ContasContabeis_UPDATE]
	@cco_codigo VARCHAR (20)
	, @cco_nome VARCHAR (100)
	, @cco_nomeAbr VARCHAR (30)
	, @cco_descricao VARCHAR(MAX)
	, @cco_codigoSup VARCHAR (20)
	, @cco_tipoConta TINYINT
	, @cco_situacao TINYINT
	, @cco_dataCriacao DATETIME
	, @cco_dataAlteracao DATETIME

AS
BEGIN
	UPDATE ContasContabeis 
	SET 
		cco_nome = @cco_nome 
		, cco_nomeAbr = @cco_nomeAbr 
		, cco_descricao = @cco_descricao 
		, cco_codigoSup = @cco_codigoSup 
		, cco_tipoConta = @cco_tipoConta 
		, cco_situacao = @cco_situacao 
		, cco_dataCriacao = @cco_dataCriacao 
		, cco_dataAlteracao = @cco_dataAlteracao 

	WHERE 
		cco_codigo = @cco_codigo 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Cidade_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Cidade_DELETE]
	@cid_id UNIQUEIDENTIFIER

AS
BEGIN
	DELETE FROM 
		CORE_END_Cidade 
	WHERE 
		cid_id = @cid_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Cidade_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Cidade_INSERT]
	@cid_id UniqueIdentifier
	, @pai_id UniqueIdentifier
	, @unf_id UniqueIdentifier
	, @cid_nome VarChar (200)
	, @cid_ddd VarChar (3)
	, @cid_situacao TinyInt
	, @cid_integridade Int

AS
BEGIN
	INSERT INTO 
		CORE_END_Cidade
		( 
			cid_id 
			, pai_id 
			, unf_id 
			, cid_nome 
			, cid_ddd 
			, cid_situacao 
			, cid_integridade 
 
		)
	VALUES
		( 
			@cid_id 
			, @pai_id 
			, @unf_id 
			, @cid_nome 
			, @cid_ddd 
			, @cid_situacao 
			, @cid_integridade 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Cidade_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[STP_CORE_END_Cidade_LOAD]
	@cid_id UniqueIdentifier
	
AS
BEGIN
	SELECT	Top 1
		 cid_id  
		, pai_id 
		, unf_id 
		, cid_nome 
		, cid_ddd 
		, cid_situacao 
		, cid_integridade 

 	FROM
 		CORE_END_Cidade
	WHERE 
		cid_id = @cid_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Cidade_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Cidade_SELECT]
	
AS
BEGIN
	SELECT 
		cid_id
		,pai_id
		,unf_id
		,cid_nome
		,cid_ddd
		,cid_situacao
		,cid_integridade

	FROM 
		CORE_END_Cidade WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Cidade_SELECTBY_pai_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Cidade_SELECTBY_pai_id]
	@pai_id UNIQUEIDENTIFIER
AS
BEGIN
	SELECT
		cid_id
		,pai_id
		,unf_id
		,cid_nome
		,cid_ddd
		,cid_situacao
		,cid_integridade

	FROM
		CORE_END_Cidade WITH(NOLOCK)
	WHERE 
		pai_id = @pai_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Cidade_SELECTBY_unf_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Cidade_SELECTBY_unf_id]
	@unf_id UNIQUEIDENTIFIER
AS
BEGIN
	SELECT
		cid_id
		,pai_id
		,unf_id
		,cid_nome
		,cid_ddd
		,cid_situacao
		,cid_integridade

	FROM
		CORE_END_Cidade WITH(NOLOCK)
	WHERE 
		unf_id = @unf_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Cidade_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Cidade_UPDATE]
	@cid_id UNIQUEIDENTIFIER
	, @pai_id UNIQUEIDENTIFIER
	, @unf_id UNIQUEIDENTIFIER
	, @cid_nome VARCHAR (200)
	, @cid_ddd VARCHAR (3)
	, @cid_situacao TINYINT
	, @cid_integridade INT

AS
BEGIN
	UPDATE CORE_END_Cidade 
	SET 
		pai_id = @pai_id 
		, unf_id = @unf_id 
		, cid_nome = @cid_nome 
		, cid_ddd = @cid_ddd 
		, cid_situacao = @cid_situacao 
		, cid_integridade = @cid_integridade 

	WHERE 
		cid_id = @cid_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Endereco_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Endereco_DELETE]
	@end_id UNIQUEIDENTIFIER

AS
BEGIN
	DELETE FROM 
		CORE_END_Endereco 
	WHERE 
		end_id = @end_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Endereco_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_CORE_END_Endereco_INSERT]
	@end_id UniqueIdentifier
     ,@end_cep VarChar (8)
	, @end_logradouro VarChar (200)
	, @end_bairro VarChar (100)
	, @end_distrito VarChar (100)
	, @end_zona TinyInt
	, @cid_id UniqueIdentifier
	, @end_situacao TinyInt
	, @end_dataCriacao DateTime
	, @end_dataAlteracao DateTime
	, @end_integridade Int

AS
BEGIN
	INSERT INTO 
		CORE_END_Endereco
		( 
			end_id 
			 ,end_cep 
			, end_logradouro 
			, end_bairro 
			, end_distrito 
			, end_zona 
			, cid_id 
			, end_situacao 
			, end_dataCriacao 
			, end_dataAlteracao 
			, end_integridade 
 
		)
	VALUES
		( 
			@end_id 
			 ,@end_cep 
			, @end_logradouro 
			, @end_bairro 
			, @end_distrito 
			, @end_zona 
			, @cid_id 
			, @end_situacao 
			, @end_dataCriacao 
			, @end_dataAlteracao 
			, @end_integridade 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Endereco_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Endereco_LOAD]
	@end_id UniqueIdentifier
	
AS
BEGIN
	SELECT	Top 1
		 end_id  
		, end_cep 
		, end_logradouro 
		, end_bairro 
		, end_distrito 
		, end_zona 
		, cid_id 
		, end_situacao 
		, end_dataCriacao 
		, end_dataAlteracao 
		, end_integridade 

 	FROM
 		CORE_END_Endereco
	WHERE 
		end_id = @end_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Endereco_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[STP_CORE_END_Endereco_SELECT]
	
AS
BEGIN
	SELECT 
		end_id
		,end_cep
		,end_logradouro
		,end_bairro
		,end_distrito
		,end_zona
		,cid_id
		,end_situacao
		,end_dataCriacao
		,end_dataAlteracao
		,end_integridade

	FROM 
		CORE_END_Endereco WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Endereco_SELECTBY_cid_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Endereco_SELECTBY_cid_id]
	@cid_id UNIQUEIDENTIFIER
AS
BEGIN
	SELECT
		end_id
		,end_cep
		,end_logradouro
		,end_bairro
		,end_distrito
		,end_zona
		,cid_id
		,end_situacao
		,end_dataCriacao
		,end_dataAlteracao
		,end_integridade

	FROM
		CORE_END_Endereco WITH(NOLOCK)
	WHERE 
		cid_id = @cid_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Endereco_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Endereco_UPDATE]
	@end_id UNIQUEIDENTIFIER
	, @end_cep VARCHAR (8)
	, @end_logradouro VARCHAR (200)
	, @end_bairro VARCHAR (100)
	, @end_distrito VARCHAR (100)
	, @end_zona TINYINT
	, @cid_id UNIQUEIDENTIFIER
	, @end_situacao TINYINT
	, @end_dataCriacao DATETIME
	, @end_dataAlteracao DATETIME
	, @end_integridade INT

AS
BEGIN
	UPDATE CORE_END_Endereco 
	SET 
		end_cep = @end_cep 
		, end_logradouro = @end_logradouro 
		, end_bairro = @end_bairro 
		, end_distrito = @end_distrito 
		, end_zona = @end_zona 
		, cid_id = @cid_id 
		, end_situacao = @end_situacao 
		, end_dataCriacao = @end_dataCriacao 
		, end_dataAlteracao = @end_dataAlteracao 
		, end_integridade = @end_integridade 

	WHERE 
		end_id = @end_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Pais_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Pais_DELETE]
	@pai_id UNIQUEIDENTIFIER

AS
BEGIN
	DELETE FROM 
		CORE_END_Pais 
	WHERE 
		pai_id = @pai_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Pais_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Pais_INSERT]
	@pai_id UniqueIdentifier
	, @pai_nome VarChar (100)
	, @pai_sigla VarChar (10)
	, @pai_ddi VarChar (3)
	, @pai_naturalMasc VarChar (100)
	, @pai_naturalFem VarChar (100)
	, @pai_situacao TinyInt
	, @pai_integridade Int

AS
BEGIN
	INSERT INTO 
		CORE_END_Pais
		( 
			pai_id 
			, pai_nome 
			, pai_sigla 
			, pai_ddi 
			, pai_naturalMasc 
			, pai_naturalFem 
			, pai_situacao 
			, pai_integridade 
 
		)
	VALUES
		( 
			@pai_id 
			, @pai_nome 
			, @pai_sigla 
			, @pai_ddi 
			, @pai_naturalMasc 
			, @pai_naturalFem 
			, @pai_situacao 
			, @pai_integridade 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Pais_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Pais_LOAD]
	@pai_id UniqueIdentifier
	
AS
BEGIN
	SELECT	Top 1
		 pai_id  
		, pai_nome 
		, pai_sigla 
		, pai_ddi 
		, pai_naturalMasc 
		, pai_naturalFem 
		, pai_situacao 
		, pai_integridade 

 	FROM
 		CORE_END_Pais
	WHERE 
		pai_id = @pai_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Pais_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[STP_CORE_END_Pais_SELECT]
	
AS
BEGIN
	SELECT 
		pai_id
		,pai_nome
		,pai_sigla
		,pai_ddi
		,pai_naturalMasc
		,pai_naturalFem
		,pai_situacao
		,pai_integridade

	FROM 
		CORE_END_Pais WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_Pais_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_Pais_UPDATE]
	@pai_id UNIQUEIDENTIFIER
	, @pai_nome VARCHAR (100)
	, @pai_sigla VARCHAR (10)
	, @pai_ddi VARCHAR (3)
	, @pai_naturalMasc VARCHAR (100)
	, @pai_naturalFem VARCHAR (100)
	, @pai_situacao TINYINT
	, @pai_integridade INT

AS
BEGIN
	UPDATE CORE_END_Pais 
	SET 
		pai_nome = @pai_nome 
		, pai_sigla = @pai_sigla 
		, pai_ddi = @pai_ddi 
		, pai_naturalMasc = @pai_naturalMasc 
		, pai_naturalFem = @pai_naturalFem 
		, pai_situacao = @pai_situacao 
		, pai_integridade = @pai_integridade 

	WHERE 
		pai_id = @pai_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_UnidadeFederativa_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_UnidadeFederativa_DELETE]
	@unf_id UNIQUEIDENTIFIER

AS
BEGIN
	DELETE FROM 
		CORE_END_UnidadeFederativa 
	WHERE 
		unf_id = @unf_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_UnidadeFederativa_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_UnidadeFederativa_INSERT]
	@unf_id UniqueIdentifier
	, @pai_id UniqueIdentifier
	, @unf_nome VarChar (100)
	, @unf_sigla VarChar (2)
	, @unf_situacao TinyInt
	, @unf_integridade Int

AS
BEGIN
	INSERT INTO 
		CORE_END_UnidadeFederativa
		( 
			unf_id 
			, pai_id 
			, unf_nome 
			, unf_sigla 
			, unf_situacao 
			, unf_integridade 
 
		)
	VALUES
		( 
			@unf_id 
			, @pai_id 
			, @unf_nome 
			, @unf_sigla 
			, @unf_situacao 
			, @unf_integridade 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_UnidadeFederativa_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_UnidadeFederativa_LOAD]
	@unf_id UniqueIdentifier
	
AS
BEGIN
	SELECT	Top 1
		 unf_id  
		, pai_id 
		, unf_nome 
		, unf_sigla 
		, unf_situacao 
		, unf_integridade 

 	FROM
 		CORE_END_UnidadeFederativa
	WHERE 
		unf_id = @unf_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_UnidadeFederativa_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[STP_CORE_END_UnidadeFederativa_SELECT]
	
AS
BEGIN
	SELECT 
		unf_id
		,pai_id
		,unf_nome
		,unf_sigla
		,unf_situacao
		,unf_integridade

	FROM 
		CORE_END_UnidadeFederativa WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_UnidadeFederativa_SELECTBY_pai_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_UnidadeFederativa_SELECTBY_pai_id]
	@pai_id UNIQUEIDENTIFIER
AS
BEGIN
	SELECT
		unf_id
		,pai_id
		,unf_nome
		,unf_sigla
		,unf_situacao
		,unf_integridade

	FROM
		CORE_END_UnidadeFederativa WITH(NOLOCK)
	WHERE 
		pai_id = @pai_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_END_UnidadeFederativa_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_END_UnidadeFederativa_UPDATE]
	@unf_id UNIQUEIDENTIFIER
	, @pai_id UNIQUEIDENTIFIER
	, @unf_nome VARCHAR (100)
	, @unf_sigla VARCHAR (2)
	, @unf_situacao TINYINT
	, @unf_integridade INT

AS
BEGIN
	UPDATE CORE_END_UnidadeFederativa 
	SET 
		pai_id = @pai_id 
		, unf_nome = @unf_nome 
		, unf_sigla = @unf_sigla 
		, unf_situacao = @unf_situacao 
		, unf_integridade = @unf_integridade 

	WHERE 
		unf_id = @unf_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_DELETE]
	@ent_id UNIQUEIDENTIFIER
	, @uad_id UNIQUEIDENTIFIER
	, @uae_id UNIQUEIDENTIFIER

AS
BEGIN
	DELETE FROM 
		CORE_SYS_UnidadeAdministrativaEndereco 
	WHERE 
		ent_id = @ent_id 
		AND uad_id = @uad_id 
		AND uae_id = @uae_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_INSERT]
	@ent_id UniqueIdentifier
	, @uad_id UniqueIdentifier
	, @uae_id UniqueIdentifier
	, @end_id UniqueIdentifier
	, @uae_numero VarChar (20)
	, @uae_complemento VarChar (100)
	, @uae_situacao TinyInt
	, @uae_dataCriacao DateTime
	, @uae_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		CORE_SYS_UnidadeAdministrativaEndereco
		( 
			ent_id 
			, uad_id 
			, uae_id 
			, end_id 
			, uae_numero 
			, uae_complemento 
			, uae_situacao 
			, uae_dataCriacao 
			, uae_dataAlteracao 
 
		)
	VALUES
		( 
			@ent_id 
			, @uad_id 
			, @uae_id 
			, @end_id 
			, @uae_numero 
			, @uae_complemento 
			, @uae_situacao 
			, @uae_dataCriacao 
			, @uae_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_LOAD]
	@ent_id UniqueIdentifier
	, @uad_id UniqueIdentifier
	, @uae_id UniqueIdentifier
	
AS
BEGIN
	SELECT	Top 1
		 ent_id  
		, uad_id 
		, uae_id 
		, end_id 
		, uae_numero 
		, uae_complemento 
		, uae_situacao 
		, uae_dataCriacao 
		, uae_dataAlteracao 

 	FROM
 		CORE_SYS_UnidadeAdministrativaEndereco
	WHERE 
		ent_id = @ent_id
		AND uad_id = @uad_id
		AND uae_id = @uae_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_SELECT]
	
AS
BEGIN
	SELECT 
		ent_id
		,uad_id
		,uae_id
		,end_id
		,uae_numero
		,uae_complemento
		,uae_situacao
		,uae_dataCriacao
		,uae_dataAlteracao

	FROM 
		CORE_SYS_UnidadeAdministrativaEndereco WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_SELECTBY_end_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_SELECTBY_end_id]
	@end_id UNIQUEIDENTIFIER
AS
BEGIN
	SELECT
		ent_id
		,uad_id
		,uae_id
		,end_id
		,uae_numero
		,uae_complemento
		,uae_situacao
		,uae_dataCriacao
		,uae_dataAlteracao

	FROM
		CORE_SYS_UnidadeAdministrativaEndereco WITH(NOLOCK)
	WHERE 
		end_id = @end_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_CORE_SYS_UnidadeAdministrativaEndereco_UPDATE]
	@ent_id UNIQUEIDENTIFIER
	, @uad_id UNIQUEIDENTIFIER
	, @uae_id UNIQUEIDENTIFIER
	, @end_id UNIQUEIDENTIFIER
	, @uae_numero VARCHAR (20)
	, @uae_complemento VARCHAR (100)
	, @uae_situacao TINYINT
	, @uae_dataCriacao DATETIME
	, @uae_dataAlteracao DATETIME

AS
BEGIN
	UPDATE CORE_SYS_UnidadeAdministrativaEndereco 
	SET 
		end_id = @end_id 
		, uae_numero = @uae_numero 
		, uae_complemento = @uae_complemento 
		, uae_situacao = @uae_situacao 
		, uae_dataCriacao = @uae_dataCriacao 
		, uae_dataAlteracao = @uae_dataAlteracao 

	WHERE 
		ent_id = @ent_id 
		AND uad_id = @uad_id 
		AND uae_id = @uae_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Dependencia_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Dependencia_DELETE]
	@loc_id INT
	, @dep_id INT

AS
BEGIN
	DELETE FROM 
		Dependencia 
	WHERE 
		loc_id = @loc_id 
		AND dep_id = @dep_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Dependencia_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Dependencia_INSERT]
	@loc_id Int
	, @dep_id Int
	, @tde_id Int
	, @dep_nome VarChar (100)
	, @dep_situacao TinyInt
	, @dep_responsavel NVarChar (200)
	, @dep_dataCriacao DateTime
	, @dep_dateAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		Dependencia
		( 
			loc_id 
			, dep_id 
			, tde_id 
			, dep_nome 
			, dep_situacao 
			, dep_responsavel
			, dep_dataCriacao 
			, dep_dateAlteracao 
 
		)
	VALUES
		( 
			@loc_id 
			, @dep_id 
			, @tde_id 
			, @dep_nome 
			, @dep_situacao 
			, @dep_responsavel 
			, @dep_dataCriacao 
			, @dep_dateAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Dependencia_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Dependencia_LOAD]
	@loc_id Int
	, @dep_id Int
	
AS
BEGIN
	SELECT	Top 1
		 loc_id  
		, dep_id 
		, tde_id 
		, dep_nome 
		, dep_situacao 
		, dep_responsavel 
		, dep_dataCriacao 
		, dep_dateAlteracao 

 	FROM
 		Dependencia
	WHERE 
		loc_id = @loc_id
		AND dep_id = @dep_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Dependencia_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Dependencia_SELECT]
	
AS
BEGIN
	SELECT 
		loc_id
		,dep_id
		,tde_id
		,dep_nome
		,dep_situacao
		,dep_responsavel
		,dep_dataCriacao
		,dep_dateAlteracao

	FROM 
		Dependencia WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Dependencia_SELECTBY_loc_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Dependencia_SELECTBY_loc_id]
	@loc_id INT
AS
BEGIN
	SELECT
		loc_id
		,dep_id
		,tde_id
		,dep_nome
		,dep_situacao
		,dep_responsavel
		,dep_dataCriacao
		,dep_dateAlteracao

	FROM
		Dependencia WITH(NOLOCK)
	WHERE 
		loc_id = @loc_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Dependencia_SELECTBY_tde_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Dependencia_SELECTBY_tde_id]
	@tde_id INT
AS
BEGIN
	SELECT
		loc_id
		,dep_id
		,tde_id
		,dep_nome
		,dep_situacao
		,dep_responsavel
		,dep_dataCriacao
		,dep_dateAlteracao

	FROM
		Dependencia WITH(NOLOCK)
	WHERE 
		tde_id = @tde_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Dependencia_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Dependencia_UPDATE]
	@loc_id INT
	, @dep_id INT
	, @tde_id INT
	, @dep_nome VARCHAR (100)
	, @dep_situacao TINYINT
	, @dep_responsavel NVARCHAR (400)
	, @dep_dataCriacao DATETIME
	, @dep_dateAlteracao DATETIME

AS
BEGIN
	UPDATE Dependencia 
	SET 
		tde_id = @tde_id 
		, dep_nome = @dep_nome 
		, dep_situacao = @dep_situacao 
		, dep_responsavel = @dep_responsavel 
		, dep_dataCriacao = @dep_dataCriacao 
		, dep_dateAlteracao = @dep_dateAlteracao 

	WHERE 
		loc_id = @loc_id 
		AND dep_id = @dep_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Etiqueta_ElementosDimensao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_Etiqueta_ElementosDimensao_DELETE]
	@cfg_id INT

AS
BEGIN
	DELETE FROM 
		Etiqueta_ElementosDimensao 
	WHERE 
		cfg_id = @cfg_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Etiqueta_ElementosDimensao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_Etiqueta_ElementosDimensao_INSERT]
	@eed_tamFonte Int
	, @eed_tamImagem Int
	, @eed_tamCodBarra Int
	, @cfg_id Int

AS
BEGIN
	INSERT INTO 
		Etiqueta_ElementosDimensao
		( 
			eed_tamFonte 
			, eed_tamImagem 
			, eed_tamCodBarra 
			, cfg_id 
 
		)
	VALUES
		( 
			@eed_tamFonte 
			, @eed_tamImagem 
			, @eed_tamCodBarra 
			, @cfg_id 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Etiqueta_ElementosDimensao_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[STP_Etiqueta_ElementosDimensao_LOAD]
	@cfg_id Int
	
AS
BEGIN
	SELECT	Top 1
		 eed_id  
		, eed_tamFonte 
		, eed_tamImagem 
		, eed_tamCodBarra 
		, cfg_id 

 	FROM
 		Etiqueta_ElementosDimensao
	WHERE 
		cfg_id = @cfg_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Etiqueta_ElementosDimensao_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_Etiqueta_ElementosDimensao_SELECT]
	
AS
BEGIN
	SELECT 
		eed_id
		,eed_tamFonte
		,eed_tamImagem
		,eed_tamCodBarra
		,cfg_id

	FROM 
		Etiqueta_ElementosDimensao WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Etiqueta_ElementosDimensao_SELECTBY_cfg_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_Etiqueta_ElementosDimensao_SELECTBY_cfg_id]
	@cfg_id INT
AS
BEGIN
	SELECT
		eed_id
		,eed_tamFonte
		,eed_tamImagem
		,eed_tamCodBarra
		,cfg_id

	FROM
		Etiqueta_ElementosDimensao WITH(NOLOCK)
	WHERE 
		cfg_id = @cfg_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Etiqueta_ElementosDimensao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_Etiqueta_ElementosDimensao_UPDATE]
	@eed_id INT
	, @eed_tamFonte INT
	, @eed_tamImagem INT
	, @eed_tamCodBarra INT
	, @cfg_id INT

AS
BEGIN
	UPDATE Etiqueta_ElementosDimensao 
	SET 
		eed_tamFonte = @eed_tamFonte 
		, eed_tamImagem = @eed_tamImagem 
		, eed_tamCodBarra = @eed_tamCodBarra 

	WHERE 
		cfg_id = @cfg_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaElementosPosicao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_EtiquetaElementosPosicao_DELETE]
	@cfe_macTerminal NVARCHAR

AS
BEGIN
	DELETE FROM 
		EtiquetaElementosPosicao 
	WHERE 
		cfe_macTerminal = @cfe_macTerminal 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaElementosPosicao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_EtiquetaElementosPosicao_INSERT]
	@eep_id Int
	, @cfe_macTerminal NVarChar (100)
	, @eep_xImagem Int
	, @eep_yImagem Int
	, @eep_xRegPatrimonio Int
	, @eep_yRegPatrimonio Int
	, @eep_xSecretaria Int
	, @eep_ySecretaria Int
	, @eep_xMensagem Int
	, @eep_yMensagem Int
	, @eep_xCodBarra Int
	, @eep_yCodBarra Int
	, @eep_situacao Int
	, @eep_dataAlteracao DateTime
	, @eep_dataCriacao DateTime

AS
BEGIN
	INSERT INTO 
		EtiquetaElementosPosicao
		( 
			eep_id 
			, cfe_macTerminal 
			, eep_xImagem 
			, eep_yImagem 
			, eep_xRegPatrimonio 
			, eep_yRegPatrimonio 
			, eep_xSecretaria 
			, eep_ySecretaria 
			, eep_xMensagem 
			, eep_yMensagem 
			, eep_xCodBarra 
			, eep_yCodBarra 
			, eep_situacao 
			, eep_dataAlteracao 
			, eep_dataCriacao 
 
		)
	VALUES
		( 
			@eep_id 
			, @cfe_macTerminal 
			, @eep_xImagem 
			, @eep_yImagem 
			, @eep_xRegPatrimonio 
			, @eep_yRegPatrimonio 
			, @eep_xSecretaria 
			, @eep_ySecretaria 
			, @eep_xMensagem 
			, @eep_yMensagem 
			, @eep_xCodBarra 
			, @eep_yCodBarra 
			, @eep_situacao 
			, @eep_dataAlteracao 
			, @eep_dataCriacao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaElementosPosicao_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_EtiquetaElementosPosicao_LOAD]
	@cfe_macTerminal NVarChar (100)
	
AS
BEGIN
	SELECT	Top 1
		 eep_id  
		, cfe_macTerminal 
		, eep_xImagem 
		, eep_yImagem 
		, eep_xRegPatrimonio 
		, eep_yRegPatrimonio 
		, eep_xSecretaria 
		, eep_ySecretaria 
		, eep_xMensagem 
		, eep_yMensagem 
		, eep_xCodBarra 
		, eep_yCodBarra 
		, eep_situacao 
		, eep_dataAlteracao 
		, eep_dataCriacao 

 	FROM
 		EtiquetaElementosPosicao
	WHERE 
		cfe_macTerminal = @cfe_macTerminal
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaElementosPosicao_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_EtiquetaElementosPosicao_SELECT]
	
AS
BEGIN
	SELECT 
		eep_id
		,cfe_macTerminal
		,eep_xImagem
		,eep_yImagem
		,eep_xRegPatrimonio
		,eep_yRegPatrimonio
		,eep_xSecretaria
		,eep_ySecretaria
		,eep_xMensagem
		,eep_yMensagem
		,eep_xCodBarra
		,eep_yCodBarra
		,eep_situacao
		,eep_dataAlteracao
		,eep_dataCriacao

	FROM 
		EtiquetaElementosPosicao WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaElementosPosicao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_EtiquetaElementosPosicao_UPDATE]
	@eep_id INT
	, @cfe_macTerminal NVARCHAR (100)
	, @eep_xImagem INT
	, @eep_yImagem INT
	, @eep_xRegPatrimonio INT
	, @eep_yRegPatrimonio INT
	, @eep_xSecretaria INT
	, @eep_ySecretaria INT
	, @eep_xMensagem INT
	, @eep_yMensagem INT
	, @eep_xCodBarra INT
	, @eep_yCodBarra INT
	, @eep_situacao INT
	, @eep_dataAlteracao DATETIME
	, @eep_dataCriacao DATETIME

AS
BEGIN
	UPDATE EtiquetaElementosPosicao 
	SET 
		eep_xImagem = @eep_xImagem 
		, eep_yImagem = @eep_yImagem 
		, eep_xRegPatrimonio = @eep_xRegPatrimonio 
		, eep_yRegPatrimonio = @eep_yRegPatrimonio 
		, eep_xSecretaria = @eep_xSecretaria 
		, eep_ySecretaria = @eep_ySecretaria 
		, eep_xMensagem = @eep_xMensagem 
		, eep_yMensagem = @eep_yMensagem 
		, eep_xCodBarra = @eep_xCodBarra 
		, eep_yCodBarra = @eep_yCodBarra 
		, eep_situacao = @eep_situacao 
		, eep_dataAlteracao = @eep_dataAlteracao 
		, eep_dataCriacao = @eep_dataCriacao 

	WHERE 
		cfe_macTerminal = @cfe_macTerminal 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaImpressao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaImpressao_DELETE]
	@uni_id INT
	, @eti_id INT

AS
BEGIN
	DELETE FROM 
		EtiquetaImpressao 
	WHERE 
		uni_id = @uni_id 
		AND eti_id = @eti_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaImpressao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaImpressao_INSERT]
	@uni_id Int
	, @eti_comando NVarChar (4000)

AS
BEGIN
	INSERT INTO 
		EtiquetaImpressao
		( 
			uni_id 
			, eti_comando 
 
		)
	VALUES
		( 
			@uni_id 
			, @eti_comando 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaImpressao_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaImpressao_LOAD]
	@uni_id Int
	, @eti_id Int
	
AS
BEGIN
	SELECT	Top 1
		 uni_id  
		, eti_id 
		, eti_comando 

 	FROM
 		EtiquetaImpressao
	WHERE 
		uni_id = @uni_id
		AND eti_id = @eti_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaImpressao_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaImpressao_SELECT]
	
AS
BEGIN
	SELECT 
		uni_id
		,eti_id
		,eti_comando

	FROM 
		EtiquetaImpressao WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaImpressao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaImpressao_UPDATE]
	@uni_id INT
	, @eti_id INT
	, @eti_comando NVARCHAR (4000)

AS
BEGIN
	UPDATE EtiquetaImpressao 
	SET 
		eti_comando = @eti_comando 

	WHERE 
		uni_id = @uni_id 
		AND eti_id = @eti_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaPatrimonial_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaPatrimonial_DELETE]
	@etp_ano CHAR
	, @uni_id INT

AS
BEGIN
	DELETE FROM 
		EtiquetaPatrimonial 
	WHERE 
		etp_ano = @etp_ano 
		AND uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaPatrimonial_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaPatrimonial_INSERT]
	@etp_ano Char (4)
	, @uni_id Int
	, @etp_numeroInicial VarChar (20)
	, @etp_proximoNumero VarChar (20)
	, @etp_dataCriacao DateTime
	, @etp_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		EtiquetaPatrimonial
		( 
			etp_ano 
			, uni_id 
			, etp_numeroInicial 
			, etp_proximoNumero 
			, etp_dataCriacao 
			, etp_dataAlteracao 
 
		)
	VALUES
		( 
			@etp_ano 
			, @uni_id 
			, @etp_numeroInicial 
			, @etp_proximoNumero 
			, @etp_dataCriacao 
			, @etp_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaPatrimonial_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaPatrimonial_LOAD]
	@etp_ano Char(4)
	, @uni_id Int
	
AS
BEGIN
	SELECT	Top 1
		 etp_ano  
		, uni_id 
		, etp_numeroInicial 
		, etp_proximoNumero 
		, etp_dataCriacao 
		, etp_dataAlteracao 

 	FROM
 		EtiquetaPatrimonial
	WHERE 
		etp_ano = @etp_ano
		AND uni_id = @uni_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaPatrimonial_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaPatrimonial_SELECT]
	
AS
BEGIN
	SELECT 
		etp_ano
		,uni_id
		,etp_numeroInicial
		,etp_proximoNumero
		,etp_dataCriacao
		,etp_dataAlteracao

	FROM 
		EtiquetaPatrimonial WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaPatrimonial_SELECTBY_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaPatrimonial_SELECTBY_uni_id]
	@uni_id INT
AS
BEGIN
	SELECT
		etp_ano
		,uni_id
		,etp_numeroInicial
		,etp_proximoNumero
		,etp_dataCriacao
		,etp_dataAlteracao

	FROM
		EtiquetaPatrimonial WITH(NOLOCK)
	WHERE 
		uni_id = @uni_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_EtiquetaPatrimonial_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_EtiquetaPatrimonial_UPDATE]
	@etp_ano CHAR
	, @uni_id INT
	, @etp_numeroInicial VARCHAR (20)
	, @etp_proximoNumero VARCHAR (20)
	, @etp_dataCriacao DATETIME
	, @etp_dataAlteracao DATETIME

AS
BEGIN
	UPDATE EtiquetaPatrimonial 
	SET 
		etp_numeroInicial = @etp_numeroInicial 
		, etp_proximoNumero = @etp_proximoNumero 
		, etp_dataCriacao = @etp_dataCriacao 
		, etp_dataAlteracao = @etp_dataAlteracao 

	WHERE 
		etp_ano = @etp_ano 
		AND uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FatorDepreciacao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FatorDepreciacao_DELETE]
	@fat_id INT

AS
BEGIN
	DELETE FROM 
		FatorDepreciacao 
	WHERE 
		fat_id = @fat_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FatorDepreciacao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FatorDepreciacao_INSERT]
	@fat_nome VarChar (100)
	, @fat_coeficiente Decimal
	, @fat_descricao VarChar (1000)
	, @fat_situacao TinyInt
	, @fat_dataCriacao DateTime
	, @fat_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		FatorDepreciacao
		( 
			fat_nome 
			, fat_coeficiente 
			, fat_descricao 
			, fat_situacao 
			, fat_dataCriacao 
			, fat_dataAlteracao 
 
		)
	VALUES
		( 
			@fat_nome 
			, @fat_coeficiente 
			, @fat_descricao 
			, @fat_situacao 
			, @fat_dataCriacao 
			, @fat_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FatorDepreciacao_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FatorDepreciacao_LOAD]
	@fat_id Int
	
AS
BEGIN
	SELECT	Top 1
		 fat_id  
		, fat_nome 
		, fat_coeficiente 
		, fat_descricao 
		, fat_situacao 
		, fat_dataCriacao 
		, fat_dataAlteracao 

 	FROM
 		FatorDepreciacao
	WHERE 
		fat_id = @fat_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FatorDepreciacao_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FatorDepreciacao_SELECT]
	
AS
BEGIN
	SELECT 
		fat_id
		,fat_nome
		,fat_coeficiente
		,fat_descricao
		,fat_situacao
		,fat_dataCriacao
		,fat_dataAlteracao

	FROM 
		FatorDepreciacao WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FatorDepreciacao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FatorDepreciacao_UPDATE]
	@fat_id INT
	, @fat_nome VARCHAR (100)
	, @fat_coeficiente DECIMAL (3,2)
	, @fat_descricao VARCHAR (1000)
	, @fat_situacao TINYINT
	, @fat_dataCriacao DATETIME
	, @fat_dataAlteracao DATETIME

AS
BEGIN
	UPDATE FatorDepreciacao 
	SET 
		fat_nome = @fat_nome 
		, fat_coeficiente = @fat_coeficiente 
		, fat_descricao = @fat_descricao 
		, fat_situacao = @fat_situacao 
		, fat_dataCriacao = @fat_dataCriacao 
		, fat_dataAlteracao = @fat_dataAlteracao 

	WHERE 
		fat_id = @fat_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Fornecedor_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Fornecedor_DELETE]
	@for_id INT

AS
BEGIN
	DELETE FROM 
		Fornecedor 
	WHERE 
		for_id = @for_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Fornecedor_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Fornecedor_INSERT]
	@for_situacao TinyInt
	, @for_dataCriacao DateTime
	, @for_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		Fornecedor
		( 
			for_situacao 
			, for_dataCriacao 
			, for_dataAlteracao 
 
		)
	VALUES
		( 
			@for_situacao 
			, @for_dataCriacao 
			, @for_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Fornecedor_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Fornecedor_LOAD]
	@for_id Int
	
AS
BEGIN
	SELECT	Top 1
		 for_id  
		, for_situacao 
		, for_dataCriacao 
		, for_dataAlteracao 

 	FROM
 		Fornecedor
	WHERE 
		for_id = @for_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Fornecedor_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Fornecedor_SELECT]
	
AS
BEGIN
	SELECT 
		for_id
		,for_situacao
		,for_dataCriacao
		,for_dataAlteracao

	FROM 
		Fornecedor WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Fornecedor_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Fornecedor_UPDATE]
	@for_id INT
	, @for_situacao TINYINT
	, @for_dataCriacao DATETIME
	, @for_dataAlteracao DATETIME

AS
BEGIN
	UPDATE Fornecedor 
	SET 
		for_situacao = @for_situacao 
		, for_dataCriacao = @for_dataCriacao 
		, for_dataAlteracao = @for_dataAlteracao 

	WHERE 
		for_id = @for_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END


GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPF_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPF_DELETE]
	@for_id INT

AS
BEGIN
	DELETE FROM 
		FornecedorPF 
	WHERE 
		for_id = @for_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPF_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPF_INSERT]
	@for_id Int
	, @pes_id UniqueIdentifier

AS
BEGIN
	INSERT INTO 
		FornecedorPF
		( 
			for_id 
			, pes_id 
 
		)
	VALUES
		( 
			@for_id 
			, @pes_id 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPF_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPF_LOAD]
	@for_id Int
	
AS
BEGIN
	SELECT	Top 1
		 for_id  
		, pes_id 

 	FROM
 		FornecedorPF
	WHERE 
		for_id = @for_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPF_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPF_SELECT]
	
AS
BEGIN
	SELECT 
		for_id
		,pes_id

	FROM 
		FornecedorPF WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPF_SELECTBY_for_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPF_SELECTBY_for_id]
	@for_id INT
AS
BEGIN
	SELECT
		for_id
		,pes_id

	FROM
		FornecedorPF WITH(NOLOCK)
	WHERE 
		for_id = @for_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPF_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPF_UPDATE]
	@for_id INT
	, @pes_id UNIQUEIDENTIFIER

AS
BEGIN
	UPDATE FornecedorPF 
	SET 
		pes_id = @pes_id 

	WHERE 
		for_id = @for_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPJ_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPJ_DELETE]
	@for_id INT

AS
BEGIN
	DELETE FROM 
		FornecedorPJ 
	WHERE 
		for_id = @for_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPJ_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPJ_INSERT]
	@for_id Int
	, @ent_id UniqueIdentifier

AS
BEGIN
	INSERT INTO 
		FornecedorPJ
		( 
			for_id 
			, ent_id 
 
		)
	VALUES
		( 
			@for_id 
			, @ent_id 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPJ_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPJ_LOAD]
	@for_id Int
	
AS
BEGIN
	SELECT	Top 1
		 for_id  
		, ent_id 

 	FROM
 		FornecedorPJ
	WHERE 
		for_id = @for_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPJ_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPJ_SELECT]
	
AS
BEGIN
	SELECT 
		for_id
		,ent_id

	FROM 
		FornecedorPJ WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPJ_SELECTBY_for_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPJ_SELECTBY_for_id]
	@for_id INT
AS
BEGIN
	SELECT
		for_id
		,ent_id

	FROM
		FornecedorPJ WITH(NOLOCK)
	WHERE 
		for_id = @for_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_FornecedorPJ_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_FornecedorPJ_UPDATE]
	@for_id INT
	, @ent_id UNIQUEIDENTIFIER

AS
BEGIN
	UPDATE FornecedorPJ 
	SET 
		ent_id = @ent_id 

	WHERE 
		for_id = @for_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GPB_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GPB_DELETE]
	@gpb_ano CHAR

AS
BEGIN
	DELETE FROM 
		GPB 
	WHERE 
		gpb_ano = @gpb_ano 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GPB_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GPB_INSERT]
	@gpb_ano Char (4)
	, @gpb_numeroInicial VarChar (20)
	, @gpb_proximoNumero VarChar (20)
	, @gpb_dataCriacao DateTime
	, @gpb_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		GPB
		( 
			gpb_ano 
			, gpb_numeroInicial 
			, gpb_proximoNumero 
			, gpb_dataCriacao 
			, gpb_dataAlteracao 
 
		)
	VALUES
		( 
			@gpb_ano 
			, @gpb_numeroInicial 
			, @gpb_proximoNumero 
			, @gpb_dataCriacao 
			, @gpb_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GPB_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GPB_LOAD]
	@gpb_ano Char (4)
	
AS
BEGIN
	SELECT	Top 1
		 gpb_ano  
		, gpb_numeroInicial 
		, gpb_proximoNumero 
		, gpb_dataCriacao 
		, gpb_dataAlteracao 

 	FROM
 		GPB
	WHERE 
		gpb_ano = @gpb_ano
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GPB_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GPB_SELECT]
	
AS
BEGIN
	SELECT 
		gpb_ano
		,gpb_numeroInicial
		,gpb_proximoNumero
		,gpb_dataCriacao
		,gpb_dataAlteracao

	FROM 
		GPB WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GPB_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GPB_UPDATE]
	@gpb_ano CHAR
	, @gpb_numeroInicial VARCHAR (20)
	, @gpb_proximoNumero VARCHAR (20)
	, @gpb_dataCriacao DATETIME
	, @gpb_dataAlteracao DATETIME

AS
BEGIN
	UPDATE GPB 
	SET 
		gpb_numeroInicial = @gpb_numeroInicial 
		, gpb_proximoNumero = @gpb_proximoNumero 
		, gpb_dataCriacao = @gpb_dataCriacao 
		, gpb_dataAlteracao = @gpb_dataAlteracao 

	WHERE 
		gpb_ano = @gpb_ano 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GRB_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GRB_DELETE]
	@grb_ano CHAR

AS
BEGIN
	DELETE FROM 
		GRB 
	WHERE 
		grb_ano = @grb_ano 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GRB_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GRB_INSERT]
	@grb_ano Char (4)
	, @grb_numeroInicial VarChar (20)
	, @grb_proximoNumero VarChar (20)
	, @grb_dataCriacao DateTime
	, @grb_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		GRB
		( 
			grb_ano 
			, grb_numeroInicial 
			, grb_proximoNumero 
			, grb_dataCriacao 
			, grb_dataAlteracao 
 
		)
	VALUES
		( 
			@grb_ano 
			, @grb_numeroInicial 
			, @grb_proximoNumero 
			, GETDATE() 
			, GETDATE()
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GRB_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GRB_LOAD]
	@grb_ano Char(4)
	
AS
BEGIN
	SELECT	Top 1
		 grb_ano  
		, grb_numeroInicial 
		, grb_proximoNumero 
		, grb_dataCriacao 
		, grb_dataAlteracao 

 	FROM
 		GRB
	WHERE 
		grb_ano = @grb_ano
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GRB_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GRB_SELECT]
	
AS
BEGIN
	SELECT 
		grb_ano
		,grb_numeroInicial
		,grb_proximoNumero
		,grb_dataCriacao
		,grb_dataAlteracao

	FROM 
		GRB WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GRB_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GRB_UPDATE]
	@grb_ano CHAR
	, @grb_numeroInicial VARCHAR (20)
	, @grb_proximoNumero VARCHAR (20)
	, @grb_dataCriacao DATETIME
	, @grb_dataAlteracao DATETIME

AS
BEGIN
	UPDATE GRB 
	SET 
		grb_numeroInicial = @grb_numeroInicial 
		, grb_proximoNumero = @grb_proximoNumero 
		, grb_dataCriacao = @grb_dataCriacao 
		, grb_dataAlteracao = GETDATE()

	WHERE 
		grb_ano = @grb_ano 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_GrupoBens_DELETE]
	@grp_id INT

AS
BEGIN
	DELETE FROM 
		GrupoBens 
	WHERE 
		grp_id = @grp_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_IndicadorGerencial_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_GrupoBens_IndicadorGerencial_DELETE]
	@faq_id int
	, @grp_id INT

AS
BEGIN
	DELETE FROM 
		GrupoBens_IndicadorGerencial 
	WHERE 
		faq_id = @faq_id 
		AND grp_id = @grp_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_IndicadorGerencial_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_GrupoBens_IndicadorGerencial_INSERT]
	@faq_id int
	, @grp_id Int
	, @gind_situacao TinyInt
	, @gind_dataCriacao DateTime
	, @gind_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		GrupoBens_IndicadorGerencial
		( 
			faq_id 
			, grp_id 
			, gind_situacao 
			, gind_dataCriacao 
			, gind_dataAlteracao 
 
		)
	VALUES
		( 
			@faq_id 
			, @grp_id 
			, @gind_situacao 
			, @gind_dataCriacao 
			, @gind_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_IndicadorGerencial_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_GrupoBens_IndicadorGerencial_LOAD]
	@faq_id int
	, @grp_id Int
	
AS
BEGIN
	SELECT	Top 1
		 faq_id  
		, grp_id 
		, gind_situacao 
		, gind_dataCriacao 
		, gind_dataAlteracao 

 	FROM
 		GrupoBens_IndicadorGerencial
	WHERE 
		faq_id = @faq_id
		AND grp_id = @grp_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_IndicadorGerencial_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_GrupoBens_IndicadorGerencial_SELECT]
	
AS
BEGIN
	SELECT 
		faq_id
		,grp_id
		,gind_situacao
		,gind_dataCriacao
		,gind_dataAlteracao

	FROM 
		GrupoBens_IndicadorGerencial WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_IndicadorGerencial_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_GrupoBens_IndicadorGerencial_UPDATE]
	@faq_id INT
	, @grp_id INT
	, @gind_situacao TINYINT
	, @gind_dataCriacao DATETIME
	, @gind_dataAlteracao DATETIME

AS
BEGIN
	UPDATE GrupoBens_IndicadorGerencial 
	SET 
		gind_situacao = @gind_situacao 
		, gind_dataCriacao = @gind_dataCriacao 
		, gind_dataAlteracao = @gind_dataAlteracao 

	WHERE 
		faq_id = @faq_id 
		AND grp_id = @grp_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_GrupoBens_INSERT]
	@grp_idPai Int
	, @grp_nome VarChar (100)
	, @grp_nomeAbr VarChar (30)
	, @grp_descricao VarChar (1000)
	, @grp_situacao TinyInt
	, @grp_dataCriacao DateTime
	, @grp_dataAlteracao DateTime
	, @grp_nroSerie Bit
	, @grp_marca Bit
	, @grp_modelo Bit
	, @grp_tipo Bit
	, @grp_placa Bit
	, @grp_chassi Bit
	, @grp_anoFabricacao Bit
	, @grp_quilometragem Bit
	, @grp_potencia Bit
	, @grp_unidadePotencia Bit
	, @grp_cilindros Bit

AS
BEGIN
	INSERT INTO 
		GrupoBens
		( 
			grp_idPai 
			, grp_nome 
			, grp_nomeAbr 
			, grp_descricao 
			, grp_situacao 
			, grp_dataCriacao 
			, grp_dataAlteracao 
			, grp_nroSerie 
			, grp_marca 
			, grp_modelo 
			, grp_tipo 
			, grp_placa 
			, grp_chassi 
			, grp_anoFabricacao 
			, grp_quilometragem 
			, grp_potencia 
			, grp_unidadePotencia 
			, grp_cilindros 
 
		)
	VALUES
		( 
			@grp_idPai 
			, @grp_nome 
			, @grp_nomeAbr 
			, @grp_descricao 
			, @grp_situacao 
			, @grp_dataCriacao 
			, @grp_dataAlteracao 
			, @grp_nroSerie 
			, @grp_marca 
			, @grp_modelo 
			, @grp_tipo 
			, @grp_placa 
			, @grp_chassi 
			, @grp_anoFabricacao 
			, @grp_quilometragem 
			, @grp_potencia 
			, @grp_unidadePotencia 
			, @grp_cilindros 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_GrupoBens_LOAD]
	@grp_id Int
	
AS
BEGIN
	SELECT	Top 1
		 grp_id  
		, grp_idPai 
		, grp_nome 
		, grp_nomeAbr 
		, grp_descricao 
		, grp_situacao 
		, grp_dataCriacao 
		, grp_dataAlteracao 
		, grp_nroSerie 
		, grp_marca 
		, grp_modelo 
		, grp_tipo 
		, grp_placa 
		, grp_chassi 
		, grp_anoFabricacao 
		, grp_quilometragem 
		, grp_potencia 
		, grp_unidadePotencia 
		, grp_cilindros 

 	FROM
 		GrupoBens
	WHERE 
		grp_id = @grp_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[STP_GrupoBens_SELECT]
	
AS
BEGIN
	SELECT 
		grp_id
		,grp_idPai
		,grp_nome
		,grp_nomeAbr
		,grp_descricao
		,grp_situacao
		,grp_dataCriacao
		,grp_dataAlteracao
		,grp_nroSerie
		,grp_marca
		,grp_modelo
		,grp_tipo
		,grp_placa
		,grp_chassi
		,grp_anoFabricacao
		,grp_quilometragem
		,grp_potencia
		,grp_unidadePotencia
		,grp_cilindros

	FROM 
		GrupoBens WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_SELECTBY_grp_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_GrupoBens_SELECTBY_grp_id]
	@grp_id INT
AS
BEGIN
	SELECT
		grp_id
		,grp_idPai
		,grp_nome
		,grp_nomeAbr
		,grp_descricao
		,grp_situacao
		,grp_dataCriacao
		,grp_dataAlteracao
		,grp_nroSerie
		,grp_marca
		,grp_modelo
		,grp_tipo
		,grp_placa
		,grp_chassi
		,grp_anoFabricacao
		,grp_quilometragem
		,grp_potencia
		,grp_unidadePotencia
		,grp_cilindros

	FROM
		GrupoBens WITH(NOLOCK)
	WHERE 
		grp_id = @grp_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_GrupoBens_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_GrupoBens_UPDATE]
	@grp_id INT
	, @grp_idPai INT
	, @grp_nome VARCHAR (100)
	, @grp_nomeAbr VARCHAR (30)
	, @grp_descricao VARCHAR (1000)
	, @grp_situacao TINYINT
	, @grp_dataCriacao DATETIME
	, @grp_dataAlteracao DATETIME
	, @grp_nroSerie BIT
	, @grp_marca BIT
	, @grp_modelo BIT
	, @grp_tipo BIT
	, @grp_placa BIT
	, @grp_chassi BIT
	, @grp_anoFabricacao BIT
	, @grp_quilometragem BIT
	, @grp_potencia BIT
	, @grp_unidadePotencia BIT
	, @grp_cilindros BIT

AS
BEGIN
	UPDATE GrupoBens 
	SET 
		grp_idPai = @grp_idPai 
		, grp_nome = @grp_nome 
		, grp_nomeAbr = @grp_nomeAbr 
		, grp_descricao = @grp_descricao 
		, grp_situacao = @grp_situacao 
		, grp_dataCriacao = @grp_dataCriacao 
		, grp_dataAlteracao = @grp_dataAlteracao 
		, grp_nroSerie = @grp_nroSerie 
		, grp_marca = @grp_marca 
		, grp_modelo = @grp_modelo 
		, grp_tipo = @grp_tipo 
		, grp_placa = @grp_placa 
		, grp_chassi = @grp_chassi 
		, grp_anoFabricacao = @grp_anoFabricacao 
		, grp_quilometragem = @grp_quilometragem 
		, grp_potencia = @grp_potencia 
		, grp_unidadePotencia = @grp_unidadePotencia 
		, grp_cilindros = @grp_cilindros 

	WHERE 
		grp_id = @grp_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Inventario_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Inventario_INSERT]
	@inv_id Int
	, @uni_id Int
	, @pes_id UniqueIdentifier
	, @inv_periodoInicio DateTime
	, @inv_periodoFim DateTime
	, @inv_dataCriacao DateTime
	, @inv_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		Inventario
		( 
			inv_id 
			, uni_id 
			, pes_id 
			, inv_periodoInicio 
			, inv_periodoFim 
			, inv_dataCriacao 
			, inv_dataAlteracao 
 
		)
	VALUES
		( 
			@inv_id 
			, @uni_id 
			, @pes_id 
			, @inv_periodoInicio 
			, @inv_periodoFim 
			, @inv_dataCriacao 
			, @inv_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Inventario_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Inventario_LOAD]
	@inv_id Int
	, @uni_id Int
	
AS
BEGIN
	SELECT	Top 1
		 inv_id  
		, uni_id 
		, pes_id 
		, inv_periodoInicio 
		, inv_periodoFim 
		, inv_dataCriacao 
		, inv_dataAlteracao 

 	FROM
 		Inventario
	WHERE 
		inv_id = @inv_id
		AND uni_id = @uni_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Inventario_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Inventario_UPDATE]
	@inv_id INT
	, @uni_id INT
	, @pes_id UNIQUEIDENTIFIER
	, @inv_periodoInicio DATETIME
	, @inv_periodoFim DATETIME
	, @inv_dataCriacao DATETIME
	, @inv_dataAlteracao DATETIME

AS
BEGIN
	UPDATE Inventario 
	SET 
		pes_id = @pes_id 
		, inv_periodoInicio = @inv_periodoInicio 
		, inv_periodoFim = @inv_periodoFim 
		, inv_dataCriacao = @inv_dataCriacao 
		, inv_dataAlteracao = @inv_dataAlteracao 

	WHERE 
		inv_id = @inv_id 
		AND uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Localidade_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Localidade_DELETE]
	@loc_id INT

AS
BEGIN
	DELETE FROM 
		Localidade 
	WHERE 
		loc_id = @loc_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Localidade_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Localidade_INSERT]
	@uni_id Int
	, @end_id UniqueIdentifier
	, @loc_nome VarChar (100)
	, @loc_descricao VarChar (1000)
	, @loc_numero VarChar (10)
	, @loc_complemento VarChar (100)
	, @loc_situacao TinyInt
	, @loc_dataCriacao DateTime
	, @loc_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		Localidade
		( 
			uni_id 
			, end_id 
			, loc_nome 
			, loc_descricao 
			, loc_numero 
			, loc_complemento 
			, loc_situacao 
			, loc_dataCriacao 
			, loc_dataAlteracao 
 
		)
	VALUES
		( 
			@uni_id 
			, @end_id 
			, @loc_nome 
			, @loc_descricao 
			, @loc_numero 
			, @loc_complemento 
			, @loc_situacao 
			, @loc_dataCriacao 
			, @loc_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Localidade_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Localidade_LOAD]
	@loc_id Int
	
AS
BEGIN
	SELECT	Top 1
		 loc_id  
		, uni_id 
		, end_id 
		, loc_nome 
		, loc_descricao 
		, loc_numero 
		, loc_complemento 
		, loc_situacao 
		, loc_dataCriacao 
		, loc_dataAlteracao 

 	FROM
 		Localidade
	WHERE 
		loc_id = @loc_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Localidade_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Localidade_SELECT]
	
AS
BEGIN
	SELECT 
		loc_id
		,uni_id
		,end_id
		,loc_nome
		,loc_descricao
		,loc_numero
		,loc_complemento
		,loc_situacao
		,loc_dataCriacao
		,loc_dataAlteracao

	FROM 
		Localidade WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Localidade_SELECTBY_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Localidade_SELECTBY_uni_id]
	@uni_id INT
AS
BEGIN
	SELECT
		loc_id
		,uni_id
		,end_id
		,loc_nome
		,loc_descricao
		,loc_numero
		,loc_complemento
		,loc_situacao
		,loc_dataCriacao
		,loc_dataAlteracao

	FROM
		Localidade WITH(NOLOCK)
	WHERE 
		uni_id = @uni_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Localidade_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Localidade_UPDATE]
	@loc_id INT
	, @uni_id INT
	, @end_id UNIQUEIDENTIFIER
	, @loc_nome VARCHAR (100)
	, @loc_descricao VARCHAR (1000)
	, @loc_numero VARCHAR (10)
	, @loc_complemento VARCHAR (100)
	, @loc_situacao TINYINT
	, @loc_dataCriacao DATETIME
	, @loc_dataAlteracao DATETIME

AS
BEGIN
	UPDATE Localidade 
	SET 
		uni_id = @uni_id 
		, end_id = @end_id 
		, loc_nome = @loc_nome 
		, loc_descricao = @loc_descricao 
		, loc_numero = @loc_numero 
		, loc_complemento = @loc_complemento 
		, loc_situacao = @loc_situacao 
		, loc_dataCriacao = @loc_dataCriacao 
		, loc_dataAlteracao = @loc_dataAlteracao 

	WHERE 
		loc_id = @loc_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_DELETE]
	@mov_data date
	, @bem_id BIGINT
	, @bit_id INT
	, @tpm_id INT
	, @grp_id INT
	, @cco_codigoDebito VARCHAR(20)
	, @cco_codigoCredito VARCHAR(20)

AS
BEGIN
	DELETE FROM 
		MovimentacaoBem 
	WHERE 
		mov_data = @mov_data 
		AND bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND tpm_id = @tpm_id 
		AND grp_id = @grp_id 
		AND cco_codigoDebito = @cco_codigoDebito 
		AND cco_codigoCredito = @cco_codigoCredito 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_INSERT]
	@mov_data DateTime
	, @bem_id BigInt
	, @bit_id Int
	, @tpm_id Int
	, @grp_id Int
	, @cco_codigoDebito VarChar (20)
	, @cco_codigoCredito VarChar (20)
	, @per_mes Char (2)
	, @per_ano Char (4)
	, @uni_id Int
	, @fat_id Int
	, @usu_id UniqueIdentifier
	, @mov_valor Money
	, @mov_valorReavaliado Money
	, @mov_percentualBaixa Decimal
	, @mov_GPB VarChar (20)
	, @mov_unidadeOrigem Int
	, @mov_unidadeDestino Int
	, @mov_observacao VARCHAR(MAX)
	, @mov_origem TinyInt
	, @mov_nl Char (11)
	, @mov_situacao TinyInt
	, @mov_dataCriacao DateTime
	, @mov_dataAlteracao DateTime
	, @mov_dataOriginal DateTime
--	with recompile
AS
BEGIN
	INSERT INTO 
		MovimentacaoBem
		( 
			mov_data 
			, bem_id 
			, bit_id 
			, tpm_id 
			, grp_id 
			, cco_codigoDebito 
			, cco_codigoCredito 
			, per_mes 
			, per_ano 
			, uni_id 
			, fat_id 
			, usu_id 
			, mov_valor 
			, mov_valorReavaliado 
			, mov_percentualBaixa 
			, mov_GPB 
			, mov_unidadeOrigem 
			, mov_unidadeDestino 
			, mov_observacao 
			, mov_origem 
			, mov_nl 
			, mov_situacao 
			, mov_dataCriacao 
			, mov_dataAlteracao 
			, mov_dataOriginal 
 
		)
	VALUES
		( 
			@mov_data 
			, @bem_id 
			, @bit_id 
			, @tpm_id 
			, @grp_id 
			, @cco_codigoDebito 
			, @cco_codigoCredito 
			, @per_mes 
			, @per_ano 
			, @uni_id 
			, @fat_id 
			, @usu_id 
			, @mov_valor 
			, @mov_valorReavaliado 
			, @mov_percentualBaixa 
			, @mov_GPB 
			, @mov_unidadeOrigem 
			, @mov_unidadeDestino 
			, @mov_observacao 
			, @mov_origem 
			, @mov_nl 
			, @mov_situacao 
			, @mov_dataCriacao 
			, @mov_dataAlteracao 
			, @mov_dataOriginal 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_LOAD]
	@mov_data DateTime
	, @bem_id BigInt
	, @bit_id Int
	, @tpm_id Int
	, @grp_id Int
	, @cco_codigoDebito VarChar (20)
	, @cco_codigoCredito VarChar (20)
	
AS
BEGIN
	SELECT	Top 1
		 mov_data  
		, bem_id 
		, bit_id 
		, tpm_id 
		, grp_id 
		, cco_codigoDebito 
		, cco_codigoCredito 
		, per_mes 
		, per_ano 
		, uni_id 
		, fat_id 
		, usu_id 
		, mov_valor 
		, mov_valorReavaliado 
		, mov_percentualBaixa 
		, mov_GPB 
		, mov_unidadeOrigem 
		, mov_unidadeDestino 
		, mov_observacao 
		, mov_origem 
		, mov_nl 
		, mov_situacao 
		, mov_dataCriacao 
		, mov_dataAlteracao 
		, mov_dataOriginal 

 	FROM
 		MovimentacaoBem WITH (NOLOCK)
	WHERE 
		mov_data = @mov_data
		AND bem_id = @bem_id
		AND bit_id = @bit_id
		AND tpm_id = @tpm_id
		AND grp_id = @grp_id
		AND cco_codigoDebito = @cco_codigoDebito
		AND cco_codigoCredito = @cco_codigoCredito
END

GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECT]
	
AS
BEGIN
	SELECT 
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM 
		MovimentacaoBem WITH(NOLOCK) 
	
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECTBY_bem_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECTBY_bem_id]
	@bem_id BIGINT
AS
BEGIN
	SELECT
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
		bem_id = @bem_id 
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECTBY_bit_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECTBY_bit_id]
	@bit_id INT
AS
BEGIN
	SELECT
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
		bit_id = @bit_id 
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECTBY_cco_codigoCredito]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECTBY_cco_codigoCredito]
	@cco_codigoCredito VARCHAR
AS
BEGIN
	SELECT
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
		cco_codigoCredito = @cco_codigoCredito 
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECTBY_cco_codigoDebito]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECTBY_cco_codigoDebito]
	@cco_codigoDebito VARCHAR
AS
BEGIN
	SELECT
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
		cco_codigoDebito = @cco_codigoDebito 
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECTBY_fat_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECTBY_fat_id]
	@fat_id INT
AS
BEGIN
	SELECT
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
		fat_id = @fat_id 
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECTBY_grp_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECTBY_grp_id]
	@grp_id INT
AS
BEGIN
	SELECT
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
		grp_id = @grp_id 
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECTBY_per_ano]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECTBY_per_ano]
	@per_ano CHAR
AS
BEGIN
	SELECT
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
		per_ano = @per_ano 
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECTBY_per_mes]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECTBY_per_mes]
	@per_mes CHAR
AS
BEGIN
	SELECT
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
		per_mes = @per_mes 
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECTBY_tpm_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECTBY_tpm_id]
	@tpm_id INT
AS
BEGIN
	SELECT
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
		tpm_id = @tpm_id 
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_SELECTBY_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_SELECTBY_uni_id]
	@uni_id INT
AS
BEGIN
	SELECT
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_nl
		,mov_situacao
		,mov_dataCriacao
		,mov_dataAlteracao
		,mov_dataOriginal

	FROM
		MovimentacaoBem WITH(NOLOCK)
	WHERE 
		uni_id = @uni_id 
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBem_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBem_UPDATE]
	@mov_data DATETIME
	, @bem_id BIGINT
	, @bit_id INT
	, @tpm_id INT
	, @grp_id INT
	, @cco_codigoDebito VARCHAR (20)
	, @cco_codigoCredito VARCHAR (20)
	, @per_mes CHAR
	, @per_ano CHAR
	, @uni_id INT
	, @fat_id INT
	, @usu_id UNIQUEIDENTIFIER
	, @mov_valor MONEY
	, @mov_valorReavaliado MONEY
	, @mov_percentualBaixa DECIMAL (5,2)
	, @mov_GPB VARCHAR (20)
	, @mov_unidadeOrigem INT
	, @mov_unidadeDestino INT
	, @mov_observacao Varchar(MAX)
	, @mov_origem TINYINT
	, @mov_nl CHAR (11)
	, @mov_situacao TINYINT
	, @mov_dataCriacao DATETIME
	, @mov_dataAlteracao DATETIME
	, @mov_dataOriginal DATETIME

AS
BEGIN
	UPDATE MovimentacaoBem 
	SET 
		per_mes = @per_mes 
		, per_ano = @per_ano 
		, uni_id = @uni_id 
		, fat_id = @fat_id 
		, usu_id = @usu_id 
		, mov_valor = @mov_valor 
		, mov_valorReavaliado = @mov_valorReavaliado 
		, mov_percentualBaixa = @mov_percentualBaixa 
		, mov_GPB = @mov_GPB 
		, mov_unidadeOrigem = @mov_unidadeOrigem 
		, mov_unidadeDestino = @mov_unidadeDestino 
		, mov_observacao = @mov_observacao 
		, mov_origem = @mov_origem 
		, mov_nl = @mov_nl 
		, mov_situacao = @mov_situacao 
		, mov_dataCriacao = @mov_dataCriacao 
		, mov_dataAlteracao = @mov_dataAlteracao 
		, mov_dataOriginal = @mov_dataOriginal 

	WHERE 
		mov_data = @mov_data 
		AND bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND tpm_id = @tpm_id 
		AND grp_id = @grp_id 
		AND cco_codigoDebito = @cco_codigoDebito 
		AND cco_codigoCredito = @cco_codigoCredito 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END


GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBemEmExportacao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBemEmExportacao_DELETE]
	@mov_data DATETIME
	, @bem_id BIGINT
	, @bit_id INT
	, @tpm_id INT
	, @grp_id INT
	, @cco_codigoDebito VARCHAR
	, @cco_codigoCredito VARCHAR

AS
BEGIN
	DELETE FROM 
		MovimentacaoBemEmExportacao 
	WHERE 
		mov_data = @mov_data 
		AND bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND tpm_id = @tpm_id 
		AND grp_id = @grp_id 
		AND cco_codigoDebito = @cco_codigoDebito 
		AND cco_codigoCredito = @cco_codigoCredito 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBemEmExportacao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBemEmExportacao_INSERT]
	@mov_data DateTime
	, @bem_id BigInt
	, @bit_id Int
	, @tpm_id Int
	, @grp_id Int
	, @cco_codigoDebito VarChar (20)
	, @cco_codigoCredito VarChar (20)
	, @per_mes Char (2)
	, @per_ano Char (4)
	, @uni_id Int
	, @fat_id Int
	, @usu_id UniqueIdentifier
	, @mov_valor Money
	, @mov_valorReavaliado Money
	, @mov_percentualBaixa Decimal
	, @mov_GPB VarChar (20)
	, @mov_unidadeOrigem Int
	, @mov_unidadeDestino Int
	, @mov_observacao varchar(MAX)
	, @mov_origem TinyInt
	, @mov_situacao TinyInt
	, @mov_dataCriacaoMovimento DateTime
	, @mov_dataExportacao DateTime

AS
BEGIN
	INSERT INTO 
		MovimentacaoBemEmExportacao
		( 
			mov_data 
			, bem_id 
			, bit_id 
			, tpm_id 
			, grp_id 
			, cco_codigoDebito 
			, cco_codigoCredito 
			, per_mes 
			, per_ano 
			, uni_id 
			, fat_id 
			, usu_id 
			, mov_valor 
			, mov_valorReavaliado 
			, mov_percentualBaixa 
			, mov_GPB 
			, mov_unidadeOrigem 
			, mov_unidadeDestino 
			, mov_observacao 
			, mov_origem 
			, mov_situacao 
			, mov_dataCriacaoMovimento 
			, mov_dataExportacao 
 
		)
	VALUES
		( 
			@mov_data 
			, @bem_id 
			, @bit_id 
			, @tpm_id 
			, @grp_id 
			, @cco_codigoDebito 
			, @cco_codigoCredito 
			, @per_mes 
			, @per_ano 
			, @uni_id 
			, @fat_id 
			, @usu_id 
			, @mov_valor 
			, @mov_valorReavaliado 
			, @mov_percentualBaixa 
			, @mov_GPB 
			, @mov_unidadeOrigem 
			, @mov_unidadeDestino 
			, @mov_observacao 
			, @mov_origem 
			, @mov_situacao 
			, @mov_dataCriacaoMovimento 
			, @mov_dataExportacao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBemEmExportacao_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_MovimentacaoBemEmExportacao_LOAD]
	@mov_data DateTime
	, @bem_id BigInt
	, @bit_id Int
	, @tpm_id Int
	, @grp_id Int
	, @cco_codigoDebito VarChar (20)
	, @cco_codigoCredito VarChar (20)
	
AS
BEGIN
	SELECT	Top 1
		 mov_data  
		, bem_id 
		, bit_id 
		, tpm_id 
		, grp_id 
		, cco_codigoDebito 
		, cco_codigoCredito 
		, per_mes 
		, per_ano 
		, uni_id 
		, fat_id 
		, usu_id 
		, mov_valor 
		, mov_valorReavaliado 
		, mov_percentualBaixa 
		, mov_GPB 
		, mov_unidadeOrigem 
		, mov_unidadeDestino 
		, mov_observacao 
		, mov_origem 
		, mov_situacao 
		, mov_dataCriacaoMovimento 
		, mov_dataExportacao 

 	FROM
 		MovimentacaoBemEmExportacao
	WHERE 
		mov_data = @mov_data
		AND bem_id = @bem_id
		AND bit_id = @bit_id
		AND tpm_id = @tpm_id
		AND grp_id = @grp_id
		AND cco_codigoDebito = @cco_codigoDebito
		AND cco_codigoCredito = @cco_codigoCredito
END

GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBemEmExportacao_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBemEmExportacao_SELECT]
	
AS
BEGIN
	SELECT 
		mov_data
		,bem_id
		,bit_id
		,tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,per_mes
		,per_ano
		,uni_id
		,fat_id
		,usu_id
		,mov_valor
		,mov_valorReavaliado
		,mov_percentualBaixa
		,mov_GPB
		,mov_unidadeOrigem
		,mov_unidadeDestino
		,mov_observacao
		,mov_origem
		,mov_situacao
		,mov_dataCriacaoMovimento
		,mov_dataExportacao

	FROM 
		MovimentacaoBemEmExportacao WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_MovimentacaoBemEmExportacao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_MovimentacaoBemEmExportacao_UPDATE]
	@mov_data DATETIME
	, @bem_id BIGINT
	, @bit_id INT
	, @tpm_id INT
	, @grp_id INT
	, @cco_codigoDebito VARCHAR (20)
	, @cco_codigoCredito VARCHAR (20)
	, @per_mes CHAR
	, @per_ano CHAR
	, @uni_id INT
	, @fat_id INT
	, @usu_id UNIQUEIDENTIFIER
	, @mov_valor MONEY
	, @mov_valorReavaliado MONEY
	, @mov_percentualBaixa DECIMAL (5,2)
	, @mov_GPB VARCHAR (20)
	, @mov_unidadeOrigem INT
	, @mov_unidadeDestino INT
	, @mov_observacao varchar(MAX)
	, @mov_origem TINYINT
	, @mov_situacao TINYINT
	, @mov_dataCriacaoMovimento DATETIME
	, @mov_dataExportacao DATETIME

AS
BEGIN
	UPDATE MovimentacaoBemEmExportacao 
	SET 
		per_mes = @per_mes 
		, per_ano = @per_ano 
		, uni_id = @uni_id 
		, fat_id = @fat_id 
		, usu_id = @usu_id 
		, mov_valor = @mov_valor 
		, mov_valorReavaliado = @mov_valorReavaliado 
		, mov_percentualBaixa = @mov_percentualBaixa 
		, mov_GPB = @mov_GPB 
		, mov_unidadeOrigem = @mov_unidadeOrigem 
		, mov_unidadeDestino = @mov_unidadeDestino 
		, mov_observacao = @mov_observacao 
		, mov_origem = @mov_origem 
		, mov_situacao = @mov_situacao 
		, mov_dataCriacaoMovimento = @mov_dataCriacaoMovimento 
		, mov_dataExportacao = @mov_dataExportacao 

	WHERE 
		mov_data = @mov_data 
		AND bem_id = @bem_id 
		AND bit_id = @bit_id 
		AND tpm_id = @tpm_id 
		AND grp_id = @grp_id 
		AND cco_codigoDebito = @cco_codigoDebito 
		AND cco_codigoCredito = @cco_codigoCredito 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ParametroContabil_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ParametroContabil_DELETE]
	@tpm_id INT
	, @grp_id INT
	, @cco_codigoDebito VARCHAR(20)
	, @cco_codigoCredito VARCHAR(20)

AS
BEGIN
	DELETE FROM 
		ParametroContabil 
	WHERE 
		tpm_id = @tpm_id 
		AND grp_id = @grp_id 
		AND cco_codigoDebito = @cco_codigoDebito 
		AND cco_codigoCredito = @cco_codigoCredito 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ParametroContabil_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ParametroContabil_INSERT]
	@tpm_id Int
	, @grp_id Int
	, @cco_codigoDebito VarChar (20)
	, @cco_codigoCredito VarChar (20)
	, @pco_historico varchar(max)
	, @pco_evento Int
	, @pco_eventoCredito Int
	, @pco_automatico Bit
	, @pco_situacao TinyInt
	, @pco_dataCriacao DateTime
	, @pco_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		ParametroContabil
		( 
			tpm_id 
			, grp_id 
			, cco_codigoDebito 
			, cco_codigoCredito 
			, pco_historico 
			, pco_evento 
			, pco_eventoCredito 
			, pco_automatico 
			, pco_situacao 
			, pco_dataCriacao 
			, pco_dataAlteracao 
 
		)
	VALUES
		( 
			@tpm_id 
			, @grp_id 
			, @cco_codigoDebito 
			, @cco_codigoCredito 
			, @pco_historico 
			, @pco_evento 
			, @pco_eventoCredito 
			, @pco_automatico 
			, @pco_situacao 
			, @pco_dataCriacao 
			, @pco_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ParametroContabil_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ParametroContabil_LOAD]
	@tpm_id Int
	, @grp_id Int
	, @cco_codigoDebito VarChar (20)
	, @cco_codigoCredito VarChar (20)
	
AS
BEGIN
	SELECT	Top 1
		 tpm_id  
		, grp_id 
		, cco_codigoDebito 
		, cco_codigoCredito 
		, pco_historico 
		, pco_evento 
		, pco_eventoCredito 
		, pco_automatico 
		, pco_situacao 
		, pco_dataCriacao 
		, pco_dataAlteracao 

 	FROM
 		ParametroContabil
	WHERE 
		tpm_id = @tpm_id
		AND grp_id = @grp_id
		AND cco_codigoDebito = @cco_codigoDebito
		AND cco_codigoCredito = @cco_codigoCredito
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ParametroContabil_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ParametroContabil_SELECT]
	
AS
BEGIN
	SELECT 
		tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,pco_historico
		,pco_evento
		,pco_eventoCredito
		,pco_automatico
		,pco_situacao
		,pco_dataCriacao
		,pco_dataAlteracao

	FROM 
		ParametroContabil WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ParametroContabil_SELECTBY_grp_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ParametroContabil_SELECTBY_grp_id]
	@grp_id INT
AS
BEGIN
	SELECT
		tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,pco_historico
		,pco_evento
		,pco_eventoCredito
		,pco_automatico
		,pco_situacao
		,pco_dataCriacao
		,pco_dataAlteracao

	FROM
		ParametroContabil WITH(NOLOCK)
	WHERE 
		grp_id = @grp_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ParametroContabil_SELECTBY_tpm_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ParametroContabil_SELECTBY_tpm_id]
	@tpm_id INT
AS
BEGIN
	SELECT
		tpm_id
		,grp_id
		,cco_codigoDebito
		,cco_codigoCredito
		,pco_historico
		,pco_evento
		,pco_eventoCredito
		,pco_automatico
		,pco_situacao
		,pco_dataCriacao
		,pco_dataAlteracao

	FROM
		ParametroContabil WITH(NOLOCK)
	WHERE 
		tpm_id = @tpm_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_ParametroContabil_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_ParametroContabil_UPDATE]
	@tpm_id INT
	, @grp_id INT
	, @cco_codigoDebito VARCHAR (20)
	, @cco_codigoCredito VARCHAR (20)
	, @pco_historico varchar(max)
	, @pco_evento INT
	, @pco_eventoCredito INT
	, @pco_automatico BIT
	, @pco_situacao TINYINT
	, @pco_dataCriacao DATETIME
	, @pco_dataAlteracao DATETIME

AS
BEGIN
	UPDATE ParametroContabil 
	SET 
		pco_historico = @pco_historico 
		, pco_evento = @pco_evento 
		, pco_eventoCredito = @pco_eventoCredito 
		, pco_automatico = @pco_automatico 
		, pco_situacao = @pco_situacao 
		, pco_dataCriacao = @pco_dataCriacao 
		, pco_dataAlteracao = @pco_dataAlteracao 

	WHERE 
		tpm_id = @tpm_id 
		AND grp_id = @grp_id 
		AND cco_codigoDebito = @cco_codigoDebito 
		AND cco_codigoCredito = @cco_codigoCredito 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWfDepedente_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWfDepedente_INSERT]
	@wrk_id Int
	, @wfd_id Int
	, @wfd_wfParent Int
	, @wfd_situacao TinyInt
	, @wfd_dataCriacao DateTime
	, @wfd_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		PatrimonioWfDepedente
		( 
			wrk_id 
			, wfd_id 
			, wfd_wfParent 
			, wfd_situacao 
			, wfd_dataCriacao 
			, wfd_dataAlteracao 
 
		)
	VALUES
		( 
			@wrk_id 
			, @wfd_id 
			, @wfd_wfParent 
			, @wfd_situacao 
			, @wfd_dataCriacao 
			, @wfd_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWfDepedente_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWfDepedente_LOAD]
	@wrk_id Int
	, @wfd_id Int
	
AS
BEGIN
	SELECT	Top 1
		 wrk_id  
		, wfd_id 
		, wfd_wfParent 
		, wfd_situacao 
		, wfd_dataCriacao 
		, wfd_dataAlteracao 

 	FROM
 		PatrimonioWfDepedente
	WHERE 
		wrk_id = @wrk_id
		AND wfd_id = @wfd_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWfStatus_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWfStatus_DELETE]
	@wrk_id INT
	, @stp_id INT

AS
BEGIN
	DELETE FROM 
		PatrimonioWfStatus 
	WHERE 
		wrk_id = @wrk_id 
		AND stp_id = @stp_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWfStatus_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWfStatus_INSERT]
	@wrk_id Int
	, @stp_id Int
	, @stp_idProximo Int
	, @wfs_obrigatorio Bit
	, @wfs_somenteExibicao Bit
	, @wfs_uniGestora Bit
	, @wfs_uniGuarda Bit
	, @wfs_situacao TinyInt
	, @wfs_justificativaObrigatoria Bit
	, @wfs_dataCriacao DateTime
	, @wfs_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		PatrimonioWfStatus
		( 
			wrk_id 
			, stp_id 
			, stp_idProximo 
			, wfs_obrigatorio 
			, wfs_somenteExibicao 
			, wfs_uniGestora 
			, wfs_uniGuarda 
			, wfs_situacao 
			, wfs_justificativaObrigatoria 
			, wfs_dataCriacao 
			, wfs_dataAlteracao 
 
		)
	VALUES
		( 
			@wrk_id 
			, @stp_id 
			, @stp_idProximo 
			, @wfs_obrigatorio 
			, @wfs_somenteExibicao 
			, @wfs_uniGestora 
			, @wfs_uniGuarda 
			, @wfs_situacao 
			, @wfs_justificativaObrigatoria 
			, @wfs_dataCriacao 
			, @wfs_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWfStatus_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWfStatus_LOAD]
	@wrk_id Int
	, @stp_id Int
	
AS
BEGIN
	SELECT	Top 1
		 wrk_id  
		, stp_id 
		, stp_idProximo 
		, wfs_obrigatorio 
		, wfs_somenteExibicao 
		, wfs_uniGestora 
		, wfs_uniGuarda 
		, wfs_situacao 
		, wfs_justificativaObrigatoria 
		, wfs_dataCriacao 
		, wfs_dataAlteracao 

 	FROM
 		PatrimonioWfStatus
	WHERE 
		wrk_id = @wrk_id
		AND stp_id = @stp_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWfStatus_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWfStatus_SELECT]
	
AS
BEGIN
	SELECT 
		wrk_id
		,stp_id
		,stp_idProximo
		,wfs_obrigatorio
		,wfs_somenteExibicao
		,wfs_uniGestora
		,wfs_uniGuarda
		,wfs_situacao
		,wfs_justificativaObrigatoria
		,wfs_dataCriacao
		,wfs_dataAlteracao

	FROM 
		PatrimonioWfStatus WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWfStatus_SELECTBY_stp_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWfStatus_SELECTBY_stp_id]
	@stp_id INT
AS
BEGIN
	SELECT
		wrk_id
		,stp_id
		,stp_idProximo
		,wfs_obrigatorio
		,wfs_somenteExibicao
		,wfs_uniGestora
		,wfs_uniGuarda
		,wfs_situacao
		,wfs_justificativaObrigatoria
		,wfs_dataCriacao
		,wfs_dataAlteracao

	FROM
		PatrimonioWfStatus WITH(NOLOCK)
	WHERE 
		stp_id = @stp_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWfStatus_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWfStatus_UPDATE]
	@wrk_id INT
	, @stp_id INT
	, @stp_idProximo INT
	, @wfs_obrigatorio BIT
	, @wfs_somenteExibicao BIT
	, @wfs_uniGestora BIT
	, @wfs_uniGuarda BIT
	, @wfs_situacao TINYINT
	, @wfs_justificativaObrigatoria BIT
	, @wfs_dataCriacao DATETIME
	, @wfs_dataAlteracao DATETIME

AS
BEGIN
	UPDATE PatrimonioWfStatus 
	SET 
		stp_idProximo = @stp_idProximo 
		, wfs_obrigatorio = @wfs_obrigatorio 
		, wfs_somenteExibicao = @wfs_somenteExibicao 
		, wfs_uniGestora = @wfs_uniGestora 
		, wfs_uniGuarda = @wfs_uniGuarda 
		, wfs_situacao = @wfs_situacao 
		, wfs_justificativaObrigatoria = @wfs_justificativaObrigatoria 
		, wfs_dataCriacao = @wfs_dataCriacao 
		, wfs_dataAlteracao = @wfs_dataAlteracao 

	WHERE 
		wrk_id = @wrk_id 
		AND stp_id = @stp_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWorkflow_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWorkflow_INSERT]
	@wrk_id Int
	, @wrk_nome VarChar (100)
	, @wrk_situacao TinyInt
	, @wrk_dataCriacao DateTime
	, @wrk_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		PatrimonioWorkflow
		( 
			wrk_id 
			, wrk_nome 
			, wrk_situacao 
			, wrk_dataCriacao 
			, wrk_dataAlteracao 
 
		)
	VALUES
		( 
			@wrk_id 
			, @wrk_nome 
			, @wrk_situacao 
			, @wrk_dataCriacao 
			, @wrk_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWorkflow_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWorkflow_LOAD]
	@wrk_id Int
	
AS
BEGIN
	SELECT	Top 1
		 wrk_id  
		, wrk_nome 
		, wrk_situacao 
		, wrk_dataCriacao 
		, wrk_dataAlteracao 

 	FROM
 		PatrimonioWorkflow
	WHERE 
		wrk_id = @wrk_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PatrimonioWorkflow_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PatrimonioWorkflow_SELECT]
	
AS
BEGIN
	SELECT 
		wrk_id
		,wrk_nome
		,wrk_situacao
		,wrk_dataCriacao
		,wrk_dataAlteracao

	FROM 
		PatrimonioWorkflow WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Periodo_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Periodo_DELETE]
	@per_mes VARCHAR(2)
	, @per_ano VARCHAR(4)

AS
BEGIN
	DELETE FROM 
		Periodo
	WHERE 
		per_mes = @per_mes 
		AND per_ano = @per_ano 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Periodo_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Periodo_INSERT]
	@per_mes Char (2)
	, @per_ano Char (4)
	, @per_situacao TinyInt
	, @per_dataCriacao DateTime
	, @per_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		Periodo
		( 
			per_mes 
			, per_ano 
			, per_situacao 
			, per_dataCriacao 
			, per_dataAlteracao 
 
		)
	VALUES
		( 
			@per_mes 
			, @per_ano 
			, @per_situacao 
			, @per_dataCriacao 
			, @per_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Periodo_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Periodo_LOAD]
	@per_mes Char(2)
	, @per_ano Char(4)
	
AS
BEGIN
	SELECT	Top 1
		 per_mes  
		, per_ano 
		, per_situacao 
		, per_dataCriacao 
		, per_dataAlteracao 

 	FROM
 		Periodo
	WHERE 
		per_mes = @per_mes
		AND per_ano = @per_ano
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Periodo_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Periodo_SELECT]
	
AS
BEGIN
	SELECT 
		per_mes
		,per_ano
		,per_situacao
		,per_dataCriacao
		,per_dataAlteracao

	FROM 
		Periodo WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Periodo_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Periodo_UPDATE]
	@per_mes CHAR
	, @per_ano CHAR
	, @per_situacao TINYINT
	, @per_dataCriacao DATETIME
	, @per_dataAlteracao DATETIME

AS
BEGIN
	UPDATE Periodo 
	SET 
		per_situacao = @per_situacao 
		, per_dataCriacao = @per_dataCriacao 
		, per_dataAlteracao = @per_dataAlteracao 

	WHERE 
		per_mes = @per_mes 
		AND per_ano = @per_ano 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PeriodoUnidade_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PeriodoUnidade_DELETE]
	@per_mes CHAR
	, @per_ano CHAR
	, @uni_id INT

AS
BEGIN
	DELETE FROM 
		PeriodoUnidade 
	WHERE 
		per_mes = @per_mes 
		AND per_ano = @per_ano 
		AND uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PeriodoUnidade_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PeriodoUnidade_INSERT]
	@per_mes Char (2)
	, @per_ano Char (4)
	, @uni_id Int
	, @peu_situacao TinyInt
	, @peu_dataCriacao DateTime
	, @peu_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		PeriodoUnidade
		( 
			per_mes 
			, per_ano 
			, uni_id 
			, peu_situacao 
			, peu_dataCriacao 
			, peu_dataAlteracao 
 
		)
	VALUES
		( 
			@per_mes 
			, @per_ano 
			, @uni_id 
			, @peu_situacao 
			, @peu_dataCriacao 
			, @peu_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PeriodoUnidade_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PeriodoUnidade_LOAD]
	@per_mes Char(2)
	, @per_ano Char(4)
	, @uni_id Int
	
AS
BEGIN
	SELECT	Top 1
		 per_mes  
		, per_ano 
		, uni_id 
		, peu_situacao 
		, peu_dataCriacao 
		, peu_dataAlteracao 

 	FROM
 		PeriodoUnidade
	WHERE 
		per_mes = @per_mes
		AND per_ano = @per_ano
		AND uni_id = @uni_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PeriodoUnidade_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PeriodoUnidade_SELECT]
	
AS
BEGIN
	SELECT 
		per_mes
		,per_ano
		,uni_id
		,peu_situacao
		,peu_dataCriacao
		,peu_dataAlteracao

	FROM 
		PeriodoUnidade WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PeriodoUnidade_SELECTBY_per_ano]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PeriodoUnidade_SELECTBY_per_ano]
	@per_ano CHAR
AS
BEGIN
	SELECT
		per_mes
		,per_ano
		,uni_id
		,peu_situacao
		,peu_dataCriacao
		,peu_dataAlteracao

	FROM
		PeriodoUnidade WITH(NOLOCK)
	WHERE 
		per_ano = @per_ano 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PeriodoUnidade_SELECTBY_per_mes]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PeriodoUnidade_SELECTBY_per_mes]
	@per_mes CHAR
AS
BEGIN
	SELECT
		per_mes
		,per_ano
		,uni_id
		,peu_situacao
		,peu_dataCriacao
		,peu_dataAlteracao

	FROM
		PeriodoUnidade WITH(NOLOCK)
	WHERE 
		per_mes = @per_mes 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PeriodoUnidade_SELECTBY_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PeriodoUnidade_SELECTBY_uni_id]
	@uni_id INT
AS
BEGIN
	SELECT
		per_mes
		,per_ano
		,uni_id
		,peu_situacao
		,peu_dataCriacao
		,peu_dataAlteracao

	FROM
		PeriodoUnidade WITH(NOLOCK)
	WHERE 
		uni_id = @uni_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_PeriodoUnidade_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_PeriodoUnidade_UPDATE]
	@per_mes CHAR(2)
	, @per_ano CHAR(4)
	, @uni_id INT
	, @peu_situacao TINYINT
	, @peu_dataCriacao DATETIME
	, @peu_dataAlteracao DATETIME

AS
BEGIN
	UPDATE PeriodoUnidade 
	SET 
		peu_situacao = @peu_situacao 
		, peu_dataCriacao = @peu_dataCriacao 
		, peu_dataAlteracao = @peu_dataAlteracao 

	WHERE 
		per_mes = @per_mes 
		AND per_ano = @per_ano 
		AND uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Seguradora_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Seguradora_DELETE]
	@seg_id INT

AS
BEGIN
	DELETE FROM 
		Seguradora 
	WHERE 
		seg_id = @seg_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Seguradora_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Seguradora_INSERT]
	@ent_id UniqueIdentifier
	, @seg_situacao TinyInt
	, @seg_dataCriacao DateTime
	, @seg_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		Seguradora
		( 
			ent_id 
			, seg_situacao 
			, seg_dataCriacao 
			, seg_dataAlteracao 
 
		)
	VALUES
		( 
			@ent_id 
			, @seg_situacao 
			, @seg_dataCriacao 
			, @seg_dataAlteracao 
 
		)
		
		SELECT ISNULL(
		SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Seguradora_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Seguradora_LOAD]
	@seg_id Int
	
AS
BEGIN
	SELECT	Top 1
		 seg_id  
		, ent_id 
		, seg_situacao 
		, seg_dataCriacao 
		, seg_dataAlteracao 

 	FROM
 		Seguradora
	WHERE 
		seg_id = @seg_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Seguradora_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Seguradora_SELECT]
	
AS
BEGIN
	SELECT 
		seg_id
		,ent_id
		,seg_situacao
		,seg_dataCriacao
		,seg_dataAlteracao

	FROM 
		Seguradora WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Seguradora_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_Seguradora_UPDATE]
	@seg_id INT
	, @ent_id UNIQUEIDENTIFIER
	, @seg_situacao TINYINT
	, @seg_dataCriacao DATETIME
	, @seg_dataAlteracao DATETIME

AS
BEGIN
	UPDATE Seguradora 
	SET 
		ent_id = @ent_id 
		, seg_situacao = @seg_situacao 
		, seg_dataCriacao = @seg_dataCriacao 
		, seg_dataAlteracao = @seg_dataAlteracao 

	WHERE 
		seg_id = @seg_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SituacaoPatrimonial_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SituacaoPatrimonial_DELETE]
	@sp_id VARCHAR

AS
BEGIN
	DELETE FROM 
		SituacaoPatrimonial 
	WHERE 
		sp_id = @sp_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SituacaoPatrimonial_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SituacaoPatrimonial_INSERT]
	@sp_id VarChar (5)
	, @sp_descricao VarChar (100)

AS
BEGIN
	INSERT INTO 
		SituacaoPatrimonial
		( 
			sp_id 
			, sp_descricao 
 
		)
	VALUES
		( 
			@sp_id 
			, @sp_descricao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SituacaoPatrimonial_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SituacaoPatrimonial_LOAD]
	@sp_id VarChar (5)
	
AS
BEGIN
	SELECT	Top 1
		 sp_id  
		, sp_descricao 

 	FROM
 		SituacaoPatrimonial
	WHERE 
		sp_id = @sp_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SituacaoPatrimonial_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[STP_SituacaoPatrimonial_SELECT]
	
AS
BEGIN
	SELECT 
		sp_id
		,sp_descricao

	FROM 
		SituacaoPatrimonial WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SituacaoPatrimonial_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SituacaoPatrimonial_UPDATE]
	@sp_id VARCHAR (5)
	, @sp_descricao VARCHAR (100)

AS
BEGIN
	UPDATE SituacaoPatrimonial 
	SET 
		sp_descricao = @sp_descricao 

	WHERE 
		sp_id = @sp_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_StatusConservacao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_StatusConservacao_DELETE]
	@stc_id INT

AS
BEGIN
	DELETE FROM 
		StatusConservacao 
	WHERE 
		stc_id = @stc_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_StatusConservacao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_StatusConservacao_INSERT]
	@stc_nome VarChar (100)
	, @stc_decricao VarChar (1000)
	, @stc_situacao TinyInt
	, @stc_dataCriacao DateTime
	, @stc_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		StatusConservacao
		( 
			stc_nome 
			, stc_decricao 
			, stc_situacao 
			, stc_dataCriacao 
			, stc_dataAlteracao 
 
		)
	VALUES
		( 
			@stc_nome 
			, @stc_decricao 
			, @stc_situacao 
			, @stc_dataCriacao 
			, @stc_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_StatusConservacao_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_StatusConservacao_LOAD]
	@stc_id Int
	
AS
BEGIN
	SELECT	Top 1
		 stc_id  
		, stc_nome 
		, stc_decricao 
		, stc_situacao 
		, stc_dataCriacao 
		, stc_dataAlteracao 

 	FROM
 		StatusConservacao
	WHERE 
		stc_id = @stc_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_StatusConservacao_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_StatusConservacao_SELECT]
	
AS
BEGIN
	SELECT 
		stc_id
		,stc_nome
		,stc_decricao
		,stc_situacao
		,stc_dataCriacao
		,stc_dataAlteracao

	FROM 
		StatusConservacao WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_StatusConservacao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_StatusConservacao_UPDATE]
	@stc_id INT
	, @stc_nome VARCHAR (100)
	, @stc_decricao VARCHAR (1000)
	, @stc_situacao TINYINT
	, @stc_dataCriacao DATETIME
	, @stc_dataAlteracao DATETIME

AS
BEGIN
	UPDATE StatusConservacao 
	SET 
		stc_nome = @stc_nome 
		, stc_decricao = @stc_decricao 
		, stc_situacao = @stc_situacao 
		, stc_dataCriacao = @stc_dataCriacao 
		, stc_dataAlteracao = @stc_dataAlteracao 

	WHERE 
		stc_id = @stc_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_StatusPatrimonio_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_StatusPatrimonio_INSERT]
	@stp_id Int
	, @stp_nome VarChar (100)
	, @stp_situacao TinyInt
	, @stp_dataCriacao DateTime
	, @stp_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		StatusPatrimonio
		( 
			stp_id 
			, stp_nome 
			, stp_situacao 
			, stp_dataCriacao 
			, stp_dataAlteracao 
 
		)
	VALUES
		( 
			@stp_id 
			, @stp_nome 
			, @stp_situacao 
			, @stp_dataCriacao 
			, @stp_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_StatusPatrimonio_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_StatusPatrimonio_LOAD]
	@stp_id Int
	
AS
BEGIN
	SELECT	Top 1
		 stp_id  
		, stp_nome 
		, stp_situacao 
		, stp_dataCriacao 
		, stp_dataAlteracao 

 	FROM
 		StatusPatrimonio
	WHERE 
		stp_id = @stp_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ConfigEtiqueta_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ConfigEtiqueta_DELETE]
	@cfe_macTerminal NVARCHAR(50)

AS
BEGIN
	DELETE FROM 
		SYS_ConfigEtiqueta 
	WHERE 
		cfe_macTerminal = @cfe_macTerminal 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END


GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ConfigEtiqueta_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ConfigEtiqueta_INSERT]
	@cfe_macTerminal NVarChar (100)
	, @uni_id Int
	, @cfe_enderecoImpressora NVarChar (100)
	, @cfe_etiquetaQtdeLinha Int
	, @cfe_etiquetaAltura NUMERIC(5,2)
	, @cfe_etiquetaLargura NUMERIC(5,2)
	, @cfe_etiquetaMargEsq NUMERIC(5,2)
	, @cfe_etiquetaDistancia NUMERIC(5,2)
	, @cfe_etiquetaEspacoLinha NUMERIC(5,2)
	, @cfe_etiquetaMsg NVarChar (200)
	, @cfe_bufferImpressora Int
	, @pae_id Int
	, @cfe_densidadeImpressora Int
AS
BEGIN
	INSERT INTO 
		SYS_ConfigEtiqueta
		( 
			cfe_macTerminal 
			, uni_id 
			, cfe_enderecoImpressora 
			, cfe_etiquetaQtdeLinha 
			, cfe_etiquetaAltura 
			, cfe_etiquetaLargura 
			, cfe_etiquetaMargEsq 
			, cfe_etiquetaDistancia 
			, cfe_etiquetaEspacoLinha 
			, cfe_etiquetaMsg 
			, cfe_bufferImpressora 
			, pae_id 
			, cfe_densidadeImpressora 
		)
	VALUES
		( 
			@cfe_macTerminal 
			, @uni_id 
			, @cfe_enderecoImpressora 
			, @cfe_etiquetaQtdeLinha 
			, @cfe_etiquetaAltura 
			, @cfe_etiquetaLargura 
			, @cfe_etiquetaMargEsq 
			, @cfe_etiquetaDistancia 
			, @cfe_etiquetaEspacoLinha 
			, @cfe_etiquetaMsg 
			, @cfe_bufferImpressora 
			, @pae_id 
			, @cfe_densidadeImpressora 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ConfigEtiqueta_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_SYS_ConfigEtiqueta_LOAD]
	@cfe_macTerminal NVarChar (100)
	
AS
BEGIN
	SELECT	Top 1
		 cfe_macTerminal  
		, uni_id 
		, cfe_enderecoImpressora 
		, cfe_etiquetaQtdeLinha 
		, cfe_etiquetaAltura 
		, cfe_etiquetaLargura 
		, cfe_etiquetaMargEsq 
		, cfe_etiquetaDistancia 
		, cfe_etiquetaEspacoLinha 
		, cfe_etiquetaMsg 
		, cfe_bufferImpressora 
		, pae_id 
		, cfe_densidadeImpressora 

 	FROM
 		SYS_ConfigEtiqueta
	WHERE 
		cfe_macTerminal = @cfe_macTerminal
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ConfigEtiqueta_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ConfigEtiqueta_SELECT]
	
AS
BEGIN
	SELECT 
		cfe_macTerminal
		,uni_id
		,cfe_enderecoImpressora
		,cfe_etiquetaQtdeLinha
		,cfe_etiquetaAltura
		,cfe_etiquetaLargura
		,cfe_etiquetaMargEsq
		,cfe_etiquetaDistancia
		,cfe_etiquetaEspacoLinha
		,cfe_etiquetaMsg
		,cfe_bufferImpressora
		,pae_id
		,cfe_densidadeImpressora
	FROM 
		SYS_ConfigEtiqueta WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ConfigEtiqueta_SELECTBY_pae_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ConfigEtiqueta_SELECTBY_pae_id]
		@pae_id INT
AS
BEGIN
	SELECT
		cfe_macTerminal
		,uni_id
		,cfe_enderecoImpressora
		,cfe_etiquetaQtdeLinha
		,cfe_etiquetaAltura
		,cfe_etiquetaLargura
		,cfe_etiquetaMargEsq
		,cfe_etiquetaDistancia
		,cfe_etiquetaEspacoLinha
		,cfe_etiquetaMsg
		,cfe_bufferImpressora
		,pae_id
		,cfe_densidadeImpressora

	FROM
		SYS_ConfigEtiqueta WITH(NOLOCK)
	WHERE 
		pae_id = @pae_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ConfigEtiqueta_SELECTBY_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ConfigEtiqueta_SELECTBY_uni_id]
	@uni_id INT
AS
BEGIN
	SELECT
		cfe_macTerminal
		,uni_id
		,cfe_enderecoImpressora
		,cfe_etiquetaQtdeLinha
		,cfe_etiquetaAltura
		,cfe_etiquetaLargura
		,cfe_etiquetaMargEsq
		,cfe_etiquetaDistancia
		,cfe_etiquetaEspacoLinha
		,cfe_etiquetaMsg
		,cfe_bufferImpressora
		,pae_id
		,cfe_densidadeImpressora

	FROM
		SYS_ConfigEtiqueta WITH(NOLOCK)
	WHERE 
		uni_id = @uni_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ConfigEtiqueta_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ConfigEtiqueta_UPDATE]
	@cfe_macTerminal NVARCHAR (100)
	, @uni_id INT
	, @cfe_enderecoImpressora NVARCHAR (100)
	, @cfe_etiquetaQtdeLinha INT
	, @cfe_etiquetaAltura NUMERIC(5,2)
	, @cfe_etiquetaLargura NUMERIC(5,2)
	, @cfe_etiquetaMargEsq NUMERIC(5,2)
	, @cfe_etiquetaDistancia NUMERIC(5,2)
	, @cfe_etiquetaEspacoLinha NUMERIC(5,2)
	, @cfe_etiquetaMsg NVARCHAR (200)
	, @cfe_bufferImpressora INT
	, @pae_id INT
	, @cfe_densidadeImpressora INT

AS
BEGIN
	UPDATE SYS_ConfigEtiqueta 
	SET 
		uni_id = @uni_id 
		, cfe_enderecoImpressora = @cfe_enderecoImpressora 
		, cfe_etiquetaQtdeLinha = @cfe_etiquetaQtdeLinha 
		, cfe_etiquetaAltura = @cfe_etiquetaAltura 
		, cfe_etiquetaLargura = @cfe_etiquetaLargura 
		, cfe_etiquetaMargEsq = @cfe_etiquetaMargEsq 
		, cfe_etiquetaDistancia = @cfe_etiquetaDistancia 
		, cfe_etiquetaEspacoLinha = @cfe_etiquetaEspacoLinha 
		, cfe_etiquetaMsg = @cfe_etiquetaMsg 
		, cfe_bufferImpressora = @cfe_bufferImpressora 
		, pae_id = @pae_id 
		, cfe_densidadeImpressora = @cfe_densidadeImpressora 

	WHERE 
		cfe_macTerminal = @cfe_macTerminal 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Configuracao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_Configuracao_DELETE]
	@cfg_id INT

AS
BEGIN
	DELETE FROM 
		SYS_Configuracao 
	WHERE 
		cfg_id = @cfg_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Configuracao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_SYS_Configuracao_INSERT]
	@cfg_titulo NVarChar (400)
	, @cfg_paginacao Int
	, @cfg_emailHost NVarChar (200)
	, @cfg_emailSuporte NVarChar (200)
	, @cfg_paginaInicio NVarChar (200)
	, @cfg_paginaErro NVarChar (200)
	, @cfg_paginaExpira NVarChar (200)
	, @cfg_paginaLogOff NVarChar (200)
	, @cfg_bdProvider NVarChar (200)
	, @cfg_diretorioVirtual NVarChar (400)
	, @cfg_diretorioFisico NVarChar (200)
	, @cfg_diretorioArquivo NVarChar (1024)
	, @cfg_extensaoArquivo NVarChar (1024)
	, @cfg_tamanhoMaxArquivo Int
	, @cfg_servidorRelatorio NVarChar (1024)
	, @cfg_usuarioRelatorio NVarChar (1024)
	, @cfg_senhaRelatorio NVarChar (1024)
	, @cfg_dominioRelatorio NVarChar (1024)
	, @cfg_pastaRelatorio NVarChar (1024)
	, @cfg_wsSiafemUrl NVarChar (1024)
	, @cfg_wsSiafemUser NVarChar (1024)
	, @cfg_wsSiafemPwd NVarChar (1024)
	, @cfg_wsSiafemUsarProxy Bit
	, @cfg_wsSiafemProxyIP NVarChar (256)
	, @cfg_wsSiafemProxyPorta NVarChar (20)
	, @cfg_wsSiafemUsarAutenticacao Bit
	, @cfg_wsSiafemProxyUser NVarChar (1024)
	, @cfg_wsSiafemProxyPwd NVarChar (1024)
	, @cfg_valorMinimoPatrimonio Money
	, @cfg_stcIdImportacao Int
	, @cfg_mascaraEtiqueta NVarChar (100)
	, @cfg_mascaraGPB NVarChar (100)
	, @cfg_pastaDownload NVarChar (1024)
	, @cfg_diretorioVirtualDownload NVarChar (1024)
	, @cfg_cnpjFornLegado VarChar (14)
	, @cfg_autenticacaoSMTP Bit
	, @cfg_userSMTP NVarChar (200)
	, @cfg_senhaSMTP NVarChar (200)
	, @cfg_utilizaCODMAT Bit
	, @cfg_validaLoginPorCPF Bit
	, @cfg_naoGerarMovimentRecebEstoque Bit
	, @cfg_informarDocBaixa Bit
	, @cfg_naoUtilizarSIAFEM Bit
	, @cfg_nomeEmpresa NVarChar (200)
	, @cfg_nomeEntidade NVarChar (200)
	, @cfg_gerarRegPatrimonialBemAutomatico Bit
	, @cfg_regPatriomonialAutomaticoAno NVarChar (8)
	, @cfg_regPatriomonialAutomaticoUnidade NVarChar (20)
	, @cfg_regPatriomonialAutomaticoUGE NVarChar (20)
	, @cfg_tipoImpressao VarChar (50)
	, @cfg_qtdeImpressaoPorVez Int
	, @cfg_intervaloImpressao Int
	, @cfg_proxNumLegado BigInt
	, @cfg_editarCIE Bit
	, @cfg_validaUsoCore Bit
	, @cfg_sistemID NVarChar (200)

AS
BEGIN
	INSERT INTO 
		SYS_Configuracao
		( 
			cfg_titulo 
			, cfg_paginacao 
			, cfg_emailHost 
			, cfg_emailSuporte 
			, cfg_paginaInicio 
			, cfg_paginaErro 
			, cfg_paginaExpira 
			, cfg_paginaLogOff 
			, cfg_bdProvider 
			, cfg_diretorioVirtual 
			, cfg_diretorioFisico 
			, cfg_diretorioArquivo 
			, cfg_extensaoArquivo 
			, cfg_tamanhoMaxArquivo 
			, cfg_servidorRelatorio 
			, cfg_usuarioRelatorio 
			, cfg_senhaRelatorio 
			, cfg_dominioRelatorio 
			, cfg_pastaRelatorio 
			, cfg_wsSiafemUrl 
			, cfg_wsSiafemUser 
			, cfg_wsSiafemPwd 
			, cfg_wsSiafemUsarProxy 
			, cfg_wsSiafemProxyIP 
			, cfg_wsSiafemProxyPorta 
			, cfg_wsSiafemUsarAutenticacao 
			, cfg_wsSiafemProxyUser 
			, cfg_wsSiafemProxyPwd 
			, cfg_valorMinimoPatrimonio 
			, cfg_stcIdImportacao 
			, cfg_mascaraEtiqueta 
			, cfg_mascaraGPB 
			, cfg_pastaDownload 
			, cfg_diretorioVirtualDownload 
			, cfg_cnpjFornLegado 
			, cfg_autenticacaoSMTP 
			, cfg_userSMTP 
			, cfg_senhaSMTP 
			, cfg_utilizaCODMAT 
			, cfg_validaLoginPorCPF 
			, cfg_naoGerarMovimentRecebEstoque 
			, cfg_informarDocBaixa 
			, cfg_naoUtilizarSIAFEM 
			, cfg_nomeEmpresa 
			, cfg_nomeEntidade 
			, cfg_gerarRegPatrimonialBemAutomatico 
			, cfg_regPatriomonialAutomaticoAno 
			, cfg_regPatriomonialAutomaticoUnidade 
			, cfg_regPatriomonialAutomaticoUGE 
			, cfg_tipoImpressao 
			, cfg_qtdeImpressaoPorVez 
			, cfg_intervaloImpressao 
			, cfg_proxNumLegado 
			, cfg_editarCIE
			, cfg_validaUsoCore 
			, cfg_sistemID 
 
		)
	VALUES
		( 
			@cfg_titulo 
			, @cfg_paginacao 
			, @cfg_emailHost 
			, @cfg_emailSuporte 
			, @cfg_paginaInicio 
			, @cfg_paginaErro 
			, @cfg_paginaExpira 
			, @cfg_paginaLogOff 
			, @cfg_bdProvider 
			, @cfg_diretorioVirtual 
			, @cfg_diretorioFisico 
			, @cfg_diretorioArquivo 
			, @cfg_extensaoArquivo 
			, @cfg_tamanhoMaxArquivo 
			, @cfg_servidorRelatorio 
			, @cfg_usuarioRelatorio 
			, @cfg_senhaRelatorio 
			, @cfg_dominioRelatorio 
			, @cfg_pastaRelatorio 
			, @cfg_wsSiafemUrl 
			, @cfg_wsSiafemUser 
			, @cfg_wsSiafemPwd 
			, @cfg_wsSiafemUsarProxy 
			, @cfg_wsSiafemProxyIP 
			, @cfg_wsSiafemProxyPorta 
			, @cfg_wsSiafemUsarAutenticacao 
			, @cfg_wsSiafemProxyUser 
			, @cfg_wsSiafemProxyPwd 
			, @cfg_valorMinimoPatrimonio 
			, @cfg_stcIdImportacao 
			, @cfg_mascaraEtiqueta 
			, @cfg_mascaraGPB 
			, @cfg_pastaDownload 
			, @cfg_diretorioVirtualDownload 
			, @cfg_cnpjFornLegado 
			, @cfg_autenticacaoSMTP 
			, @cfg_userSMTP 
			, @cfg_senhaSMTP 
			, @cfg_utilizaCODMAT 
			, @cfg_validaLoginPorCPF 
			, @cfg_naoGerarMovimentRecebEstoque 
			, @cfg_informarDocBaixa 
			, @cfg_naoUtilizarSIAFEM 
			, @cfg_nomeEmpresa 
			, @cfg_nomeEntidade 
			, @cfg_gerarRegPatrimonialBemAutomatico 
			, @cfg_regPatriomonialAutomaticoAno 
			, @cfg_regPatriomonialAutomaticoUnidade 
			, @cfg_regPatriomonialAutomaticoUGE 
			, @cfg_tipoImpressao 
			, @cfg_qtdeImpressaoPorVez 
			, @cfg_intervaloImpressao 
			, @cfg_proxNumLegado 
			, @cfg_editarCIE
			, @cfg_validaUsoCore 
			, @cfg_sistemID 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Configuracao_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_SYS_Configuracao_LOAD]
	@cfg_id Int
	
AS
BEGIN
	SELECT	Top 1
		 cfg_id  
		, cfg_titulo 
		, cfg_paginacao 
		, cfg_emailHost 
		, cfg_emailSuporte 
		, cfg_paginaInicio 
		, cfg_paginaErro 
		, cfg_paginaExpira 
		, cfg_paginaLogOff 
		, cfg_bdProvider 
		, cfg_diretorioVirtual 
		, cfg_diretorioFisico 
		, cfg_diretorioArquivo 
		, cfg_extensaoArquivo 
		, cfg_tamanhoMaxArquivo 
		, cfg_servidorRelatorio 
		, cfg_usuarioRelatorio 
		, cfg_senhaRelatorio 
		, cfg_dominioRelatorio 
		, cfg_pastaRelatorio 
		, cfg_wsSiafemUrl 
		, cfg_wsSiafemUser 
		, cfg_wsSiafemPwd 
		, cfg_wsSiafemUsarProxy 
		, cfg_wsSiafemProxyIP 
		, cfg_wsSiafemProxyPorta 
		, cfg_wsSiafemUsarAutenticacao 
		, cfg_wsSiafemProxyUser 
		, cfg_wsSiafemProxyPwd 
		, cfg_valorMinimoPatrimonio 
		, cfg_stcIdImportacao 
		, cfg_mascaraEtiqueta 
		, cfg_mascaraGPB 
		, cfg_pastaDownload 
		, cfg_diretorioVirtualDownload 
		, cfg_cnpjFornLegado 
		, cfg_autenticacaoSMTP 
		, cfg_userSMTP 
		, cfg_senhaSMTP 
		, cfg_utilizaCODMAT 
		, cfg_validaLoginPorCPF 
		, cfg_naoGerarMovimentRecebEstoque 
		, cfg_informarDocBaixa 
		, cfg_naoUtilizarSIAFEM 
		, cfg_nomeEmpresa 
		, cfg_nomeEntidade 
		, cfg_gerarRegPatrimonialBemAutomatico 
		, cfg_regPatriomonialAutomaticoAno 
		, cfg_regPatriomonialAutomaticoUnidade 
		, cfg_regPatriomonialAutomaticoUGE 
		, cfg_tipoImpressao 
		, cfg_qtdeImpressaoPorVez 
		, cfg_intervaloImpressao 
		, cfg_proxNumLegado 
		, cfg_sistemID

 	FROM
 		SYS_Configuracao
	WHERE 
		cfg_id = @cfg_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Configuracao_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_SYS_Configuracao_SELECT]
	
AS
BEGIN
	SELECT 
		cfg_id
		,cfg_titulo
		,cfg_paginacao
		,cfg_emailHost
		,cfg_emailSuporte
		,cfg_paginaInicio
		,cfg_paginaErro
		,cfg_paginaExpira
		,cfg_paginaLogOff
		,cfg_bdProvider
		,cfg_diretorioVirtual
		,cfg_diretorioFisico
		,cfg_diretorioArquivo
		,cfg_extensaoArquivo
		,cfg_tamanhoMaxArquivo
		,cfg_servidorRelatorio
		,cfg_usuarioRelatorio
		,cfg_senhaRelatorio
		,cfg_dominioRelatorio
		,cfg_pastaRelatorio
		,cfg_wsSiafemUrl
		,cfg_wsSiafemUser
		,cfg_wsSiafemPwd
		,cfg_wsSiafemUsarProxy
		,cfg_wsSiafemProxyIP
		,cfg_wsSiafemProxyPorta
		,cfg_wsSiafemUsarAutenticacao
		,cfg_wsSiafemProxyUser
		,cfg_wsSiafemProxyPwd
		,cfg_valorMinimoPatrimonio
		,cfg_stcIdImportacao
		,cfg_mascaraEtiqueta
		,cfg_mascaraGPB
		,cfg_pastaDownload
		,cfg_diretorioVirtualDownload
		,cfg_cnpjFornLegado
		,cfg_autenticacaoSMTP
		,cfg_userSMTP
		,cfg_senhaSMTP
		,cfg_utilizaCODMAT
		,cfg_validaLoginPorCPF
		,cfg_naoGerarMovimentRecebEstoque
		,cfg_informarDocBaixa
		,cfg_naoUtilizarSIAFEM
		,cfg_nomeEmpresa
		,cfg_nomeEntidade
		,cfg_gerarRegPatrimonialBemAutomatico
		,cfg_regPatriomonialAutomaticoAno
		,cfg_regPatriomonialAutomaticoUnidade
		,cfg_regPatriomonialAutomaticoUGE
		,cfg_tipoImpressao
		,cfg_qtdeImpressaoPorVez
		,cfg_intervaloImpressao
		,cfg_proxNumLegado
		,cfg_editarCIE
		,cfg_validaUsoCore
		,cfg_sistemID

	FROM 
		SYS_Configuracao WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Configuracao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[STP_SYS_Configuracao_UPDATE]
	@cfg_id INT
	, @cfg_titulo NVARCHAR (400)
	, @cfg_paginacao INT
	, @cfg_emailHost NVARCHAR (200)
	, @cfg_emailSuporte NVARCHAR (200)
	, @cfg_paginaInicio NVARCHAR (200)
	, @cfg_paginaErro NVARCHAR (200)
	, @cfg_paginaExpira NVARCHAR (200)
	, @cfg_paginaLogOff NVARCHAR (200)
	, @cfg_bdProvider NVARCHAR (200)
	, @cfg_diretorioVirtual NVARCHAR (400)
	, @cfg_diretorioFisico NVARCHAR (200)
	, @cfg_diretorioArquivo NVARCHAR (1024)
	, @cfg_extensaoArquivo NVARCHAR (1024)
	, @cfg_tamanhoMaxArquivo INT
	, @cfg_servidorRelatorio NVARCHAR (1024)
	, @cfg_usuarioRelatorio NVARCHAR (1024)
	, @cfg_senhaRelatorio NVARCHAR (1024)
	, @cfg_dominioRelatorio NVARCHAR (1024)
	, @cfg_pastaRelatorio NVARCHAR (1024)
	, @cfg_wsSiafemUrl NVARCHAR (1024)
	, @cfg_wsSiafemUser NVARCHAR (1024)
	, @cfg_wsSiafemPwd NVARCHAR (1024)
	, @cfg_wsSiafemUsarProxy BIT
	, @cfg_wsSiafemProxyIP NVARCHAR (256)
	, @cfg_wsSiafemProxyPorta NVARCHAR (20)
	, @cfg_wsSiafemUsarAutenticacao BIT
	, @cfg_wsSiafemProxyUser NVARCHAR (1024)
	, @cfg_wsSiafemProxyPwd NVARCHAR (1024)
	, @cfg_valorMinimoPatrimonio MONEY
	, @cfg_stcIdImportacao INT
	, @cfg_mascaraEtiqueta NVARCHAR (100)
	, @cfg_mascaraGPB NVARCHAR (100)
	, @cfg_pastaDownload NVARCHAR (1024)
	, @cfg_diretorioVirtualDownload NVARCHAR (1024)
	, @cfg_cnpjFornLegado VARCHAR (14)
	, @cfg_autenticacaoSMTP BIT
	, @cfg_userSMTP NVARCHAR (200)
	, @cfg_senhaSMTP NVARCHAR (200)
	, @cfg_utilizaCODMAT BIT
	, @cfg_validaLoginPorCPF BIT
	, @cfg_naoGerarMovimentRecebEstoque BIT
	, @cfg_informarDocBaixa BIT
	, @cfg_naoUtilizarSIAFEM BIT
	, @cfg_nomeEmpresa NVARCHAR (200)
	, @cfg_nomeEntidade NVARCHAR (200)
	, @cfg_gerarRegPatrimonialBemAutomatico BIT
	, @cfg_regPatriomonialAutomaticoAno NVARCHAR (8)
	, @cfg_regPatriomonialAutomaticoUnidade NVARCHAR (20)
	, @cfg_regPatriomonialAutomaticoUGE NVARCHAR (20)
	, @cfg_tipoImpressao VARCHAR (50)
	, @cfg_qtdeImpressaoPorVez INT
	, @cfg_intervaloImpressao INT
	, @cfg_proxNumLegado BIGINT
	, @cfg_editarCIE BIT
	, @cfg_validaUsoCore BIT
	, @cfg_sistemID NVARCHAR (200)

AS
BEGIN
	UPDATE SYS_Configuracao 
	SET 
		cfg_titulo = @cfg_titulo 
		, cfg_paginacao = @cfg_paginacao 
		, cfg_emailHost = @cfg_emailHost 
		, cfg_emailSuporte = @cfg_emailSuporte 
		, cfg_paginaInicio = @cfg_paginaInicio 
		, cfg_paginaErro = @cfg_paginaErro 
		, cfg_paginaExpira = @cfg_paginaExpira 
		, cfg_paginaLogOff = @cfg_paginaLogOff 
		, cfg_bdProvider = @cfg_bdProvider 
		, cfg_diretorioVirtual = @cfg_diretorioVirtual 
		, cfg_diretorioFisico = @cfg_diretorioFisico 
		, cfg_diretorioArquivo = @cfg_diretorioArquivo 
		, cfg_extensaoArquivo = @cfg_extensaoArquivo 
		, cfg_tamanhoMaxArquivo = @cfg_tamanhoMaxArquivo 
		, cfg_servidorRelatorio = @cfg_servidorRelatorio 
		, cfg_usuarioRelatorio = @cfg_usuarioRelatorio 
		, cfg_senhaRelatorio = @cfg_senhaRelatorio 
		, cfg_dominioRelatorio = @cfg_dominioRelatorio 
		, cfg_pastaRelatorio = @cfg_pastaRelatorio 
		, cfg_wsSiafemUrl = @cfg_wsSiafemUrl 
		, cfg_wsSiafemUser = @cfg_wsSiafemUser 
		, cfg_wsSiafemPwd = @cfg_wsSiafemPwd 
		, cfg_wsSiafemUsarProxy = @cfg_wsSiafemUsarProxy 
		, cfg_wsSiafemProxyIP = @cfg_wsSiafemProxyIP 
		, cfg_wsSiafemProxyPorta = @cfg_wsSiafemProxyPorta 
		, cfg_wsSiafemUsarAutenticacao = @cfg_wsSiafemUsarAutenticacao 
		, cfg_wsSiafemProxyUser = @cfg_wsSiafemProxyUser 
		, cfg_wsSiafemProxyPwd = @cfg_wsSiafemProxyPwd 
		, cfg_valorMinimoPatrimonio = @cfg_valorMinimoPatrimonio 
		, cfg_stcIdImportacao = @cfg_stcIdImportacao 
		, cfg_mascaraEtiqueta = @cfg_mascaraEtiqueta 
		, cfg_mascaraGPB = @cfg_mascaraGPB 
		, cfg_pastaDownload = @cfg_pastaDownload 
		, cfg_diretorioVirtualDownload = @cfg_diretorioVirtualDownload 
		, cfg_cnpjFornLegado = @cfg_cnpjFornLegado 
		, cfg_autenticacaoSMTP = @cfg_autenticacaoSMTP 
		, cfg_userSMTP = @cfg_userSMTP 
		, cfg_senhaSMTP = @cfg_senhaSMTP 
		, cfg_utilizaCODMAT = @cfg_utilizaCODMAT 
		, cfg_validaLoginPorCPF = @cfg_validaLoginPorCPF 
		, cfg_naoGerarMovimentRecebEstoque = @cfg_naoGerarMovimentRecebEstoque 
		, cfg_informarDocBaixa = @cfg_informarDocBaixa 
		, cfg_naoUtilizarSIAFEM = @cfg_naoUtilizarSIAFEM 
		, cfg_nomeEmpresa = @cfg_nomeEmpresa 
		, cfg_nomeEntidade = @cfg_nomeEntidade 
		, cfg_gerarRegPatrimonialBemAutomatico = @cfg_gerarRegPatrimonialBemAutomatico 
		, cfg_regPatriomonialAutomaticoAno = @cfg_regPatriomonialAutomaticoAno 
		, cfg_regPatriomonialAutomaticoUnidade = @cfg_regPatriomonialAutomaticoUnidade 
		, cfg_regPatriomonialAutomaticoUGE = @cfg_regPatriomonialAutomaticoUGE 
		, cfg_tipoImpressao = @cfg_tipoImpressao 
		, cfg_qtdeImpressaoPorVez = @cfg_qtdeImpressaoPorVez 
		, cfg_intervaloImpressao = @cfg_intervaloImpressao 
		, cfg_proxNumLegado = @cfg_proxNumLegado 
		, cfg_editarCIE = @cfg_editarCIE
		, cfg_validaUsoCore = @cfg_validaUsoCore 
		, cfg_sistemID = @cfg_sistemID 

	WHERE 
		cfg_id = @cfg_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Parametros_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_SYS_Parametros_DELETE]
	@par_id INT

AS
BEGIN
	DELETE FROM 
		SYS_Parametros 
	WHERE 
		par_id = @par_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Parametros_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_SYS_Parametros_INSERT]
	@par_chave VarChar (100)
	, @par_valor VarChar (1000)
	, @par_descricao varchar(max)
	, @par_obrigatorio Bit
	, @par_vigenciaInicio DateTime
	, @par_vigenciaFim DateTime
	, @par_situacao TinyInt
	, @par_dataCriacao DateTime
	, @par_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		SYS_Parametros
		( 
			par_chave 
			, par_valor 
			, par_descricao 
			, par_obrigatorio 
			, par_vigenciaInicio 
			, par_vigenciaFim 
			, par_situacao
			, par_dataCriacao
			, par_dataAlteracao 
		)
	VALUES
		( 
			@par_chave 
			, @par_valor 
			, @par_descricao 
			, @par_obrigatorio 
			, @par_vigenciaInicio 
			, @par_vigenciaFim 
			, @par_situacao
			, @par_dataCriacao
			, @par_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Parametros_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_SYS_Parametros_LOAD]
	@par_id Int
	
AS
BEGIN
	SELECT	Top 1
		 par_id  
		, par_chave 
		, par_valor 
		, par_descricao 
		, par_obrigatorio 
		, par_vigenciaInicio 
		, par_vigenciaFim 
		, par_situacao 
		, par_dataCriacao 
		, par_dataAlteracao 

 	FROM
 		SYS_Parametros
	WHERE 
		par_id = @par_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Parametros_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_SYS_Parametros_SELECT]
	
AS
BEGIN
	SELECT 
		par_id
		,par_chave
		,par_valor
		,par_descricao
		,par_obrigatorio
		,par_vigenciaInicio
		,par_vigenciaFim
		,par_situacao
		,par_dataCriacao
		,par_dataAlteracao

	FROM 
		SYS_Parametros WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosEtiqueta_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ParametrosEtiqueta_DELETE]
	@pae_id INT

AS
BEGIN
	DELETE FROM 
		SYS_ParametrosEtiqueta 
	WHERE 
		pae_id = @pae_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosEtiqueta_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ParametrosEtiqueta_INSERT]
	@pae_descricao VarChar (500)
	, @pae_chave VarChar (200)
	, @pae_status TinyInt

AS
BEGIN
	INSERT INTO 
		SYS_ParametrosEtiqueta
		( 
			pae_descricao 
			, pae_chave 
			, pae_status 
 
		)
	VALUES
		( 
			@pae_descricao 
			, @pae_chave 
			, @pae_status 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosEtiqueta_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ParametrosEtiqueta_LOAD]
	@pae_id Int
	
AS
BEGIN
	SELECT	Top 1
		 pae_id  
		, pae_descricao 
		, pae_chave 
		, pae_status 

 	FROM
 		SYS_ParametrosEtiqueta
	WHERE 
		pae_id = @pae_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosEtiqueta_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[STP_SYS_ParametrosEtiqueta_SELECT]
	
AS
BEGIN
	SELECT 
		pae_id
		,pae_descricao
		,pae_chave
		,pae_status

	FROM 
		SYS_ParametrosEtiqueta WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosEtiqueta_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ParametrosEtiqueta_UPDATE]
	@pae_id INT
	, @pae_descricao VARCHAR (500)
	, @pae_chave VARCHAR (200)
	, @pae_status TINYINT

AS
BEGIN
	UPDATE SYS_ParametrosEtiqueta 
	SET 
		pae_descricao = @pae_descricao 
		, pae_chave = @pae_chave 
		, pae_status = @pae_status 

	WHERE 
		pae_id = @pae_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosTela_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ParametrosTela_DELETE]
	@pat_id INT

AS
BEGIN
	DELETE FROM 
		SYS_ParametrosTela 
	WHERE 
		pat_id = @pat_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosTela_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ParametrosTela_INSERT]
	@pat_descricao VarChar (200)
	, @pat_chave VarChar (200)
	, @pat_status TinyInt
	, @tel_id Int

AS
BEGIN
	INSERT INTO 
		SYS_ParametrosTela
		( 
			pat_descricao 
			, pat_chave 
			, pat_status 
			, tel_id 
 
		)
	VALUES
		( 
			@pat_descricao 
			, @pat_chave 
			, @pat_status 
			, @tel_id 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosTela_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ParametrosTela_LOAD]
	@pat_id Int
	
AS
BEGIN
	SELECT	Top 1
		 pat_id  
		, pat_descricao 
		, pat_chave 
		, pat_status 
		, tel_id 

 	FROM
 		SYS_ParametrosTela
	WHERE 
		pat_id = @pat_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosTela_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[STP_SYS_ParametrosTela_SELECT]
	
AS
BEGIN
	SELECT 
		pat_id
		,pat_descricao
		,pat_chave
		,pat_status
		,tel_id

	FROM 
		SYS_ParametrosTela WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosTela_SELECTBY_tel_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ParametrosTela_SELECTBY_tel_id]
	@tel_id INT
AS
BEGIN
	SELECT
		pat_id
		,pat_descricao
		,pat_chave
		,pat_status
		,tel_id

	FROM
		SYS_ParametrosTela WITH(NOLOCK)
	WHERE 
		tel_id = @tel_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_ParametrosTela_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_ParametrosTela_UPDATE]
	@pat_id INT
	, @pat_descricao VARCHAR (200)
	, @pat_chave VARCHAR (200)
	, @pat_status TINYINT
	, @tel_id INT

AS
BEGIN
	UPDATE SYS_ParametrosTela 
	SET 
		pat_descricao = @pat_descricao 
		, pat_chave = @pat_chave 
		, pat_status = @pat_status 
		, tel_id = @tel_id 

	WHERE 
		pat_id = @pat_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Tela_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_Tela_DELETE]
	@tel_id INT

AS
BEGIN
	DELETE FROM 
		SYS_Tela 
	WHERE 
		tel_id = @tel_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Tela_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_Tela_INSERT]
	@tel_descricao VarChar (100)
	, @tte_id Int

AS
BEGIN
	INSERT INTO 
		SYS_Tela
		( 
			tel_descricao 
			, tte_id 
 
		)
	VALUES
		( 
			@tel_descricao 
			, @tte_id 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Tela_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_Tela_LOAD]
	@tel_id Int
	
AS
BEGIN
	SELECT	Top 1
		 tel_id  
		, tel_descricao 
		, tte_id 

 	FROM
 		SYS_Tela
	WHERE 
		tel_id = @tel_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Tela_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[STP_SYS_Tela_SELECT]
	
AS
BEGIN
	SELECT 
		tel_id
		,tel_descricao
		,tte_id

	FROM 
		SYS_Tela WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Tela_SELECTBY_tte_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_Tela_SELECTBY_tte_id]
	@tte_id INT
AS
BEGIN
	SELECT
		tel_id
		,tel_descricao
		,tte_id

	FROM
		SYS_Tela WITH(NOLOCK)
	WHERE 
		tte_id = @tte_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_SYS_Tela_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_SYS_Tela_UPDATE]
	@tel_id INT
	, @tel_descricao VARCHAR (100)
	, @tte_id INT

AS
BEGIN
	UPDATE SYS_Tela 
	SET 
		tel_descricao = @tel_descricao 
		, tte_id = @tte_id 

	WHERE 
		tel_id = @tel_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoBem_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_TipoBem_DELETE]
	@tb_id VARCHAR

AS
BEGIN
	DELETE FROM 
		TipoBem 
	WHERE 
		tb_id = @tb_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoBem_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_TipoBem_INSERT]
	@tb_id VarChar (5)
	, @tb_descricao VarChar (100)

AS
BEGIN
	INSERT INTO 
		TipoBem
		( 
			tb_id 
			, tb_descricao 
 
		)
	VALUES
		( 
			@tb_id 
			, @tb_descricao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoBem_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_TipoBem_LOAD]
	@tb_id VarChar (5)
	
AS
BEGIN
	SELECT	Top 1
		 tb_id  
		, tb_descricao 

 	FROM
 		TipoBem
	WHERE 
		tb_id = @tb_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoBem_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[STP_TipoBem_SELECT]
	
AS
BEGIN
	SELECT 
		tb_id
		,tb_descricao

	FROM 
		TipoBem WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoBem_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_TipoBem_UPDATE]
	@tb_id VARCHAR (5)
	, @tb_descricao VARCHAR (100)

AS
BEGIN
	UPDATE TipoBem 
	SET 
		tb_descricao = @tb_descricao 

	WHERE 
		tb_id = @tb_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoDependencia_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_TipoDependencia_DELETE]
	@tde_id INT

AS
BEGIN
	DELETE FROM 
		TipoDependencia 
	WHERE 
		tde_id = @tde_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoDependencia_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_TipoDependencia_INSERT]
	@tde_nome VarChar (100)
	, @tde_situacao TinyInt

AS
BEGIN
	INSERT INTO 
		TipoDependencia
		( 
			tde_nome 
			, tde_situacao 
 
		)
	VALUES
		( 
			@tde_nome 
			, @tde_situacao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoDependencia_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_TipoDependencia_LOAD]
	@tde_id Int
	
AS
BEGIN
	SELECT	Top 1
		 tde_id  
		, tde_nome 
		, tde_situacao 

 	FROM
 		TipoDependencia
	WHERE 
		tde_id = @tde_id
	order  by tde_nome
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoDependencia_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_TipoDependencia_SELECT]
	
AS
BEGIN
	SELECT 
		tde_id
		,tde_nome
		,tde_situacao

	FROM 
		TipoDependencia WITH(NOLOCK) 
	order  by tde_nome
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoDependencia_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_TipoDependencia_UPDATE]
	@tde_id INT
	, @tde_nome VARCHAR (100)
	, @tde_situacao TINYINT

AS
BEGIN
	UPDATE TipoDependencia 
	SET 
		tde_nome = @tde_nome 
		, tde_situacao = @tde_situacao 

	WHERE 
		tde_id = @tde_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoMovimentacao_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_TipoMovimentacao_DELETE]
	@tpm_id INT

AS
BEGIN
	DELETE FROM 
		TipoMovimentacao 
	WHERE 
		tpm_id = @tpm_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoMovimentacao_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_TipoMovimentacao_INSERT]
	@tpm_nome VarChar (100)
	, @tpm_nomeAbr VarChar (30)
	, @tpm_descricao VarChar (1000)
	, @tpm_operacao TinyInt
	, @tpm_situacao TinyInt
	, @tpm_dataCriacao DateTime
	, @tpm_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		TipoMovimentacao
		( 
			tpm_nome 
			, tpm_nomeAbr 
			, tpm_descricao 
			, tpm_operacao 
			, tpm_situacao 
			, tpm_dataCriacao 
			, tpm_dataAlteracao 
 
		)
	VALUES
		( 
			@tpm_nome 
			, @tpm_nomeAbr 
			, @tpm_descricao 
			, @tpm_operacao 
			, @tpm_situacao 
			, @tpm_dataCriacao 
			, @tpm_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoMovimentacao_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_TipoMovimentacao_LOAD]
	@tpm_id Int
	
AS
BEGIN
	SELECT	Top 1
		 tpm_id  
		, tpm_nome 
		, tpm_nomeAbr 
		, tpm_descricao 
		, tpm_operacao 
		, tpm_situacao 
		, tpm_dataCriacao 
		, tpm_dataAlteracao 

 	FROM
 		TipoMovimentacao
	WHERE 
		tpm_id = @tpm_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoMovimentacao_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_TipoMovimentacao_SELECT]
	
AS
BEGIN
	SELECT 
		tpm_id
		,tpm_nome
		,tpm_nomeAbr
		,tpm_descricao
		,tpm_operacao
		,tpm_situacao
		,tpm_dataCriacao
		,tpm_dataAlteracao

	FROM 
		TipoMovimentacao WITH(NOLOCK) 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_TipoMovimentacao_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_TipoMovimentacao_UPDATE]
	@tpm_id INT
	, @tpm_nome VARCHAR (100)
	, @tpm_nomeAbr VARCHAR (30)
	, @tpm_descricao VARCHAR (1000)
	, @tpm_operacao TINYINT
	, @tpm_situacao TINYINT
	, @tpm_dataCriacao DATETIME
	, @tpm_dataAlteracao DATETIME

AS
BEGIN
	UPDATE TipoMovimentacao 
	SET 
		tpm_nome = @tpm_nome 
		, tpm_nomeAbr = @tpm_nomeAbr 
		, tpm_descricao = @tpm_descricao 
		, tpm_operacao = @tpm_operacao 
		, tpm_situacao = @tpm_situacao 
		, tpm_dataCriacao = @tpm_dataCriacao 
		, tpm_dataAlteracao = @tpm_dataAlteracao 

	WHERE 
		tpm_id = @tpm_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Unidade_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Unidade_DELETE]
	@uni_id INT

AS
BEGIN
	DELETE FROM 
		Unidade 
	WHERE 
		uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Unidade_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Unidade_INSERT]
	@ent_id UniqueIdentifier
	, @uad_id UniqueIdentifier
	, @uni_codigoUO Char (4)
	, @uni_codigoUGE VarChar (10)
	, @uni_coletor Bit
	, @uni_justificativaColetor VarChar (2000)
	, @uni_internet Bit
	, @uni_UA NVarChar (40)
	, @uni_situacao TinyInt
	, @uni_dataCriacao DateTime
	, @uni_dateAlteracao DateTime
	, @Observacao_uni varchar(max) 
	, @uni_relacionaEtiquetaAutomatico Bit

AS
BEGIN
	INSERT INTO 
		Unidade
		( 
			ent_id 
			, uad_id 
			, uni_codigoUO 
			, uni_codigoUGE 
			, uni_coletor 
			, uni_justificativaColetor 
			, uni_internet 
			, uni_UA 
			, uni_situacao 
			, uni_dataCriacao 
			, uni_dateAlteracao 
			, Observacao_uni 
			, uni_relacionaEtiquetaAutomatico 
 
		)
	VALUES
		( 
			@ent_id 
			, @uad_id 
			, @uni_codigoUO 
			, @uni_codigoUGE 
			, @uni_coletor 
			, @uni_justificativaColetor 
			, @uni_internet 
			, @uni_UA 
			, @uni_situacao 
			, @uni_dataCriacao 
			, @uni_dateAlteracao 
			, @Observacao_uni 
			, @uni_relacionaEtiquetaAutomatico 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Unidade_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Unidade_LOAD]
	@uni_id Int
	
AS
BEGIN
	SELECT	Top 1
		 uni_id  
		, ent_id 
		, uad_id 
		, uni_codigoUO 
		, uni_codigoUGE 
		, uni_coletor 
		, uni_justificativaColetor 
		, uni_internet 
		, uni_UA 
		, uni_situacao 
		, uni_dataCriacao 
		, uni_dateAlteracao 
		, Observacao_uni 
		, uni_relacionaEtiquetaAutomatico 

 	FROM
 		Unidade
	WHERE 
		uni_id = @uni_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Unidade_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[STP_Unidade_SELECT]
	
AS
BEGIN
	SELECT 
		uni_id
		,ent_id
		,uad_id
		,uni_codigoUO
		,uni_codigoUGE
		,uni_coletor
		,uni_justificativaColetor
		,uni_internet
		,uni_UA
		,uni_situacao
		,uni_dataCriacao
		,uni_dateAlteracao
		,Observacao_uni
		,uni_relacionaEtiquetaAutomatico

	FROM 
		Unidade WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_Unidade_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STP_Unidade_UPDATE]
	@uni_id INT
	, @ent_id UNIQUEIDENTIFIER
	, @uad_id UNIQUEIDENTIFIER
	, @uni_codigoUO CHAR (4)
	, @uni_codigoUGE VARCHAR (10)
	, @uni_coletor BIT
	, @uni_justificativaColetor VARCHAR (2000)
	, @uni_internet BIT
	, @uni_UA NVARCHAR (40)
	, @uni_situacao TINYINT
	, @uni_dataCriacao DATETIME
	, @uni_dateAlteracao DATETIME
	, @Observacao_uni varchar(max) 
	, @uni_relacionaEtiquetaAutomatico BIT

AS
BEGIN
	UPDATE Unidade 
	SET 
		ent_id = @ent_id 
		, uad_id = @uad_id 
		, uni_codigoUO = @uni_codigoUO 
		, uni_codigoUGE = @uni_codigoUGE 
		, uni_coletor = @uni_coletor 
		, uni_justificativaColetor = @uni_justificativaColetor 
		, uni_internet = @uni_internet 
		, uni_UA = @uni_UA 
		, uni_situacao = @uni_situacao 
		, uni_dataCriacao = @uni_dataCriacao 
		, uni_dateAlteracao = @uni_dateAlteracao 
		, Observacao_uni = @Observacao_uni 
		, uni_relacionaEtiquetaAutomatico = @uni_relacionaEtiquetaAutomatico 

	WHERE 
		uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGestora_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGestora_DELETE]
	@uni_id INT

AS
BEGIN
	DELETE FROM 
		UnidadeGestora 
	WHERE 
		uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGestora_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGestora_INSERT]
	@uni_id Int
	, @uge_ultimaImportacao DateTime
	, @uge_importaSIAFEM Bit
	, @uge_situacao TinyInt
	, @uge_dataCriacao DateTime
	, @uge_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		UnidadeGestora
		( 
			uni_id 
			, uge_ultimaImportacao 
			, uge_importaSIAFEM 
			, uge_situacao 
			, uge_dataCriacao 
			, uge_dataAlteracao 
 
		)
	VALUES
		( 
			@uni_id 
			, @uge_ultimaImportacao 
			, @uge_importaSIAFEM 
			, @uge_situacao 
			, @uge_dataCriacao 
			, @uge_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGestora_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGestora_LOAD]
	@uni_id Int
	
AS
BEGIN
	SELECT	Top 1
		 uni_id  
		, uge_ultimaImportacao 
		, uge_importaSIAFEM 
		, uge_situacao 
		, uge_dataCriacao 
		, uge_dataAlteracao 

 	FROM
 		UnidadeGestora
	WHERE 
		uni_id = @uni_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGestora_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGestora_SELECT]
	
AS
BEGIN
	SELECT 
		uni_id
		,uge_ultimaImportacao
		,uge_importaSIAFEM
		,uge_situacao
		,uge_dataCriacao
		,uge_dataAlteracao

	FROM 
		UnidadeGestora WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGestora_SELECTBY_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGestora_SELECTBY_uni_id]
	@uni_id INT
AS
BEGIN
	SELECT
		uni_id
		,uge_ultimaImportacao
		,uge_importaSIAFEM
		,uge_situacao
		,uge_dataCriacao
		,uge_dataAlteracao

	FROM
		UnidadeGestora WITH(NOLOCK)
	WHERE 
		uni_id = @uni_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGestora_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGestora_UPDATE]
	@uni_id INT
	, @uge_ultimaImportacao DATETIME
	, @uge_importaSIAFEM BIT
	, @uge_situacao TINYINT
	, @uge_dataCriacao DATETIME
	, @uge_dataAlteracao DATETIME

AS
BEGIN
	UPDATE UnidadeGestora 
	SET 
		uge_ultimaImportacao = @uge_ultimaImportacao 
		, uge_importaSIAFEM = @uge_importaSIAFEM 
		, uge_situacao = @uge_situacao 
		, uge_dataCriacao = @uge_dataCriacao 
		, uge_dataAlteracao = @uge_dataAlteracao 

	WHERE 
		uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGuarda_DELETE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGuarda_DELETE]
	@uni_id INT

AS
BEGIN
	DELETE FROM 
		UnidadeGuarda 
	WHERE 
		uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGuarda_INSERT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGuarda_INSERT]
	@uni_id Int
	, @ugu_situacao TinyInt
	, @ugu_dataCriacao DateTime
	, @ugu_dataAlteracao DateTime

AS
BEGIN
	INSERT INTO 
		UnidadeGuarda
		( 
			uni_id 
			, ugu_situacao 
			, ugu_dataCriacao 
			, ugu_dataAlteracao 
 
		)
	VALUES
		( 
			@uni_id 
			, @ugu_situacao 
			, @ugu_dataCriacao 
			, @ugu_dataAlteracao 
 
		)
		
		SELECT ISNULL(SCOPE_IDENTITY(),-1)

	
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGuarda_LOAD]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGuarda_LOAD]
	@uni_id Int
	
AS
BEGIN
	SELECT	Top 1
		 uni_id  
		, ugu_situacao 
		, ugu_dataCriacao 
		, ugu_dataAlteracao 

 	FROM
 		UnidadeGuarda
	WHERE 
		uni_id = @uni_id
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGuarda_SELECT]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGuarda_SELECT]
	
AS
BEGIN
	SELECT 
		uni_id
		,ugu_situacao
		,ugu_dataCriacao
		,ugu_dataAlteracao

	FROM 
		UnidadeGuarda WITH(NOLOCK) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGuarda_SELECTBY_uni_id]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGuarda_SELECTBY_uni_id]
	@uni_id INT
AS
BEGIN
	SELECT
		uni_id
		,ugu_situacao
		,ugu_dataCriacao
		,ugu_dataAlteracao

	FROM
		UnidadeGuarda WITH(NOLOCK)
	WHERE 
		uni_id = @uni_id 
END

GO
/****** Object:  StoredProcedure [dbo].[STP_UnidadeGuarda_UPDATE]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[STP_UnidadeGuarda_UPDATE]
	@uni_id INT
	, @ugu_situacao TINYINT
	, @ugu_dataCriacao DATETIME
	, @ugu_dataAlteracao DATETIME

AS
BEGIN
	UPDATE UnidadeGuarda 
	SET 
		ugu_situacao = @ugu_situacao 
		, ugu_dataCriacao = @ugu_dataCriacao 
		, ugu_dataAlteracao = @ugu_dataAlteracao 

	WHERE 
		uni_id = @uni_id 

		
	DECLARE @ret INT
	SELECT @ret = ISNULL(@@ROWCOUNT,-1)
	RETURN @ret
	
END

GO
/****** Object:  StoredProcedure [dbo].[Valida_UniGuardas_Fechamento]    Script Date: 02/05/2018 17:07:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Luana Piva
-- Create date: 31/07/2013
-- Description:	Verifica se alguma unidade guarda da unidade gestora não teve o fechamento concluído.
-- =============================================
CREATE PROCEDURE [dbo].[Valida_UniGuardas_Fechamento]
	  @uni_id Int
	, @per_mes Char (2)
	, @per_ano Char (4)
AS
BEGIN

 SELECT 
	fil.uni_id
 
 
   FROM 
   PeriodoUnidade as pun WITH(NOLOCK)
   INNER JOIN dbo.FN_GetUnidadeEFilhas(@uni_id) as fil
   ON pun.uni_id = fil.uni_id
   
   
   WHERE 
   pun.uni_id = @uni_id AND
   pun.per_mes = @per_mes AND
   pun.per_ano = @per_ano AND
   fil.uni_situacao = 1 AND
   pun.peu_situacao = 1		


END

GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Id da cidade no CoreSSO' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CidadeIntegracaoSistemas', @level2type=N'COLUMN',@level2name=N'cid_id'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1-BaseCIEProdesp' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CidadeIntegracaoSistemas', @level2type=N'COLUMN',@level2name=N'cis_origem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Id da cidade em sistemas de terceiros' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CidadeIntegracaoSistemas', @level2type=N'COLUMN',@level2name=N'cis_cidIdExterno'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "A"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 125
               Right = 219
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "U"
            Begin Extent = 
               Top = 6
               Left = 257
               Bottom = 125
               Right = 456
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'VW_UnidadeAdministrativa'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'VW_UnidadeAdministrativa'
GO
USE [master]
GO
ALTER DATABASE [ConPat] SET  READ_WRITE 
GO
